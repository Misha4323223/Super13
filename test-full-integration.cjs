/**
 * –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —Å–µ–º–∞–Ω—Ç–∏–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ conversation-engine –∏ smart-router
 */

const path = require('path');

async function testFullIntegration() {
  console.log('üöÄ –¢–ï–°–¢ –ü–û–õ–ù–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´');
  console.log('=' .repeat(60));

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏...');
    
    const conversationEngine = require('./server/conversation-engine.cjs');
    const smartRouter = require('./server/smart-router.js');
    
    console.log('‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

    // –¢–µ—Å—Ç 1: Conversation Engine
    console.log('\nüß† –¢–ï–°–¢ 1: Conversation Engine');
    
    const testInput1 = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?";
    const userContext1 = {
      sessionId: 'test-session-1',
      userId: 'test-user',
      conversationHistory: []
    };

    console.log(`üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${testInput1}"`);
    
    const result1 = await conversationEngine.processUserInput(testInput1, userContext1);
    
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ CONVERSATION ENGINE:');
    console.log(`   ‚Ä¢ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${result1.reply ? '–î–ê' : '–ù–ï–¢'}`);
    console.log(`   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ${result1.quality}`);
    console.log(`   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result1.confidence}`);
    console.log(`   ‚Ä¢ –ú–æ–¥—É–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: ${result1.metadata?.modulesUsed?.length || 0}`);
    
    if (result1.reply) {
      console.log(`   ‚Ä¢ –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: "${result1.reply.substring(0, 100)}..."`);
    }

    // –¢–µ—Å—Ç 2: Smart Router Integration  
    console.log('\nüîÄ –¢–ï–°–¢ 2: Smart Router Integration');
    
    const testInput2 = "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ –¥–∏–∑–∞–π–Ω–µ";
    
    console.log(`üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${testInput2}"`);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º Express request/response –æ–±—ä–µ–∫—Ç—ã
    const mockReq = {
      body: { message: testInput2 },
      sessionID: 'test-session-2'
    };
    
    const mockRes = {
      data: null,
      json: function(data) { this.data = data; return this; },
      status: function(code) { this.statusCode = code; return this; }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º smart router —Ñ—É–Ω–∫—Ü–∏–∏
    if (typeof smartRouter.handleChatMessage === 'function') {
      await smartRouter.handleChatMessage(mockReq, mockRes);
      
      console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ SMART ROUTER:');
      console.log(`   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${mockRes.statusCode || 'OK'}`);
      if (mockRes.data) {
        console.log(`   ‚Ä¢ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: –î–ê`);
        console.log(`   ‚Ä¢ –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${mockRes.data.provider || '–ù–µ —É–∫–∞–∑–∞–Ω'}`);
        if (mockRes.data.response) {
          console.log(`   ‚Ä¢ –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: "${mockRes.data.response.substring(0, 100)}..."`);
        }
      }
    } else {
      console.log('‚ö†Ô∏è handleChatMessage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ smart router');
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π
    console.log('\nüîç –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø—É—Ç–µ–π');
    
    const semanticIntegrationLayer = require('./server/semantic-integration-layer.cjs');
    
    const testInput3 = "–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ";
    const semanticResult = await semanticIntegrationLayer.analyzeWithSemantics(testInput3, {
      sessionId: 'test-session-3'
    });
    
    console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`   ‚Ä¢ shouldUseSemantic: ${semanticResult.shouldUseSemantic}`);
    console.log(`   ‚Ä¢ reason: ${semanticResult.reason}`);
    console.log(`   ‚Ä¢ confidence: ${semanticResult.confidence}`);
    
    if (semanticResult.semanticResult) {
      console.log(`   ‚Ä¢ intent: ${semanticResult.semanticResult.intent}`);
      console.log(`   ‚Ä¢ fallback: ${semanticResult.semanticResult.fallback || false}`);
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ –ü–û–õ–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ê!');
    console.log('\nüìã –ò–¢–û–ì–ò –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
    console.log('   ‚úÖ Conversation Engine —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('   ‚úÖ Smart Router –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
    console.log('   ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø—É—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
    console.log('   ‚úÖ Fallback —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    
    console.log('\nüöÄ –°–¢–ê–¢–£–°: –°–∏—Å—Ç–µ–º–∞ BOOOMERANGS –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏!');

  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:', error.message);
    console.error('Stack trace:', error.stack);
    
    console.log('\nüîß –°–¢–ê–¢–£–°: –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testFullIntegration().catch(console.error);
}

module.exports = { testFullIntegration };