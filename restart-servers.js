#!/usr/bin/env node

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤
 * –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –∏ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
 */

import { spawn, exec } from 'child_process';
import util from 'util';
const execAsync = util.promisify(exec);

async function killProcesses(pattern) {
  try {
    await execAsync(`pkill -f "${pattern}"`);
    console.log(`‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å—ã: ${pattern}`);
  } catch (error) {
    // pkill –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ 1 –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
    console.log(`‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã ${pattern} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã`);
  }
}

async function waitForPort(port, maxAttempts = 10) {
  for (let i = 0; i < maxAttempts; i++) {
    try {
      const { stdout } = await execAsync(`curl -s http://localhost:${port}/health || curl -s http://localhost:${port}/api/vectorizer/health`);
      if (stdout) {
        console.log(`‚úÖ –ü–æ—Ä—Ç ${port} –¥–æ—Å—Ç—É–ø–µ–Ω`);
        return true;
      }
    } catch (error) {
      // –ü–æ—Ä—Ç –µ—â–µ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
    }
    
    console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞ ${port}... (${i + 1}/${maxAttempts})`);
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  console.log(`‚ùå –ü–æ—Ä—Ç ${port} –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω`);
  return false;
}

async function restartVectorizer() {
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞...');
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä
  await killProcesses('vectorizer-server');
  await new Promise(resolve => setTimeout(resolve, 2000));
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä
  const vectorizerProcess = spawn('node', ['server/vectorizer-server.js'], {
    detached: true,
    stdio: ['ignore', 'pipe', 'pipe'],
    env: { ...process.env, VECTORIZER_PORT: '5006' }
  });
  
  vectorizerProcess.unref();
  
  console.log('üöÄ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω, PID:', vectorizerProcess.pid);
  
  // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  const ready = await waitForPort(5006);
  if (ready) {
    console.log('‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 5006');
  }
  
  return ready;
}

async function restartMainServer() {
  console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞...');
  
  // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
  await killProcesses('npm.*dev|tsx.*index');
  await new Promise(resolve => setTimeout(resolve, 3000));
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä
  const mainProcess = spawn('npm', ['run', 'dev'], {
    detached: true,
    stdio: ['ignore', 'pipe', 'pipe']
  });
  
  mainProcess.unref();
  
  console.log('üöÄ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω, PID:', mainProcess.pid);
  
  // –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
  const ready = await waitForPort(5000);
  if (ready) {
    console.log('‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É 5000');
  }
  
  return ready;
}

async function restartAll() {
  console.log('üîÑ ===== –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–ï–†–ï–ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–û–í =====');
  
  try {
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä
    const vectorizerOk = await restartVectorizer();
    
    // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    // const mainServerOk = await restartMainServer();
    
    console.log('üéâ ===== –ü–ï–†–ï–ó–ê–ü–£–°–ö –ó–ê–í–ï–†–®–ï–ù =====');
    console.log(`–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä: ${vectorizerOk ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞'}`);
    // console.log(`–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä: ${mainServerOk ? '‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' : '‚ùå –û—à–∏–±–∫–∞'}`);
    
    if (vectorizerOk) {
      console.log('üöÄ –°–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ!');
      console.log('üìù –ö–æ–º–∞–Ω–¥–∞ "–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä" —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (process.argv[1] === new URL(import.meta.url).pathname) {
  restartAll();
}

export { restartVectorizer, restartMainServer, restartAll };