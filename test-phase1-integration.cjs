/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –§–∞–∑—ã 1 —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç: –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
 */

const semanticIntegration = require('./server/semantic-integration-layer.cjs');

const SmartLogger = {
  test: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üß™ [${timestamp}] PHASE 1 TEST: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –§–∞–∑—ã 1
 */
async function testPhase1Integration() {
  SmartLogger.test('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–ê–ó–´ 1: –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ê–Ø –ü–ê–ú–Ø–¢–¨ –ò –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø');

  try {
    // === –¢–ï–°–¢ 1: –ê–ù–ê–õ–ò–ó –ù–û–í–û–ì–û –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
    SmartLogger.test('–¢–ï–°–¢ 1: –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–µ—Ä–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º');
    
    const firstRequest = '–°–æ–∑–¥–∞–π –¥–ª—è –º–µ–Ω—è –ª–æ–≥–æ—Ç–∏–ø –≤ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É–π —Å–∏–Ω–∏–π —Ü–≤–µ—Ç';
    const firstAnalysis = await semanticIntegration.analyzeWithSemantics(firstRequest, {
      userId: 999, // –ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      sessionId: 'test-session-1',
      category: 'image_generation',
      sessionHistory: []
    });

    SmartLogger.test('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', {
      shouldUseSemantic: firstAnalysis.shouldUseSemantic,
      confidence: firstAnalysis.confidence,
      hasPersonalization: !!firstAnalysis.semanticResult?.phase1Data
    });

    // === –¢–ï–°–¢ 2: –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –û–¢–í–ï–¢–ê ===
    if (firstAnalysis.shouldUseSemantic) {
      SmartLogger.test('–¢–ï–°–¢ 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');
      
      const firstResponse = await semanticIntegration.createSemanticResponse(
        firstAnalysis.semanticResult, 
        firstRequest, 
        { userId: 999, sessionId: 'test-session-1' }
      );

      SmartLogger.test('–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω:', {
        success: firstResponse.success,
        hasPersonalization: !!firstResponse.phase1Metadata,
        provider: firstResponse.provider
      });
    }

    // === –¢–ï–°–¢ 3: –ü–û–í–¢–û–†–ù–´–ô –ó–ê–ü–†–û–° –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –û–ë–£–ß–ï–ù–ò–Ø ===
    SmartLogger.test('–¢–ï–°–¢ 3: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—É—á–µ–Ω–∏—è');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    await semanticIntegration.recordInteractionFeedback(999, 'test-session-1', {
      userRequest: firstRequest,
      systemResponse: '–õ–æ–≥–æ—Ç–∏–ø —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ',
      userFeedback: '–û—Ç–ª–∏—á–Ω–æ! –ò–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ –Ω—É–∂–Ω–æ!',
      category: 'image_generation',
      responseTime: 2500,
      additionalMetrics: {
        detectedColors: ['—Å–∏–Ω–∏–π'],
        detectedStyle: '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π'
      }
    });

    // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –æ—Ç —Ç–æ–≥–æ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const secondRequest = '–°–¥–µ–ª–∞–π –µ—â–µ –æ–¥–∏–Ω –ª–æ–≥–æ—Ç–∏–ø, —Ç–µ–ø–µ—Ä—å –¥–ª—è –¥—Ä—É–≥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏';
    const secondAnalysis = await semanticIntegration.analyzeWithSemantics(secondRequest, {
      userId: 999,
      sessionId: 'test-session-2',
      category: 'image_generation',
      sessionHistory: [firstRequest]
    });

    SmartLogger.test('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤—Ç–æ—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—Å –æ–±—É—á–µ–Ω–∏–µ–º):', {
      shouldUseSemantic: secondAnalysis.shouldUseSemantic,
      confidence: secondAnalysis.confidence,
      learningApplied: !!secondAnalysis.semanticResult?.phase1Data?.learningRecommendations
    });

    // === –¢–ï–°–¢ 4: –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–û–ù–ù–´–ô –ó–ê–ü–†–û–° ===
    SmartLogger.test('–¢–ï–°–¢ 4: –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
    
    const consultationRequest = '–ü–æ—Å–æ–≤–µ—Ç—É–π –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ä–µ—à–µ–Ω–∏–π –¥–ª—è –º–æ–µ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞';
    const consultationAnalysis = await semanticIntegration.analyzeWithSemantics(consultationRequest, {
      userId: 999,
      sessionId: 'test-session-2',
      category: 'image_consultation',
      sessionHistory: [firstRequest, secondRequest]
    });

    SmartLogger.test('–†–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', {
      shouldUseSemantic: consultationAnalysis.shouldUseSemantic,
      confidence: consultationAnalysis.confidence,
      hasUserProfile: !!consultationAnalysis.semanticResult?.phase1Data?.userProfile
    });

    // === –¢–ï–°–¢ 5: –ê–î–ê–ü–¢–ê–¶–ò–Ø –°–¢–ò–õ–Ø –û–ë–©–ï–ù–ò–Ø ===
    SmartLogger.test('–¢–ï–°–¢ 5: –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ä–∞–∑–Ω—ã–µ —Å—Ç–∏–ª–∏ –æ–±—â–µ–Ω–∏—è');
    
    const formalRequest = '–ë—É–¥—å—Ç–µ –¥–æ–±—Ä—ã, –Ω–µ –º–æ–≥–ª–∏ –±—ã –≤—ã —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ';
    const formalAnalysis = await semanticIntegration.analyzeWithSemantics(formalRequest, {
      userId: 1000, // –î—Ä—É–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      sessionId: 'test-session-formal',
      category: 'image_generation'
    });

    const briefRequest = '–ë—ã—Å—Ç—Ä–æ –ª–æ–≥–æ—Ç–∏–ø';
    const briefAnalysis = await semanticIntegration.analyzeWithSemantics(briefRequest, {
      userId: 1001, // –ï—â–µ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å  
      sessionId: 'test-session-brief',
      category: 'image_generation'
    });

    SmartLogger.test('–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –æ–±—â–µ–Ω–∏—è:', {
      formal: {
        style: formalAnalysis.semanticResult?.phase1Data?.communicationAnalysis?.dominantStyle,
        confidence: formalAnalysis.confidence
      },
      brief: {
        style: briefAnalysis.semanticResult?.phase1Data?.communicationAnalysis?.dominantStyle,
        confidence: briefAnalysis.confidence
      }
    });

    // === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ ===
    SmartLogger.test('‚úÖ –§–ê–ó–ê 1 –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ê –£–°–ü–ï–®–ù–û');
    SmartLogger.test('üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', {
      '–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å': '–°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - ‚úÖ',
      '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è': '–ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π - ‚úÖ',
      '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ': '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è - ‚úÖ',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è': '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π - ‚úÖ'
    });

    return {
      success: true,
      testsCompleted: 5,
      componentsWorking: ['userMemoryManager', 'userProfiler', 'learningSystem', 'semanticIntegration'],
      message: '–§–∞–∑–∞ 1 –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!'
    };

  } catch (error) {
    SmartLogger.test(`‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –§–ê–ó–´ 1: ${error.message}`);
    SmartLogger.test('Stack trace:', error.stack);
    
    return {
      success: false,
      error: error.message,
      message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –§–∞–∑—ã 1'
    };
  }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
async function testSpecificComponent(componentName) {
  SmartLogger.test(`–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: ${componentName}`);
  
  try {
    switch (componentName) {
      case 'memory':
        const userMemoryManager = require('./server/semantic-memory/user-memory-manager.cjs');
        const profile = await userMemoryManager.getOrCreateUserProfile(9999);
        SmartLogger.test('–¢–µ—Å—Ç –ø–∞–º—è—Ç–∏:', { profileCreated: !!profile });
        return { success: true, component: 'memory' };
        
      case 'profiler':
        const userProfiler = require('./server/semantic-memory/user-profiler.cjs');
        const analysis = userProfiler.analyzeCommunicationStyle('–ü—Ä–∏–≤–µ—Ç! –°–æ–∑–¥–∞–π –∫–ª–∞—Å—Å–Ω—ã–π –ª–æ–≥–æ—Ç–∏–ø!');
        SmartLogger.test('–¢–µ—Å—Ç –ø—Ä–æ—Ñ–∏–ª–µ—Ä–∞:', { style: analysis.dominantStyle });
        return { success: true, component: 'profiler' };
        
      case 'learning':
        const learningSystem = require('./server/semantic-memory/learning-system.cjs');
        const patterns = await learningSystem.getLearningPatterns(1, 'image_generation');
        SmartLogger.test('–¢–µ—Å—Ç –æ–±—É—á–µ–Ω–∏—è:', { patternsFound: patterns.length });
        return { success: true, component: 'learning' };
        
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentName}`);
    }
  } catch (error) {
    SmartLogger.test(`–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ${componentName}: ${error.message}`);
    return { success: false, component: componentName, error: error.message };
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length > 0) {
    // –¢–µ—Å—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    testSpecificComponent(args[0])
      .then(result => {
        console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:', result);
        process.exit(result.success ? 0 : 1);
      })
      .catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
      });
  } else {
    // –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç
    testPhase1Integration()
      .then(result => {
        console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:', result);
        process.exit(result.success ? 0 : 1);
      })
      .catch(error => {
        console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
        process.exit(1);
      });
  }
}

module.exports = {
  testPhase1Integration,
  testSpecificComponent
};