/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—É—é —Ü–µ–ø–æ—á–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ fallback –æ—Ç–≤–µ—Ç–æ–≤
 */

async function validateSemanticSystem() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´ BOOOMERANGS');
  console.log('=' .repeat(65));

  try {
    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    const semanticIntegrationLayer = require('./server/semantic-integration-layer.cjs');
    
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    const testScenarios = [
      {
        name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
        input: '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?',
        expectedAnalysis: 'greeting'
      },
      {
        name: '–ó–∞–ø—Ä–æ—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π',
        input: '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö',
        expectedAnalysis: 'capabilities'
      },
      {
        name: '–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
        input: '–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º —Å—Ç–∏–ª–µ',
        expectedAnalysis: 'creative'
      },
      {
        name: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å',
        input: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π?',
        expectedAnalysis: 'technical'
      },
      {
        name: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
        input: '–ú–Ω–µ –≥—Ä—É—Å—Ç–Ω–æ, –ø–æ–¥–Ω–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
        expectedAnalysis: 'emotional'
      }
    ];

    let successCount = 0;
    let totalTests = testScenarios.length;

    for (let i = 0; i < testScenarios.length; i++) {
      const scenario = testScenarios[i];
      
      console.log(`\nüß™ –¢–ï–°–¢ ${i + 1}/${totalTests}: ${scenario.name}`);
      console.log(`   –ó–∞–ø—Ä–æ—Å: "${scenario.input}"`);

      try {
        const result = await semanticIntegrationLayer.analyzeWithSemantics(
          scenario.input,
          {
            sessionId: `test-${i + 1}`,
            conversationHistory: [],
            hasRecentImages: false
          }
        );

        console.log(`   üìä shouldUseSemantic: ${result.shouldUseSemantic}`);
        console.log(`   üìä reason: ${result.reason}`);
        console.log(`   üìä confidence: ${result.confidence}`);

        if (result.semanticResult) {
          console.log(`   üìä intent: ${result.semanticResult.intent}`);
          console.log(`   üìä fallback: ${result.semanticResult.fallback || false}`);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è emergency fallback
          if (!result.semanticResult.fallback && result.shouldUseSemantic) {
            console.log(`   ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω`);
            successCount++;
          } else {
            console.log(`   ‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback`);
          }
        } else {
          console.log(`   ‚ùå –ù–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞`);
        }

      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\n' + '=' .repeat(65));
    console.log('üìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò');
    console.log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/${totalTests}`);
    console.log(`   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((successCount / totalTests) * 100)}%`);
    
    if (successCount === totalTests) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('üöÄ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ BOOOMERANGS –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞');
      console.log('‚úÖ Fallback –æ—Ç–≤–µ—Ç—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –ø–æ–ª–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
    } else if (successCount > totalTests / 2) {
      console.log('\n‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û');
      console.log('üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è');
    } else {
      console.log('\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –†–ê–ë–û–¢–ê');
      console.log('üîß –°–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    console.log('\nüß† –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –û–¢–í–ï–¢–û–í');
    
    try {
      const generateResult = await semanticIntegrationLayer.generateSmartResponse(
        '–ü—Ä–∏–≤–µ—Ç, BOOOMERANGS!',
        {
          sessionId: 'test-generate',
          conversationHistory: []
        }
      );

      if (generateResult && generateResult.response) {
        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`   –û—Ç–≤–µ—Ç: "${generateResult.response.substring(0, 100)}..."`);
        console.log(`   –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: ${generateResult.metadata?.generatedBy || 'unknown'}`);
      } else {
        console.log('‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –æ—Ç–≤–µ—Ç–æ–≤');
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
    }

    console.log('\n' + '=' .repeat(65));
    console.log('üéØ –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê');

  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í–ê–õ–ò–î–ê–¶–ò–ò:', error.message);
    console.error('Stack:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
if (require.main === module) {
  validateSemanticSystem().catch(console.error);
}

module.exports = { validateSemanticSystem };