/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤–º–µ—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö
 */

async function testDialogueFixes() {
  console.log('üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –î–ò–ê–õ–û–ì–û–í–û–ô –°–ò–°–¢–ï–ú–´\n');
  
  const testCases = [
    {
      name: '–ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
      input: '–ü—Ä–∏–≤–µ—Ç',
      expected: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏'
    },
    {
      name: '–í–æ–ø—Ä–æ—Å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö',
      input: '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ',
      expected: '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ'
    },
    {
      name: '–ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å',
      input: '–ß—Ç–æ?',
      expected: '—É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å'
    },
    {
      name: '–ö–∞–∫ –¥–µ–ª–∞',
      input: '–ö–∞–∫ –¥–µ–ª–∞?',
      expected: '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –æ—Ç–≤–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏'
    }
  ];

  for (const testCase of testCases) {
    console.log(`\nüìã –¢–µ—Å—Ç: ${testCase.name}`);
    console.log(`üí¨ –í–æ–ø—Ä–æ—Å: "${testCase.input}"`);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É
      const response = await fetch('http://localhost:5000/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: testCase.input,
          options: {
            provider: 'semantic'
          }
        })
      });

      const data = await response.json();
      
      if (data.success) {
        console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω (${data.response.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        console.log(`üéØ –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: "${data.response.substring(0, 100)}..."`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç –ù–ï —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π
        const isTechnical = data.response.includes('—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑') || 
                          data.response.includes('–º–æ–¥—É–ª–∏') ||
                          data.response.includes('–±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑');
        
        if (isTechnical) {
          console.log('‚ùå –û–®–ò–ë–ö–ê: –û—Ç–≤–µ—Ç –≤—Å–µ –µ—â–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π!');
        } else {
          console.log('‚úÖ –£–°–ü–ï–•: –û—Ç–≤–µ—Ç —á–µ–ª–æ–≤–µ—á–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π!');
        }
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  console.log('\nüéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testDialogueFixes();