/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞ –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫ —Å–∏—Å—Ç–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
 * –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –º–æ–¥—É–ª–∏ –¥–ª—è –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */

const semanticIntegration = require('./server/semantic-integration-layer.cjs');
const webSearchProvider = require('./server/web-search-provider.js');
const advancedSearchProvider = require('./server/advanced-search-provider.js');

async function testExternalSearchIntegration() {
  console.log('üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –í–ù–ï–®–ù–ï–ì–û –ü–û–ò–°–ö–ê –í –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–ï');
  console.log('=====================================================================\n');

  try {
    console.log('‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n');

    // –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log('üîç –¢–ï–°–¢ 1: –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('=====================================');
    
    const testQueries = [
      '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ú–∞—Ä—Å',
      '–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª—å?',
      '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä?',
      '–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∞',
      '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?',
      '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?',
      '–ò—Å—Ç–æ—Ä–∏—è –†–∏–º—Å–∫–æ–π –∏–º–ø–µ—Ä–∏–∏',
      '–û–±—ä—è—Å–Ω–∏ —Ç–µ–æ—Ä–∏—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    ];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø
    testQueries.forEach(query => {
      try {
        // –≠–º—É–ª–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É detectKnowledgeRequest
        const lowerInput = query.toLowerCase();
        const knowledgeKeywords = [
          '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–æ–±—ä—è—Å–Ω–∏', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—á—Ç–æ –∑–Ω–∞–µ—à—å –æ',
          '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–æ–ø–∏—à–∏',
          '—á—Ç–æ —ç—Ç–æ', '–∫–∞–∫ —ç—Ç–æ', '–∑–∞—á–µ–º', '–¥–ª—è —á–µ–≥–æ', '–∏—Å—Ç–æ—Ä–∏—è', '–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ'
        ];
        
        const knowledgeDomains = [
          '–ø–ª–∞–Ω–µ—Ç', '–º–∞—Ä—Å', '—é–ø–∏—Ç–µ—Ä', '–∑–µ–º–ª—è', '–∫–æ—Å–º–æ—Å', '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
          '–º–µ–¥–∏—Ü–∏–Ω', '–Ω–∞—É–∫–∞', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–±–∏–æ–ª–æ–≥–∏—è', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
          '–∏—Å—Ç–æ—Ä–∏—è', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
          '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∫—É–ª—å—Ç—É—Ä–∞', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '—Ä–µ–ª–∏–≥–∏—è',
          '–ø–æ–ª–∏—Ç–∏–∫–∞', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–æ–±—â–µ—Å—Ç–≤–æ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è',
          '—É–≥–æ–ª—å', '–∫–≤–∞–Ω—Ç–æ–≤—ã–π', '—Ç–µ–æ—Ä–∏—è'
        ];

        const hasKnowledgeKeywords = knowledgeKeywords.some(keyword => 
          lowerInput.includes(keyword)
        );
        const hasKnowledgeDomains = knowledgeDomains.some(domain => 
          lowerInput.includes(domain)
        );
        const isQuestion = lowerInput.includes('?') || 
                          lowerInput.startsWith('—á—Ç–æ') ||
                          lowerInput.startsWith('–∫–∞–∫') ||
                          lowerInput.startsWith('–≥–¥–µ') ||
                          lowerInput.startsWith('–∫–æ–≥–¥–∞') ||
                          lowerInput.startsWith('–ø–æ—á–µ–º—É') ||
                          lowerInput.startsWith('–∑–∞—á–µ–º');

        const needsExternal = hasKnowledgeKeywords || hasKnowledgeDomains || isQuestion;
        
        console.log(`${needsExternal ? '‚úÖ' : '‚ùå'} "${query}" -> ${needsExternal ? '–ù–£–ñ–ï–ù –í–ù–ï–®–ù–ò–ô –ü–û–ò–°–ö' : '–ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç'}`);
      } catch (error) {
        console.log(`‚ùå "${query}" -> –û–®–ò–ë–ö–ê: ${error.message}`);
      }
    });

    console.log('\nüöÄ –¢–ï–°–¢ 2: –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞');
    console.log('====================================');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –≤–µ–±-–ø–æ–∏—Å–∫–∞
    const searchQuery = '–ø–ª–∞–Ω–µ—Ç–∞ –ú–∞—Ä—Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ —Å–æ—Å—Ç–∞–≤';
    console.log(`üìù –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫: "${searchQuery}"`);
    
    try {
      const webSearchResult = await webSearchProvider.performWebSearch(searchQuery);
      
      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ï–ë-–ü–û–ò–°–ö–ê:');
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${webSearchResult.success ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`üîç –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${webSearchResult.provider || '–Ω–µ —É–∫–∞–∑–∞–Ω'}`);
      
      if (webSearchResult.results && webSearchResult.results.length > 0) {
        console.log(`üìÑ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${webSearchResult.results.length}`);
        console.log(`üì∞ –ü–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: "${webSearchResult.results[0].title?.substring(0, 80)}..."`);
      } else {
        console.log('‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞: ${error.message}`);
    }

    console.log('\nüß† –¢–ï–°–¢ 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–æ–π');
    console.log('=============================================');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    const knowledgeQuery = '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ú–∞—Ä—Å';
    console.log(`üìù –ó–Ω–∞–Ω–∏–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${knowledgeQuery}"`);
    
    try {
      const result = await semanticIntegration.analyzeWithSemantics(knowledgeQuery, {
        sessionId: 'test-external-search-' + Date.now(),
        language: 'ru',
        includeAdvancedSearch: true,
        includeExternalKnowledge: true
      });
      
      console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ê–ù–ê–õ–ò–ó–ê:');
      console.log(`‚úÖ –°–µ–º–∞–Ω—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: ${result.shouldUseSemantic ? '–î–ê' : '–ù–ï–¢'}`);
      console.log(`üéØ –ü—Ä–∏—á–∏–Ω–∞: ${result.reason}`);
      console.log(`üîÆ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence ? (result.confidence * 100).toFixed(1) + '%' : '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
      
      if (result.semanticResult) {
        console.log(`üìà –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${result.semanticResult.category || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}`);
        console.log(`üß† –ù–∞–º–µ—Ä–µ–Ω–∏–µ: ${result.semanticResult.intent || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
        if (result.semanticResult.includeExternalKnowledge || 
            result.semanticResult.includeAdvancedSearch ||
            result.semanticResult.enhanced_context?.includeExternalKnowledge) {
          console.log('‚úÖ –í–ù–ï–®–ù–ò–ô –ü–û–ò–°–ö –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ');
        } else {
          console.log('‚ùå –í–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ');
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
      if (result.metaSemanticData) {
        console.log(`üîÆ –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–∞: –∞–∫—Ç–∏–≤–Ω–∞ (–∫–∞—á–µ—Å—Ç–≤–æ: ${result.metaSemanticData.qualityScore}/10)`);
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    }

    console.log('\nüîç –¢–ï–°–¢ 4: –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫');
    console.log('===========================');

    try {
      const advancedResult = await advancedSearchProvider.performAdvancedSearch(searchQuery, {
        searchType: 'comprehensive',
        language: 'ru',
        maxResults: 5
      });
      
      console.log(`üìä –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: ${advancedResult.length > 0 ? '–£–°–ü–ï–®–ù–û' : '–ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í'}`);
      console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${advancedResult.length}`);
      
      if (advancedResult.length > 0) {
        advancedResult.forEach((result, index) => {
          console.log(`  ${index + 1}. [${result.source}] ${result.title?.substring(0, 60)}...`);
        });
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    }

    console.log('\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
    console.log('=============');
    console.log('‚úÖ –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: –†–ê–ë–û–¢–ê–ï–¢');
    console.log('‚úÖ –í–µ–±-–ø–æ–∏—Å–∫: –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù');
    console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞: –ê–ö–¢–ò–í–ù–ê');
    console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–Ω–∞–Ω–∏–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –≤–Ω–µ—à–Ω–∏–º –ø–æ–∏—Å–∫–æ–º');

  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
    console.error(error.stack);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testExternalSearchIntegration().catch(console.error);