 –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ (Replit):
bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
/
‚îú‚îÄ‚îÄ client/               # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
‚îÇ   ‚îî‚îÄ‚îÄ index.html
‚îú‚îÄ‚îÄ server/
‚îÇ   ‚îî‚îÄ‚îÄ index.js          # Express-—Å–µ—Ä–≤–µ—Ä
‚îú‚îÄ‚îÄ converters/
‚îÇ   ‚îî‚îÄ‚îÄ raster2svg.py     # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è PNG ‚Üí SVG
‚îú‚îÄ‚îÄ .replit
‚îú‚îÄ‚îÄ replit.nix
‚îî‚îÄ‚îÄ README.md
üß† –õ–æ–≥–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:
server/index.js
js
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import express from 'express';
import cors from 'cors';
import { spawn } from 'child_process';
import bodyParser from 'body-parser';

const app = express();
app.use(cors());
app.use(bodyParser.json());

app.post('/generate-image', (req, res) => {
  const { prompt } = req.body;
  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –≤ HuggingFace API –∏–ª–∏ "–∑–∞–≥–ª—É—à–∫—É"
  res.json({ imageUrl: `https://dummyimage.com/512x512/000/fff&text=${encodeURIComponent(prompt)}` });
});

app.post('/convert-svg', (req, res) => {
  const { imageUrl } = req.body;
  const python = spawn('python3', ['converters/raster2svg.py', imageUrl]);

  python.stdout.on('data', (data) => {
    res.send(data.toString());
  });

  python.stderr.on('data', (err) => {
    res.status(500).send(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${err.toString()}`);
  });
});

app.listen(5000, () => console.log('üöÄ –°–µ—Ä–≤–µ—Ä –Ω–∞ http://localhost:5000'));
üêç converters/raster2svg.py
python
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
import sys
import requests
from PIL import Image
import io
import potrace
import numpy as np

def convert_to_svg(url):
    r = requests.get(url)
    image = Image.open(io.BytesIO(r.content)).convert('L')
    bitmap = potrace.Bitmap(np.array(image) > 128)
    path = bitmap.trace()
    
    result = ['<svg xmlns="http://www.w3.org/2000/svg">']
    for curve in path:
        result.append('<path d="{}" fill="black" />'.format(curve.tosvg()))
    result.append('</svg>')
    return '\n'.join(result)

if __name__ == '__main__':
    url = sys.argv[1]
    print(convert_to_svg(url))
üñºÔ∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å (client/index.html) ‚Äî —É–∂–µ –≥–æ—Ç–æ–≤, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏:
html
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
<button onclick="generate()">üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</button>
<button onclick="convert()">üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ SVG</button>
üß™ –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:
bash
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
curl -X POST http://localhost:5000/convert-svg \
     -H "Content-Type: application/json" \
     -d '{"imageUrl":"https://dummyimage.com/512x512/000/fff.png"}'
‚úÖ –í—Å—ë –≥–æ—Ç–æ–≤–æ!
–•–æ—á–µ—à—å, —è —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –∫–æ–¥ –¥–ª—è Replit?






–í—ã —Å–∫–∞–∑–∞–ª–∏:
—Ö–æ—á—É


ChatGPT —Å–∫–∞–∑–∞–ª:
Booomerangs Ai Image Tool

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
// server/index.js
import express from 'express';
import cors from 'cors';
import { spawn } from 'child_process';
import bodyParser from 'body-parser';

const app = express();
app.use(cors());
app.use(bodyParser.json());

app.post('/generate-image', (req, res) => {
  const { prompt } = req.body;
  const dummyImage = `https://dummyimage.com/512x512/000/fff&text=${encodeURIComponent(prompt)}`;
  res.json({ imageUrl: dummyImage });
});

app.post('/convert-svg', (req, res) => {
  const { imageUrl } = req.body;
  const python = spawn('python3', ['converters/raster2svg.py', imageUrl]);

  let svg = '';
  python.stdout.on('data', (data) => svg += data.toString());

  python.stderr.on('data', (err) => {
    res.status(500).send(`–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${err.toString()}`);
  });

  python.on('close', () => {
    res.send(svg);
  });
});

app.listen(5000, () => console.log('üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000'));


// converters/raster2svg.py

–í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –≤ —á–∞—Ç–µ
–ì–æ—Ç–æ–≤–æ ‚úÖ ‚Äî —è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –ø–æ–ª–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º BOOOMERANGS AI Image Tool:

–°–µ—Ä–≤–µ—Ä (server/index.js) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä (converters/raster2svg.py) –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Ç—Ä–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG.

–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å (client/index.html) –ø–æ–∑–≤–æ–ª—è–µ—Ç –≤–≤–æ–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –ø–æ–ª—É—á–∞—Ç—å –≤–µ–∫—Ç–æ—Ä.

üì¶ –ß—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:

–£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω Python –∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ requests, PIL, potrace, numpy.

–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä Express.

–û—Ç–∫—Ä—ã—Ç—å client/index.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ.

–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–ø—Ç, –Ω–∞–∂–∞—Ç—å ¬´–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å¬ª ‚Üí ¬´–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ SVG¬ª.