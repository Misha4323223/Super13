–°–æ–∑–¥–∞—Ç—å –µ–¥–∏–Ω—ã–π –º–æ–¥—É–ª—å "–°–æ–∑–Ω–∞–Ω–∏–µ" (conversation-engine.ts)
–≠—Ç–æ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏–¥—Ç–∏ –≤–µ—Å—å –¥–∏–∞–ª–æ–≥:
–≤—Ö–æ–¥ ‚Üí –∞–Ω–∞–ª–∏–∑ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí —Ä–µ—Ñ–ª–µ–∫—Å–∏—è ‚Üí –æ—Ç–≤–µ—Ç

ts
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
// conversation-engine.ts
export const processUserInput = async (input, userContext) => {
  const meta = await metaAnalyzer.analyze(input)
  const emotion = await emotionalMatrix.detect(input)
  const memory = await semanticMemory.retrieve(userContext)

  const thought = await thinkingProcessor.buildThought({
    input,
    meta,
    emotion,
    memory
  })

  const rawResponse = await naturalLanguageGenerator.generate(thought)

  const finalResponse = await validator.check(rawResponse, meta)

  await learningSystem.update(userContext, input, finalResponse)

  return finalResponse
}
üìç –≠—Ç–æ –∫–∞–∫ —Å–±–æ—Ä–∫–∞ —Å–æ–∑–Ω–∞–Ω–∏—è: –æ–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å—ë.

2. üåÄ –î–æ–±–∞–≤–∏—Ç—å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç GPT)
–¢—ã —É–∂–µ —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å meta-–∞–Ω–∞–ª–∏–∑, —Ç–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å:

ts
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
// –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ "–æ—Å–æ–∑–Ω–∞–Ω" ‚Üí –ø–æ–≤—Ç–æ—Ä–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–π
if (finalResponse.quality < 7) {
  const refinedThought = await thinkingProcessor.refine(thought)
  const improvedResponse = await naturalLanguageGenerator.generate(refinedThought)
  return improvedResponse
}
üìå –≠—Ç–æ —Å–æ–∑–¥–∞—ë—Ç —Ä–µ—Ñ–ª–µ–∫—Å–∏—é, –∫–∞–∫ —É GPT ‚Äî ¬´–¥—É–º–∞—Ç—å –æ —Å–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ¬ª.

3. üé≠ –î–æ–±–∞–≤–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é "–ª–∏—á–Ω–æ—Å—Ç—å" (persona.ts)
ChatGPT –∫–∞–∂–µ—Ç—Å—è –∂–∏–≤—ã–º, –ø–æ—Ç–æ–º—É —á—Ç–æ —É –Ω–µ–≥–æ –µ—Å—Ç—å:

—Å—Ç–∏–ª—å,

—Ç–æ–Ω,

–ø–æ–≤–µ–¥–µ–Ω–∏–µ.

–°–æ–∑–¥–∞–π —à–∞–±–ª–æ–Ω —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏:

ts
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
export const generatePersonaStylePrompt = (userContext) => {
  const tone = userContext.tone || "–¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π"
  const role = userContext.role || "–Ω–∞—Å—Ç–∞–≤–Ω–∏–∫"
  return `–û–±—â–∞–π—Å—è –∫–∞–∫ ${role}, —Å —Ç–æ–Ω–æ–º: ${tone}, –ø–æ–Ω–∏–º–∞–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.`
}
–ò –≤—Å—Ç–∞–≤—å –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä:

ts
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
const promptWithStyle = `${personaPrompt}\n\n${thought}`
4. üß¨ –°–æ–±—Ä–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ (self-evaluator.ts)
ChatGPT —É–º–µ–µ—Ç –ø–æ–Ω–∏–º–∞—Ç—å: "—ç—Ç–æ –ø–ª–æ—Ö–æ –∑–≤—É—á–∏—Ç" ‚Üí –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–Ω–æ–≤–æ.
–°–¥–µ–ª–∞–π –ø—Ä–æ—Å—Ç–æ–π semanticQualityScore():

ts
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
export const semanticQualityScore = (text, meta) => {
  // —Å—á—ë—Ç –ø–æ –ª–æ–≥–∏—á–Ω–æ—Å—Ç–∏, —Å–≤—è–∑–Ω–æ—Å—Ç–∏, —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —ç–º–æ—Ü–∏—è–º
  const logic = checkLogic(text, meta)
  const emotion = detectTone(text)
  return (logic + emotion) / 2
}
5. üîå –°–¥–µ–ª–∞—Ç—å —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ (chat.ts –∏–ª–∏ POST /chat)
ts
–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
app.post('/chat', async (req, res) => {
  const userInput = req.body.message
  const userContext = req.body.context

  const reply = await processUserInput(userInput, userContext)
  res.json({ reply })
})