–≠–¢–ê–ü 1: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ì–õ–ê–í–ù–û–ô –ü–†–ò–ß–ò–ù–´ - –°–¢–ê–¢–ò–ß–ù–´–ï –û–¢–í–ï–¢–´
–§–∞–π–ª: server/semantic-memory/natural-language-generator.cjs
–°—Ç—Ä–æ–∫–∏: 411-416 (—Ñ—É–Ω–∫—Ü–∏—è generateConversationalResponse)

–¢–µ–∫—É—â–∏–π –∫–æ–¥:

generateConversationalResponse(thought) {
  return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ–± —ç—Ç–æ–º.
–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –∏–ª–∏ –æ —á–µ–º —Ö–æ—á–µ—à—å –ø–æ–±–æ–ª—Ç–∞—Ç—å? –Ø —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å –≤ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö, –Ω–æ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ–±—Å—É–∂—É —á—Ç–æ —É–≥–æ–¥–Ω–æ! üòä`;
}
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–¥:

generateConversationalResponse(thought) {
  const input = thought.userInput.toLowerCase();
  const responses = [];
  
  // –ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
  if (input.includes('—á–µ—Ä—Ç–∏–Ω–∞') || input.includes('—á–µ—Ä—Ç')) {
    responses.push("–û–≥–æ, —ç–∫—Å–ø—Ä–µ—Å—Å–∏–≤–Ω–æ! üòÑ –ß—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?");
    responses.push("–ü–æ–Ω–∏–º–∞—é, —á—Ç–æ-—Ç–æ –∑–∞–¥–µ–ª–æ! –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?");
  } else if (input.includes('—á—Ç–æ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å') || input.includes('–Ω–µ –≤–µ—Ä—é')) {
    responses.push("–ê —Ç—ã —Å–æ–º–Ω–µ–≤–∞–µ—à—å—Å—è? –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —á—Ç–æ –∫ —á–µ–º—É!");
    responses.push("–•–º, –∫–∞–∂–µ—Ç—Å—è —è —Ç–µ–±—è —É–¥–∏–≤–∏–ª! –ß—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–∫–∞–∑–∞–ª–æ—Å—å —Å—Ç—Ä–∞–Ω–Ω—ã–º?");
  } else if (input.includes('–ø—Ä–∏–≤–µ—Ç') || input.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
    responses.push("–ü—Ä–∏–≤–µ—Ç! –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!");
    responses.push("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!");
  } else {
    responses.push("–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –º—ã—Å–ª—å! –†–∞–∑–≤–µ–π —Ç–µ–º—É –¥–∞–ª—å—à–µ.");
    responses.push("–õ—é–±–æ–ø—ã—Ç–Ω–æ! –ê —á—Ç–æ —Ç—ã –æ–± —ç—Ç–æ–º –¥—É–º–∞–µ—à—å?");
    responses.push("–•–º, —Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ - –∑–∞–∏–Ω—Ç—Ä–∏–≥–æ–≤–∞–ª!");
  }
  
  const randomResponse = responses[Math.floor(Math.random() * responses.length)];
  
  return `${randomResponse}
–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? –ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ –∏–ª–∏ –ø–æ–º–æ—á—å —Å —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏!`;
}
–≠–¢–ê–ü 2: –£–õ–£–ß–®–ï–ù–ò–ï –ê–ù–ê–õ–ò–ó–ê –ù–ê–ú–ï–†–ï–ù–ò–ô –í THINKING PROCESSOR
–§–∞–π–ª: server/semantic-memory/natural-language-generator.cjs
–°—Ç—Ä–æ–∫–∏: 58-85 (—Ñ—É–Ω–∫—Ü–∏—è understand)

–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:

understand(input) {
  const understanding = {
    intent: 'unknown',
    emotion: 'neutral', 
    directness: 'medium',
    personalConnection: false
  };
  const lowerInput = input.toLowerCase();
  
  // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
  if (lowerInput.includes('—á–µ—Ä—Ç–∏–Ω–∞') || lowerInput.includes('—á–µ—Ä—Ç') || lowerInput.includes('–±–ª–∏–Ω')) {
    understanding.intent = 'emotional_expression';
    understanding.emotion = 'frustrated_casual';
    understanding.directness = 'high';
  } else if (lowerInput.includes('—á—Ç–æ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å') || lowerInput.includes('–Ω–µ –≤–µ—Ä—é') || lowerInput.includes('—Å–µ—Ä—å–µ–∑–Ω–æ')) {
    understanding.intent = 'disbelief_question';
    understanding.emotion = 'skeptical';
    understanding.personalConnection = true;
  } else if (lowerInput.includes('–∫—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª') || lowerInput.includes('–∫—Ç–æ —Ç—ã')) {
    understanding.intent = 'personal_question';
    understanding.personalConnection = true;
  } else if (lowerInput.includes('–ø—Ä–∏–≤–µ—Ç') || lowerInput.includes('—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ')) {
    understanding.intent = 'introduction';
    understanding.personalConnection = true;
  }
  // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
  
  return understanding;
}
–≠–¢–ê–ü 3: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –í–´–ë–û–†–ê –°–¢–†–ê–¢–ï–ì–ò–ò –û–¢–í–ï–¢–ê
–§–∞–π–ª: server/semantic-memory/natural-language-generator.cjs
–°—Ç—Ä–æ–∫–∏: 49-54 (—Ñ—É–Ω–∫—Ü–∏—è chooseResponseStrategy)

–ù–∞–π—Ç–∏ —Ñ—É–Ω–∫—Ü–∏—é –∏ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É:

chooseResponseStrategy(thought) {
  const intent = thought.understanding.intent;
  const emotion = thought.understanding.emotion;
  
  switch (intent) {
    case 'emotional_expression':
      return 'empathetic_response';
    case 'disbelief_question':
      return 'clarification_response';
    case 'personal_question':
      return 'personal_sharing';
    case 'introduction':
      return 'friendly_introduction';
    case 'curiosity_exploration':
      return 'knowledge_sharing';
    case 'creative_consultation':
      return 'expert_advice';
    default:
      return 'adaptive_conversation';
  }
}