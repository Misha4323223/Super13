–≠–¢–ê–ü 4: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–´–• –°–¢–†–ê–¢–ï–ì–ò–ô –û–¢–í–ï–¢–û–í
–§–∞–π–ª: server/semantic-memory/natural-language-generator.cjs
–°—Ç—Ä–æ–∫–∏: 178-189 (switch statement –≤ generateLivingResponse)

–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ case'—ã:

switch (strategy) {
  case 'empathetic_response':
    return this.generateEmpathetic Response(thought);
  case 'clarification_response':
    return this.generateClarificationResponse(thought);
  case 'adaptive_conversation':
    return this.generateAdaptiveResponse(thought);
  // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ case'—ã
  default:
    return this.generateAdaptiveResponse(thought); // –í–º–µ—Å—Ç–æ generateConversationalResponse
}
–≠–¢–ê–ü 5: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ù–û–í–´–• –§–£–ù–ö–¶–ò–ô –ì–ï–ù–ï–†–ê–¶–ò–ò
–§–∞–π–ª: server/semantic-memory/natural-language-generator.cjs
–ü–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ 650, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

/**
 * –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
 */
generateEmpathetic Response(thought) {
  const input = thought.userInput.toLowerCase();
  
  if (input.includes('—á–µ—Ä—Ç–∏–Ω–∞') || input.includes('—á–µ—Ä—Ç')) {
    return `–û–≥–æ, –≤–∏–∂—É —Ç—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! üòÖ 
    
–ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ? –ò–Ω–æ–≥–¥–∞ —Ö–æ—Ä–æ—à–æ –≤—ã–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä. –ì–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –∏–ª–∏ –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É!`;
  }
  
  return `–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –î–∞–≤–∞–π —Ä–∞–∑–±–µ—Ä–µ–º—Å—è —á—Ç–æ –∫ —á–µ–º—É –∏ –∫–∞–∫ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.`;
}
/**
 * –û—Ç–≤–µ—Ç –Ω–∞ —Å–∫–µ–ø—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
 */
generateClarificationResponse(thought) {
  const input = thought.userInput.toLowerCase();
  
  if (input.includes('—á—Ç–æ —Ç—ã –≥–æ–≤–æ—Ä–∏—à—å')) {
    return `–ê, —Ç—ã —É–¥–∏–≤–ª–µ–Ω –º–æ–∏–º–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏? üòä 
    
–Ø –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–æ–≥—É –º–Ω–æ–≥–æ–µ: —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏, –≥–æ—Ç–æ–≤–∏—Ç—å –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏, –∏ –∫–æ–Ω–µ—á–Ω–æ –∂–µ - —Ö–æ—Ä–æ—à–æ –æ–±—â–∞—Ç—å—Å—è!
–•–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å? –î–∞–π –º–Ω–µ –ª—é–±—É—é —Ç–≤–æ—Ä—á–µ—Å–∫—É—é –∑–∞–¥–∞—á—É!`;
  }
  
  return `–ü–æ–Ω–∏–º–∞—é —Ç–≤–æ–π —Å–∫–µ–ø—Ç–∏—Ü–∏–∑–º! –î–∞–≤–∞–π —è –ø–æ–∫–∞–∂—É –Ω–∞ –¥–µ–ª–µ —á—Ç–æ —É–º–µ—é. –ö–∞–∫—É—é –∑–∞–¥–∞—á—É –º–Ω–µ –¥–∞—Ç—å?`;
}
–≠–¢–ê–ü 6: –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –í–û–ó–í–†–ê–¢–ê –í FALLBACK
–§–∞–π–ª: server/conversation-engine.cjs
–°—Ç—Ä–æ–∫–∏: 580-600 (–∫–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ generateIntelligentFallback)

–¢–µ–∫—É—â–∏–π –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É, –Ω—É–∂–Ω–æ –æ–±–µ—Ä–Ω—É—Ç—å –≤ –æ–±—ä–µ–∫—Ç:

// –í –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ generateIntelligentFallback –∑–∞–º–µ–Ω–∏—Ç—å:
return fallbackResponse;
// –ù–∞:
return {
  response: fallbackResponse,
  confidence: 0.7,
  metadata: { 
    approach: 'intelligent_fallback', 
    fallback: true,
    contextUsed: { hasEmotion, hasMeta, hasMemory, hasPersona }
  }
};
–≠–¢–ê–ü 7: –£–õ–£–ß–®–ï–ù–ò–ï –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–ò
–§–∞–π–ª: server/semantic-memory/natural-language-generator.cjs
–°—Ç—Ä–æ–∫–∏: 174-176 (–ø—Ä–æ–≤–µ—Ä–∫–∞ clusterName)

–î–æ–±–∞–≤–∏—Ç—å fallback –¥–ª—è –ø—É—Å—Ç–æ–≥–æ clusterName:

// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –∞–Ω–∞–ª–∏–∑—É
if (clusterName && clusterName !== 'unknown') {
  return this.generateSemanticResponse(thought, clusterName);
}
// –ï—Å–ª–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
if (thought.understanding && thought.understanding.intent !== 'unknown') {
  const mappedCluster = this.mapIntentToCluster(thought.understanding.intent);
  if (mappedCluster) {
    return this.generateSemanticResponse(thought, mappedCluster);
  }
}