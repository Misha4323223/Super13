/**
 * –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≠—Ç–∞–ø–∞ 1
 */

import { createRequire } from 'module';
const require = createRequire(import.meta.url);

async function testSemanticMemory() {
  console.log('üß† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤ (–≠—Ç–∞–ø 1)...\n');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å
    const semanticMemory = require('./server/semantic-memory/index.cjs');
    
    console.log('‚úÖ –ú–æ–¥—É–ª—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞
    console.log('\nüìù –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞');
    
    const result1 = await semanticMemory.analyzeCompleteRequest(
      '–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏',
      'test-session-1',
      { hasRecentImages: false }
    );

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', {
      confidence: result1.confidence,
      concept: result1.current_project?.concept,
      predictions_count: result1.predictions?.length || 0,
      enhanced_prompt: result1.enhanced_prompt?.substring(0, 50) + '...'
    });

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º
    console.log('\nüìù –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞ –≤ –ø—Ä–æ–µ–∫—Ç');
    
    const artifactResult = await semanticMemory.addArtifactWithContext(
      'test-session-1',
      {
        type: 'image',
        url: 'https://example.com/logo.png',
        description: '–õ–æ–≥–æ—Ç–∏–ø –∫–æ—Ñ–µ–π–Ω–∏ –≤ –∫–æ—Ä–∏—á–Ω–µ–≤—ã—Ö —Ç–æ–Ω–∞—Ö',
        style: 'realistic'
      }
    );

    console.log('–ê—Ä—Ç–µ—Ñ–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω:', artifactResult);

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    console.log('\nüìù –¢–µ—Å—Ç 3: –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
    
    const suggestions = await semanticMemory.getProactiveSuggestions(
      'test-session-1',
      { hasRecentImages: true }
    );

    console.log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', suggestions.map(s => s.message));

    // –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
    console.log('\nüìù –¢–µ—Å—Ç 4: –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é');
    
    const result2 = await semanticMemory.analyzeCompleteRequest(
      '–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –ª–æ–≥–æ—Ç–∏–ø',
      'test-session-1',
      { hasRecentImages: true }
    );

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:', {
      confidence: result2.confidence,
      compatibility: result2.compatibility?.compatible,
      is_new_project: result2.project_context?.isNewProject
    });

    // –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüìù –¢–µ—Å—Ç 5: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
    
    const stats = semanticMemory.getSystemStatistics();
    console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      queries_processed: stats.queriesProcessed,
      projects_created: stats.projectsCreated,
      predictions_generated: stats.predictionsGenerated,
      knowledge_graph_nodes: stats.knowledge_graph?.totalNodes
    });

    // –¢–µ—Å—Ç 6: –°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏
    console.log('\nüìù –¢–µ—Å—Ç 6: –°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏');
    
    const sessionSummary = semanticMemory.getSessionSummary('test-session-1');
    if (sessionSummary) {
      console.log('–°–≤–æ–¥–∫–∞ —Å–µ—Å—Å–∏–∏:', {
        total_projects: sessionSummary.totalProjects,
        active_project: sessionSummary.activeProjectId ? '–µ—Å—Ç—å' : '–Ω–µ—Ç'
      });
    }

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ –≠—Ç–∞–ø 1 —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSemanticMemory()
  .then(success => {
    if (success) {
      console.log('\n‚ú® –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π');
    } else {
      console.log('\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
    }
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });