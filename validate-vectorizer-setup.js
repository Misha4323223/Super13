#!/usr/bin/env node
/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –≠—Ç–∞–ø—É 5
 */

import fs from 'fs';
import path from 'path';

console.log('üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞...\n');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
const checks = [
  {
    name: 'Package.json scripts',
    check: () => {
      const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
      return pkg.scripts['dev:vectorizer'] && pkg.scripts['dev:all'];
    }
  },
  {
    name: 'Environment variables',
    check: () => {
      const env = fs.readFileSync('.env', 'utf8');
      return env.includes('VECTORIZER_PORT=5006');
    }
  },
  {
    name: 'Vectorizer server file',
    check: () => fs.existsSync('server/vectorizer-server.js')
  },
  {
    name: 'Vectorizer manager',
    check: () => fs.existsSync('server/vectorizer-manager.js')
  },
  {
    name: 'Vectorizer routes',
    check: () => fs.existsSync('server/advanced-vectorizer-routes.js')
  },
  {
    name: 'TypeScript types',
    check: () => fs.existsSync('server/types/vectorizer.d.ts')
  },
  {
    name: 'System health checker',
    check: () => fs.existsSync('server/system-health-checker.js')
  },
  {
    name: 'Start script',
    check: () => fs.existsSync('start-vectorizer.js')
  }
];

let passed = 0;
let total = checks.length;

checks.forEach(({ name, check }) => {
  try {
    const result = check();
    if (result) {
      console.log(`‚úÖ ${name}`);
      passed++;
    } else {
      console.log(`‚ùå ${name}`);
    }
  } catch (error) {
    console.log(`‚ùå ${name} - Error: ${error.message}`);
  }
});

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passed}/${total} –ø—Ä–æ–≤–µ—Ä–æ–∫ –ø—Ä–æ–π–¥–µ–Ω–æ`);

if (passed === total) {
  console.log('\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –≠—Ç–∞–ø—É 5.');
} else {
  console.log('\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã.');
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ routes.ts
try {
  const routes = fs.readFileSync('server/routes.ts', 'utf8');
  const hasVectorizerRoutes = routes.includes('/api/vectorizer');
  const hasSystemHealth = routes.includes('/api/system-health');
  
  console.log(`\nüîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ routes.ts:`);
  console.log(`${hasVectorizerRoutes ? '‚úÖ' : '‚ùå'} Vectorizer routes`);
  console.log(`${hasSystemHealth ? '‚úÖ' : '‚ùå'} System health endpoint`);
} catch (error) {
  console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å routes.ts');
}

console.log('\nüìã –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
console.log('   - –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints');
console.log('   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤');
console.log('   - –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤');