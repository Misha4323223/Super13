/**
 * –ü–†–û–°–¢–û–ô –¢–ï–°–¢ API –ú–û–î–£–õ–Ø –°–û–ó–ù–ê–ù–ò–Ø
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ endpoints –≤ routes.ts
 */

const http = require('http');

async function testConsciousnessAPI() {
  console.log('üß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ú–û–î–£–õ–Ø –°–û–ó–ù–ê–ù–ò–Ø');
  console.log('=' * 60);

  // –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π endpoint /api/conversation/chat
  console.log('\nüîπ –¢–ï–°–¢ 1: POST /api/conversation/chat');
  
  const testData = {
    message: '–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ –¥–∏–∑–∞–π–Ω–∞.',
    context: {
      userId: 'test_api_user',
      tone: 'friendly'
    }
  };

  try {
    const response = await makeAPIRequest('POST', '/api/conversation/chat', testData);
    
    if (response.success) {
      console.log('‚úÖ API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
      console.log(`üìù –û—Ç–≤–µ—Ç: ${response.reply.substring(0, 150)}...`);
      console.log(`üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${response.confidence}`);
      console.log(`‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: ${response.quality}/10`);
      console.log(`‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${response.metadata.processingTime}–º—Å`);
      console.log(`üß† –°–∏—Å—Ç–µ–º–∞: ${response.metadata.systemName}`);
    } else {
      console.log('‚ùå API –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω:', response);
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ API –∑–∞–ø—Ä–æ—Å–∞:', error.message);
  }

  // –¢–µ—Å—Ç 2: Endpoint –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ /api/conversation/evaluate
  console.log('\nüîπ –¢–ï–°–¢ 2: POST /api/conversation/evaluate');
  
  const evaluationData = {
    text: 'BOOOMERANGS AI - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ –≤—ã—à–∏–≤–∫–∏. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞.',
    meta: { type: 'marketing' },
    context: { purpose: 'evaluation' }
  };

  try {
    const evalResponse = await makeAPIRequest('POST', '/api/conversation/evaluate', evaluationData);
    
    if (evalResponse.success) {
      console.log('‚úÖ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–∞');
      console.log(`üìä –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:`, evalResponse.evaluation);
    } else {
      console.log('‚ùå –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞:', evalResponse);
    }

  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:', error.message);
  }

  console.log('\nüèÅ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ó–ê–í–ï–†–®–ï–ù–û');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeAPIRequest(method, path, data) {
  return new Promise((resolve, reject) => {
    const postData = JSON.stringify(data);
    
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    };

    const req = http.request(options, (res) => {
      let responseData = '';

      res.on('data', (chunk) => {
        responseData += chunk;
      });

      res.on('end', () => {
        try {
          const jsonResponse = JSON.parse(responseData);
          resolve(jsonResponse);
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: ${error.message}`));
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    req.write(postData);
    req.end();

    // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
    setTimeout(() => {
      req.destroy();
      reject(new Error('–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞'));
    }, 10000);
  });
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testConsciousnessAPI().then(() => {
    console.log('\n‚ú® –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´');
    process.exit(0);
  }).catch(error => {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–û–í:', error);
    process.exit(1);
  });
}

module.exports = { testConsciousnessAPI };