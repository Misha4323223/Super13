#!/usr/bin/env node
/**
 * –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
 */

import { spawn } from 'child_process';

console.log('üß™ –¢–µ—Å—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 3001...');

const vectorizer = spawn('node', ['server/vectorizer-server.js'], {
  env: { ...process.env, VECTORIZER_PORT: '3001' },
  stdio: 'pipe'
});

let output = '';

vectorizer.stdout.on('data', (data) => {
  output += data.toString();
  process.stdout.write(data);
});

vectorizer.stderr.on('data', (data) => {
  output += data.toString();
  process.stderr.write(data);
});

// –¢–µ—Å—Ç–∏—Ä—É–µ–º API —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
setTimeout(async () => {
  try {
    const response = await fetch('http://localhost:3001/health');
    const data = await response.json();
    console.log('\n‚úÖ API Test —É—Å–ø–µ—à–µ–Ω:', data.status);
  } catch (error) {
    console.log('\n‚ùå API Test failed:', error.message);
  }
}, 3000);

// –ó–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω - –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —Å—Ç–∞–±–∏–ª–µ–Ω');
  vectorizer.kill('SIGTERM');
  process.exit(0);
}, 15000);

vectorizer.on('close', (code) => {
  console.log(`\nüìä –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
  if (code === 0) {
    console.log('‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
  } else {
    console.log('‚ùå –ê–≤–∞—Ä–∏–π–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ');
    console.log('–õ–æ–≥–∏:', output.slice(-500));
  }
});