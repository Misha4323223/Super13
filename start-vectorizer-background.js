/**
 * –ó–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
 */

import { spawn } from 'child_process';
import fs from 'fs';

console.log('üöÄ –ó–∞–ø—É—Å–∫ BOOOMERANGS Vectorizer –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...');

let vectorizerProcess = null;
let restartCount = 0;
const maxRestarts = 10;
const restartDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥

function startVectorizer() {
  if (restartCount >= maxRestarts) {
    console.error(`‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ (${maxRestarts})`);
    process.exit(1);
  }

  console.log(`üîÑ –ó–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${restartCount + 1}/${maxRestarts})`);
  
  vectorizerProcess = spawn('node', ['server/vectorizer-server.js'], {
    stdio: ['pipe', 'pipe', 'pipe'],
    cwd: process.cwd(),
    detached: false
  });

  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
  vectorizerProcess.stdout.on('data', (data) => {
    const message = data.toString().trim();
    if (message) {
      console.log(`[VECTORIZER] ${message}`);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª
      fs.appendFileSync('/tmp/vectorizer-background.log', `${new Date().toISOString()} [OUT] ${message}\n`);
    }
  });

  vectorizerProcess.stderr.on('data', (data) => {
    const message = data.toString().trim();
    if (message) {
      console.error(`[VECTORIZER ERROR] ${message}`);
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ —Ñ–∞–π–ª
      fs.appendFileSync('/tmp/vectorizer-background.log', `${new Date().toISOString()} [ERR] ${message}\n`);
    }
  });

  vectorizerProcess.on('close', (code) => {
    console.log(`‚ö†Ô∏è –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    fs.appendFileSync('/tmp/vectorizer-background.log', `${new Date().toISOString()} [EXIT] Process exited with code ${code}\n`);
    
    restartCount++;
    
    if (code !== 0 && restartCount < maxRestarts) {
      console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ ${restartDelay/1000} —Å–µ–∫—É–Ω–¥...`);
      setTimeout(startVectorizer, restartDelay);
    } else {
      console.log('üõë –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  });

  vectorizerProcess.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞:', error.message);
    fs.appendFileSync('/tmp/vectorizer-background.log', `${new Date().toISOString()} [ERROR] ${error.message}\n`);
  });

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ
  setTimeout(() => {
    if (vectorizerProcess && !vectorizerProcess.killed) {
      restartCount = 0;
      console.log('‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ');
    }
  }, 10000);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
process.on('SIGINT', () => {
  console.log('üì• –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...');
  if (vectorizerProcess) {
    vectorizerProcess.kill('SIGTERM');
  }
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('üì• –ü–æ–ª—É—á–µ–Ω SIGTERM...');
  if (vectorizerProcess) {
    vectorizerProcess.kill('SIGTERM');
  }
  process.exit(0);
});

// –°–æ–∑–¥–∞–µ–º –ª–æ–≥ —Ñ–∞–π–ª
fs.writeFileSync('/tmp/vectorizer-background.log', `${new Date().toISOString()} [START] Background vectorizer started\n`);

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä
startVectorizer();