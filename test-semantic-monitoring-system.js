
/**
 * –≠–¢–ê–ü 6: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */

import { createRequire } from 'module';
const require = createRequire(import.meta.url);

class SemanticTestingSuite {
  constructor() {
    this.testResults = [];
    this.startTime = Date.now();
    this.loadModules();
  }

  loadModules() {
    try {
      this.semanticMemory = require('./server/semantic-memory/index.cjs');
      this.intelligentProcessor = require('./server/intelligent-chat-processor.cjs');
      this.semanticIntegration = require('./server/semantic-integration-layer.cjs');
      this.conversationEngine = require('./server/conversation-engine.cjs');
      this.globalDashboard = require('./server/semantic-monitor-dashboard.cjs').globalDashboard;
      this.globalHealthChecker = require('./server/semantic-healthcheck.cjs').globalHealthChecker;
      
      console.log('‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      throw error;
    }
  }

  async runFullTestSuite() {
    console.log('üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –ù–ê–ë–û–†–ê –¢–ï–°–¢–û–í –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´\n');
    console.log('=' .repeat(60));

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    await this.testModuleAvailability();

    // –¢–µ—Å—Ç 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await this.testProcessingChain();

    // –¢–µ—Å—Ç 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    await this.testMonitoringSystem();

    // –¢–µ—Å—Ç 4: –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await this.testSystemLoad();

    // –¢–µ—Å—Ç 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
    await this.testErrorRecovery();

    // –¢–µ—Å—Ç 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    await this.testIntegration();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    this.generateTestReport();
  }

  async testModuleAvailability() {
    console.log('\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π');
    console.log('-'.repeat(50));

    const modules = [
      'semantic-memory', 'intelligent-processor', 'semantic-integration-layer',
      'natural-language-generator', 'semantic-analyzer', 'meta-semantic-engine',
      'emotional-semantic-matrix', 'conversation-engine', 'project-manager',
      'entity-extractor', 'project-predictor', 'knowledge-graph', 'user-profiler'
    ];

    let passedTests = 0;
    const startTime = Date.now();

    for (const moduleName of modules) {
      try {
        const healthCheck = this.globalHealthChecker.checkSystemHealth();
        const moduleHealth = healthCheck.modules[moduleName];
        
        if (moduleHealth && moduleHealth.status !== 'unavailable') {
          console.log(`‚úÖ ${moduleName}: ${moduleHealth.status}`);
          passedTests++;
        } else {
          console.log(`‚ùå ${moduleName}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
      } catch (error) {
        console.log(`‚ùå ${moduleName}: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ - ${error.message}`);
      }
    }

    const duration = Date.now() - startTime;
    this.recordTest('Module Availability', passedTests, modules.length, duration);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${modules.length} –º–æ–¥—É–ª–µ–π –¥–æ—Å—Ç—É–ø–Ω—ã (${duration}–º—Å)`);
  }

  async testProcessingChain() {
    console.log('\n‚öôÔ∏è –¢–ï–°–¢ 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    console.log('-'.repeat(50));

    const testCases = [
      {
        name: '–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞',
        input: '–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –∫–æ—Ñ–µ–π–Ω–∏',
        expected: 'analysis_consultation'
      },
      {
        name: '–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞',
        input: '–í–µ–∫—Ç–æ—Ä–∏–∑—É–π —ç—Ç–æ—Ç –ª–æ–≥–æ—Ç–∏–ø',
        expected: 'image_generation'
      },
      {
        name: '–í–æ–ø—Ä–æ—Å –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',
        input: '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å –¥–µ–ª–∞—Ç—å?',
        expected: 'general_consultation'
      }
    ];

    let passedTests = 0;
    const chainStartTime = Date.now();

    for (const testCase of testCases) {
      const testStart = Date.now();
      
      try {
        console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.name}`);
        
        // –¢–µ—Å—Ç 1: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å
        const memoryResult = await this.semanticMemory.analyzeCompleteRequest(
          testCase.input,
          'test-session-' + Date.now(),
          { hasRecentImages: false }
        );
        
        console.log(`  üìä –ü–∞–º—è—Ç—å: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${memoryResult.confidence?.toFixed(1) || 'N/A'}%`);
        
        // –¢–µ—Å—Ç 2: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        const processorResult = await this.intelligentProcessor.analyzeUserIntent(
          testCase.input,
          { sessionId: 'test-session-' + Date.now() }
        );
        
        console.log(`  üß† –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${processorResult.category}`);
        
        // –¢–µ—Å—Ç 3: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è
        const integrationResult = await this.semanticIntegration.analyzeWithSemantics(
          testCase.input,
          {
            sessionId: 'test-session-' + Date.now(),
            hasRecentImages: false,
            requestType: 'general'
          }
        );
        
        console.log(`  üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: —Å—Ç–∞—Ç—É—Å ${integrationResult.success ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞'}`);
        
        // –¢–µ—Å—Ç 4: –î–≤–∏–∂–æ–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        const conversationResult = await this.conversationEngine.processUserInput(
          testCase.input,
          'test-session-' + Date.now(),
          {}
        );
        
        console.log(`  üí¨ –†–∞–∑–≥–æ–≤–æ—Ä: ${conversationResult.reply ? '–æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω' : '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}`);
        
        if (memoryResult && processorResult && integrationResult && conversationResult) {
          console.log(`  ‚úÖ –¶–µ–ø–æ—á–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
          passedTests++;
        } else {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–µ–ø–æ—á–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
        }
        
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`);
      }
      
      const testDuration = Date.now() - testStart;
      console.log(`  ‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${testDuration}–º—Å`);
    }

    const totalDuration = Date.now() - chainStartTime;
    this.recordTest('Processing Chain', passedTests, testCases.length, totalDuration);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${testCases.length} —Ü–µ–ø–æ—á–µ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç (${totalDuration}–º—Å)`);
  }

  async testMonitoringSystem() {
    console.log('\nüìä –¢–ï–°–¢ 3: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    console.log('-'.repeat(50));

    let passedTests = 0;
    const monitoringStartTime = Date.now();

    try {
      // –¢–µ—Å—Ç dashboard
      console.log('üéõÔ∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º dashboard...');
      const dashboardData = this.globalDashboard.getDashboardData();
      
      if (dashboardData && dashboardData.modules && dashboardData.system) {
        console.log(`  ‚úÖ Dashboard: ${dashboardData.modules.length} –º–æ–¥—É–ª–µ–π, —Å—Ç–∞—Ç—É—Å ${dashboardData.system.status}`);
        passedTests++;
      } else {
        console.log('  ‚ùå Dashboard: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      }

      // –¢–µ—Å—Ç health checker
      console.log('üè• –¢–µ—Å—Ç–∏—Ä—É–µ–º health checker...');
      const healthData = this.globalHealthChecker.checkSystemHealth();
      
      if (healthData && healthData.modules) {
        console.log(`  ‚úÖ Health Checker: ${Object.keys(healthData.modules).length} –º–æ–¥—É–ª–µ–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ`);
        passedTests++;
      } else {
        console.log('  ‚ùå Health Checker: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      }

      // –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      console.log('üìà –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
      const stats = this.globalDashboard.getSystemStatistics();
      
      if (stats && stats.totalModules > 0) {
        console.log(`  ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.healthyModules}/${stats.totalModules} –∑–¥–æ—Ä–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π`);
        passedTests++;
      } else {
        console.log('  ‚ùå –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö');
      }

    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
    }

    const totalDuration = Date.now() - monitoringStartTime;
    this.recordTest('Monitoring System', passedTests, 3, totalDuration);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞—é—Ç (${totalDuration}–º—Å)`);
  }

  async testSystemLoad() {
    console.log('\n‚ö° –¢–ï–°–¢ 4: –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ');
    console.log('-'.repeat(50));

    const concurrentRequests = 5;
    const requests = [];
    let successfulRequests = 0;
    const loadStartTime = Date.now();

    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º ${concurrentRequests} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...`);

    for (let i = 0; i < concurrentRequests; i++) {
      const request = this.processLoadTestRequest(i);
      requests.push(request);
    }

    try {
      const results = await Promise.allSettled(requests);
      
      results.forEach((result, index) => {
        if (result.status === 'fulfilled') {
          console.log(`  ‚úÖ –ó–∞–ø—Ä–æ—Å ${index + 1}: —É—Å–ø–µ—à–Ω–æ (${result.value}–º—Å)`);
          successfulRequests++;
        } else {
          console.log(`  ‚ùå –ó–∞–ø—Ä–æ—Å ${index + 1}: –æ—à–∏–±–∫–∞ - ${result.reason}`);
        }
      });

    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
    }

    const totalDuration = Date.now() - loadStartTime;
    this.recordTest('Load Testing', successfulRequests, concurrentRequests, totalDuration);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successfulRequests}/${concurrentRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (${totalDuration}–º—Å)`);
  }

  async processLoadTestRequest(requestId) {
    const startTime = Date.now();
    
    const testQueries = [
      '–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞',
      '–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ —Ñ–æ—Ç–æ',
      '–ü–æ–º–æ–≥–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º',
      '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?'
    ];

    const query = testQueries[requestId % testQueries.length];
    const sessionId = `load-test-${requestId}-${Date.now()}`;

    try {
      const result = await this.conversationEngine.processUserInput(query, sessionId, {});
      
      if (result && result.reply) {
        return Date.now() - startTime;
      } else {
        throw new Error('–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–∏—Å—Ç–µ–º—ã');
      }
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${requestId}: ${error.message}`);
    }
  }

  async testErrorRecovery() {
    console.log('\nüõ†Ô∏è –¢–ï–°–¢ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫');
    console.log('-'.repeat(50));

    let passedTests = 0;
    const recoveryStartTime = Date.now();

    // –¢–µ—Å—Ç 1: –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
      const result = await this.conversationEngine.processUserInput(
        '', // –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        'error-test-session',
        {}
      );
      
      if (result && result.reply) {
        console.log('  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å');
        passedTests++;
      } else {
        console.log('  ‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å');
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—É—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ: ${error.message}`);
      passedTests++; // –û–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    }

    // –¢–µ—Å—Ç 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
      const longQuery = '–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø '.repeat(1000); // –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const result = await this.conversationEngine.processUserInput(
        longQuery,
        'long-test-session',
        {}
      );
      
      if (result && result.reply) {
        console.log('  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
        passedTests++;
      }
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback —Ä–µ–∂–∏–º–∞
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º fallback —Ä–µ–∂–∏–º...');
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∑–∞–≤–µ–¥–æ–º–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const result = await this.semanticMemory.analyzeCompleteRequest(
        '—Ç–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞',
        'fallback-test-session',
        { hasRecentImages: false, forceError: true }
      );
      
      if (result && (result.fallback_mode || result.reply)) {
        console.log('  ‚úÖ Fallback —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        passedTests++;
      }
    } catch (error) {
      console.log(`  ‚ö†Ô∏è Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞: ${error.message}`);
      passedTests++; // Fallback –º–æ–∂–µ—Ç –±—Ä–æ—Å–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    }

    const totalDuration = Date.now() - recoveryStartTime;
    this.recordTest('Error Recovery', passedTests, 3, totalDuration);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/3 —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç (${totalDuration}–º—Å)`);
  }

  async testIntegration() {
    console.log('\nüîó –¢–ï–°–¢ 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã');
    console.log('-'.repeat(50));

    let passedTests = 0;
    const integrationStartTime = Date.now();

    // –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ–µ–∫—Ç–æ–º...');
      const sessionId = 'integration-test-' + Date.now();
      
      // –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      const createResult = await this.intelligentProcessor.analyzeUserIntent(
        '–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –ø–µ–∫–∞—Ä–Ω–∏ "–•–ª–µ–±—É—à–∫–æ"',
        { sessionId }
      );
      
      // –®–∞–≥ 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
      const continueResult = await this.intelligentProcessor.analyzeUserIntent(
        '–°–¥–µ–ª–∞–π –µ–≥–æ –±–æ–ª–µ–µ –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º',
        { sessionId, hasRecentImages: true }
      );
      
      // –®–∞–≥ 3: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
      const vectorizeResult = await this.intelligentProcessor.analyzeUserIntent(
        '–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –ª–æ–≥–æ—Ç–∏–ø',
        { sessionId, hasRecentImages: true }
      );
      
      if (createResult.success && continueResult.success && vectorizeResult.success) {
        console.log('  ‚úÖ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–æ–µ–∫—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
        passedTests++;
      } else {
        console.log('  ‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ –ø—Ä–æ–µ–∫—Ç–∞');
      }
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${error.message}`);
    }

    // –¢–µ—Å—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    try {
      console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–Ω –æ—Ç—Ä–∞–∂–∞–µ—Ç—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
      const beforeStats = this.globalDashboard.getSystemStatistics();
      
      await this.conversationEngine.processUserInput(
        '–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        'monitoring-integration-test',
        {}
      );
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      const afterStats = this.globalDashboard.getSystemStatistics();
      
      if (afterStats.totalSuccess >= beforeStats.totalSuccess) {
        console.log('  ‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤');
        passedTests++;
      } else {
        console.log('  ‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤');
      }
      
    } catch (error) {
      console.log(`  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`);
    }

    const totalDuration = Date.now() - integrationStartTime;
    this.recordTest('Integration Tests', passedTests, 2, totalDuration);
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/2 –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞ –ø—Ä–æ—à–ª–∏ (${totalDuration}–º—Å)`);
  }

  recordTest(testName, passed, total, duration) {
    this.testResults.push({
      name: testName,
      passed: passed,
      total: total,
      success_rate: (passed / total) * 100,
      duration: duration,
      timestamp: Date.now()
    });
  }

  generateTestReport() {
    console.log('\n' + '='.repeat(60));
    console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´');
    console.log('='.repeat(60));

    const totalDuration = Date.now() - this.startTime;
    const totalTests = this.testResults.reduce((sum, test) => sum + test.total, 0);
    const totalPassed = this.testResults.reduce((sum, test) => sum + test.passed, 0);
    const overallSuccessRate = (totalPassed / totalTests) * 100;

    console.log(`\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`  ‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${totalDuration}–º—Å`);
    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${totalPassed}/${totalTests}`);
    console.log(`  üìà –û–±—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${overallSuccessRate.toFixed(1)}%`);

    console.log(`\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –¢–ï–°–¢–ê–ú:`);
    this.testResults.forEach(test => {
      const status = test.success_rate >= 80 ? '‚úÖ' : test.success_rate >= 50 ? '‚ö†Ô∏è' : '‚ùå';
      console.log(`  ${status} ${test.name}: ${test.passed}/${test.total} (${test.success_rate.toFixed(1)}%) - ${test.duration}–º—Å`);
    });

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log(`\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:`);
    if (overallSuccessRate >= 90) {
      console.log(`  üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ.`);
    } else if (overallSuccessRate >= 70) {
      console.log(`  ‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ, –µ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è.`);
    } else {
      console.log(`  ‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã.`);
    }

    const failedTests = this.testResults.filter(test => test.success_rate < 80);
    if (failedTests.length > 0) {
      console.log(`\nüîß –û–ë–õ–ê–°–¢–ò –î–õ–Ø –£–õ–£–ß–®–ï–ù–ò–Ø:`);
      failedTests.forEach(test => {
        console.log(`  ‚Ä¢ ${test.name}: –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–≤—ã—Å–∏—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å`);
      });
    }

    console.log('\n' + '='.repeat(60));
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
  try {
    const testSuite = new SemanticTestingSuite();
    await testSuite.runFullTestSuite();
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  runTests();
}

export { SemanticTestingSuite };
