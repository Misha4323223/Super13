
/**
 * –¢–ï–°–¢ –¶–ï–ü–û–ß–ö–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: routes.ts ‚Üí conversation-engine ‚Üí fallback
 */

const { createRequire } = require('module');
const conversationEngine = require('./server/conversation-engine.cjs');

async function testRecoveryChain() {
  console.log('üîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¶–ï–ü–û–ß–ö–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –°–ò–°–¢–ï–ú–´');
  console.log('=' .repeat(60));

  // –¢–µ—Å—Ç 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
  console.log('\nüìã –¢–ï–°–¢ 1: –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã');
  try {
    const result1 = await conversationEngine.processUserInput('–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?', {
      userId: 'test-user',
      sessionId: 'test-session-1'
    });
    console.log('‚úÖ –ù–æ—Ä–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º:', result1.reply.substring(0, 50) + '...');
    console.log('üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', result1.confidence);
    console.log('üéØ –ö–∞—á–µ—Å—Ç–≤–æ:', result1.quality);
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:', error.message);
  }

  // –¢–µ—Å—Ç 2: –†–µ–∂–∏–º —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ–º naturalLanguageGenerator
  console.log('\nüìã –¢–ï–°–¢ 2: –†–µ–∂–∏–º —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–º');
  try {
    // –í—Ä–µ–º–µ–Ω–Ω–æ "–ª–æ–º–∞–µ–º" generateResponse
    const originalGenerateResponse = require('./server/semantic-memory/natural-language-generator.cjs').generateResponse;
    require('./server/semantic-memory/natural-language-generator.cjs').generateResponse = function() {
      throw new Error('–¢–ï–°–¢–û–í–ê–Ø –û–®–ò–ë–ö–ê –ì–ï–ù–ï–†–ê–¢–û–†–ê');
    };

    const result2 = await conversationEngine.processUserInput('–ö—Ç–æ —Ç—ã?', {
      userId: 'test-user',
      sessionId: 'test-session-2'
    });
    
    console.log('‚úÖ Fallback —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω:', result2.reply.substring(0, 50) + '...');
    console.log('üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', result2.confidence);
    console.log('üéØ –ö–∞—á–µ—Å—Ç–≤–æ:', result2.quality);
    console.log('üîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω fallback:', result2.metadata.systemHealth ? '–¥–∞' : '–Ω–µ—Ç');

    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    require('./server/semantic-memory/natural-language-generator.cjs').generateResponse = originalGenerateResponse;
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ fallback —Ä–µ–∂–∏–º–∞:', error.message);
  }

  // –¢–µ—Å—Ç 3: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
  console.log('\nüìã –¢–ï–°–¢ 3: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã');
  try {
    const result3 = await conversationEngine.processUserInput('', {
      userId: null,
      sessionId: undefined
    });
    console.log('‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π fallback:', result3.reply.substring(0, 50) + '...');
    console.log('üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:', result3.confidence);
    console.log('üéØ –ö–∞—á–µ—Å—Ç–≤–æ:', result3.quality);
  } catch (error) {
    console.log('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }

  // –¢–µ—Å—Ç 4: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
  console.log('\nüìã –¢–ï–°–¢ 4: –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤');
  const testQueries = [
    '–¢—ã —É–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞?',
    '–ö—Ç–æ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª?',
    '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?',
    '–ù—É –∏ –ª–∞–¥–Ω–æ',
    '–≠–π —á–µ—Ä—Ç–∏–Ω–∞'
  ];

  for (const query of testQueries) {
    try {
      const result = await conversationEngine.processUserInput(query, {
        userId: 'test-user',
        sessionId: 'test-session-recovery'
      });
      console.log(`‚úÖ "${query}" ‚Üí ${result.reply.substring(0, 30)}...`);
      console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence}, –ö–∞—á–µ—Å—Ç–≤–æ: ${result.quality}`);
    } catch (error) {
      console.log(`‚ùå "${query}" ‚Üí –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }

  console.log('\nüéØ –¶–ï–ü–û–ß–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–ê');
  console.log('=' .repeat(60));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testRecoveryChain().catch(console.error);
