/**
 * Adobe Illustrator Image Trace Engine - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
 * –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã Adobe Illustrator Live Trace
 */

const sharp = require('sharp');
const potrace = require('potrace');

/**
 * Adobe Trace Presets - —Ç–æ—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ –≤ Illustrator
 */
const ADOBE_PRESETS = {
  AUTO: {
    name: 'Auto',
    mode: 'color',
    palette: 'automatic',
    maxColors: 'auto',
    threshold: 'auto',
    paths: 'auto',
    corners: 'auto',
    noise: 'auto'
  },
  
  HIGH_FIDELITY_PHOTO: {
    name: 'High Fidelity Photo',
    mode: 'color',
    palette: 'full',
    maxColors: 30,
    threshold: 128,
    paths: 50,
    corners: 25,
    noise: 1,
    method: 'overlapping'
  },
  
  LOW_FIDELITY_PHOTO: {
    name: 'Low Fidelity Photo', 
    mode: 'color',
    palette: 'limited',
    maxColors: 6,
    threshold: 128,
    paths: 20,
    corners: 75,
    noise: 10,
    method: 'abutting'
  },
  
  THREE_COLORS: {
    name: '3 Colors',
    mode: 'color',
    palette: 'limited', 
    maxColors: 3,
    threshold: 128,
    paths: 25,
    corners: 75,
    noise: 20,
    method: 'abutting'
  },
  
  SIX_COLORS: {
    name: '6 Colors',
    mode: 'color',
    palette: 'limited',
    maxColors: 6, 
    threshold: 128,
    paths: 50,
    corners: 75,
    noise: 10,
    method: 'abutting'
  },
  
  SIXTEEN_COLORS: {
    name: '16 Colors',
    mode: 'color',
    palette: 'limited',
    maxColors: 16,
    threshold: 128, 
    paths: 100,
    corners: 50,
    noise: 5,
    method: 'abutting'
  },
  
  SHADES_OF_GRAY: {
    name: 'Shades of Gray',
    mode: 'grayscale',
    palette: 'limited',
    maxColors: 50,
    threshold: 128,
    paths: 100,
    corners: 50,
    noise: 5,
    method: 'abutting'
  },
  
  BLACK_AND_WHITE_LOGO: {
    name: 'Black and White Logo',
    mode: 'blackwhite',
    palette: 'limited',
    maxColors: 2,
    threshold: 128,
    paths: 25,
    corners: 100,
    noise: 25,
    method: 'abutting'
  },
  
  SKETCHED_ART: {
    name: 'Sketched Art',
    mode: 'color',
    palette: 'limited',
    maxColors: 6,
    threshold: 128,
    paths: 50,
    corners: 20,
    noise: 10,
    method: 'abutting',
    fills: false,
    strokes: true
  },
  
  SILHOUETTES: {
    name: 'Silhouettes',
    mode: 'blackwhite', 
    palette: 'limited',
    maxColors: 1,
    threshold: 128,
    paths: 25,
    corners: 100,
    noise: 100,
    method: 'abutting'
  },
  
  LINE_ART: {
    name: 'Line Art',
    mode: 'blackwhite',
    palette: 'limited', 
    maxColors: 1,
    threshold: 128,
    paths: 100,
    corners: 20,
    noise: 5,
    method: 'abutting',
    fills: false,
    strokes: true
  },
  
  TECHNICAL_DRAWING: {
    name: 'Technical Drawing',
    mode: 'blackwhite',
    palette: 'limited',
    maxColors: 1, 
    threshold: 128,
    paths: 100,
    corners: 100,
    noise: 1,
    method: 'abutting',
    fills: false,
    strokes: true
  }
};

/**
 * –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ Adobe)
 */
async function analyzeImageType(imageBuffer) {
  console.log('üîç Adobe Analysis: –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
  
  const { data, info } = await sharp(imageBuffer)
    .raw()
    .toBuffer({ resolveWithObject: true });
  
  // –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
  const colorMap = new Map();
  let totalPixels = 0;
  
  for (let i = 0; i < data.length; i += info.channels) {
    const r = data[i];
    const g = data[i + 1]; 
    const b = data[i + 2];
    
    // –ö–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const quantR = Math.round(r / 32) * 32;
    const quantG = Math.round(g / 32) * 32;
    const quantB = Math.round(b / 32) * 32;
    
    const colorKey = `${quantR},${quantG},${quantB}`;
    colorMap.set(colorKey, (colorMap.get(colorKey) || 0) + 1);
    totalPixels++;
  }
  
  const uniqueColors = colorMap.size;
  const colorComplexity = uniqueColors / totalPixels;
  
  // –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏
  const grayData = await sharp(imageBuffer)
    .grayscale()
    .raw()
    .toBuffer();
  
  let totalContrast = 0;
  for (let i = 0; i < grayData.length - 1; i++) {
    totalContrast += Math.abs(grayData[i] - grayData[i + 1]);
  }
  const avgContrast = totalContrast / grayData.length;
  
  // –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  let imageType = 'AUTO';
  let recommendedPreset = ADOBE_PRESETS.AUTO;
  
  if (uniqueColors <= 3) {
    imageType = 'SIMPLE_LOGO';
    recommendedPreset = ADOBE_PRESETS.THREE_COLORS;
  } else if (uniqueColors <= 10 && avgContrast > 50) {
    imageType = 'LOGO';  
    recommendedPreset = ADOBE_PRESETS.SIX_COLORS;
  } else if (avgContrast < 20) {
    imageType = 'PHOTO';
    recommendedPreset = ADOBE_PRESETS.LOW_FIDELITY_PHOTO;
  } else if (colorComplexity > 0.5) {
    imageType = 'COMPLEX_PHOTO';
    recommendedPreset = ADOBE_PRESETS.HIGH_FIDELITY_PHOTO;
  } else {
    imageType = 'ILLUSTRATION';
    recommendedPreset = ADOBE_PRESETS.SIXTEEN_COLORS;
  }
  
  console.log(`üìä Adobe Analysis —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${imageType}`);
  console.log(`üé® –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${uniqueColors}`);
  console.log(`üìà –ö–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: ${avgContrast.toFixed(1)}`);
  console.log(`üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–µ—Å–µ—Ç: ${recommendedPreset.name}`);
  
  return {
    imageType,
    uniqueColors,
    avgContrast,
    colorComplexity,
    recommendedPreset
  };
}

/**
 * –≠–¢–ê–ü 2: Adobe Color Preprocessing  
 */
async function preprocessColors(imageBuffer, preset) {
  console.log(`üé® Adobe Preprocessing: ${preset.name}...`);
  
  let processedBuffer = imageBuffer;
  
  // –ì–∞–º–º–∞-–∫–æ—Ä—Ä–µ–∫—Ü–∏—è (Adobe —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
  processedBuffer = await sharp(processedBuffer)
    .gamma(2.2) // Adobe RGB gamma
    .toBuffer();
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å
  if (preset.mode === 'blackwhite') {
    processedBuffer = await sharp(processedBuffer)
      .grayscale()
      .normalize()
      .toBuffer();
  } else if (preset.mode === 'grayscale') {
    processedBuffer = await sharp(processedBuffer)
      .grayscale()
      .modulate({
        brightness: 1.1,
        saturation: 0,
        hue: 0
      })
      .toBuffer();
  } else {
    // –¶–≤–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    processedBuffer = await sharp(processedBuffer)
      .modulate({
        brightness: 1.05,
        saturation: 1.1,
        hue: 0
      })
      .toBuffer();
  }
  
  // Edge-preserving smoothing –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
  if (preset.name.includes('Photo')) {
    processedBuffer = await sharp(processedBuffer)
      .blur(0.3) // Minimal blur –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
      .sharpen(1, 1, 0.5)
      .toBuffer();
  }
  
  console.log('‚úÖ Adobe Preprocessing –∑–∞–≤–µ—Ä—à–µ–Ω');
  return processedBuffer;
}

/**
 * –≠–¢–ê–ü 3: Adobe K-means Color Segmentation
 */
async function performAdobeKMeans(imageBuffer, numColors) {
  console.log(`üßÆ Adobe K-means: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –Ω–∞ ${numColors} —Ü–≤–µ—Ç–æ–≤...`);
  
  const { data, info } = await sharp(imageBuffer)
    .resize(400, 400, { fit: 'inside' })
    .raw()
    .toBuffer({ resolveWithObject: true });
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ (Adobe –º–µ—Ç–æ–¥)
  const centroids = [];
  for (let i = 0; i < numColors; i++) {
    const angle = (i / numColors) * 2 * Math.PI;
    centroids.push({
      r: 128 + 100 * Math.cos(angle),
      g: 128 + 100 * Math.sin(angle), 
      b: 128 + 50 * Math.cos(angle + Math.PI/2)
    });
  }
  
  // K-means –∏—Ç–µ—Ä–∞—Ü–∏–∏
  let maxIterations = 50;
  let convergenceThreshold = 1.0;
  
  for (let iter = 0; iter < maxIterations; iter++) {
    const clusters = Array(numColors).fill().map(() => ({ 
      pixels: [], 
      sumR: 0, 
      sumG: 0, 
      sumB: 0 
    }));
    
    // –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –ø–∏–∫—Å–µ–ª–µ–π –∫ –∫–ª–∞—Å—Ç–µ—Ä–∞–º
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      let minDistance = Infinity;
      let bestCluster = 0;
      
      for (let c = 0; c < numColors; c++) {
        const distance = Math.sqrt(
          Math.pow(r - centroids[c].r, 2) +
          Math.pow(g - centroids[c].g, 2) +
          Math.pow(b - centroids[c].b, 2)
        );
        
        if (distance < minDistance) {
          minDistance = distance;
          bestCluster = c;
        }
      }
      
      clusters[bestCluster].pixels.push({ r, g, b });
      clusters[bestCluster].sumR += r;
      clusters[bestCluster].sumG += g; 
      clusters[bestCluster].sumB += b;
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤
    let totalMovement = 0;
    for (let c = 0; c < numColors; c++) {
      if (clusters[c].pixels.length > 0) {
        const newR = clusters[c].sumR / clusters[c].pixels.length;
        const newG = clusters[c].sumG / clusters[c].pixels.length;
        const newB = clusters[c].sumB / clusters[c].pixels.length;
        
        const movement = Math.sqrt(
          Math.pow(newR - centroids[c].r, 2) +
          Math.pow(newG - centroids[c].g, 2) +
          Math.pow(newB - centroids[c].b, 2)
        );
        
        totalMovement += movement;
        
        centroids[c].r = newR;
        centroids[c].g = newG;
        centroids[c].b = newB;
      }
    }
    
    console.log(`   –ò—Ç–µ—Ä–∞—Ü–∏—è ${iter + 1}: –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—Ç—Ä–æ–∏–¥–æ–≤ = ${totalMovement.toFixed(2)}`);
    
    if (totalMovement < convergenceThreshold) {
      console.log(`   –ö–æ–Ω–≤–µ—Ä–≥–µ–Ω—Ü–∏—è –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iter + 1}`);
      break;
    }
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã
  const finalPalette = centroids.map((centroid, index) => ({
    r: Math.round(centroid.r),
    g: Math.round(centroid.g),
    b: Math.round(centroid.b),
    hex: `#${Math.round(centroid.r).toString(16).padStart(2, '0')}${Math.round(centroid.g).toString(16).padStart(2, '0')}${Math.round(centroid.b).toString(16).padStart(2, '0')}`,
    index
  }));
  
  console.log(`‚úÖ Adobe K-means –∑–∞–≤–µ—Ä—à–µ–Ω: ${finalPalette.length} —Ü–≤–µ—Ç–æ–≤`);
  finalPalette.forEach((color, i) => {
    console.log(`   ${i + 1}. ${color.hex} (RGB: ${color.r}, ${color.g}, ${color.b})`);
  });
  
  return finalPalette;
}

/**
 * –≠–¢–ê–ü 4: Adobe Edge-Aware Color Masking
 */
async function createAdobeColorMask(imageBuffer, targetColor, preset) {
  console.log(`üéØ Adobe Mask: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è ${targetColor.hex}...`);
  
  const { data, info } = await sharp(imageBuffer)
    .raw()
    .toBuffer({ resolveWithObject: true });
  
  // Adobe –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
  let tolerance = 30; // –ë–∞–∑–æ–≤—ã–π Adobe –ø–æ—Ä–æ–≥
  
  if (preset.name.includes('Photo')) {
    tolerance = 45; // –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ñ–æ—Ç–æ
  } else if (preset.name.includes('Logo')) {
    tolerance = 20; // –ñ–µ—Å—Ç–∫–∏–µ –ø–æ—Ä–æ–≥–∏ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤
  }
  
  // –°–æ–∑–¥–∞–Ω–∏–µ Edge Map –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≥—Ä–∞–Ω–∏—Ü
  const edgeMap = await createEdgeMap(imageBuffer);
  
  const maskData = Buffer.alloc(info.width * info.height);
  let pixelCount = 0;
  
  for (let y = 0; y < info.height; y++) {
    for (let x = 0; x < info.width; x++) {
      const pixelIndex = y * info.width + x;
      const dataIndex = pixelIndex * info.channels;
      
      const r = data[dataIndex];
      const g = data[dataIndex + 1];
      const b = data[dataIndex + 2];
      
      // Adobe –ø–µ—Ä—Ü–µ–ø—Ç–∏–≤–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ LAB –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
      const distance = calculatePerceptualDistance(
        { r, g, b },
        { r: targetColor.r, g: targetColor.g, b: targetColor.b }
      );
      
      // Edge-aware tolerance adjustment
      const edgeStrength = edgeMap[pixelIndex] || 0;
      const adaptiveTolerance = tolerance * (1 + edgeStrength * 0.5);
      
      if (distance <= adaptiveTolerance) {
        maskData[pixelIndex] = 255;
        pixelCount++;
      } else {
        maskData[pixelIndex] = 0;
      }
    }
  }
  
  const coverage = (pixelCount / (info.width * info.height)) * 100;
  console.log(`   –ü–æ–∫—Ä—ã—Ç–∏–µ: ${coverage.toFixed(2)}%, –ø–∏–∫—Å–µ–ª–µ–π: ${pixelCount}`);
  
  // Adobe –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
  const processedMask = await applyMorphologicalOperations(
    maskData, 
    info.width, 
    info.height, 
    preset
  );
  
  if (coverage < 0.1) {
    console.log(`   ‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –¥–ª—è ${targetColor.hex}`);
    return null;
  }
  
  return await sharp(processedMask, {
    raw: {
      width: info.width,
      height: info.height,
      channels: 1
    }
  }).png().toBuffer();
}

/**
 * Adobe Edge Detection
 */
async function createEdgeMap(imageBuffer) {
  const grayBuffer = await sharp(imageBuffer)
    .grayscale()
    .raw()
    .toBuffer({ resolveWithObject: true });
  
  const { data, info } = grayBuffer;
  const edgeMap = new Array(info.width * info.height).fill(0);
  
  // Sobel edge detection
  for (let y = 1; y < info.height - 1; y++) {
    for (let x = 1; x < info.width - 1; x++) {
      const idx = y * info.width + x;
      
      // Sobel X kernel
      const gx = 
        -1 * data[(y-1) * info.width + (x-1)] +
        -2 * data[y * info.width + (x-1)] +
        -1 * data[(y+1) * info.width + (x-1)] +
        1 * data[(y-1) * info.width + (x+1)] +
        2 * data[y * info.width + (x+1)] +
        1 * data[(y+1) * info.width + (x+1)];
      
      // Sobel Y kernel  
      const gy =
        -1 * data[(y-1) * info.width + (x-1)] +
        -2 * data[(y-1) * info.width + x] +
        -1 * data[(y-1) * info.width + (x+1)] +
        1 * data[(y+1) * info.width + (x-1)] +
        2 * data[(y+1) * info.width + x] +
        1 * data[(y+1) * info.width + (x+1)];
      
      const magnitude = Math.sqrt(gx * gx + gy * gy) / 255;
      edgeMap[idx] = Math.min(1, magnitude);
    }
  }
  
  return edgeMap;
}

/**
 * Adobe Perceptual Color Distance (CIE Delta E)
 */
function calculatePerceptualDistance(color1, color2) {
  // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è CIE Delta E –¥–ª—è Adobe —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const dr = color1.r - color2.r;
  const dg = color1.g - color2.g;  
  const db = color1.b - color2.b;
  
  // –í–µ—Å–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
  const weightR = 0.30;
  const weightG = 0.59; 
  const weightB = 0.11;
  
  return Math.sqrt(
    weightR * dr * dr +
    weightG * dg * dg +
    weightB * db * db
  );
}

/**
 * Adobe Morphological Operations
 */
async function applyMorphologicalOperations(maskData, width, height, preset) {
  console.log('üîß Adobe Morphology: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...');
  
  let processedMask = Buffer.from(maskData);
  
  // Noise reduction –Ω–∞ –æ—Å–Ω–æ–≤–µ preset.noise
  const noiseThreshold = preset.noise || 10;
  if (noiseThreshold > 0) {
    processedMask = await removeSmallAreas(processedMask, width, height, noiseThreshold);
  }
  
  // Closing operation –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥—ã—Ä
  processedMask = await morphologicalClosing(processedMask, width, height, 2);
  
  // Opening operation –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
  processedMask = await morphologicalOpening(processedMask, width, height, 1);
  
  return processedMask;
}

/**
 * Remove Small Areas (Adobe Noise parameter)
 */
async function removeSmallAreas(maskData, width, height, minArea) {
  const visited = new Array(width * height).fill(false);
  const result = Buffer.alloc(width * height);
  
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      const idx = y * width + x;
      
      if (maskData[idx] === 255 && !visited[idx]) {
        const area = floodFillArea(maskData, visited, x, y, width, height);
        
        if (area >= minArea) {
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å
          floodFillRestore(maskData, result, x, y, width, height);
        }
      }
    }
  }
  
  return result;
}

function floodFillArea(maskData, visited, startX, startY, width, height) {
  const stack = [{ x: startX, y: startY }];
  let area = 0;
  
  while (stack.length > 0) {
    const { x, y } = stack.pop();
    const idx = y * width + x;
    
    if (x < 0 || x >= width || y < 0 || y >= height || 
        visited[idx] || maskData[idx] !== 255) {
      continue;
    }
    
    visited[idx] = true;
    area++;
    
    stack.push({ x: x + 1, y });
    stack.push({ x: x - 1, y });
    stack.push({ x, y: y + 1 });
    stack.push({ x, y: y - 1 });
  }
  
  return area;
}

function floodFillRestore(maskData, result, startX, startY, width, height) {
  const stack = [{ x: startX, y: startY }];
  const visited = new Array(width * height).fill(false);
  
  while (stack.length > 0) {
    const { x, y } = stack.pop();
    const idx = y * width + x;
    
    if (x < 0 || x >= width || y < 0 || y >= height || 
        visited[idx] || maskData[idx] !== 255) {
      continue;
    }
    
    visited[idx] = true;
    result[idx] = 255;
    
    stack.push({ x: x + 1, y });
    stack.push({ x: x - 1, y });
    stack.push({ x, y: y + 1 });
    stack.push({ x, y: y - 1 });
  }
}

/**
 * Morphological Closing
 */
async function morphologicalClosing(maskData, width, height, kernelSize) {
  // Dilation followed by Erosion
  const dilated = await dilate(maskData, width, height, kernelSize);
  return await erode(dilated, width, height, kernelSize);
}

/**
 * Morphological Opening  
 */
async function morphologicalOpening(maskData, width, height, kernelSize) {
  // Erosion followed by Dilation
  const eroded = await erode(maskData, width, height, kernelSize);
  return await dilate(eroded, width, height, kernelSize);
}

async function dilate(maskData, width, height, kernelSize) {
  const result = Buffer.alloc(width * height);
  const halfKernel = Math.floor(kernelSize / 2);
  
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      let maxVal = 0;
      
      for (let ky = -halfKernel; ky <= halfKernel; ky++) {
        for (let kx = -halfKernel; kx <= halfKernel; kx++) {
          const ny = y + ky;
          const nx = x + kx;
          
          if (ny >= 0 && ny < height && nx >= 0 && nx < width) {
            const idx = ny * width + nx;
            maxVal = Math.max(maxVal, maskData[idx]);
          }
        }
      }
      
      result[y * width + x] = maxVal;
    }
  }
  
  return result;
}

async function erode(maskData, width, height, kernelSize) {
  const result = Buffer.alloc(width * height);
  const halfKernel = Math.floor(kernelSize / 2);
  
  for (let y = 0; y < height; y++) {
    for (let x = 0; x < width; x++) {
      let minVal = 255;
      
      for (let ky = -halfKernel; ky <= halfKernel; ky++) {
        for (let kx = -halfKernel; kx <= halfKernel; kx++) {
          const ny = y + ky;
          const nx = x + kx;
          
          if (ny >= 0 && ny < height && nx >= 0 && nx < width) {
            const idx = ny * width + nx;
            minVal = Math.min(minVal, maskData[idx]);
          }
        }
      }
      
      result[y * width + x] = minVal;
    }
  }
  
  return result;
}

/**
 * –≠–¢–ê–ü 5: Adobe Potrace Vectorization
 */
async function adobeVectorize(maskBuffer, color, preset) {
  console.log(`üìê Adobe Vectorize: –¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ ${color.hex}...`);
  
  return new Promise((resolve, reject) => {
    // Adobe Potrace –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const potraceOptions = {
      threshold: preset.threshold || 128,
      turdSize: Math.max(1, Math.floor((preset.noise || 10) / 2)),
      turnPolicy: preset.name.includes('Logo') ? 'majority' : 'minority',
      alphaMax: preset.corners ? (100 - preset.corners) / 100 * 2 : 1.0,
      optCurve: true,
      optTolerance: preset.paths ? preset.paths / 100 * 0.5 : 0.2
    };
    
    console.log(`   Potrace –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:`, potraceOptions);
    
    potrace.trace(maskBuffer, potraceOptions, (err, svg) => {
      if (err) {
        console.error(`   ‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ ${color.hex}:`, err);
        resolve(null);
        return;
      }
      
      if (!svg) {
        console.log(`   ‚ö†Ô∏è –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è ${color.hex}`);
        resolve(null);
        return;
      }
      
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–µ–π –∏–∑ SVG
      const pathMatches = svg.match(/<path[^>]*d="([^"]+)"/g);
      if (!pathMatches || pathMatches.length === 0) {
        console.log(`   ‚ö†Ô∏è –ü—É—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${color.hex}`);
        resolve(null);
        return;
      }
      
      const paths = pathMatches.map(pathMatch => {
        const dMatch = pathMatch.match(/d="([^"]+)"/);
        return dMatch ? dMatch[1] : null;
      }).filter(Boolean);
      
      console.log(`   ‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ ${paths.length} –ø—É—Ç–µ–π –¥–ª—è ${color.hex}`);
      
      resolve({
        color: color,
        paths: paths,
        svg: svg
      });
    });
  });
}

/**
 * –≠–¢–ê–ü 6: Adobe SVG Assembly
 */
function assembleAdobeSVG(vectorizedLayers, metadata, preset) {
  console.log('üîß Adobe Assembly: –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG...');
  
  const { width, height } = metadata;
  
  let svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" 
     xmlns="http://www.w3.org/2000/svg">
  <title>Adobe ${preset.name} (${vectorizedLayers.length} colors)</title>
  <desc>Generated with Adobe Illustrator Image Trace compatible algorithm</desc>
`;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–æ—Ç —Å–≤–µ—Ç–ª–æ–≥–æ –∫ —Ç–µ–º–Ω–æ–º—É)
  const sortedLayers = vectorizedLayers.sort((a, b) => {
    const brightnessA = a.color.r * 0.299 + a.color.g * 0.587 + a.color.b * 0.114;
    const brightnessB = b.color.r * 0.299 + b.color.g * 0.587 + b.color.b * 0.114;
    return brightnessB - brightnessA; // –û—Ç —Å–≤–µ—Ç–ª–æ–≥–æ –∫ —Ç–µ–º–Ω–æ–º—É
  });

  sortedLayers.forEach((layer, index) => {
    svgContent += `  <g id="color-${index + 1}" fill="${layer.color.hex}" stroke="none">\n`;
    
    layer.paths.forEach(path => {
      svgContent += `    <path d="${path}" fill="${layer.color.hex}" opacity="1"/>\n`;
    });
    
    svgContent += `  </g>\n`;
  });

  svgContent += `</svg>`;
  
  console.log(`‚úÖ Adobe Assembly –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${svgContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
  
  return svgContent;
}

/**
 * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: Adobe Trace Engine
 */
async function adobeTrace(imageBuffer, presetName = 'SIX_COLORS') {
  console.log(`üöÄ Adobe Trace Engine: –ó–∞–ø—É—Å–∫ —Å –ø—Ä–µ—Å–µ—Ç–æ–º ${presetName}...`);
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ—Å–µ—Ç
    const preset = ADOBE_PRESETS[presetName] || ADOBE_PRESETS.SIX_COLORS;
    console.log(`‚öôÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Å–µ—Ç: ${preset.name}`);
    
    // –≠–¢–ê–ü 1: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const analysis = await analyzeImageType(imageBuffer);
    
    // –≠–¢–ê–ü 2: –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    const preprocessedBuffer = await preprocessColors(imageBuffer, preset);
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = await sharp(preprocessedBuffer).metadata();
    
    // –≠–¢–ê–ü 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤
    let targetColors = preset.maxColors;
    if (preset.maxColors === 'auto') {
      targetColors = Math.min(16, Math.max(3, Math.floor(analysis.uniqueColors / 3)));
    }
    
    console.log(`üé® –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤: ${targetColors}`);
    
    // –≠–¢–ê–ü 4: K-means —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    const colorPalette = await performAdobeKMeans(preprocessedBuffer, targetColors);
    
    // –≠–¢–ê–ü 5: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–æ–∫ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    const vectorizedLayers = [];
    
    for (let i = 0; i < colorPalette.length; i++) {
      const color = colorPalette[i];
      console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–∞ ${i + 1}/${colorPalette.length}: ${color.hex}`);
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É
      const mask = await createAdobeColorMask(preprocessedBuffer, color, preset);
      
      if (mask) {
        // –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ–º –º–∞—Å–∫—É
        const vectorResult = await adobeVectorize(mask, color, preset);
        
        if (vectorResult && vectorResult.paths && vectorResult.paths.length > 0) {
          vectorizedLayers.push(vectorResult);
          console.log(`   ‚úÖ –°–ª–æ–π –¥–æ–±–∞–≤–ª–µ–Ω: ${vectorResult.paths.length} –ø—É—Ç–µ–π`);
        }
      }
    }
    
    if (vectorizedLayers.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Å–ª–æ—è');
    }
    
    // –≠–¢–ê–ü 6: –°–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ SVG
    const finalSVG = assembleAdobeSVG(vectorizedLayers, metadata, preset);
    
    console.log(`üéâ Adobe Trace –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!`);
    console.log(`   üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ü–≤–µ—Ç–æ–≤: ${vectorizedLayers.length}`);
    console.log(`   üìÑ –†–∞–∑–º–µ—Ä SVG: ${(finalSVG.length / 1024).toFixed(1)}KB`);
    
    return {
      success: true,
      svgContent: finalSVG,
      preset: preset.name,
      colorsProcessed: vectorizedLayers.length,
      fileSize: finalSVG.length,
      analysis: analysis
    };
    
  } catch (error) {
    console.error('‚ùå Adobe Trace Engine –æ—à–∏–±–∫–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
 */
module.exports = {
  adobeTrace,
  ADOBE_PRESETS,
  analyzeImageType,
  performAdobeKMeans,
  createAdobeColorMask,
  adobeVectorize,
  assembleAdobeSVG
};