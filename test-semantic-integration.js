/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º (–≠—Ç–∞–ø 2)
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

import { createRequire } from 'module';
const require = createRequire(import.meta.url);

async function testSemanticIntegration() {
  console.log('üîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (–≠—Ç–∞–ø 2)...\n');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    const intelligentProcessor = require('./server/intelligent-chat-processor.cjs');
    
    console.log('‚úÖ –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');

    // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ª–æ–≥–æ—Ç–∏–ø–∞
    console.log('\nüìù –¢–µ—Å—Ç 1: –ê–Ω–∞–ª–∏–∑ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç—å—é - "–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –∫–æ—Ñ–µ–π–Ω–∏"');
    
    const result1 = await intelligentProcessor.analyzeAndExecute(
      '–°–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –∫–æ—Ñ–µ–π–Ω–∏',
      { sessionId: 'test-integration-1' }
    );

    console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', {
      success: result1.success,
      category: result1.category,
      semantic_context: result1.semanticContext ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      project_detected: result1.semanticContext?.project ? '–¥–∞' : '–Ω–µ—Ç',
      predictions: result1.semanticContext?.predictions?.length || 0
    });

    if (result1.success && result1.semanticContext) {
      console.log('üéØ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:', {
        project_title: result1.semanticContext.project?.title,
        confidence: result1.semanticContext.confidence,
        enhanced_prompt: result1.semanticContext.enhanced_prompt?.substring(0, 50) + '...'
      });
    }

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è
    console.log('\nüìù –¢–µ—Å—Ç 2: –ê–Ω–∞–ª–∏–∑ –æ–±–æ–≥–∞—â–µ–Ω–∏—è - "–ù–∞—Ä–∏—Å—É–π –¥—Ä–∞–∫–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—Ç–∞"');
    
    const result2 = await intelligentProcessor.analyzeUserIntent(
      '–ù–∞—Ä–∏—Å—É–π –¥—Ä–∞–∫–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–Ω—Ç–∞',
      { sessionId: 'test-integration-2' }
    );

    console.log('–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ:', {
      original_category: result2.category,
      confidence: result2.confidence,
      semantic_override: result2.semanticOverride || false,
      enhanced_query: result2.enhancedQuery ? '–¥–∞' : '–Ω–µ—Ç',
      semantic_context: result2.semanticContext ? '–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    });

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
    console.log('\nüìù –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤');
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
    const semanticMemory = require('./server/semantic-memory/index.cjs');
    const artifactResult = await semanticMemory.addArtifactWithContext(
      'test-integration-1',
      {
        type: 'image',
        url: 'https://example.com/logo.png',
        description: '–õ–æ–≥–æ—Ç–∏–ø –∫–æ—Ñ–µ–π–Ω–∏ –≤ –∫–æ—Ä–∏—á–Ω–µ–≤—ã—Ö —Ç–æ–Ω–∞—Ö',
        style: 'realistic',
        metadata: {
          generation_type: 'test_integration'
        }
      }
    );

    console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞:', artifactResult ? '—É—Å–ø–µ—à–Ω–æ' : '–æ—à–∏–±–∫–∞');

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    console.log('\nüìù –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π');
    
    const suggestions = await semanticMemory.getProactiveSuggestions(
      'test-integration-1',
      { hasRecentImages: true, lastAction: 'image_generation' }
    );

    console.log('–ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:', {
      count: suggestions.length,
      suggestions: suggestions.map(s => s.message?.substring(0, 30) + '...')
    });

    // –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞
    console.log('\nüìù –¢–µ—Å—Ç 5: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ - "–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –ª–æ–≥–æ—Ç–∏–ø"');
    
    const result3 = await intelligentProcessor.analyzeUserIntent(
      '–í–µ–∫—Ç–æ—Ä–∏–∑—É–π –ª–æ–≥–æ—Ç–∏–ø',
      { 
        sessionId: 'test-integration-1',
        hasRecentImages: true 
      }
    );

    console.log('–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:', {
      category: result3.category,
      confidence: result3.confidence,
      project_continuity: result3.semanticContext?.project ? '–æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞' : '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞',
      predictions: result3.semanticContext?.predictions?.length || 0
    });

    // –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    console.log('\nüìù –¢–µ—Å—Ç 6: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
    
    const stats = semanticMemory.getSystemStatistics();
    console.log('–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
      queries_processed: stats.queriesProcessed,
      projects_created: stats.projectsCreated,
      predictions_generated: stats.predictionsGenerated,
      knowledge_graph_nodes: stats.knowledge_graph?.totalNodes,
      initialized: stats.initialized
    });

    console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('‚úÖ –≠—Ç–∞–ø 2 (–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º) –∑–∞–≤–µ—Ä—à–µ–Ω');
    
    return true;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    console.error('–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error.stack);
    return false;
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
testSemanticIntegration()
  .then(success => {
    if (success) {
      console.log('\n‚ú® –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º');
      console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏');
    } else {
      console.log('\n‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏');
    }
    process.exit(success ? 0 : 1);
  })
  .catch(error => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error);
    process.exit(1);
  });