/**
 * –û—Ç–ª–∞–¥–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ü–µ–Ω –Ω–∞ —Å–∞–π—Ç–µ booomerangs.ru
 */

async function testPriceDetection() {
  console.log('üîç === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –î–ï–¢–ï–ö–¶–ò–ò –¶–ï–ù ===\n');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º HTML
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞—é HTML —Å —Å–∞–π—Ç–∞...');
    const response = await fetch('https://booomerangs.ru');
    const html = await response.text();
    
    console.log(`üìä –†–∞–∑–º–µ—Ä HTML: ${html.length} —Å–∏–º–≤–æ–ª–æ–≤\n`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const pricePatterns = [
      { name: '–ü—Ä–æ—Å—Ç–æ–π —Ä—É–±–ª—å', pattern: /(\d{1,5})\s*—Ä(?:\.|\b)/gi },
      { name: '–†—É–±–ª–∏/—Ä—É–±–ª–µ–π', pattern: /(\d{1,5})\s*—Ä—É–±(?:–ª–µ–π|–ª—è|–ª—å)?\b/gi },
      { name: '–°–∏–º–≤–æ–ª ‚ÇΩ', pattern: /(\d{1,5})\s*‚ÇΩ/gi },
      { name: '–° —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏', pattern: /(\d{1,3}(?:\s\d{3})+)\s*—Ä(?:\.|\b)/gi },
      { name: '–° –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º', pattern: /—Ü–µ–Ω–∞[:\s]*(\d{1,5})\s*—Ä/gi }
    ];
    
    console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω:\n');
    
    let totalFound = 0;
    pricePatterns.forEach(({name, pattern}) => {
      const matches = html.match(pattern) || [];
      console.log(`${name}: ${matches.length} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π`);
      if (matches.length > 0) {
        console.log(`  –ü—Ä–∏–º–µ—Ä—ã: ${matches.slice(0, 3).join(', ')}`);
      }
      totalFound += matches.length;
    });
    
    console.log(`\nüìà –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${totalFound} —Ü–µ–Ω\n`);
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ü–µ–Ω –≤ HTML
    console.log('üîç –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ü–µ–Ω –∏–∑ –≤–µ–±-–≤–µ—Ä—Å–∏–∏:');
    const expectedPrices = ['5990', '3090', '6290'];
    
    expectedPrices.forEach(price => {
      const found = html.includes(price);
      console.log(`  ${price}: ${found ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
      
      if (found) {
        // –ù–∞–π–¥–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ —Ü–µ–Ω—ã
        const index = html.indexOf(price);
        const context = html.substring(index - 50, index + 50);
        console.log(`    –ö–æ–Ω—Ç–µ–∫—Å—Ç: ...${context}...`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ JavaScript –∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω
    console.log('\nüöÄ –ê–Ω–∞–ª–∏–∑ JavaScript –∑–∞–≥—Ä—É–∑–∫–∏:');
    const hasJS = html.includes('<script');
    const hasTildaJS = html.includes('tilda');
    const hasAjax = html.includes('ajax') || html.includes('fetch');
    
    console.log(`  JavaScript –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${hasJS ? '‚úÖ' : '‚ùå'}`);
    console.log(`  Tilda CMS: ${hasTildaJS ? '‚úÖ' : '‚ùå'}`);
    console.log(`  AJAX/Fetch –∑–∞–ø—Ä–æ—Å—ã: ${hasAjax ? '‚úÖ' : '‚ùå'}`);
    
    if (hasTildaJS) {
      console.log('\nüí° –í–´–í–û–î: –¶–µ–Ω—ã –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Tilda CMS');
      console.log('   –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏–±–æ –ø–∞—Ä—Å–∏–Ω–≥ JavaScript, –ª–∏–±–æ –ø–æ–∏—Å–∫ API endpoints');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

testPriceDetection();