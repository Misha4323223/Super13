/**
 * –¢–ï–°–¢ –ê–í–¢–û–ù–û–ú–ù–û–ô –°–ò–°–¢–ï–ú–´ –§–ê–ó–´ 1
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */

console.log('=== –¢–ï–°–¢ –ê–í–¢–û–ù–û–ú–ù–û–ô –°–ò–°–¢–ï–ú–´ –§–ê–ó–´ 1 ===');

async function testAutonomousSystem() {
  try {
    console.log('\nüß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...');
    
    // –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
    console.log('\nüìù –¢–µ—Å—Ç 1: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞');
    try {
      const nlg = require('./server/semantic-memory/natural-language-generator.cjs');
      
      const testSemanticResult = {
        intent: 'explanation',
        mainTopic: '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        subTopics: ['–∫–∞—á–µ—Å—Ç–≤–æ', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã'],
        contextDetails: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        technicalLevel: 0.7,
        emotionalContext: { enthusiasm: 0.6 }
      };
      
      const response = await nlg.generateResponse(testSemanticResult, {
        messages: [{ content: '–ß—Ç–æ —Ç–∞–∫–æ–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è?', sender: 'user' }]
      });
      
      if (response.success) {
        console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìã –¢–∏–ø –æ—Ç–≤–µ—Ç–∞: ${response.metadata?.responseType || 'unknown'}`);
        console.log(`üìè –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: ${response.response?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`üéØ –®–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${response.metadata?.processingSteps?.length || 0}`);
      } else {
        console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç:', response.error);
      }
    } catch (nlgError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–µ —è–∑—ã–∫–∞:', nlgError.message);
    }
    
    // –¢–µ—Å—Ç 2: –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∏—è
    console.log('\nüéì –¢–µ—Å—Ç 2: –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∏—è');
    try {
      const learning = require('./server/semantic-memory/autonomous-learning-engine.cjs');
      
      const testInteraction = {
        id: 'test-interaction-1',
        query: '–ö–∞–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?',
        response: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è - —ç—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.',
        responseTime: 1500,
        userEngagement: 0.8,
        readingTime: 5000,
        followUpQuestions: 1,
        conversationContinued: true
      };
      
      const learningResult = await learning.learnFromInteraction(testInteraction, {
        semanticResult: { category: 'vectorization', confidence: 0.9 }
      });
      
      if (learningResult.success) {
        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìä –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –æ–±—É—á–µ–Ω–∏—è: ${learningResult.queueSize}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', learningResult.error);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
      const stats = learning.getLearningStats();
      console.log(`üìà –í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –≤ –∞–Ω–∞–ª–∏–∑–µ: ${stats.effectivenessStats?.totalInteractions || 0}`);
      console.log(`üß† –ö–æ–Ω—Ü–µ–ø—Ü–∏–π –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π: ${stats.knowledgeStats?.totalConcepts || 0}`);
      console.log(`üéØ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: ${stats.systemHealth?.overall || 'unknown'}`);
      
    } catch (learningError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –æ–±—É—á–µ–Ω–∏—è:', learningError.message);
    }
    
    // –¢–µ—Å—Ç 3: –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
    console.log('\nüîÆ –¢–µ—Å—Ç 3: –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞');
    try {
      const predictive = require('./server/semantic-memory/predictive-system.cjs');
      
      const testAction = {
        type: 'vectorization_request',
        timestamp: Date.now(),
        context: { projectId: 'test-project', phase: 'design' }
      };
      
      const testContext = {
        type: 'vectorization',
        projectId: 'test-project',
        currentTask: 'image processing',
        userId: 'test-user'
      };
      
      const predictions = await predictive.predict('test-user', testAction, testContext);
      
      if (predictions.success) {
        console.log('‚úÖ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üéØ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: ${predictions.nextLikelyActions?.length || 0}`);
        console.log(`üí° –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${predictions.proactiveRecommendations?.length || 0}`);
        console.log(`‚ö†Ô∏è –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: ${predictions.potentialIssues?.length || 0}`);
        console.log(`üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π: ${predictions.optimizations?.length || 0}`);
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', predictions.error);
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
      const predictiveStats = predictive.getPredictiveStats();
      console.log(`üíæ –†–∞–∑–º–µ—Ä –∫—ç—à–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: ${predictiveStats.cacheSize}`);
      console.log(`üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${predictiveStats.activeUsers}`);
      console.log(`üìã –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${predictiveStats.queueSize}`);
      
    } catch (predictiveError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ:', predictiveError.message);
    }
    
    // –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('\nüîó –¢–µ—Å—Ç 4: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
    try {
      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –≤ smart-router...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
      const smartRouter = require('./server/smart-router.js');
      console.log('‚úÖ Smart-router –∑–∞–≥—Ä—É–∂–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
      const semanticIntegration = require('./server/semantic-integration-layer.cjs');
      console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞');
      
      console.log('‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã');
      
    } catch (integrationError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', integrationError.message);
    }
    
    // –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    console.log('\nüé¨ –¢–µ—Å—Ç 5: –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ —Ü–∏–∫–ª–∞');
    try {
      console.log('–°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –∑–∞–ø—Ä–æ—Å ‚Üí –∞–Ω–∞–ª–∏–∑ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚Üí –æ–±—É—á–µ–Ω–∏–µ ‚Üí –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ');
      
      // 1. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (—Å–∏–º—É–ª—è—Ü–∏—è)
      const semanticResult = {
        intent: 'help_request',
        category: 'vectorization',
        mainTopic: '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞',
        confidence: 0.85,
        technicalLevel: 0.6,
        emotionalContext: { curiosity: 0.7 }
      };
      
      // 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
      const nlg = require('./server/semantic-memory/natural-language-generator.cjs');
      const generatedResponse = await nlg.generateResponse(semanticResult, {
        messages: [{ content: '–ü–æ–º–æ–≥–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø', sender: 'user' }]
      });
      
      if (generatedResponse.success) {
        console.log('‚úÖ –®–∞–≥ 1: –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–Ω–æ–º–Ω–æ');
        
        // 3. –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
        const learning = require('./server/semantic-memory/autonomous-learning-engine.cjs');
        const interactionData = {
          id: 'full-cycle-test',
          query: '–ü–æ–º–æ–≥–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø',
          response: generatedResponse.response,
          responseTime: 1200,
          userEngagement: 0.9
        };
        
        await learning.learnFromInteraction(interactionData, { semanticResult });
        console.log('‚úÖ –®–∞–≥ 2: –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–∏–ª–∞—Å—å –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏');
        
        // 4. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
        const predictive = require('./server/semantic-memory/predictive-system.cjs');
        const currentAction = { type: 'vectorization_help', timestamp: Date.now() };
        const predictions = await predictive.predict('full-cycle-user', currentAction, {
          type: 'vectorization',
          currentTask: 'logo processing'
        });
        
        if (predictions.success) {
          console.log('‚úÖ –®–∞–≥ 3: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã');
          console.log('üéâ –ü–û–õ–ù–´–ô –ê–í–¢–û–ù–û–ú–ù–´–ô –¶–ò–ö–õ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
        } else {
          console.log('‚ö†Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å, –Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç');
        }
      } else {
        console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }
      
    } catch (cycleError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–æ–ª–Ω–æ–º —Ü–∏–∫–ª–µ:', cycleError.message);
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
    console.log('='.repeat(50));
    
    try {
      const learning = require('./server/semantic-memory/autonomous-learning-engine.cjs');
      const predictive = require('./server/semantic-memory/predictive-system.cjs');
      
      const learningStats = learning.getLearningStats();
      const predictiveStats = predictive.getPredictiveStats();
      
      console.log(`üéì –°–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è:`);
      console.log(`   - –ó–¥–æ—Ä–æ–≤—å–µ: ${learningStats.systemHealth?.overall || 'unknown'}`);
      console.log(`   - –†–∞–∑–º–µ—Ä –æ—á–µ—Ä–µ–¥–∏: ${learningStats.learningQueue?.size || 0}`);
      
      console.log(`üîÆ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞:`);
      console.log(`   - –ö—ç—à: ${predictiveStats.cacheSize} –∑–∞–ø–∏—Å–µ–π`);
      console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${predictiveStats.activeUsers}`);
      console.log(`   - –ó–¥–æ—Ä–æ–≤—å–µ: ${predictiveStats.systemHealth?.overall || 'unknown'}`);
      
      console.log(`\nüåü –†–ï–ó–£–õ–¨–¢–ê–¢: –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –§–∞–∑—ã 1 –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!`);
      
    } catch (statsError) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', statsError.message);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testAutonomousSystem().then(() => {
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
}).catch(error => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞:', error);
});