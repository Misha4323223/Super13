/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ–≤–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∏–º–µ–Ω–Ω–æ —Ç–µ—Å—Ç—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥—è—Ç
 */

const { analyzeSemantics } = require('./server/semantic-memory/semantic-analyzer.cjs');
const { processRequest } = require('./server/semantic-memory/index.cjs');

async function testFailingCases() {
  console.log('üîç –ü–û–ò–°–ö –ü–û–°–õ–ï–î–ù–ï–ì–û –ü–†–û–í–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ê\n');
  
  // –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  const allTests = [
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ó–µ–º–ª—è",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ú–∞—Ä—Å", 
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —ç–∫–æ–Ω–æ–º–∏–∫—É",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –±–∏–æ–ª–æ–≥–∏—é",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —Ñ–∏–∑–∏–∫—É",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é",
    "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –Ω–∞—É–∫—É"
  ];
  
  let failed = 0;
  let passed = 0;
  
  for (const testQuery of allTests) {
    console.log(`üîç –¢–ï–°–¢: "${testQuery}"`);
    
    try {
      // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
      const semanticResult = await analyzeSemantics(testQuery);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const isKnowledgeRequest = semanticResult.semantic_cluster?.name === 'knowledge_request';
      const confidence = semanticResult.confidence;
      
      if (isKnowledgeRequest && confidence >= 80) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–∞
        const response = await processRequest(testQuery, {
          semanticAnalysis: semanticResult
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–∞
        const responseText = response.response;
        const isContentful = responseText.length > 100;
        const hasTopicMention = responseText.toLowerCase().includes(
          testQuery.toLowerCase().replace('—Ä–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ ', '').replace('—Ä–∞—Å—Å–∫–∞–∂–∏ –æ ', '')
        );
        
        if (isContentful && hasTopicMention) {
          console.log(`‚úÖ –ü–†–û–®–ï–õ (${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
          passed++;
        } else {
          console.log(`‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø - –ø–ª–æ—Ö–æ–π –æ—Ç–≤–µ—Ç (${responseText.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
          console.log(`üìÑ –û—Ç–≤–µ—Ç: ${responseText.substring(0, 100)}...`);
          failed++;
        }
      } else {
        console.log(`‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø - –Ω–µ–≤–µ—Ä–Ω–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: ${semanticResult.semantic_cluster?.name} (${confidence}%)`);
        failed++;
      }
    } catch (error) {
      console.log(`‚ùå –ü–†–û–í–ê–õ–ò–õ–°–Ø - –æ—à–∏–±–∫–∞: ${error.message}`);
      failed++;
    }
    
    console.log();
  }
  
  console.log(`üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}/${allTests.length} (${Math.round(passed/allTests.length*100)}%)`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}/${allTests.length}`);
  
  if (failed === 0) {
    console.log('üéâ –ò–î–ï–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢ - –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!');
  } else {
    console.log(`üîß –ù–£–ñ–ù–û –ò–°–ü–†–ê–í–ò–¢–¨: ${failed} —Ç–µ—Å—Ç–æ–≤`);
  }
}

testFailingCases().catch(console.error);