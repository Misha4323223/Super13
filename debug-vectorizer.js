/**
 * –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º
 */

const express = require('express');
const multer = require('multer');
const path = require('path');
const fs = require('fs').promises;
const sharp = require('sharp');

const app = express();
const upload = multer({ dest: 'temp/' });

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
async function debugColorExtraction(imageBuffer) {
  console.log('üî¨ DEBUG: –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤');
  
  try {
    const { data, info } = await sharp(imageBuffer)
      .resize(200, 200)
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    console.log(`üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${info.width}x${info.height}, –∫–∞–Ω–∞–ª–æ–≤: ${info.channels}`);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ü–≤–µ—Ç–∞
    const colorMap = new Map();
    
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏
      if (info.channels === 4 && data[i + 3] < 128) continue;
      
      const colorKey = `${r},${g},${b}`;
      colorMap.set(colorKey, (colorMap.get(colorKey) || 0) + 1);
    }
    
    console.log(`üé® –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${colorMap.size}`);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    const sortedColors = Array.from(colorMap.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([colorKey, count]) => {
        const [r, g, b] = colorKey.split(',').map(Number);
        const hex = `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`;
        return { r, g, b, hex, count };
      });
    
    console.log('üéØ –¢–æ–ø-10 —Ü–≤–µ—Ç–æ–≤:');
    sortedColors.forEach((color, i) => {
      console.log(`  ${i + 1}. ${color.hex} (RGB: ${color.r},${color.g},${color.b}) - ${color.count} –ø–∏–∫—Å–µ–ª–µ–π`);
    });
    
    return sortedColors.slice(0, 4);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤:', error);
    return [];
  }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ SVG
function createDebugSVG(colors, width = 400, height = 400) {
  console.log('üé® –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π SVG —Å —Ü–≤–µ—Ç–∞–º–∏:', colors.map(c => c.hex));
  
  let svg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="${width}" height="${height}" viewBox="0 0 ${width} ${height}" xmlns="http://www.w3.org/2000/svg">
  <title>Debug Color Test (${colors.length} colors)</title>
  <desc>–û—Ç–ª–∞–¥–æ—á–Ω—ã–π SVG –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–≤–µ—Ç–æ–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞</desc>
`;

  // –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—ã–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ü–≤–µ—Ç–∞
  const rectHeight = height / colors.length;
  
  colors.forEach((color, i) => {
    const y = i * rectHeight;
    svg += `  <g id="color-${i + 1}">
    <rect x="0" y="${y}" width="${width}" height="${rectHeight}" fill="${color.hex}" stroke="none"/>
    <text x="10" y="${y + rectHeight/2}" fill="${color.r + color.g + color.b > 384 ? '#000' : '#fff'}" font-family="Arial" font-size="14">
      ${color.hex} (${color.count} px)
    </text>
  </g>
`;
  });
  
  svg += '</svg>';
  return svg;
}

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ—Ç–ª–∞–¥–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.post('/debug-colors', upload.single('image'), async (req, res) => {
  try {
    console.log('üöÄ –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ª–∞–¥–∫—É —Ü–≤–µ—Ç–æ–≤');
    
    if (!req.file) {
      return res.status(400).json({ error: '–ù–µ—Ç —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    }
    
    const imageBuffer = await fs.readFile(req.file.path);
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${req.file.filename}, —Ä–∞–∑–º–µ—Ä: ${imageBuffer.length} –±–∞–π—Ç`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
    const colors = await debugColorExtraction(imageBuffer);
    
    if (colors.length === 0) {
      return res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ü–≤–µ—Ç–∞' });
    }
    
    // –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π SVG
    const svg = createDebugSVG(colors);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const outputPath = path.join('output/vectorizer', `debug_${Date.now()}.svg`);
    await fs.writeFile(outputPath, svg);
    
    console.log(`‚úÖ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π SVG —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputPath}`);
    
    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    await fs.unlink(req.file.path);
    
    res.json({
      success: true,
      colors: colors.length,
      file: path.basename(outputPath),
      url: `/output/vectorizer/${path.basename(outputPath)}`,
      extracted_colors: colors
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏:', error);
    res.status(500).json({ error: error.message });
  }
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/output', express.static('output'));

const PORT = 5007;
app.listen(PORT, () => {
  console.log(`üî¨ –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üì° –¢–µ—Å—Ç: curl -X POST http://localhost:${PORT}/debug-colors -F "image=@dragon_embroidery.jpg"`);
});