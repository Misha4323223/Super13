/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç conversation-engine –¥–ª—è ChatGPT-—É—Ä–æ–≤–Ω—è
 */

const conversationEngine = require('./server/conversation-engine.cjs');

async function testFixedSemanticSystem() {
  console.log('üéØ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´');
  console.log('=' .repeat(60));

  const testCases = [
    {
      name: '–¢–ï–°–¢ 1: –ü—Ä–æ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å',
      input: '–†–∞—Å—Å–∫–∞–∂–∏ –æ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏',
      expected: '–î–æ–ª–∂–µ–Ω –¥–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–∏, –∞ –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã'
    },
    {
      name: '–¢–ï–°–¢ 2: –í–æ–ø—Ä–æ—Å –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö',
      input: '–ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å',
      expected: '–î–æ–ª–∂–µ–Ω –¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ BOOOMERANGS'
    },
    {
      name: '–¢–ï–°–¢ 3: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å',
      input: '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
      expected: '–î–æ–ª–∂–µ–Ω –¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ'
    }
  ];

  for (const testCase of testCases) {
    console.log(`\nüß™ ${testCase.name}`);
    console.log(`üìù –í–æ–ø—Ä–æ—Å: "${testCase.input}"`);
    console.log(`üéØ –û–∂–∏–¥–∞–µ—Ç—Å—è: ${testCase.expected}`);
    
    try {
      const startTime = Date.now();
      const result = await conversationEngine.processUserInput(testCase.input, {
        userId: 'test_user',
        sessionId: 'test_session'
      });
      
      const processingTime = Date.now() - startTime;
      
      console.log(`\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ (${processingTime}–º—Å):`);
      console.log(`ü§ñ –û—Ç–≤–µ—Ç: "${result.reply?.substring(0, 200)}${result.reply?.length > 200 ? '...' : ''}"`);
      console.log(`üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence}`);
      console.log(`üéØ –ö–∞—á–µ—Å—Ç–≤–æ: ${result.quality}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –ù–ï fallback –æ—Ç–≤–µ—Ç
      const isFallback = result.reply?.includes('–•–æ—Ä–æ—à–∏–π –≤–æ–ø—Ä–æ—Å!') || 
                        result.reply?.includes('–û —á–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ') ||
                        result.reply?.includes('–ì–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ');
      
      if (isFallback) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –æ—Ç–≤–µ—Ç—ã!');
      } else {
        console.log('‚úÖ –£–°–ü–ï–•: –°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!');
      }
      
    } catch (error) {
      console.error(`‚ùå –û–®–ò–ë–ö–ê: ${error.message}`);
    }
    
    console.log('‚îÄ'.repeat(60));
  }
  
  console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testFixedSemanticSystem()
  .then(() => {
    console.log('\nüèÅ –í–°–ï –¢–ï–°–¢–´ –í–´–ü–û–õ–ù–ï–ù–´');
    process.exit(0);
  })
  .catch(error => {
    console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error);
    process.exit(1);
  });