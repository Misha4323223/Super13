/**
 * –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ó–µ–º–ª—è"
 */

async function directSemanticTest() {
  console.log('üß™ –ü–†–Ø–ú–û–ô –¢–ï–°–¢ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –°–ò–°–¢–ï–ú–´');
  console.log('=' .repeat(60));
  console.log('üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ó–µ–º–ª—è"');
  console.log('');

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–ª–æ–π...');
    const semanticIntegrationLayer = require('./server/semantic-integration-layer.cjs');
    
    // –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const testQuery = "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ó–µ–º–ª—è";
    const testContext = {
      sessionId: 'direct-test-session',
      conversationHistory: [],
      hasRecentImages: false,
      userPreferences: {},
      chatContext: {}
    };

    console.log('üîç –≠–¢–ê–ü 1: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
    console.log('=' .repeat(40));

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    const analysisStart = Date.now();
    const analysisResult = await semanticIntegrationLayer.analyzeWithSemantics(testQuery, testContext);
    const analysisTime = Date.now() - analysisStart;

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞: ${analysisTime}–º—Å`);
    console.log(`üìä shouldUseSemantic: ${analysisResult.shouldUseSemantic}`);
    console.log(`üìä reason: ${analysisResult.reason}`);
    console.log(`üìä confidence: ${analysisResult.confidence}`);

    if (analysisResult.semanticResult) {
      console.log(`üìä intent: ${analysisResult.semanticResult.intent}`);
      console.log(`üìä category: ${analysisResult.semanticResult.category}`);
      console.log(`üìä fallback: ${analysisResult.semanticResult.fallback || false}`);
      
      if (analysisResult.semanticResult.semantic_analysis) {
        console.log(`üìä query_type: ${analysisResult.semanticResult.semantic_analysis.query_type}`);
        console.log(`üìä dialog_category: ${analysisResult.semanticResult.semantic_analysis.dialog_category}`);
      }
    }

    console.log('\nüß† –≠–¢–ê–ü 2: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞');
    console.log('=' .repeat(40));

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const responseStart = Date.now();
    const responseResult = await semanticIntegrationLayer.generateSmartResponse(testQuery, testContext);
    const responseTime = Date.now() - responseStart;

    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${responseTime}–º—Å`);
    
    if (responseResult && responseResult.response) {
      console.log(`üìù –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: –î–ê`);
      console.log(`üîß –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä: ${responseResult.metadata?.generatedBy || 'unknown'}`);
      console.log(`üìä –ú–æ–¥—É–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã: ${responseResult.metadata?.modulesUsed?.length || 0}`);
      
      console.log('\nüìÑ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ –°–ò–°–¢–ï–ú–´:');
      console.log('=' .repeat(60));
      console.log(responseResult.response);
      console.log('=' .repeat(60));
    } else {
      console.log('‚ùå –û—Ç–≤–µ—Ç –ù–ï –ø–æ–ª—É—á–µ–Ω');
      if (responseResult?.error) {
        console.log(`üî¥ –û—à–∏–±–∫–∞: ${responseResult.error}`);
      }
    }

    // –¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    console.log('\nüîß –≠–¢–ê–ü 3: –¢–µ—Å—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
    console.log('=' .repeat(40));

    // –ó–∞–≥—Ä—É–∂–∞–µ–º conversation engine –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    try {
      const conversationEngine = require('./server/conversation-engine.cjs');
      
      console.log('üß† –¢–µ—Å—Ç–∏—Ä—É–µ–º conversation-engine...');
      const engineResult = await conversationEngine.processUserInput(testQuery, {
        sessionId: 'direct-test-engine',
        userId: 'test-user',
        conversationHistory: []
      });

      if (engineResult && engineResult.reply) {
        console.log('‚úÖ Conversation Engine —Ä–∞–±–æ—Ç–∞–µ—Ç');
        console.log(`üìä –ö–∞—á–µ—Å—Ç–≤–æ: ${engineResult.quality}`);
        console.log(`üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${engineResult.confidence}`);
        console.log(`üìù –ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: "${engineResult.reply.substring(0, 100)}..."`);
      } else {
        console.log('‚ùå Conversation Engine –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª');
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ Conversation Engine: ${error.message}`);
    }

    // –ò—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢');
    console.log('=' .repeat(60));
    
    const totalTime = analysisTime + responseTime;
    console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalTime}–º—Å`);
    
    if (analysisResult.shouldUseSemantic && responseResult?.response) {
      console.log('üéâ –¢–ï–°–¢ –£–°–ü–ï–®–ï–ù');
      console.log('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É');
      
      if (!analysisResult.semanticResult?.fallback) {
        console.log('‚úÖ Emergency fallback –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è');
      } else {
        console.log('‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback —Ä–µ–∂–∏–º');
      }
    } else {
      console.log('‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–®–ï–õ');
      console.log('üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞');
    }

  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  directSemanticTest().catch(console.error);
}

module.exports = { directSemanticTest };