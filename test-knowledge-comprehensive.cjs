/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∑–Ω–∞–Ω–∏–µ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–µ–º
 */

const semanticAnalyzer = require('./server/semantic-memory/semantic-analyzer.cjs');
const naturalLanguageGenerator = require('./server/semantic-memory/natural-language-generator.cjs');

async function testKnowledgeQuery(query, expectedTopic) {
  console.log(`\nüîç –¢–ï–°–¢: "${query}"`);
  
  // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
  const semanticResult = semanticAnalyzer.analyzeSemantics(query);
  const isKnowledgeRequest = semanticResult.semantic_cluster?.name === 'knowledge_request';
  
  console.log(`üìä –°–µ–º–∞–Ω—Ç–∏–∫–∞: ${semanticResult.semantic_cluster?.name}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${semanticResult.confidence}%`);
  
  if (!isKnowledgeRequest) {
    console.log('‚ùå –ù–ï –û–ü–†–ï–î–ï–õ–ï–ù –∫–∞–∫ –∑–Ω–∞–Ω–∏–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    return false;
  }
  
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
  const context = {
    semanticAnalysis: semanticResult.semantic_analysis,
    isKnowledgeRequest: true
  };
  
  const response = await naturalLanguageGenerator.generateResponse(query, context);
  
  const hasContent = response.response && response.response.length > 100;
  const hasExpectedTopic = expectedTopic ? response.response.toLowerCase().includes(expectedTopic.toLowerCase()) : true;
  
  console.log(`üìù –û—Ç–≤–µ—Ç: ${hasContent ? '‚úÖ –°–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π' : '‚ùå –ö–æ—Ä–æ—Ç–∫–∏–π'} (${response.response?.length || 0} —Å–∏–º–≤–æ–ª–æ–≤)`);
  console.log(`üéØ –¢–µ–º–∞ "${expectedTopic}": ${hasExpectedTopic ? '‚úÖ –ù–∞–π–¥–µ–Ω–∞' : '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞
  if (response.response) {
    console.log(`üìÑ –ü—Ä–µ–≤—å—é: ${response.response.substring(0, 150)}...`);
  }
  
  return hasContent && hasExpectedTopic;
}

async function runComprehensiveTest() {
  console.log('üß† –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ó–ù–ê–ù–ò–ï–í–û–ô –°–ò–°–¢–ï–ú–´\n');
  
  const testCases = [
    { query: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ó–µ–º–ª—è", expectedTopic: "–ó–µ–º–ª—è" },
    { query: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ú–∞—Ä—Å", expectedTopic: "–ú–∞—Ä—Å" },
    { query: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é", expectedTopic: "–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è" },
    { query: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫–æ—Å–º–æ—Å", expectedTopic: "–∫–æ—Å–º–æ—Å" },
    { query: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∏—Å—Ç–æ—Ä–∏—é –†–æ—Å—Å–∏–∏", expectedTopic: "–∏—Å—Ç–æ—Ä–∏—è" },
    { query: "–ß—Ç–æ —Ç–∞–∫–æ–µ –Ω–∞—É–∫–∞", expectedTopic: "–Ω–∞—É–∫–∞" },
    { query: "–û–±—ä—è—Å–Ω–∏ —Ñ–∏–∑–∏–∫—É", expectedTopic: "—Ñ–∏–∑–∏–∫–∞" },
    { query: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –∫—É–ª—å—Ç—É—Ä—É", expectedTopic: "–∫—É–ª—å—Ç—É—Ä–∞" },
    { query: "–ß—Ç–æ –∑–Ω–∞–µ—à—å –æ –º–µ–¥–∏—Ü–∏–Ω–µ", expectedTopic: "–º–µ–¥–∏—Ü–∏–Ω–∞" },
    { query: "–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ —ç–∫–æ–Ω–æ–º–∏–∫—É", expectedTopic: "—ç–∫–æ–Ω–æ–º–∏–∫–∞" }
  ];
  
  let passed = 0;
  let total = testCases.length;
  
  for (const testCase of testCases) {
    const result = await testKnowledgeQuery(testCase.query, testCase.expectedTopic);
    if (result) passed++;
  }
  
  console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:`);
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ: ${passed}/${total} (${Math.round(passed/total*100)}%)`);
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${total - passed}/${total}`);
  
  if (passed === total) {
    console.log(`\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ - –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!`);
  } else if (passed >= total * 0.8) {
    console.log(`\nüëç –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –•–û–†–û–®–û - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
  } else {
    console.log(`\n‚ö†Ô∏è –ù–£–ñ–ù–´ –î–û–†–ê–ë–û–¢–ö–ò - –º–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
  }
  
  return passed === total;
}

runComprehensiveTest().catch(console.error);