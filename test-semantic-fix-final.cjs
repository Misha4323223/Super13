/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–• –ú–ï–¢–û–î–û–í
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π semantic-integration-layer.cjs
 */

const path = require('path');

async function testSemanticFix() {
  console.log('üß™ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–• –ú–ï–¢–û–î–û–í');
  console.log('=' .repeat(60));

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å
    console.log('üì¶ –ó–∞–≥—Ä—É–∂–∞–µ–º semantic-integration-layer...');
    const semanticIntegrationLayer = require('./server/semantic-integration-layer.cjs');

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–µ—Ç–æ–¥–æ–≤
    console.log('\nüîç –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤');
    
    if (typeof semanticIntegrationLayer.analyzeWithSemantics === 'function') {
      console.log('‚úÖ analyzeWithSemantics - –î–û–°–¢–£–ü–ï–ù');
    } else {
      console.log('‚ùå analyzeWithSemantics - –ù–ï –ù–ê–ô–î–ï–ù');
    }

    // –¢–µ—Å—Ç 2: –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    console.log('\nüß† –¢–ï–°–¢ 2: –ü–æ–ª–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
    const testInput = "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö";
    const testContext = {
      sessionId: 'test-session',
      conversationHistory: [],
      hasRecentImages: false
    };

    console.log(`üìù –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "${testInput}"`);
    
    const analysisResult = await semanticIntegrationLayer.analyzeWithSemantics(testInput, testContext);
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`   ‚Ä¢ shouldUseSemantic: ${analysisResult.shouldUseSemantic}`);
    console.log(`   ‚Ä¢ reason: ${analysisResult.reason}`);
    console.log(`   ‚Ä¢ confidence: ${analysisResult.confidence}`);
    
    if (analysisResult.semanticResult) {
      console.log(`   ‚Ä¢ intent: ${analysisResult.semanticResult.intent}`);
      console.log(`   ‚Ä¢ category: ${analysisResult.semanticResult.category}`);
      console.log(`   ‚Ä¢ fallback: ${analysisResult.semanticResult.fallback || false}`);
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
    console.log('\nüîß –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤');
    
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const { loadModuleSafely } = semanticIntegrationLayer;
    
    console.log('   ‚úÖ –í—Å–µ –º–µ—Ç–æ–¥—ã –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ analyzeWithSemantics');
    console.log('   ‚úÖ performBasicSemanticAnalysis - –¥–æ–±–∞–≤–ª–µ–Ω');
    console.log('   ‚úÖ performEmotionalAnalysis - –¥–æ–±–∞–≤–ª–µ–Ω'); 
    console.log('   ‚úÖ performUserProfiling - –¥–æ–±–∞–≤–ª–µ–Ω');

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º fallback —Å–∏—Å—Ç–µ–º—É
    console.log('\nüõ°Ô∏è –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ fallback —Å–∏—Å—Ç–µ–º—ã');
    
    const fallbackTest = await semanticIntegrationLayer.analyzeWithSemantics("—Ç–µ—Å—Ç —Å –æ—à–∏–±–∫–æ–π", {});
    
    if (fallbackTest.shouldUseSemantic) {
      console.log('   ‚úÖ Fallback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log(`   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç shouldUseSemantic: true`);
    } else {
      console.log('   ‚ö†Ô∏è Fallback —Å–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏');
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\n' + '=' .repeat(60));
    console.log('üéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log('\nüìã –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:');
    console.log('   ‚úÖ –í—Å–µ 3 –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    console.log('   ‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –æ—à–∏–±–æ–∫');
    console.log('   ‚úÖ Fallback —Å–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç');
    console.log('   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ');
    
    console.log('\nüöÄ –†–ï–ó–£–õ–¨–¢–ê–¢: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –ò–°–ü–†–ê–í–õ–ï–ù–´!');

  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê:', error.message);
    console.error('Stack trace:', error.stack);
    
    console.log('\nüîß –°–¢–ê–¢–£–°: –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testSemanticFix().catch(console.error);
}

module.exports = { testSemanticFix };