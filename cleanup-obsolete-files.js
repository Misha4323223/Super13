
/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã
 */

const fs = require('fs').promises;
const path = require('path');

const obsoletePatterns = [
  '*-old.cjs',
  '*-old.js', 
  '*.backup',
  '*-broken.cjs',
  'test-*.js',
  'debug-*.cjs'
];

const protectedFiles = [
  'test-semantic-memory.js',
  'test-semantic-integration.js',
  'test-meta-semantic-integration.js'
];

async function findObsoleteFiles(dir) {
  const obsoleteFiles = [];
  
  try {
    const files = await fs.readdir(dir, { withFileTypes: true });
    
    for (const file of files) {
      const fullPath = path.join(dir, file.name);
      
      if (file.isDirectory()) {
        const subFiles = await findObsoleteFiles(fullPath);
        obsoleteFiles.push(...subFiles);
      } else {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const isObsolete = obsoletePatterns.some(pattern => {
          const regex = new RegExp(pattern.replace('*', '.*'));
          return regex.test(file.name);
        });
        
        // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        const isProtected = protectedFiles.includes(file.name);
        
        if (isObsolete && !isProtected) {
          const stats = await fs.stat(fullPath);
          const daysSinceModified = (Date.now() - stats.mtime.getTime()) / (1000 * 60 * 60 * 24);
          
          obsoleteFiles.push({
            path: fullPath,
            name: file.name,
            size: stats.size,
            lastModified: stats.mtime,
            daysSinceModified: Math.round(daysSinceModified)
          });
        }
      }
    }
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ ${dir}:`, error.message);
  }
  
  return obsoleteFiles;
}

async function cleanupObsoleteFiles() {
  console.log('üßπ –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã...\n');
  
  const directories = [
    './server',
    './server/semantic-memory',
    './'
  ];
  
  let totalFiles = 0;
  let totalSize = 0;
  
  for (const dir of directories) {
    console.log(`üìÇ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${dir}`);
    const obsoleteFiles = await findObsoleteFiles(dir);
    
    if (obsoleteFiles.length === 0) {
      console.log('‚úÖ –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ\n');
      continue;
    }
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${obsoleteFiles.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Ñ–∞–π–ª–æ–≤:\n`);
    
    for (const file of obsoleteFiles) {
      console.log(`  üóëÔ∏è  ${file.name}`);
      console.log(`      üìç ${file.path}`);
      console.log(`      üì¶ ${(file.size / 1024).toFixed(1)} KB`);
      console.log(`      üìÖ ${file.daysSinceModified} –¥–Ω–µ–π –Ω–∞–∑–∞–¥\n`);
      
      totalFiles++;
      totalSize += file.size;
    }
  }
  
  console.log(`üìä –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: ${totalFiles} —Ñ–∞–π–ª–æ–≤, ${(totalSize / 1024 / 1024).toFixed(2)} MB`);
  console.log('\nüîß –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ: node cleanup-obsolete-files.js --delete');
}

// –ó–∞–ø—É—Å–∫ –æ—á–∏—Å—Ç–∫–∏
if (require.main === module) {
  cleanupObsoleteFiles().catch(console.error);
}

module.exports = { findObsoleteFiles, cleanupObsoleteFiles };
