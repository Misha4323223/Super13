/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
 */

import fetch from 'node-fetch';

const VECTORIZER_BASE_URL = 'http://localhost:5006/api/vectorizer';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
 */
async function checkVectorizerHealth() {
  try {
    const response = await fetch('http://localhost:5006/health');
    return response.ok;
  } catch (error) {
    console.error('–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    return false;
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function isVectorizationRequest(message) {
  const vectorizeKeywords = [
    '–≤–µ–∫—Ç–æ—Ä–∏–∑—É–π', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–≤ –≤–µ–∫—Ç–æ—Ä', '–≤ svg', '–≤ eps', '–≤ pdf',
    '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ svg', '—Å–¥–µ–ª–∞–π –≤–µ–∫—Ç–æ—Ä–Ω—ã–º', '–ø—Ä–µ–æ–±—Ä–∞–∑—É–π –≤ –≤–µ–∫—Ç–æ—Ä',
    '–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä 5006', '–≤–µ–∫—Ç–æ—Ä 5006',
    'vectorize', 'convert to svg', 'make vector', 'to vector'
  ];
  
  const lowerMessage = message.toLowerCase();
  return vectorizeKeywords.some(keyword => lowerMessage.includes(keyword));
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function extractImageUrl(message, context = {}) {
  // –ü–æ–∏—Å–∫ URL –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
  const urlRegex = /(https?:\/\/[^\s]+\.(jpg|jpeg|png|gif|bmp|webp))/gi;
  const match = message.match(urlRegex);
  
  if (match) {
    return match[0];
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (context.lastGeneratedImage) {
    return context.lastGeneratedImage;
  }
  
  return null;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
 */
function parseVectorizationParams(message) {
  const params = {
    format: 'svg', // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    quality: 'standard',
    colors: 'auto',
    complexity: 'medium'
  };
  
  const lowerMessage = message.toLowerCase();
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
  if (lowerMessage.includes('eps')) params.format = 'eps';
  if (lowerMessage.includes('pdf')) params.format = 'pdf';
  if (lowerMessage.includes('ai')) params.format = 'ai';
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
  if (lowerMessage.includes('–≤—ã—Å–æ–∫') || lowerMessage.includes('–¥–µ—Ç–∞–ª—å–Ω') || 
      lowerMessage.includes('–ø—Ä–æ—Ñ–µ—Å—Å') || lowerMessage.includes('hd')) {
    params.quality = 'high';
  }
  if (lowerMessage.includes('–±—ã—Å—Ç—Ä') || lowerMessage.includes('–ø—Ä–æ—Å—Ç–æ–π')) {
    params.quality = 'fast';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤
  if (lowerMessage.includes('–º–∞–ª–æ —Ü–≤–µ—Ç') || lowerMessage.includes('—É–ø—Ä–æ—Å—Ç')) {
    params.colors = 'limited';
  }
  if (lowerMessage.includes('–º–Ω–æ–≥–æ —Ü–≤–µ—Ç') || lowerMessage.includes('–ø–æ–ª–Ω')) {
    params.colors = 'full';
  }
  
  return params;
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function processVectorization(imageUrl, params, userMessage) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
    const isHealthy = await checkVectorizerHealth();
    if (!isHealthy) {
      return {
        success: false,
        error: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      };
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π endpoint –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    let endpoint = '/convert';
    if (params.quality === 'high') {
      endpoint = '/professional';
    }
    
    const requestBody = {
      imageUrl: imageUrl,
      outputFormat: params.format,
      quality: params.quality,
      colorMode: params.colors,
      complexity: params.complexity,
      userPrompt: userMessage
    };
    
    console.log(`üé® –ó–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${imageUrl} -> ${params.format}`);
    
    const response = await fetch(`${VECTORIZER_BASE_URL}${endpoint}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });
    
    if (!response.ok) {
      throw new Error(`–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${response.status} ${response.statusText}`);
    }
    
    const result = await response.json();
    
    return {
      success: true,
      data: result,
      vectorUrl: result.vectorUrl || result.outputUrl,
      format: params.format,
      processingTime: result.processingTime,
      fileSize: result.fileSize
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      error: `–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`
    };
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function generateVectorizationResponse(result, originalMessage) {
  if (!result.success) {
    return {
      text: `‚ùå ${result.error}`,
      hasImage: false
    };
  }
  
  const formatName = {
    'svg': 'SVG (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞)',
    'eps': 'EPS (PostScript)',
    'pdf': 'PDF (–≤–µ–∫—Ç–æ—Ä–Ω—ã–π)',
    'ai': 'Adobe Illustrator'
  }[result.format] || result.format.toUpperCase();
  
  let responseText = `‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n`;
  responseText += `üìÑ –§–æ—Ä–º–∞—Ç: ${formatName}\n`;
  
  if (result.processingTime) {
    responseText += `‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${result.processingTime}–º—Å\n`;
  }
  
  if (result.fileSize) {
    responseText += `üì¶ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(result.fileSize / 1024)}KB\n`;
  }
  
  responseText += `\nüîó –í–µ–∫—Ç–æ—Ä–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è`;
  
  return {
    text: responseText,
    hasImage: true,
    imageUrl: result.vectorUrl,
    downloadUrl: result.vectorUrl,
    format: result.format
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —á–∞—Ç–µ
 */
async function handleVectorizationRequest(message, context = {}) {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const imageUrl = extractImageUrl(message, context);
    
    if (!imageUrl) {
      return {
        success: false,
        response: {
          text: '‚ùå –î–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.',
          hasImage: false
        }
      };
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const params = parseVectorizationParams(message);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const result = await processVectorization(imageUrl, params, message);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const response = generateVectorizationResponse(result, message);
    
    return {
      success: result.success,
      response: response,
      vectorUrl: result.vectorUrl,
      processingData: result.data
    };
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    return {
      success: false,
      response: {
        text: `‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`,
        hasImage: false
      }
    };
  }
}

export {
  isVectorizationRequest,
  handleVectorizationRequest,
  checkVectorizerHealth,
  extractImageUrl,
  parseVectorizationParams
};