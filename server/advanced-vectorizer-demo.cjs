/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */

const express = require('express');
const fs = require('fs').promises;
const path = require('path');
const advancedVectorizer = require('../advanced-vectorizer.cjs');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function createDemoImage() {
  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ SVG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const demoSvg = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="400" height="300" xmlns="http://www.w3.org/2000/svg">
  <rect width="400" height="300" fill="#f0f8ff"/>
  <circle cx="200" cy="150" r="80" fill="#ff6b6b" stroke="#333" stroke-width="3"/>
  <rect x="150" y="100" width="100" height="100" fill="#4ecdc4" stroke="#333" stroke-width="2"/>
  <text x="200" y="250" text-anchor="middle" font-family="Arial" font-size="24" fill="#333">
    DEMO IMAGE
  </text>
</svg>`;
  
  const demoPath = path.join(__dirname, '..', 'temp', 'demo-image.svg');
  await fs.writeFile(demoPath, demoSvg, 'utf8');
  
  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º SVG –≤ PNG –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const sharp = require('sharp');
  const pngPath = path.join(__dirname, '..', 'temp', 'demo-image.png');
  
  try {
    await sharp(Buffer.from(demoSvg))
      .png()
      .toFile(pngPath);
    
    return pngPath;
  } catch (error) {
    console.log('Sharp –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π SVG');
    return demoPath;
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function demonstrateBasicVectorization() {
  console.log('\nüéØ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ë–ê–ó–û–í–û–ô –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò ===');
  
  try {
    const demoImagePath = await createDemoImage();
    const imageBuffer = await fs.readFile(demoImagePath);
    
    console.log(`üìÅ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${demoImagePath}`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const result = await advancedVectorizer.vectorizeImage(
      imageBuffer,
      'demo-basic',
      {
        quality: 'standard',
        outputFormat: 'svg'
      }
    );
    
    if (result.success) {
      console.log('‚úÖ –ë–∞–∑–æ–≤–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${result.filename}`);
      console.log(`üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–∏–ø: ${result.detectedType}`);
      console.log(`üìè –†–∞–∑–º–µ—Ä SVG: ${result.svgContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result.error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function demonstrateProfessionalVectorization() {
  console.log('\nüöÄ === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–†–û–§–ï–°–°–ò–û–ù–ê–õ–¨–ù–û–ô –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–ò ===');
  
  try {
    const demoImagePath = await createDemoImage();
    const imageBuffer = await fs.readFile(demoImagePath);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const result = await advancedVectorizer.professionalVectorize(
      imageBuffer,
      'demo-professional',
      {
        quality: 'premium',
        formats: ['svg', 'eps'],
        generatePreviews: true,
        optimizeFor: 'print',
        includeMetadata: true
      }
    );
    
    if (result.success) {
      console.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      console.log(`üìä –°–æ–∑–¥–∞–Ω–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤: ${result.main.formats.length}`);
      
      if (result.previews && result.previews.length > 0) {
        console.log(`üîç –ü—Ä–µ–≤—å—é –∫–∞—á–µ—Å—Ç–≤: ${result.previews.length}`);
        result.previews.forEach(preview => {
          console.log(`  - ${preview.qualityName}: ${preview.description}`);
        });
      }
      
      if (result.optimization && result.optimization.success) {
        console.log(`‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: ${result.optimization.compressionRatio}% —Å–∂–∞—Ç–∏–µ`);
      }
      
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result.error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */
async function demonstrateContentAnalysis() {
  console.log('\nüîç === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ù–ê–õ–ò–ó–ê –ö–û–ù–¢–ï–ù–¢–ê ===');
  
  try {
    const demoImagePath = await createDemoImage();
    const imageBuffer = await fs.readFile(demoImagePath);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const analysis = await advancedVectorizer.detectContentType(imageBuffer);
    
    console.log('‚úÖ –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω');
    console.log(`üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–π —Ç–∏–ø: ${analysis.type}`);
    console.log(`üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(analysis.confidence * 100)}%`);
    console.log(`üí° –û–ø–∏—Å–∞–Ω–∏–µ: ${analysis.description}`);
    console.log(`‚öôÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: ${analysis.recommendedSettings.quality}`);
    console.log(`üìÅ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${analysis.recommendedSettings.outputFormat}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:', error);
    return false;
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
async function demonstrateMultiFormat() {
  console.log('\nüé® === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ú–ù–û–ì–û–§–û–†–ú–ê–¢–ù–û–ô –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò ===');
  
  try {
    const demoImagePath = await createDemoImage();
    const imageBuffer = await fs.readFile(demoImagePath);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const result = await advancedVectorizer.multiFormatVectorize(
      imageBuffer,
      'demo-multiformat',
      {
        quality: 'premium',
        formats: ['svg', 'eps', 'pdf']
      }
    );
    
    if (result.success) {
      console.log('‚úÖ –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
      console.log(`üìä ${result.message}`);
      
      result.formats.forEach(format => {
        console.log(`  üìÅ ${format.format.toUpperCase()}: ${format.description}`);
        console.log(`     –§–∞–π–ª: ${format.filename}`);
      });
      
      return true;
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result.error);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    return false;
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
async function demonstrateOptimization() {
  console.log('\n‚ö° === –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò ===');
  
  try {
    const testSvg = `<svg width="100" height="100" xmlns="http://www.w3.org/2000/svg">
      <rect width="100" height="100" fill="red" opacity="0.5" />
      <circle cx="50" cy="50" r="30" fill="blue" stroke-width="5" />
    </svg>`;
    
    const optimizations = ['web', 'print', 'logo', 'icon'];
    
    for (const usage of optimizations) {
      const result = await advancedVectorizer.optimizeForUsage(testSvg, usage);
      
      if (result.success) {
        console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è ${usage}:`);
        console.log(`  üìä –°–∂–∞—Ç–∏–µ: ${result.compressionRatio}%`);
        console.log(`  üìè –†–∞–∑–º–µ—Ä –¥–æ: ${result.originalSize} –±–∞–π—Ç`);
        console.log(`  üìè –†–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ: ${result.optimizedSize} –±–∞–π—Ç`);
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è ${usage}:`, result.error);
      }
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    return false;
  }
}

/**
 * –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
 */
async function runFullDemo() {
  console.log('üé™ === –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –ü–†–û–î–í–ò–ù–£–¢–û–ì–û –í–ï–ö–¢–û–†–ò–ó–ê–¢–û–†–ê ===');
  console.log(`‚è∞ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: ${new Date().toLocaleString()}`);
  
  const results = {
    basic: false,
    professional: false,
    analysis: false,
    multiformat: false,
    optimization: false
  };
  
  // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
  const outputDir = path.join(__dirname, '..', 'output');
  const tempDir = path.join(__dirname, '..', 'temp');
  
  try {
    await fs.access(outputDir);
  } catch {
    await fs.mkdir(outputDir, { recursive: true });
  }
  
  try {
    await fs.access(tempDir);
  } catch {
    await fs.mkdir(tempDir, { recursive: true });
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  results.basic = await demonstrateBasicVectorization();
  results.professional = await demonstrateProfessionalVectorization();
  results.analysis = await demonstrateContentAnalysis();
  results.multiformat = await demonstrateMultiFormat();
  results.optimization = await demonstrateOptimization();
  
  // –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
  console.log('\nüìä === –ò–¢–û–ì–ò –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò ===');
  const successCount = Object.values(results).filter(Boolean).length;
  const totalTests = Object.keys(results).length;
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤: ${successCount}/${totalTests}`);
  console.log(`üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round(successCount/totalTests*100)}%`);
  
  Object.entries(results).forEach(([test, success]) => {
    console.log(`  ${success ? '‚úÖ' : '‚ùå'} ${test}: ${success ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù'}`);
  });
  
  console.log(`‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${new Date().toLocaleString()}`);
  
  return {
    success: successCount === totalTests,
    results,
    summary: {
      total: totalTests,
      passed: successCount,
      failed: totalTests - successCount,
      percentage: Math.round(successCount/totalTests*100)
    }
  };
}

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */
async function quickIntegrationTest() {
  console.log('‚ö° === –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò ===');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    const exports = Object.keys(advancedVectorizer);
    console.log(`üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏: ${exports.join(', ')}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    const qualities = Object.keys(advancedVectorizer.QUALITY_PRESETS);
    const formats = Object.keys(advancedVectorizer.OUTPUT_FORMATS);
    const types = Object.keys(advancedVectorizer.CONTENT_TYPES);
    
    console.log(`üéöÔ∏è –ö–∞—á–µ—Å—Ç–≤–∞: ${qualities.join(', ')}`);
    console.log(`üìÅ –§–æ—Ä–º–∞—Ç—ã: ${formats.join(', ')}`);
    console.log(`üé® –¢–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${types.join(', ')}`);
    
    // –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const demoPath = await createDemoImage();
    console.log(`‚úÖ –î–µ–º–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${demoPath}`);
    
    return {
      success: true,
      exports: exports.length,
      qualities: qualities.length,
      formats: formats.length,
      types: types.length
    };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

module.exports = {
  runFullDemo,
  quickIntegrationTest,
  demonstrateBasicVectorization,
  demonstrateProfessionalVectorization,
  demonstrateContentAnalysis,
  demonstrateMultiFormat,
  demonstrateOptimization,
  createDemoImage
};