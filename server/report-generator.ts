import { db } from './db.js';
import { aiMessages, chatSessions, reportTemplates, reportLogs } from '../shared/schema.js';
import { emailService } from './email-service.js';
import { eq, gte, lte, desc, count, sql } from 'drizzle-orm';

interface ReportData {
  totalMessages: number;
  imagesGenerated: number;
  activeSessions: number;
  errors: number;
  topProviders?: { name: string; count: number; }[];
  errorTypes?: { type: string; count: number; }[];
  period: { start: Date; end: Date; };
}

class ReportGenerator {
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async generateDailyReport(): Promise<ReportData> {
    const today = new Date();
    const yesterday = new Date(today);
    yesterday.setDate(yesterday.getDate() - 1);
    yesterday.setHours(0, 0, 0, 0);
    
    const todayEnd = new Date(today);
    todayEnd.setHours(23, 59, 59, 999);

    return this.generateReportForPeriod(yesterday, todayEnd, 'daily');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async generateWeeklyReport(): Promise<ReportData> {
    const today = new Date();
    const weekAgo = new Date(today);
    weekAgo.setDate(weekAgo.getDate() - 7);
    weekAgo.setHours(0, 0, 0, 0);

    return this.generateReportForPeriod(weekAgo, today, 'weekly');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç
   */
  async generateMonthlyReport(): Promise<ReportData> {
    const today = new Date();
    const monthAgo = new Date(today);
    monthAgo.setMonth(monthAgo.getMonth() - 1);
    monthAgo.setHours(0, 0, 0, 0);

    return this.generateReportForPeriod(monthAgo, today, 'monthly');
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
   */
  private async generateReportForPeriod(
    startDate: Date, 
    endDate: Date, 
    reportType: string
  ): Promise<ReportData> {
    console.log(`üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ${reportType} –æ—Ç—á–µ—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥ ${startDate.toISOString()} - ${endDate.toISOString()}`);

    try {
      // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
      const totalMessages = await db
        .select({ count: count() })
        .from(aiMessages)
        .where(
          sql`${aiMessages.createdAt} >= ${startDate} AND ${aiMessages.createdAt} <= ${endDate}`
        );

      // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imagesGenerated = await db
        .select({ count: count() })
        .from(aiMessages)
        .where(
          sql`${aiMessages.createdAt} >= ${startDate} AND ${aiMessages.createdAt} <= ${endDate} AND ${aiMessages.imageUrl} IS NOT NULL`
        );

      // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
      const activeSessions = await db
        .select({ count: count() })
        .from(chatSessions)
        .where(
          sql`${chatSessions.updatedAt} >= ${startDate} AND ${chatSessions.updatedAt} <= ${endDate}`
        );

      // –¢–æ–ø –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      const topProviders = await db
        .select({
          provider: aiMessages.provider,
          count: count()
        })
        .from(aiMessages)
        .where(
          sql`${aiMessages.createdAt} >= ${startDate} AND ${aiMessages.createdAt} <= ${endDate} AND ${aiMessages.provider} IS NOT NULL`
        )
        .groupBy(aiMessages.provider)
        .orderBy(desc(count()))
        .limit(5);

      const reportData: ReportData = {
        totalMessages: totalMessages[0]?.count || 0,
        imagesGenerated: imagesGenerated[0]?.count || 0,
        activeSessions: activeSessions[0]?.count || 0,
        errors: 0, // –ü–æ–∫–∞ –±–µ–∑ —É—á–µ—Ç–∞ –æ—à–∏–±–æ–∫
        topProviders: topProviders.map(p => ({
          name: p.provider || 'Unknown',
          count: p.count
        })),
        period: { start: startDate, end: endDate }
      };

      console.log(`‚úÖ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω:`, reportData);
      return reportData;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã
   */
  async generateUsageReport(): Promise<ReportData> {
    const now = new Date();
    const weekAgo = new Date(now);
    weekAgo.setDate(weekAgo.getDate() - 7);

    const data = await this.generateReportForPeriod(weekAgo, now, 'usage');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    try {
      const hourlyStats = await db
        .select({
          hour: sql`EXTRACT(hour FROM ${aiMessages.createdAt})`,
          count: count()
        })
        .from(aiMessages)
        .where(
          sql`${aiMessages.createdAt} >= ${weekAgo} AND ${aiMessages.createdAt} <= ${now}`
        )
        .groupBy(sql`EXTRACT(hour FROM ${aiMessages.createdAt})`)
        .orderBy(desc(count()));

      console.log('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —á–∞—Å–∞–º:', hourlyStats);
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    }

    return data;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
   */
  async saveReport(templateId: number, reportData: ReportData, status: string = 'success'): Promise<number> {
    try {
      const [reportLog] = await db.insert(reportLogs).values({
        templateId,
        reportData: JSON.stringify(reportData),
        status,
        emailsSent: 0
      }).returning();

      console.log(`üíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å ID: ${reportLog.id}`);
      return reportLog.id;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –ø–æ email
   */
  async sendReportByEmail(reportLogId: number, recipients: string[], reportType: string): Promise<void> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
      const reportLog = await db
        .select()
        .from(reportLogs)
        .where(eq(reportLogs.id, reportLogId))
        .limit(1);

      if (!reportLog.length) {
        throw new Error(`–û—Ç—á–µ—Ç —Å ID ${reportLogId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      const reportData = JSON.parse(reportLog[0].reportData);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
      await emailService.sendReportEmail(reportData, recipients, reportType, reportLogId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö email
      await db.update(reportLogs)
        .set({ emailsSent: recipients.length })
        .where(eq(reportLogs.id, reportLogId));

      console.log(`üìß –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${recipients.length} email –∞–¥—Ä–µ—Å–æ–≤`);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
   */
  async processScheduledReports(): Promise<void> {
    try {
      const activeTemplates = await db
        .select()
        .from(reportTemplates)
        .where(eq(reportTemplates.isActive, true));

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${activeTemplates.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç—á–µ—Ç–æ–≤`);

      for (const template of activeTemplates) {
        try {
          console.log(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —à–∞–±–ª–æ–Ω: ${template.name} (${template.reportType})`);
          
          let reportData: ReportData;
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
          switch (template.reportType) {
            case 'daily':
              reportData = await this.generateDailyReport();
              break;
            case 'weekly':
              reportData = await this.generateWeeklyReport();
              break;
            case 'monthly':
              reportData = await this.generateMonthlyReport();
              break;
            case 'usage':
              reportData = await this.generateUsageReport();
              break;
            default:
              console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞: ${template.reportType}`);
              continue;
          }

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
          const reportLogId = await this.saveReport(template.id, reportData);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ email, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª–∏
          if (template.emailRecipients && template.emailRecipients.length > 0) {
            await this.sendReportByEmail(reportLogId, template.emailRecipients, template.reportType);
          }
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
          await db.update(reportTemplates)
            .set({ lastRun: new Date() })
            .where(eq(reportTemplates.id, template.id));

          console.log(`‚úÖ –®–∞–±–ª–æ–Ω ${template.name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);

        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–∞ ${template.name}:`, error);
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç —Å –æ—à–∏–±–∫–æ–π
          await this.saveReport(template.id, {} as ReportData, 'failed');
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤:', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –æ—Ç—á–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   */
  async createDefaultTemplates(): Promise<void> {
    try {
      const defaultTemplates = [
        {
          name: '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
          description: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI',
          reportType: 'daily',
          schedule: '0 9 * * *', // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
          emailRecipients: ['admin@example.com'] // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ email
        },
        {
          name: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è',
          description: '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã',
          reportType: 'weekly', 
          schedule: '0 10 * * 1', // –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00
          emailRecipients: ['admin@example.com']
        }
      ];

      for (const template of defaultTemplates) {
        await db.insert(reportTemplates).values(template).onConflictDoNothing();
      }

      console.log('‚úÖ –®–∞–±–ª–æ–Ω—ã –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:', error);
    }
  }
}

export const reportGenerator = new ReportGenerator();