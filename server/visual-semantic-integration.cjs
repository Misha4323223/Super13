
/**
 * –í–∏–∑—É–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è (–≠—Ç–∞–ø 2)
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç—å—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
 */

const semanticIntegrationLayer = require('./semantic-integration-layer.cjs');
const visualSemanticAnalyzer = require('./semantic-memory/visual-semantic-analyzer.cjs');
const userMemoryManager = require('./semantic-memory/user-memory-manager.cjs');
const userProfiler = require('./semantic-memory/user-profiler.cjs');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∏–º–ø–æ—Ä—Ç—ã
let advancedImageAnalyzer, smartVisionAnalyzer, smartObjectDetector;

async function initializeImageAnalyzers() {
  try {
    advancedImageAnalyzer = await import('./advanced-image-analyzer.js');
    console.log('‚úÖ [VISUAL-SEMANTIC] Advanced Image Analyzer –∑–∞–≥—Ä—É–∂–µ–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è [VISUAL-SEMANTIC] Advanced Image Analyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  try {
    smartVisionAnalyzer = await import('./smart-vision-analyzer.js');
    console.log('‚úÖ [VISUAL-SEMANTIC] Smart Vision Analyzer –∑–∞–≥—Ä—É–∂–µ–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è [VISUAL-SEMANTIC] Smart Vision Analyzer –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
  
  try {
    smartObjectDetector = await import('./smart-object-detector.js');
    console.log('‚úÖ [VISUAL-SEMANTIC] Smart Object Detector –∑–∞–≥—Ä—É–∂–µ–Ω');
  } catch (error) {
    console.log('‚ö†Ô∏è [VISUAL-SEMANTIC] Smart Object Detector –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
initializeImageAnalyzers().catch(error => {
  console.log('‚ö†Ô∏è [VISUAL-SEMANTIC] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤:', error.message);
});

const SmartLogger = {
  visual: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üé® [${timestamp}] VISUAL-SEMANTIC: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

class VisualSemanticIntegration {
  constructor() {
    this.enabled = true;
    this.analysisCache = new Map(); // –ö—ç—à –¥–ª—è –∞–Ω–∞–ª–∏–∑–æ–≤
    this.confidenceThreshold = 0.7; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  }

  /**
   * –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
   */
  async analyzeImageWithSemantics(imageData, userContext = {}) {
    SmartLogger.visual('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω—ã–π –≤–∏–∑—É–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');

    if (!this.enabled) {
      return { success: false, reason: 'disabled' };
    }

    try {
      const userId = userContext.userId || 1;
      const sessionId = userContext.sessionId || 'default';

      // === –≠–¢–ê–ü 1: –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===
      SmartLogger.visual('–≠—Ç–∞–ø 1: –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      
      const technicalAnalysis = await this.performTechnicalAnalysis(imageData);
      
      // === –≠–¢–ê–ü 2: –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –í–ò–ó–£–ê–õ–¨–ù–´–• –≠–õ–ï–ú–ï–ù–¢–û–í ===
      SmartLogger.visual('–≠—Ç–∞–ø 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      
      const visualSemantics = await this.performVisualSemanticAnalysis(imageData);
      
      // === –≠–¢–ê–ü 3: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ü–†–û–§–ò–õ–ï–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
      SmartLogger.visual('–≠—Ç–∞–ø 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      const userProfile = await userMemoryManager.getOrCreateUserProfile(userId);
      const personalizedAnalysis = await this.personalizeAnalysis(
        technicalAnalysis, 
        visualSemantics, 
        userProfile
      );

      // === –≠–¢–ê–ü 4: –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô ===
      SmartLogger.visual('–≠—Ç–∞–ø 4: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π');
      
      const recommendations = await this.generatePersonalizedRecommendations(
        personalizedAnalysis,
        userProfile,
        userContext
      );

      // === –≠–¢–ê–ü 5: –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
      SmartLogger.visual('–≠—Ç–∞–ø 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      await this.updateUserProfileFromAnalysis(userId, personalizedAnalysis);

      // === –≠–¢–ê–ü 6: –°–û–ó–î–ê–ù–ò–ï –ò–¢–û–ì–û–í–û–ì–û –û–¢–ß–ï–¢–ê ===
      const finalReport = {
        success: true,
        timestamp: new Date().toISOString(),
        
        // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        technical_analysis: technicalAnalysis,
        
        // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        visual_semantics: visualSemantics,
        
        // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è
        personalized_analysis: personalizedAnalysis,
        user_profile_updated: true,
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        recommendations: recommendations,
        
        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        confidence_score: this.calculateOverallConfidence(personalizedAnalysis),
        processing_time: Date.now() - (personalizedAnalysis.start_time || Date.now()),
        
        // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        semantic_integration: {
          user_id: userId,
          session_id: sessionId,
          profile_improvements: personalizedAnalysis.profile_improvements || [],
          learning_insights: personalizedAnalysis.learning_insights || []
        }
      };

      SmartLogger.visual('‚úÖ –í–∏–∑—É–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', {
        confidence: finalReport.confidence_score,
        recommendations_count: recommendations.length
      });

      return finalReport;

    } catch (error) {
      SmartLogger.visual(`‚ùå –û—à–∏–±–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return {
        success: false,
        error: error.message,
        fallback_available: true
      };
    }
  }

  /**
   * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  async performTechnicalAnalysis(imageData) {
    const analysis = {
      basic_properties: {},
      objects_detected: [],
      color_analysis: {},
      composition_analysis: {},
      quality_metrics: {}
    };

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      if (advancedImageAnalyzer && typeof imageData === 'string') {
        SmartLogger.visual('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');
        
        const advancedResult = await advancedImageAnalyzer.analyzeImageFromUrl(imageData);
        if (advancedResult.success) {
          analysis.basic_properties = advancedResult.analysis || {};
          analysis.color_analysis = advancedResult.colorAnalysis || {};
          analysis.quality_metrics = {
            complexity: advancedResult.analysis?.complexity || 'medium',
            estimated_quality: 'high'
          };
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑—Ä–µ–Ω–∏—è
      if (smartVisionAnalyzer) {
        SmartLogger.visual('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∑—Ä–µ–Ω–∏—è');
        
        const visionResult = await smartVisionAnalyzer.analyzeImageContent(imageData);
        if (visionResult.success) {
          analysis.objects_detected = visionResult.detectedObjects || [];
          analysis.composition_analysis = visionResult.compositionAnalysis || {};
        }
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
      if (smartObjectDetector) {
        SmartLogger.visual('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤');
        
        const objectResult = await smartObjectDetector.detectAndAnalyze(imageData);
        if (objectResult.success) {
          analysis.objects_detected = [
            ...analysis.objects_detected,
            ...(objectResult.detectedObjects || [])
          ];
        }
      }

    } catch (error) {
      SmartLogger.visual(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    }

    return analysis;
  }

  /**
   * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
   */
  async performVisualSemanticAnalysis(imageData) {
    try {
      SmartLogger.visual('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
      
      // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–µ—Å–ª–∏ —ç—Ç–æ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
      let visualDescription = '';
      if (typeof imageData === 'string' && imageData.includes('http')) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ URL –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        const urlAnalysis = this.analyzeImageUrl(imageData);
        visualDescription = urlAnalysis.description;
      } else if (typeof imageData === 'string') {
        visualDescription = imageData;
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
      const semanticResult = visualSemanticAnalyzer.analyzeVisualSemantics(visualDescription);
      
      SmartLogger.visual('–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω', {
        elements_found: semanticResult.visual_elements?.length || 0,
        emotions_count: Object.keys(semanticResult.emotional_impact?.primary_emotions || {}).length
      });

      return semanticResult;

    } catch (error) {
      SmartLogger.visual(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return {
        visual_elements: [],
        semantic_meanings: {},
        emotional_impact: {},
        brand_implications: {},
        recommendations: []
      };
    }
  }

  /**
   * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async personalizeAnalysis(technicalAnalysis, visualSemantics, userProfile) {
    SmartLogger.visual('–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    const personalized = {
      start_time: Date.now(),
      user_preferences_applied: false,
      style_recommendations: [],
      color_recommendations: [],
      improvement_suggestions: [],
      profile_improvements: [],
      learning_insights: []
    };

    try {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userProfile && userProfile.preferredStyles) {
        const styleMatch = this.analyzeStyleMatch(visualSemantics, userProfile.preferredStyles);
        personalized.style_match = styleMatch;
        personalized.user_preferences_applied = true;
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
      if (userProfile && userProfile.favoriteColors) {
        const colorMatch = this.analyzeColorMatch(technicalAnalysis.color_analysis, userProfile.favoriteColors);
        personalized.color_match = colorMatch;
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
      personalized.improvement_suggestions = this.generateImprovementSuggestions(
        technicalAnalysis,
        visualSemantics,
        userProfile
      );

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ —ç—Ç–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      personalized.profile_improvements = this.extractProfileInsights(
        technicalAnalysis,
        visualSemantics
      );

      // –û–±—É—á–∞—é—â–∏–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã
      personalized.learning_insights = this.generateLearningInsights(
        technicalAnalysis,
        visualSemantics,
        userProfile
      );

      SmartLogger.visual('–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
        preferences_applied: personalized.user_preferences_applied,
        improvements_count: personalized.improvement_suggestions.length
      });

    } catch (error) {
      SmartLogger.visual(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    }

    return personalized;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  async generatePersonalizedRecommendations(personalizedAnalysis, userProfile, userContext) {
    const recommendations = [];

    try {
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
      if (personalizedAnalysis.style_match && personalizedAnalysis.style_match.confidence < 0.7) {
        recommendations.push({
          type: 'style_improvement',
          priority: 'high',
          title: '–£–ª—É—á—à–µ–Ω–∏–µ —Å—Ç–∏–ª—è',
          description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –ø–æ–¥ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è',
          specific_suggestions: personalizedAnalysis.style_recommendations || [],
          confidence: 0.8
        });
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç—É
      if (personalizedAnalysis.color_match && personalizedAnalysis.color_match.confidence < 0.6) {
        recommendations.push({
          type: 'color_improvement',
          priority: 'medium',
          title: '–¶–≤–µ—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è',
          description: '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é –ø–∞–ª–∏—Ç—Ä—É',
          specific_suggestions: personalizedAnalysis.color_recommendations || [],
          confidence: 0.75
        });
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∫–∞—á–µ—Å—Ç–≤—É
      recommendations.push(...this.generateTechnicalRecommendations(personalizedAnalysis));

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
      recommendations.push(...this.generateUsageRecommendations(personalizedAnalysis, userContext));

      SmartLogger.visual('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π', { count: recommendations.length });

    } catch (error) {
      SmartLogger.visual(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${error.message}`);
    }

    return recommendations;
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
   */
  async updateUserProfileFromAnalysis(userId, personalizedAnalysis) {
    try {
      const profileUpdates = {};

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å—Ç–∏–ª—è–º
      if (personalizedAnalysis.profile_improvements) {
        personalizedAnalysis.profile_improvements.forEach(improvement => {
          if (improvement.type === 'style_preference') {
            profileUpdates.preferredStyles = improvement.detected_styles;
          }
          if (improvement.type === 'color_preference') {
            profileUpdates.favoriteColors = improvement.detected_colors;
          }
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å, –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (Object.keys(profileUpdates).length > 0) {
        await userMemoryManager.updateUserProfileFromInteraction(userId, {
          ...profileUpdates,
          lastImageAnalysis: new Date().toISOString(),
          analysisCount: 1 // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        });

        SmartLogger.visual('–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω', profileUpdates);
      }

    } catch (error) {
      SmartLogger.visual(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: ${error.message}`);
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  analyzeImageUrl(url) {
    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ URL –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const urlParts = url.toLowerCase();
    const description = [];

    if (urlParts.includes('panda')) description.push('–ø–∞–Ω–¥–∞');
    if (urlParts.includes('techno') || urlParts.includes('cyber')) description.push('—Ç–µ—Ö–Ω–æ');
    if (urlParts.includes('neon')) description.push('–Ω–µ–æ–Ω–æ–≤—ã–π');
    if (urlParts.includes('samurai')) description.push('—Å–∞–º—É—Ä–∞–π');
    if (urlParts.includes('dragon')) description.push('–¥—Ä–∞–∫–æ–Ω');

    return {
      description: description.join(' ') || '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    };
  }

  analyzeStyleMatch(visualSemantics, preferredStyles) {
    if (!visualSemantics.visual_elements || !preferredStyles) {
      return { confidence: 0, matches: [] };
    }

    const matches = [];
    let totalConfidence = 0;

    visualSemantics.visual_elements.forEach(element => {
      if (element.type === 'style' && preferredStyles.includes(element.value)) {
        matches.push(element);
        totalConfidence += element.confidence || 0.5;
      }
    });

    return {
      confidence: matches.length > 0 ? totalConfidence / matches.length : 0,
      matches: matches,
      recommendations: matches.length === 0 ? [`–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –≤ —Å—Ç–∏–ª–µ: ${preferredStyles.join(', ')}`] : []
    };
  }

  analyzeColorMatch(colorAnalysis, favoriteColors) {
    if (!colorAnalysis || !favoriteColors) {
      return { confidence: 0, matches: [] };
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ü–≤–µ—Ç–æ–≤
    const confidence = favoriteColors.length > 0 ? 0.5 : 0; // –ë–∞–∑–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
    
    return {
      confidence: confidence,
      matches: [],
      recommendations: confidence < 0.6 ? [`–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤–∞—à–∏—Ö –ª—é–±–∏–º—ã—Ö —Ü–≤–µ—Ç–æ–≤: ${favoriteColors.join(', ')}`] : []
    };
  }

  generateImprovementSuggestions(technicalAnalysis, visualSemantics, userProfile) {
    const suggestions = [];

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    if (technicalAnalysis.quality_metrics?.complexity === 'low') {
      suggestions.push({
        type: 'technical',
        suggestion: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
      });
    }

    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
    if (visualSemantics.emotional_impact?.overall_tone === 'neutral') {
      suggestions.push({
        type: 'emotional',
        suggestion: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è —É—Å–∏–ª–µ–Ω–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è'
      });
    }

    return suggestions;
  }

  extractProfileInsights(technicalAnalysis, visualSemantics) {
    const insights = [];

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if (visualSemantics.visual_elements) {
      const styles = visualSemantics.visual_elements
        .filter(e => e.type === 'style')
        .map(e => e.value);
      
      if (styles.length > 0) {
        insights.push({
          type: 'style_preference',
          detected_styles: styles,
          confidence: 0.7
        });
      }
    }

    return insights;
  }

  generateLearningInsights(technicalAnalysis, visualSemantics, userProfile) {
    const insights = [];

    // –ò–Ω—Å–∞–π—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
    insights.push({
      category: 'visual_preference',
      data: {
        user_engages_with: visualSemantics.visual_elements?.map(e => e.value) || [],
        technical_quality_preference: technicalAnalysis.quality_metrics?.complexity || 'medium'
      }
    });

    return insights;
  }

  generateTechnicalRecommendations(personalizedAnalysis) {
    const recommendations = [];

    personalizedAnalysis.improvement_suggestions?.forEach(suggestion => {
      if (suggestion.type === 'technical') {
        recommendations.push({
          type: 'technical_improvement',
          priority: 'medium',
          title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
          description: suggestion.suggestion,
          confidence: 0.8
        });
      }
    });

    return recommendations;
  }

  generateUsageRecommendations(personalizedAnalysis, userContext) {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (userContext.category === 'print_design') {
      recommendations.push({
        type: 'usage_optimization',
        priority: 'high',
        title: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏',
        description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏',
        confidence: 0.9
      });
    }

    return recommendations;
  }

  calculateOverallConfidence(personalizedAnalysis) {
    // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    let totalConfidence = 0;
    let count = 0;

    if (personalizedAnalysis.style_match) {
      totalConfidence += personalizedAnalysis.style_match.confidence;
      count++;
    }

    if (personalizedAnalysis.color_match) {
      totalConfidence += personalizedAnalysis.color_match.confidence;
      count++;
    }

    return count > 0 ? totalConfidence / count : 0.5;
  }

  /**
   * –ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —á–∞—Ç–µ
   */
  async quickAnalyzeRecentImage(sessionId, userId) {
    try {
      SmartLogger.visual('–ë—ã—Å—Ç—Ä—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
      // –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      
      return {
        success: true,
        message: '–ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω',
        recommendations: ['–û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã']
      };

    } catch (error) {
      SmartLogger.visual(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return { success: false, error: error.message };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const visualSemanticIntegration = new VisualSemanticIntegration();

module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  analyzeImageWithSemantics: visualSemanticIntegration.analyzeImageWithSemantics.bind(visualSemanticIntegration),
  quickAnalyzeRecentImage: visualSemanticIntegration.quickAnalyzeRecentImage.bind(visualSemanticIntegration),
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  setEnabled: (enabled) => { visualSemanticIntegration.enabled = enabled; },
  setConfidenceThreshold: (threshold) => { visualSemanticIntegration.confidenceThreshold = threshold; },
  
  // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  VisualSemanticIntegration
};
