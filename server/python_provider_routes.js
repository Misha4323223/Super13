/**
 * –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è Python-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ G4F
 */
const express = require('express');
const router = express.Router();
const fetch = require('node-fetch');
const { spawn } = require('child_process');
const { pipeline } = require('stream');
const path = require('path');

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–∞ Python-—Å–µ—Ä–≤–µ—Ä–∞
let pythonProcess = null;
let isStarting = false;
let demoResponse = null;

// –ó–∞–ø—É—Å–∫ Python-—Å–µ—Ä–≤–µ—Ä–∞
async function startPythonServer() {
  if (pythonProcess || isStarting) return;

  isStarting = true;
  console.log('–ó–∞–ø—É—Å–∫ Python G4F —Å–µ—Ä–≤–µ—Ä–∞...');

  pythonProcess = spawn('python', ['server/g4f_python_provider.py']);

  pythonProcess.stdout.on('data', (data) => {
    console.log(`[Python G4F] ${data.toString().trim()}`);
  });

  pythonProcess.stderr.on('data', (data) => {
    console.error(`[Python G4F Error] ${data.toString().trim()}`);
  });

  pythonProcess.on('close', (code) => {
    console.log(`Python G4F –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    pythonProcess = null;
    isStarting = false;
  });

  // –ñ–¥–µ–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
  await new Promise(resolve => setTimeout(resolve, 2000));
  isStarting = false;
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Python-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
async function checkPythonProvider() {
  try {
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Python G4F...');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º http.request –≤–º–µ—Å—Ç–æ fetch (–∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ Node.js)
    const http = require('http');

    return new Promise((resolve, reject) => {
      const testData = JSON.stringify({
        message: 'hi',
        provider: 'FreeGpt',
        timeout: 5000
      });

      const options = {
        hostname: 'localhost',
        port: 5004,
        path: '/python/test',
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Content-Length': Buffer.byteLength(testData)
        }
      };

      const req = http.request(options, (res) => {
        let responseData = '';

        res.on('data', (chunk) => {
          responseData += chunk;
        });

        res.on('end', () => {
          if (res.statusCode !== 200) {
            console.error(`HTTP –æ—à–∏–±–∫–∞: ${res.statusCode}`);
            reject(new Error(`HTTP –æ—à–∏–±–∫–∞: ${res.statusCode}`));
            return;
          }

          try {
            const data = JSON.parse(responseData);
            if (data.response) {
              demoResponse = data.response; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
              console.log('‚úÖ Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
              resolve(true);
            } else {
              throw new Error('–û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö');
            }
          } catch (err) {
            reject(new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: ${err.message}`));
          }
        });
      });

      req.on('error', (err) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Python G4F:', err.message);
        reject(err);
      });

      // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –≤ 5 —Å–µ–∫—É–Ω–¥
      req.setTimeout(5000, () => {
        req.destroy();
        reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'));
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      req.write(testData);
      req.end();
    }).catch(err => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Python G4F:', err.message);
      return false;
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Python G4F:', error.message);
    return false;
  }
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω–∞—Å—Ç–æ—è—â–∏–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
function getDemoResponse(message = '') {
  const messageLower = message.toLowerCase();

  if (messageLower.includes('–ø—Ä–∏–≤–µ—Ç') || messageLower.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') || 
      messageLower.includes('hello') || messageLower.includes('hi')) {
    return '–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?';
  } else if (messageLower.includes('–∫–∞–∫ –¥–µ–ª–∞') || messageLower.includes('–∫–∞–∫ —Ç—ã') || 
             messageLower.includes('how are you')) {
    return '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?';
  } else if (messageLower.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω') || messageLower.includes('–∫–∞—Ä—Ç–∏–Ω') || 
             messageLower.includes('image') || messageLower.includes('picture')) {
    return '–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π". –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å, –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å!';
  } else if (messageLower.includes('booomerangs')) {
    return 'BOOOMERANGS - —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –ú—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π!';
  } else if (demoResponse) {
    // –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    return demoResponse;
  } else {
    const responses = [
      '–≠—Ç–æ –¥–µ–º–æ-—Ä–µ–∂–∏–º BOOOMERANGS. –Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º.',
      'BOOOMERANGS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –±–µ—Å–ø–ª–∞—Ç–Ω–æ. –°–µ–π—á–∞—Å –≤—ã –≤–∏–¥–∏—Ç–µ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç, –ø–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.',
      '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç BOOOMERANGS —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–ª–∏ –∑–∞–π—Ç–∏ –ø–æ–∑–∂–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏.'
    ];

    return responses[Math.floor(Math.random() * responses.length)];
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–∞
router.post('/chat', async (req, res) => {
  try {
    const { message, provider = 'FreeGpt', timeout = 20000, context, sessionId } = req.body;

    if (!message) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' 
      });
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    let finalMessage = message;
    if (context) {
      finalMessage = `${context}${message}`;
      console.log(`üß† [PYTHON-PROVIDER] –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é: ${context.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    }

    // ‚ùå PYTHON –°–ï–†–í–ï–† –û–¢–ö–õ–Æ–ß–ï–ù
    // if (!pythonProcess && !isStarting) {
    //   await startPythonServer();
    //   await new Promise(resolve => setTimeout(resolve, 2000));
    // }

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º http.request –≤–º–µ—Å—Ç–æ fetch
      const http = require('http');

      const requestData = JSON.stringify({ message: finalMessage, provider, timeout });

      const data = await new Promise((resolve, reject) => {
        const options = {
          hostname: 'localhost',
          port: 5004,
          path: '/python/chat',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Content-Length': Buffer.byteLength(requestData)
          },
          timeout: timeout + 5000 // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        };

        const req = http.request(options, (res) => {
          let responseData = '';

          res.on('data', (chunk) => {
            responseData += chunk;
          });

          res.on('end', () => {
            if (res.statusCode !== 200) {
              return reject(new Error(`HTTP –æ—à–∏–±–∫–∞: ${res.statusCode}`));
            }

            try {
              const parsedData = JSON.parse(responseData);
              resolve(parsedData);
            } catch (err) {
              reject(new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: ${err.message}`));
            }
          });
        });

        req.on('error', (err) => reject(err));

        req.write(requestData);
        req.end();
      });

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞
      if (data.response) {
        demoResponse = data.response;
      }

      return res.json(data);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Python G4F:', error.message);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      return res.json({
        success: true,
        response: getDemoResponse(message),
        provider: 'BOOOMERANGS-Demo',
        model: 'demo-mode',
        elapsed: 0.5
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –ü–æ—Ç–æ–∫–æ–≤—ã–π API –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
router.post('/chat/stream', async (req, res) => {
  try {
    const { message, provider = 'FreeGpt', timeout = 20000 } = req.body;

    if (!message) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' 
      });
    }

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º SSE –∑–∞–≥–æ–ª–æ–≤–∫–∏
    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive'
    });

    // –°–æ–æ–±—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç—É, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    res.write(`event: connected\ndata: ${JSON.stringify({
      message: '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
      clientId: Date.now().toString()
    })}\n\n`);

    // ‚ùå PYTHON –°–ï–†–í–ï–† –û–¢–ö–õ–Æ–ß–ï–ù
    // if (!pythonProcess && !isStarting) {
    //   await startPythonServer();
    //   await new Promise(resolve => setTimeout(resolve, 2000));
    // }

    console.log(`–ó–∞–ø—Ä–æ—Å –∫ Python G4F (—Å—Ç—Ä–∏–º–∏–Ω–≥): ${message.substring(0, 30)}${message.length > 30 ? '...' : ''}`);

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
    const demoFallbackTimeout = 5000; // 5 —Å–µ–∫—É–Ω–¥ –Ω–∞ –¥–µ–º–æ-—Ñ–æ–ª–ª–±—ç–∫
    const totalTimeout = timeout || 25000; // –û–±—â–∏–π —Ç–∞–π–º–∞—É—Ç

    let demoTimeoutId = null;
    let totalTimeoutId = null;
    let isDemoSent = false;
    let isResponseComplete = false;

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
    const sendDemoFallback = () => {
      if (isResponseComplete || isDemoSent) return;

      isDemoSent = true;
      console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç');

      const demoText = getDemoResponse(message);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –ø–æ—Ä—Ü–∏—è–º–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
      res.write(`event: fallback\ndata: ${JSON.stringify({
        text: demoText,
        demo: true
      })}\n\n`);

      // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
      res.write(`event: complete\ndata: ${JSON.stringify({
        text: demoText,
        provider: 'BOOOMERANGS-Demo',
        model: 'demo-mode',
        elapsed: 0.5
      })}\n\n`);

      res.end();
    };

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤
    console.log(`‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞: ${demoFallbackTimeout}–º—Å, –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç: ${totalTimeout}–º—Å`);
    demoTimeoutId = setTimeout(sendDemoFallback, demoFallbackTimeout);
    totalTimeoutId = setTimeout(() => {
      if (!isResponseComplete) {
        console.log('‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –æ–±—â–∏–π —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞');
        if (!isDemoSent) {
          sendDemoFallback();
        }
        res.end();
      }
    }, totalTimeout);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º http.request –≤–º–µ—Å—Ç–æ fetch
      const http = require('http');

      const requestData = JSON.stringify({ message, provider, timeout });

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Python –ø–æ—Ç–æ–∫–æ–≤–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
      await new Promise((resolve, reject) => {
        const options = {
          hostname: 'localhost',
          port: 5004,
          path: '/python/chat/stream',
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'text/event-stream',
            'Connection': 'keep-alive',
            'Content-Length': Buffer.byteLength(requestData)
          }
        };

        const pythonReq = http.request(options, (pythonRes) => {
          if (pythonRes.statusCode !== 200) {
            reject(new Error(`HTTP –æ—à–∏–±–∫–∞: ${pythonRes.statusCode}`));
            return;
          }

          // –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞
          clearTimeout(demoTimeoutId);

          // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
          pythonRes.on('data', (chunk) => {
            // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            res.write(chunk);

            // –§–æ—Ä—Å–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö
            if (res.flush) {
              res.flush();
            }
          });

          pythonRes.on('end', () => {
            isResponseComplete = true;
            resolve();
          });

          // –û—à–∏–±–∫–∞ —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã Python —Å–µ—Ä–≤–µ—Ä–∞
          pythonRes.on('error', (err) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Python:', err.message);
            isResponseComplete = true;
            reject(err);
          });
        });

        // –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Python —Å–µ—Ä–≤–µ—Ä–æ–º
        pythonReq.on('error', (err) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Python —Å–µ—Ä–≤–µ—Ä—É:', err.message);
          reject(err);
        });

        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        pythonReq.setTimeout(timeout + 5000, () => {
          pythonReq.destroy();
          reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Python —Å–µ—Ä–≤–µ—Ä–æ–º'));
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        pythonReq.write(requestData);
        pythonReq.end();
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', error.message);

      // –ï—Å–ª–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–µ–º–æ-–æ—Ç–≤–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
      if (!isDemoSent && !isResponseComplete) {
        sendDemoFallback();
      } else if (!isResponseComplete) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        res.write(`event: error\ndata: ${JSON.stringify({
          error: '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º',
          message: error.message
        })}\n\n`);

        res.end();
      }
    } finally {
      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
      clearTimeout(demoTimeoutId);
      clearTimeout(totalTimeoutId);

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –æ—Ç–∫—Ä—ã—Ç–æ
      if (!isResponseComplete) {
        res.end();
      }
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞:', error);

    if (!res.headersSent) {
      return res.status(500).json({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: error.message
      });
    } else {
      res.write(`event: error\ndata: ${JSON.stringify({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
        message: error.message
      })}\n\n`);

      res.end();
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–º
  req.on('close', () => {
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
  });
});

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
router.post('/test', async (req, res) => {
  try {
    const { message, provider, timeout } = req.body;

    // ‚ùå PYTHON –°–ï–†–í–ï–† –û–¢–ö–õ–Æ–ß–ï–ù
    // if (!pythonProcess && !isStarting) {
    //   await startPythonServer();
    //   await new Promise(resolve => setTimeout(resolve, 2000));
    // }

    const result = await checkPythonProvider();

    if (result) {
      return res.json({
        success: true,
        response: demoResponse || 'Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç',
        provider: 'Python-Test',
        model: 'test-mode'
      });
    } else {
      return res.json({
        success: false,
        error: 'Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
      });
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Python G4F:', error);
    return res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
(async () => {
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
  // await startPythonServer();  // Removing this will prevent the server from starting at all.
  // await checkPythonProvider();
})();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ Python AI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º http.request
async function callPythonAI(message, provider = null) {
  return new Promise((resolve, reject) => {
    const http = require('http');
    const queryParams = provider ? `?provider=${provider}` : '';
    const requestData = JSON.stringify({ message });

    const options = {
      hostname: 'localhost',
      port: 5004,
      path: `/python/chat${queryParams}`,
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(requestData)
      }
    };

    const req = http.request(options, (response) => {
      let data = '';
      response.on('data', (chunk) => {
        data += chunk;
      });

      response.on('end', () => {
        if (response.statusCode === 200) {
          try {
            const parsedData = JSON.parse(data);
            console.log('–û—Ç–≤–µ—Ç –æ—Ç Python:', parsedData);
            if (parsedData && parsedData.response) {
              console.log('‚úÖ Python G4F –≤–µ—Ä–Ω—É–ª —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç AI: ' + parsedData.provider);
              resolve(parsedData.response);
            } else {
              console.log('‚ö†Ô∏è Python G4F –≤–µ—Ä–Ω—É–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
              resolve(getDemoResponse(message));
            }
          } catch (err) {
            console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –æ—Ç–≤–µ—Ç–∞: ${err.message}`);
            console.log('–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
            resolve(getDemoResponse(message));
          }
        } else {
          console.log(`–û—à–∏–±–∫–∞ –æ—Ç Python G4F: ${response.statusCode}`);
          resolve(getDemoResponse(message));
        }
      });
    });

    req.on('error', (error) => {
      console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Python G4F: ${error.message}`);
      resolve(getDemoResponse(message));
    });

    req.write(requestData);
    req.end();
  });
}

module.exports = { router, startPythonServer, checkPythonProvider, callPythonAI };