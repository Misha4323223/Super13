
/**
 * –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö 40+ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */

const { createLogger } = require('./semantic-logger.cjs');
const logger = createLogger('SEMANTIC-CACHE');

class SemanticCache {
  constructor() {
    this.cache = new Map();
    this.stats = {
      hits: 0,
      misses: 0,
      sets: 0,
      evictions: 0,
      totalSize: 0
    };
    
    this.config = {
      maxSize: 1000, // –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø–∏—Å–µ–π
      maxMemory: 100 * 1024 * 1024, // 100MB
      defaultTTL: 300000, // 5 –º–∏–Ω—É—Ç
      cleanupInterval: 60000 // 1 –º–∏–Ω—É—Ç–∞
    };
    
    this.startCleanupTimer();
    logger.info('–°–∏—Å—Ç–µ–º–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –∫—ç—à–∞
   */
  get(key) {
    const entry = this.cache.get(key);
    
    if (!entry) {
      this.stats.misses++;
      return null;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (Date.now() > entry.expires) {
      this.cache.delete(key);
      this.stats.misses++;
      this.stats.evictions++;
      return null;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    entry.lastAccessed = Date.now();
    this.stats.hits++;
    
    logger.debug(`Cache HIT –¥–ª—è –∫–ª—é—á–∞: ${key.substring(0, 50)}...`);
    return entry.value;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫—ç—à
   */
  set(key, value, ttl = this.config.defaultTTL) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –ø–∞–º—è—Ç–∏
    if (this.cache.size >= this.config.maxSize) {
      this.evictOldest();
    }
    
    const entry = {
      value: value,
      created: Date.now(),
      expires: Date.now() + ttl,
      lastAccessed: Date.now(),
      size: this.estimateSize(value),
      accessCount: 0,
      category: this.categorizeValue(value)
    };
    
    this.cache.set(key, entry);
    this.stats.sets++;
    this.stats.totalSize += entry.size;
    
    logger.debug(`Cache SET –¥–ª—è –∫–ª—é—á–∞: ${key.substring(0, 50)}... (TTL: ${ttl}–º—Å, –∫–∞—Ç–µ–≥–æ—Ä–∏—è: ${entry.category})`);
    
    return true;
  }

  /**
   * –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  cacheSemanticAnalysis(userMessage, context, result) {
    const key = this.generateSemanticKey(userMessage, context);
    const ttl = 600000; // 10 –º–∏–Ω—É—Ç –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏–∫–∏
    
    this.set(key, {
      type: 'semantic_analysis',
      userMessage,
      context,
      result,
      timestamp: Date.now()
    }, ttl);
    
    logger.info(`üìä –ö—ç—à–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è: "${userMessage.substring(0, 30)}..."`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  getCachedSemanticAnalysis(userMessage, context) {
    const key = this.generateSemanticKey(userMessage, context);
    const cached = this.get(key);
    
    if (cached && cached.type === 'semantic_analysis') {
      logger.info(`üéØ –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è: "${userMessage.substring(0, 30)}..."`);
      return cached.result;
    }
    
    return null;
  }

  /**
   * –ö—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥—É–ª—è
   */
  cacheModuleResult(moduleName, input, result) {
    const key = this.generateModuleKey(moduleName, input);
    const ttl = this.getModuleTTL(moduleName);
    
    this.set(key, {
      type: 'module_result',
      moduleName,
      input,
      result,
      timestamp: Date.now()
    }, ttl);
    
    logger.info(`üîß –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥—É–ª—è ${moduleName}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥—É–ª—è
   */
  getCachedModuleResult(moduleName, input) {
    const key = this.generateModuleKey(moduleName, input);
    const cached = this.get(key);
    
    if (cached && cached.type === 'module_result' && cached.moduleName === moduleName) {
      logger.info(`‚ö° –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–¥—É–ª—è ${moduleName}`);
      return cached.result;
    }
    
    return null;
  }

  /**
   * –ö—ç—à–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  cacheUserProfile(userId, profile) {
    const key = `user_profile:${userId}`;
    const ttl = 3600000; // 1 —á–∞—Å –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–µ–π
    
    this.set(key, {
      type: 'user_profile',
      userId,
      profile,
      timestamp: Date.now()
    }, ttl);
    
    logger.info(`üë§ –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getCachedUserProfile(userId) {
    const key = `user_profile:${userId}`;
    const cached = this.get(key);
    
    if (cached && cached.type === 'user_profile') {
      logger.info(`üë§ –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      return cached.profile;
    }
    
    return null;
  }

  /**
   * –ö—ç—à–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
   */
  cacheSessionContext(sessionId, context) {
    const key = `session_context:${sessionId}`;
    const ttl = 1800000; // 30 –º–∏–Ω—É—Ç –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Å–µ—Å—Å–∏–∏
    
    this.set(key, {
      type: 'session_context',
      sessionId,
      context,
      timestamp: Date.now()
    }, ttl);
    
    logger.info(`üìã –ö—ç—à–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏: ${sessionId}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
   */
  getCachedSessionContext(sessionId) {
    const key = `session_context:${sessionId}`;
    const cached = this.get(key);
    
    if (cached && cached.type === 'session_context') {
      logger.info(`üìã –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏: ${sessionId}`);
      return cached.context;
    }
    
    return null;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  generateSemanticKey(userMessage, context) {
    const messageHash = this.hashString(userMessage);
    const contextHash = this.hashString(JSON.stringify(context));
    return `semantic:${messageHash}:${contextHash}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–æ–¥—É–ª—è
   */
  generateModuleKey(moduleName, input) {
    const inputHash = this.hashString(JSON.stringify(input));
    return `module:${moduleName}:${inputHash}`;
  }

  /**
   * –ü—Ä–æ—Å—Ç–æ–µ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
   */
  hashString(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ 32-–±–∏—Ç–Ω–æ–µ —á–∏—Å–ª–æ
    }
    return Math.abs(hash).toString(36);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç TTL –¥–ª—è –º–æ–¥—É–ª—è
   */
  getModuleTTL(moduleName) {
    const moduleConfig = {
      'semantic-analyzer': 600000, // 10 –º–∏–Ω—É—Ç
      'emotional-semantic-matrix': 300000, // 5 –º–∏–Ω—É—Ç
      'meta-semantic-engine': 900000, // 15 –º–∏–Ω—É—Ç
      'natural-language-generator': 180000, // 3 –º–∏–Ω—É—Ç—ã
      'biomimetic-semantics': 1800000, // 30 –º–∏–Ω—É—Ç
      'divine-semantics': 3600000, // 1 —á–∞—Å
      'cognitive-dna-profiler': 1800000, // 30 –º–∏–Ω—É—Ç
      'business-context-analyzer': 600000, // 10 –º–∏–Ω—É—Ç
      'collective-semantic-wisdom': 1800000, // 30 –º–∏–Ω—É—Ç
      'creative-semantic-engine': 300000, // 5 –º–∏–Ω—É—Ç
      'cross-contextual-semantics': 900000, // 15 –º–∏–Ω—É—Ç
      'autonomous-learning-engine': 1200000 // 20 –º–∏–Ω—É—Ç
    };
    
    return moduleConfig[moduleName] || this.config.defaultTTL;
  }

  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫—ç—à–∞
   */
  categorizeValue(value) {
    if (value && typeof value === 'object') {
      if (value.type) {
        return value.type;
      } else if (value.semantics) {
        return 'semantic_data';
      } else if (value.emotions) {
        return 'emotional_data';
      } else if (value.profile) {
        return 'user_data';
      } else if (value.context) {
        return 'context_data';
      }
    }
    return 'general';
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ –∫—ç—à–∞
   */
  delete(key) {
    const entry = this.cache.get(key);
    if (entry) {
      this.stats.totalSize -= entry.size;
      this.cache.delete(key);
      return true;
    }
    return false;
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à
   */
  clear() {
    this.cache.clear();
    this.stats.totalSize = 0;
    this.stats.evictions += this.cache.size;
    logger.info('–ö—ç—à –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω');
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
   */
  evictOldest() {
    const entries = Array.from(this.cache.entries());
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    entries.sort((a, b) => a[1].lastAccessed - b[1].lastAccessed);
    
    // –£–¥–∞–ª—è–µ–º 10% —Å–∞–º—ã—Ö —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
    const toEvict = Math.max(1, Math.floor(entries.length * 0.1));
    
    for (let i = 0; i < toEvict; i++) {
      const [key, entry] = entries[i];
      this.stats.totalSize -= entry.size;
      this.cache.delete(key);
      this.stats.evictions++;
    }
    
    logger.info(`–£–¥–∞–ª–µ–Ω–æ ${toEvict} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞`);
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –≤ –±–∞–π—Ç–∞—Ö
   */
  estimateSize(obj) {
    try {
      return JSON.stringify(obj).length * 2; // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ UTF-16
    } catch (error) {
      return 1024; // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    }
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
   */
  cleanupExpired() {
    const now = Date.now();
    let cleaned = 0;
    
    for (const [key, entry] of this.cache.entries()) {
      if (now > entry.expires) {
        this.stats.totalSize -= entry.size;
        this.cache.delete(key);
        this.stats.evictions++;
        cleaned++;
      }
    }
    
    if (cleaned > 0) {
      logger.info(`–û—á–∏—â–µ–Ω–æ ${cleaned} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π`);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –æ—á–∏—Å—Ç–∫–∏
   */
  startCleanupTimer() {
    setInterval(() => {
      this.cleanupExpired();
    }, this.config.cleanupInterval);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
   */
  getStats() {
    const hitRate = this.stats.hits + this.stats.misses > 0 
      ? this.stats.hits / (this.stats.hits + this.stats.misses) 
      : 0;
    
    return {
      ...this.stats,
      hitRate: parseFloat((hitRate * 100).toFixed(2)),
      size: this.cache.size,
      memoryUsage: this.stats.totalSize,
      memoryUsageMB: parseFloat((this.stats.totalSize / 1024 / 1024).toFixed(2))
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫—ç—à–∞
   */
  checkHealth() {
    const stats = this.getStats();
    const issues = [];
    
    if (stats.hitRate < 30) {
      issues.push(`–ù–∏–∑–∫–∏–π hit rate: ${stats.hitRate}%`);
    }
    
    if (stats.memoryUsageMB > 80) {
      issues.push(`–í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${stats.memoryUsageMB}MB`);
    }
    
    if (stats.size > this.config.maxSize * 0.9) {
      issues.push(`–ö—ç—à –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω: ${stats.size}/${this.config.maxSize}`);
    }
    
    return {
      healthy: issues.length === 0,
      issues,
      stats
    };
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const globalSemanticCache = new SemanticCache();

module.exports = {
  globalSemanticCache,
  SemanticCache
};
