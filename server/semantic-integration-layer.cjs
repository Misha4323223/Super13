/**
 * –°–ª–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

// ===== –ò–ú–ü–û–†–¢–´ –ò –ó–ê–í–ò–°–ò–ú–û–°–¢–ò =====
const path = require('path');

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π
let semanticMemory = null;
let intelligentChatProcessor = null;
let conversationEngine = null;
let naturalLanguageGenerator = null;

// –ö—ç—à –º–æ–¥—É–ª–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
const moduleCache = new Map();
const MODULE_LOAD_TIMEOUT = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã —Ç–∞–π–º–∞—É—Ç

const semanticMemoryModule = require('./semantic-memory/index.cjs');
const userMemoryManager = require('./semantic-memory/user-memory-manager.cjs');
const userProfiler = require('./semantic-memory/user-profiler.cjs');
const learningSystem = require('./semantic-memory/learning-system.cjs');

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–´: –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
let emotionalSemanticMatrix;
let metaSemanticEngine;

try {
  emotionalSemanticMatrix = require('./semantic-memory/emotional-semantic-matrix.cjs');
} catch (error) {
  console.log('‚ö†Ô∏è [SEMANTIC] –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
}

try {
  metaSemanticEngine = require('./semantic-memory/meta-semantic-engine.cjs');
} catch (error) {
  console.log('‚ö†Ô∏è [SEMANTIC] –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –¥–≤–∏–∂–æ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
let visualSemanticIntegration;
try {
  visualSemanticIntegration = require('./visual-semantic-integration.cjs');
} catch (error) {
  console.log('‚ö†Ô∏è [SEMANTIC] –í–∏–∑—É–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
}

const SmartLogger = {
  integration: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üîó [${timestamp}] SEMANTIC INTEGRATION: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  error: (message, data) => {
    const timestamp = new Date().toISOString();
    console.error(`‚ùå [${timestamp}] SEMANTIC ERROR: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  warn: (message, data) => {
    const timestamp = new Date().toISOString();
    console.warn(`‚ö†Ô∏è [${timestamp}] SEMANTIC WARNING: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  info: (message, data) => {
    const timestamp = new Date().toISOString();
    console.info(`‚ÑπÔ∏è [${timestamp}] SEMANTIC INFO: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  debug: (message, data) => {
    const timestamp = new Date().toISOString();
    console.debug(`üêû [${timestamp}] SEMANTIC DEBUG: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π —Å —Ç–∞–π–º–∞—É—Ç–∞–º–∏ –∏ error handling
async function loadModuleSafely(moduleName, modulePath) {
  try {
    if (moduleCache.has(moduleName)) {
      return moduleCache.get(moduleName);
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    const loadPromise = new Promise((resolve, reject) => {
      try {
        // –û—á–∏—â–∞–µ–º –∫—ç—à require –¥–ª—è –ø—Ä–∏–Ω—É–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
        const fullPath = require.resolve(modulePath);
        if (require.cache[fullPath]) {
          delete require.cache[fullPath];
        }

        const module = require(modulePath);
        resolve(module);
      } catch (error) {
        reject(error);
      }
    });

    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}`)), MODULE_LOAD_TIMEOUT);
    });

    const module = await Promise.race([loadPromise, timeoutPromise]);

    // ‚úÖ –ü–†–û–í–ï–†–Ø–ï–ú –î–û–°–¢–£–ü–ù–û–°–¢–¨ –ö–õ–Æ–ß–ï–í–´–• –ú–ï–¢–û–î–û–í
    if (moduleName === 'natural-language-generator' && module) {
      if (typeof module.generateResponse !== 'function') {
        throw new Error(`–ú–æ–¥—É–ª—å ${moduleName} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥ generateResponse`);
      }
    }

    moduleCache.set(moduleName, module);
    SmartLogger.info(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
    return module;
  } catch (error) {
    SmartLogger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å ${moduleName}: ${error.message}`);
    return null;
  }
}

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
async function initializeModules() {
  SmartLogger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–¥—É–ª–µ–π...');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–±–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å)
    naturalLanguageGenerator = await loadModuleSafely('natural-language-generator', './semantic-memory/natural-language-generator.cjs');
    if (naturalLanguageGenerator) {
      SmartLogger.info('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
  } catch (error) {
    SmartLogger.error('‚ùå –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }

  try {
    // 2. –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å (–º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞)
    semanticMemory = await loadModuleSafely('semantic-memory', './semantic-memory/index.cjs');
    if (semanticMemory) {
      SmartLogger.info('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }
  } catch (error) {
    SmartLogger.error('‚ùå –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
  }

  try {
    // 3. –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)
    intelligentChatProcessor = await loadModuleSafely('intelligent-chat-processor', './intelligent-chat-processor.cjs');
    if (intelligentChatProcessor) {
      SmartLogger.info('‚úÖ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω');
    }
  } catch (error) {
    SmartLogger.error('‚ùå –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
  }

  SmartLogger.info('üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initializeModules().catch(error => {
  SmartLogger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error.message);
});

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä - –≥–ª–∞–≤–Ω—ã–π –º–æ–∑–≥ —Å–∏—Å—Ç–µ–º—ã
 * –†–µ—à–∞–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
 */
class SemanticIntegrationLayer {
  constructor() {
    this.semanticThreshold = 0; // –£–ë–ò–†–ê–ï–ú –≤—Å–µ –ø–æ—Ä–æ–≥–∏ - —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –í–°–ï–ì–î–ê –∞–∫—Ç–∏–≤–Ω–∞
    this.enabled = true; // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω–æ
  }

  /**
   * –§–ê–ó–ê 2: –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏—è
   */
  async analyzeWithSemantics(userInput, context = {}) {
    try {
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const needsExternalKnowledge = this.detectKnowledgeRequest(userInput);

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
      const enhancedContext = {
        timestamp: new Date().toISOString(),
        sessionId: context.sessionId || 'default',
        language: context.language || 'ru',
        userPreferences: context.userPreferences || {},
        conversationHistory: context.conversationHistory || [],
        includeAdvancedSearch: needsExternalKnowledge,
        includeExternalKnowledge: needsExternalKnowledge,
        ...context
      };

      console.log(`üîç [SEMANTIC-INTEGRATION] –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞: "${userInput}"`);

      const analysisResults = {
        metaSemantics: null,
        emotionalContext: null,
        userProfile: null,
        basicAnalysis: null,
        errors: []
      };

      // –≠–¢–ê–ü 1: –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–∫—Ä–∏—Ç–∏—á–Ω—ã–π)
      try {
        const shouldUseMeta = this.shouldUseMetaSemantics(userInput, context);
        console.log(`üéØ [SEMANTIC-INTEGRATION] –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫—É: ${shouldUseMeta}`);

        if (shouldUseMeta && this.isModuleActive('metaSemanticEngine')) {
          analysisResults.metaSemantics = await this.performMetaSemanticAnalysis(userInput, enhancedContext);
          console.log(`‚úÖ [SEMANTIC-INTEGRATION] –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        }
      } catch (error) {
        console.error('‚ö†Ô∏è [SEMANTIC-INTEGRATION] –û—à–∏–±–∫–∞ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–∏:', error.message);
        analysisResults.errors.push('meta-semantics');
      }

      // –≠–¢–ê–ü 2: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
      try {
        if (this.isModuleActive('emotionalSemanticMatrix')) {
          analysisResults.emotionalContext = await this.performEmotionalAnalysis(userInput, enhancedContext);
          console.log(`‚úÖ [SEMANTIC-INTEGRATION] –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        }
      } catch (error) {
        console.error('‚ö†Ô∏è [SEMANTIC-INTEGRATION] –û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
        analysisResults.errors.push('emotional-analysis');
      }

      // –≠–¢–ê–ü 3: –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π)
      try {
        if (this.isModuleActive('userProfiler')) {
          analysisResults.userProfile = await this.performUserProfiling(userInput, enhancedContext);
          console.log(`‚úÖ [SEMANTIC-INTEGRATION] –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`);
        }
      } catch (error) {
        console.error('‚ö†Ô∏è [SEMANTIC-INTEGRATION] –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
        analysisResults.errors.push('user-profiling');
      }

      // –≠–¢–ê–ü 4: –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ (fallback)
      if (!analysisResults.metaSemantics) {
        try {
          analysisResults.basicAnalysis = await this.performBasicSemanticAnalysis(userInput, enhancedContext);
          console.log(`‚úÖ [SEMANTIC-INTEGRATION] –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω`);
        } catch (error) {
          console.error('‚ö†Ô∏è [SEMANTIC-INTEGRATION] –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
          analysisResults.errors.push('basic-analysis');
        }
      }

      // –≠–¢–ê–ü 5: –í–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (needsExternalKnowledge) {
        try {
          console.log(`üîç [SEMANTIC-INTEGRATION] –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –∑–Ω–∞–Ω–∏–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞`);
          
          // –í—ã–∑–æ–≤ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ web-search-provider (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç)
          const webSearchProvider = await import('./web-search-provider.js');
          const searchResults = await webSearchProvider.search(userInput, {
            searchType: 'comprehensive',
            language: 'ru',
            maxResults: 5
          });
          
          if (searchResults && searchResults.length > 0) {
            console.log(`‚úÖ [SEMANTIC-INTEGRATION] –ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞: ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
            
            // –û–±–æ–≥–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ—à–Ω–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if (analysisResults.metaSemantics) {
              analysisResults.metaSemantics.externalKnowledge = searchResults;
            } else if (analysisResults.basicAnalysis) {
              analysisResults.basicAnalysis.externalKnowledge = searchResults;
            } else {
              // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞
              analysisResults.externalKnowledgeResult = {
                intent: 'knowledge_request',
                confidence: 0.8,
                category: 'external_knowledge',
                query_type: 'knowledge_request',
                externalKnowledge: searchResults,
                semantic_analysis: {
                  query_type: 'knowledge_request',
                  dialog_category: 'external_knowledge',
                  semantic_cluster: { name: 'knowledge_request', confidence: 80 }
                }
              };
            }
          }
        } catch (error) {
          console.error('‚ö†Ô∏è [SEMANTIC-INTEGRATION] –û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞:', error.message);
          analysisResults.errors.push('external-search');
        }
      }

      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      return this.selectBestResult(analysisResults, userInput, enhancedContext);

    } catch (error) {
      console.error('‚ùå [SEMANTIC-INTEGRATION] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
      return this.getFallbackResponse(userInput, context);
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫—É
   */
  isModuleActive(moduleName) {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ–º true –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    console.log(`üéØ [SEMANTIC-INTEGRATION] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–¥—É–ª—å: ${moduleName}`);
    return true;
  }

  shouldUseMetaSemantics(userInput, context) {
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫—É –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è ChatGPT-—É—Ä–æ–≤–Ω—è
    console.log(`üéØ [SEMANTIC-INTEGRATION] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫—É –¥–ª—è: "${userInput.substring(0, 50)}"`);
    return true;
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   * –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  selectBestResult(analysisResults, userInput, context) {
    console.log(`üéØ [SEMANTIC-INTEGRATION] –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: "${userInput.substring(0, 50)}"`);

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –≤–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ > –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–∞ > –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    if (analysisResults.externalKnowledgeResult) {
      console.log('‚úÖ [SEMANTIC-INTEGRATION] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞');
      return {
        shouldUseSemantic: true,
        reason: 'external_knowledge_search',
        semanticResult: analysisResults.externalKnowledgeResult,
        confidence: 0.9
      };
    }

    if (analysisResults.metaSemantics) {
      console.log('‚úÖ [SEMANTIC-INTEGRATION] –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      return {
        shouldUseSemantic: true,
        reason: 'meta_semantic_analysis',
        semanticResult: analysisResults.metaSemantics,
        confidence: 0.9
      };
    }

    if (analysisResults.basicAnalysis) {
      console.log('‚úÖ [SEMANTIC-INTEGRATION] –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
      return {
        shouldUseSemantic: true,
        reason: 'basic_semantic_analysis',
        semanticResult: analysisResults.basicAnalysis,
        confidence: 0.7
      };
    }

    // –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç –∞–Ω–∞–ª–∏–∑–∞, —Å–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('üîÑ [SEMANTIC-INTEGRATION] –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç');
    return {
      shouldUseSemantic: true,
      reason: 'minimal_semantic_fallback',
      semanticResult: {
        intent: 'general_conversation',
        confidence: 0.5,
        category: 'conversation',
        semantic_analysis: {
          query_type: 'dialog',
          dialog_category: 'general_chat',
          semantic_cluster: { name: 'conversation', confidence: 50 }
        }
      },
      confidence: 0.5
    };
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ—Ç fallback –æ—Ç–≤–µ—Ç —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
   * –í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
   */
  getFallbackResponse(userInput, context) {
    console.log(`üö® [SEMANTIC-INTEGRATION] –°–æ–∑–¥–∞–µ–º fallback –æ—Ç–≤–µ—Ç –¥–ª—è: "${userInput.substring(0, 50)}"`);

    return {
      shouldUseSemantic: true,
      reason: 'emergency_fallback',
      semanticResult: {
        intent: 'general_conversation',
        confidence: 0.4,
        category: 'conversation',
        semantic_analysis: {
          query_type: 'dialog',
          dialog_category: 'general_chat',
          semantic_cluster: { name: 'conversation', confidence: 40 }
        },
        fallback: true
      },
      confidence: 0.4
    };
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  async performMetaSemanticAnalysis(userQuery, options) {
    SmartLogger.integration(`üîÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
      const semanticResult = await semanticMemoryModule.analyzeCompleteRequestWithMeta(
        userQuery,
        options.sessionId || 'default',
        {
          hasRecentImages: options.hasRecentImages || false,
          chatContext: options.chatContext,
          requestType: options.requestType,
          userPreferences: options.userPreferences
        }
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const qualityScore = semanticResult.quality_score || 5;
      const metaConfidence = semanticResult.enhanced_confidence || 0.7;

      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
      this.validateRegexPatterns();

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø: —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –í–°–ï–ì–î–ê —É–ø—Ä–∞–≤–ª—è–µ—Ç
      const shouldUseSemantic = true; // –£–ë–ò–†–ê–ï–ú –≤—Å–µ —É—Å–ª–æ–≤–∏—è!

      SmartLogger.integration(`üìä –ú–µ—Ç–∞-–∫–∞—á–µ—Å—Ç–≤–æ: ${qualityScore}/10, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(metaConfidence * 100).toFixed(1)}%`);
      SmartLogger.integration(`üéØ –†–µ—à–µ–Ω–∏–µ: –°–ï–ú–ê–ù–¢–ò–ö–ê –í–°–ï–ì–î–ê –£–ü–†–ê–í–õ–Ø–ï–¢ (—É–±—Ä–∞–Ω—ã –≤—Å–µ —É—Å–ª–æ–≤–∏—è)`);

      return {
        shouldUseSemantic: true, // –í–°–ï–ì–î–ê true
        reason: 'semantic_forced_activation', // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
        semanticResult,

        // –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        metaSemanticData: {
          qualityScore,
          metaConfidence,
          metaInsights: semanticResult.meta_insights,
          systemLearnings: semanticResult.system_learnings,
          recommendations: semanticResult.enhanced_recommendations,
          predictions: semanticResult.enhanced_predictions
        },

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        processingTime: semanticResult.total_processing_time,
        fallbackMode: false // –ù–ò–ö–ê–ö–ò–• fallback'–æ–≤
      };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);

      // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
      return await this.performStandardSemanticAnalysis(userQuery, options);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  async performStandardSemanticAnalysis(userQuery, options) {
    SmartLogger.integration(`üß† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
      const semanticResult = await semanticMemoryModule.analyzeCompleteRequest(
        userQuery,
        options.sessionId || 'default',
        {
          hasRecentImages: options.hasRecentImages || false,
          chatContext: options.chatContext,
          requestType: options.requestType,
          userPreferences: options.userPreferences
        }
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const confidence = semanticResult.confidence || 0.6;
      const projectRelevance = semanticResult.current_project ? 0.8 : 0.4;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      const overallConfidence = (confidence + projectRelevance) / 2;

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø: —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –í–°–ï–ì–î–ê —É–ø—Ä–∞–≤–ª—è–µ—Ç
      const shouldUseSemantic = true; // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏–∫—É

      SmartLogger.integration(`üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å=${(confidence * 100).toFixed(1)}%, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=${(projectRelevance * 100).toFixed(1)}%`);
      SmartLogger.integration(`üéØ –†–µ—à–µ–Ω–∏–µ: –°–ï–ú–ê–ù–¢–ò–ö–ê –í–°–ï–ì–î–ê –£–ü–†–ê–í–õ–Ø–ï–¢ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è)`);

      return {
        shouldUseSemantic: true, // –í–°–ï–ì–î–ê true
        reason: 'semantic_forced_activation', // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è
        semanticResult,
        confidence: overallConfidence,
        processingTime: semanticResult.processing_time,
        fallbackMode: false // –ù–ò–ö–ê–ö–ò–• fallback'–æ–≤
      };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return { shouldUseSemantic: false, reason: 'semantic_error', error: error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç (–≥–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)
   */
  async createSemanticResponse(semanticResult, userQuery, options) {
    try {
      SmartLogger.integration('üöÄ –°–û–ó–î–ê–ù–ò–ï –ê–í–¢–û–ù–û–ú–ù–û–ì–û –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –û–¢–í–ï–¢–ê');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (semanticResult && semanticResult.type === 'forced_autonomous') {
        return await this.createForcedAutonomousResponse(userQuery, options);
      }

      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
      return await this.createEnhancedSemanticResponse(semanticResult, userQuery, options);

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      return {
        success: false,
        error: error.message,
        provider: 'SemanticIntegration',
        reason: 'creation_error'
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç
   */
  async createForcedAutonomousResponse(userQuery, options) {
    SmartLogger.integration('üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ê–í–¢–û–ù–û–ú–ù–û–ô –°–ò–°–¢–ï–ú–´');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
      const nlgResponse = await naturalLanguageGenerator.generateResponse(
        userQuery,
        {
          userId: options.userId,
          sessionId: options.sessionId,
          category: 'conversation',
          context: { forced: true }
        }
      );

      if (nlgResponse && nlgResponse.response) {
        return {
          success: true,
          response: nlgResponse.response,
          provider: 'AUTONOMOUS_SYSTEM_FORCED',
          autonomous: true,
          metadata: nlgResponse.metadata
        };
      } else {
        throw new Error('–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç');
      }

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: ${error.message}`);
      return {
        success: false,
        error: error.message,
        provider: 'AUTONOMOUS_SYSTEM_FORCED'
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π (–æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥)
   */
  async createEnhancedSemanticResponse(semanticResult, userQuery, options) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ options
      const userId = options.userId || 1;
      const sessionId = options.sessionId || 'default';
      const category = this.extractCategoryFromSemantic(semanticResult);

      try {
        // === –≠–¢–ê–ü 1: –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï ===
        SmartLogger.integration('–≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è');

      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å fallback
      let userProfile = null;
      try {
        userProfile = await userMemoryManager.getOrCreateUserProfile(userId);
      } catch (error) {
        SmartLogger.integration(`‚ö†Ô∏è Fallback: —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (${error.message})`);
        userProfile = {
          id: userId,
          favoriteColors: ['—Å–∏–Ω–∏–π', '–∑–µ–ª–µ–Ω—ã–π'],
          preferredStyles: ['–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π'],
          designComplexity: 'medium',
          totalInteractions: 0
        };
      }

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–∏
      const communicationAnalysis = userProfiler.analyzeCommunicationStyle(userQuery);
      const designPreferences = userProfiler.analyzeDesignPreferences(userQuery);
      const emotionalState = userProfiler.analyzeEmotionalState(userQuery, options.sessionHistory);

      // === –≠–¢–ê–ü 2: –ö–û–ù–¢–ï–ö–°–¢–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï ===
      SmartLogger.integration('–≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è');

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å fallback
      let learningRecommendations = null;
      try {
        learningRecommendations = await learningSystem.getLearnedRecommendations(
          userId, userQuery, category
        );
      } catch (error) {
        SmartLogger.integration(`‚ö†Ô∏è Fallback: —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (${error.message})`);
        learningRecommendations = {
          confidence: 0.7,
          styleAdjustments: { tone: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π' },
          recommendations: ['–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏']
        };
      }

      // === –≠–¢–ê–ü 3: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò ===
      SmartLogger.integration('–≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
      const projectContext = await userMemoryManager.getUserProjectContext(userId);

      // === –≠–¢–ê–ü 4: –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–ï–°–õ–ò –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢) ===
      let imageAnalysisResult = null;
      if (options.hasRecentImages && options.recentImageUrl && visualSemanticIntegration) {
        SmartLogger.integration('–≠—Ç–∞–ø 4–∞: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');

        imageAnalysisResult = await visualSemanticIntegration.analyzeImageWithSemantics(
          options.recentImageUrl,
          {
            userId: userId,
            sessionId: sessionId,
            category: category,
            userProfile: userProfile
          }
        );

        if (imageAnalysisResult.success) {
          SmartLogger.integration('‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
            confidence: imageAnalysisResult.confidence_score,
            recommendations: imageAnalysisResult.recommendations?.length || 0
          });
        }
      }

      // === –≠–¢–ê–ü 4–±: –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê) ===
      SmartLogger.integration('–≠—Ç–∞–ø 4–±: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');

      const legacySemanticResult = await semanticMemoryModule.analyzeCompleteRequest(
        userQuery, 
        sessionId, 
        {
          chatContext: options.chatContext,
          hasRecentImages: options.hasRecentImages,
          userName: options.userName,
          userProfile: userProfile,
          projectContext: projectContext,
          imageAnalysis: imageAnalysisResult // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }
      );

      if (legacySemanticResult.error) {
        SmartLogger.integration('–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return { shouldUseSemantic: false, reason: 'error', error: legacySemanticResult.error };
      }

      // === –≠–¢–ê–ü 5: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
      const confidence = legacySemanticResult.confidence || 0;

      // –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ
      let adjustedConfidence = confidence;
      if (learningRecommendations) {
        adjustedConfidence += 15; // –ë–æ–Ω—É—Å –∑–∞ –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      }
      if (userProfile && userProfile.totalInteractions > 5) {
        adjustedConfidence += 10; // –ë–æ–Ω—É—Å –∑–∞ –∑–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }

      adjustedConfidence = Math.min(adjustedConfidence, 100);

      SmartLogger.integration(`–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence}% ‚Üí ${adjustedConfidence}% (—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π)`);

      // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –§–∞–∑—ã 1 –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const enhancedResult = {
        ...legacySemanticResult,

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –§–∞–∑—ã 1
        phase1Data: {
          userProfile,
          communicationAnalysis,
          designPreferences,
          emotionalState,
          learningRecommendations,
          projectContext
        },

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        imageAnalysis: imageAnalysisResult,

        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        originalConfidence: confidence,
        adjustedConfidence: this.adjustConfidenceWithImageAnalysis(adjustedConfidence, imageAnalysisResult)
      };

      if (adjustedConfidence >= this.semanticThreshold) {
        SmartLogger.integration(`‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –±–µ—Ä–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${adjustedConfidence}% >= ${this.semanticThreshold}%)`);

        return {
          shouldUseSemantic: true,
          semanticResult: enhancedResult,
          confidence: adjustedConfidence,
          reason: 'high_confidence_with_personalization'
        };
      } else {
        SmartLogger.integration(`‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–µ–º–∞–Ω—Ç–∏–∫–∏ (${adjustedConfidence}% < ${this.semanticThreshold}%), –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏`);

        return {
          shouldUseSemantic: false,
          semanticResult: enhancedResult, // –ø–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
          confidence: adjustedConfidence,
          reason: 'low_confidence_but_enriched'
        };
      }

    } catch (error) {
      SmartLogger.integration(`–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
      return { shouldUseSemantic: false, reason: 'exception', error: error.message };
    }
  }

  /**
   * –§–ê–ó–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  async createEnhancedSemanticResponsePhase1(semanticResult, userQuery, options = {}) {
    SmartLogger.integration('–§–ê–ó–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');

    try {
      const userId = options.userId || 1;
      const category = this.extractCategoryFromSemantic(semanticResult);

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –§–∞–∑—ã 1
      const phase1Data = semanticResult.phase1Data || {};
      const { userProfile, communicationAnalysis, designPreferences, emotionalState, learningRecommendations } = phase1Data;

      // === –≠–¢–ê–ü 1: –ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–†–û–ú–ü–¢–ê –° –û–ë–£–ß–ï–ù–ò–ï–ú ===
      let enhancedPrompt = semanticResult.enhanced_prompt || userQuery;

      if (learningRecommendations) {
        SmartLogger.integration('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∫ –ø—Ä–æ–º–ø—Ç—É');
        const learningAdaptation = await learningSystem.adaptPromptWithLearning(userId, enhancedPrompt, category);
        if (learningAdaptation.adaptedPrompt) {
          enhancedPrompt = learningAdaptation.adaptedPrompt;
        }
      }

      // === –≠–¢–ê–ü 2: –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–û–ú–ü–¢–ê ===
      if (userProfile && designPreferences) {
        enhancedPrompt = this.personalizePrompt(enhancedPrompt, userProfile, designPreferences);
      }

      // –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
      const contextData = {
        currentProject: semanticResult.current_project,
        predictions: semanticResult.predictions || [],
        recommendations: semanticResult.system_recommendations || [],
        compatibility: semanticResult.compatibility,
        userProfile,
        communicationAnalysis,
        designPreferences,
        emotionalState,
        learningRecommendations
      };

      // === –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –û–¢–í–ï–¢–ê ===
      let response = await this.createPersonalizedResponse(enhancedPrompt, category, contextData, options);

      // === –≠–¢–ê–ü 4: –ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–û–î –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
      if (userProfile && emotionalState) {
        response = userProfiler.adaptResponseToProfile(response, userProfile, emotionalState);
      }

      // === –≠–¢–ê–ü 5: –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê –ü–†–û–ï–ö–¢–ê ===
      if (category === 'image_generation' || category === 'vectorization') {
        await this.saveProjectContext(userId, options.sessionId, category, userQuery, contextData);
      }

      SmartLogger.integration(`‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);

      return {
        success: true,
        response,
        provider: 'SemanticMemoryPhase1',
        category,
        semanticData: {
          confidence: semanticResult.adjustedConfidence || semanticResult.confidence,
          projectId: contextData.currentProject?.id,
          predictionsCount: contextData.predictions.length,
          hasPersonalization: !!userProfile,
          hasLearning: !!learningRecommendations
        },
        phase1Metadata: {
          userId,
          profileId: userProfile?.id,
          communicationStyle: communicationAnalysis?.dominantStyle,
          emotionalTone: emotionalState?.currentEmotion,
          learningConfidence: learningRecommendations?.confidence
        }
      };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      return {
        success: false,
        error: error.message,
        shouldFallback: true
      };
    }
  }

  // === –§–ê–ó–ê 1: –ù–û–í–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  personalizePrompt(prompt, userProfile, designPreferences) {
    let personalizedPrompt = prompt;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if (userProfile.favoriteColors && userProfile.favoriteColors.length > 0) {
      const colors = userProfile.favoriteColors.slice(0, 2).join(' –∏ ');
      personalizedPrompt += ` –£—á—Ç–∏ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${colors}.`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if (userProfile.preferredStyles && userProfile.preferredStyles.length > 0) {
      const styles = userProfile.preferredStyles.slice(0, 2).join(' –∏ ');
      personalizedPrompt += ` –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å—Ç–∏–ª–∏: ${styles}.`;
    }

    // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–∏–∑–∞–π–Ω–∞
    if (userProfile.designComplexity) {
      const complexityHints = {
        simple: '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å, —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏',
        medium: '—É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
        complex: '–¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
      };
      personalizedPrompt += ` –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${complexityHints[userProfile.designComplexity]}.`;
    }

    return personalizedPrompt;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  async createPersonalizedResponse(enhancedPrompt, category, contextData, options) {
    switch (category) {
      case 'image_generation':
        return this.createImageGenerationResponse(enhancedPrompt, contextData, options);
      case 'image_consultation':
        return await this.createConsultationResponse(enhancedPrompt, contextData, options);
      case 'vectorization':
        return this.createVectorizationResponse(enhancedPrompt, contextData, options);
      case 'web_search':
        return this.createSearchResponse(enhancedPrompt, contextData, options);
      default:
        return await this.createGeneralResponse(enhancedPrompt, contextData, options);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  createImageGenerationResponse(prompt, contextData, options) {
    let response = `–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${prompt}`;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (contextData.userProfile) {
      if (contextData.designPreferences?.styles) {
        const styles = Object.keys(contextData.designPreferences.styles);
        if (styles.length > 0) {
          response += `\n\n–£—á–∏—Ç—ã–≤–∞—é –≤–∞—à —Å—Ç–∏–ª—å: ${styles[0]}.`;
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–∏—è
    if (contextData.learningRecommendations) {
      response += `\n\nüí° –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–ø—ã—Ç–∞: ${contextData.learningRecommendations.styleAdjustments?.tone || '–ø—Ä–∏–º–µ–Ω—è—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}.`;
    }

    return response;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –î–£–ú–ê–Æ–©–£–Æ –°–ò–°–¢–ï–ú–£
   */
  async createConsultationResponse(prompt, contextData, options) {
    SmartLogger.integration('üß† –ê–ö–¢–ò–í–ê–¶–ò–Ø –î–£–ú–ê–Æ–©–ï–ô –°–ò–°–¢–ï–ú–´');

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥—É–º–∞—é—â—É—é —Å–∏—Å—Ç–µ–º—É
      // const naturalLanguageGenerator = require('./semantic-memory/natural-language-generator.cjs');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
      const consultationContext = {
        userQuery: prompt,
        userProfile: contextData.userProfile,
        emotionalState: contextData.emotionalState,
        communicationAnalysis: contextData.communicationAnalysis,
        sessionId: options.sessionId || 'default',
        userId: options.userId || 1,
        messageCount: options.messageCount || 0
      };

      SmartLogger.integration('üí≠ –î—É–º–∞—é –Ω–∞–¥ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º');

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
      let thoughtfulResponse;
      if (naturalLanguageGenerator && typeof naturalLanguageGenerator.generateResponse === 'function') {
        thoughtfulResponse = await naturalLanguageGenerator.generateResponse(
          prompt, // –ü–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é
          consultationContext,
          contextData.userProfile
        );
      } else {
        throw new Error('naturalLanguageGenerator.generateResponse is not a function');
      }


      if (thoughtfulResponse && thoughtfulResponse.success && thoughtfulResponse.response) {
        SmartLogger.integration('‚úÖ –î—É–º–∞—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç');
        return thoughtfulResponse.response;
      } else {
        throw new Error('Thinking system failed');
      }

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –¥—É–º–∞—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã: ${error.message}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç`);

      // –ü—Ä–æ—Å—Ç–æ–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ë–ï–ó —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
      return `–ü–æ–Ω–∏–º–∞—é! –î–∞–π –º–Ω–µ –ø–æ–¥—É–º–∞—Ç—å –Ω–∞–¥ —Ç–≤–æ–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. 

–ß–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –º–æ–≥—É –ø–æ–º–æ—á—å? –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç! üòä`;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  createVectorizationResponse(prompt, contextData, options) {
    let response = `–í–µ–∫—Ç–æ—Ä–∏–∑—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.`;

    if (contextData.userProfile?.designComplexity === 'simple') {
      response += ' –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.';
    } else if (contextData.userProfile?.designComplexity === 'complex') {
      response += ' –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–µ—Ç–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.';
    }

    return response;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  createSearchResponse(prompt, contextData, options) {
    return `–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ${prompt}`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ –î–£–ú–ê–Æ–©–£–Æ –°–ò–°–¢–ï–ú–£
   */
  async createGeneralResponse(prompt, contextData, options) {
    SmartLogger.integration('üß† –ê–ö–¢–ò–í–ê–¶–ò–Ø –î–£–ú–ê–Æ–©–ï–ô –°–ò–°–¢–ï–ú–´ –ì–ï–ù–ï–†–ê–¶–ò–ò');

    try {
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥—É–º–∞—é—â—É—é —Å–∏—Å—Ç–µ–º—É
      //const naturalLanguageGenerator = require('./semantic-memory/natural-language-generator.cjs');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –¥—É–º–∞—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã
      const thinkingContext = {
        userQuery: prompt,
        userProfile: contextData.userProfile,
        emotionalState: contextData.emotionalState,
        communicationAnalysis: contextData.communicationAnalysis,
        sessionId: options.sessionId || 'default',
        userId: options.userId || 1,messageCount: options.messageCount || 0
      };

      SmartLogger.integration('üí≠ –î—É–º–∞—é –Ω–∞–¥ –æ—Ç–≤–µ—Ç–æ–º');

      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ –æ–±—ä–µ–∫—Ç–∞
      let thoughtfulResponse;
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
      if (naturalLanguageGenerator) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        let generateMethod = null;

        if (typeof naturalLanguageGenerator.generateResponse === 'function') {
          generateMethod = naturalLanguageGenerator.generateResponse;
        } else if (naturalLanguageGenerator.instance && typeof naturalLanguageGenerator.instance.generateResponse === 'function') {
          generateMethod = naturalLanguageGenerator.instance.generateResponse.bind(naturalLanguageGenerator.instance);
        } else if (typeof naturalLanguageGenerator === 'function') {
          // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å–∞–º –∫–ª–∞—Å—Å/—Ñ—É–Ω–∫—Ü–∏—è
          try {
            const instance = new naturalLanguageGenerator();
            if (typeof instance.generateResponse === 'function') {
              generateMethod = instance.generateResponse.bind(instance);
            }
          } catch (error) {
            SmartLogger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:', error.message);
          }
        }

        if (generateMethod) {
          SmartLogger.debug('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞');

          try {
            thoughtfulResponse = await generateMethod(prompt, thinkingContext, contextData.userProfile);
          } catch (error) {
            SmartLogger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error.message);
            // Fallback –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∏–∂–µ
          }
        } else {
          SmartLogger.warn('‚ö†Ô∏è –ú–µ—Ç–æ–¥ generateResponse –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–æ–¥—É–ª–µ naturalLanguageGenerator');
        }
      }

      if (thoughtfulResponse && thoughtfulResponse.success && thoughtfulResponse.response) {
        SmartLogger.integration('‚úÖ –î—É–º–∞—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –æ—Ç–≤–µ—Ç');

        const response = thoughtfulResponse.response;

        SmartLogger.integration(`üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: "${response.substring(0, 100)}..."`);

        SmartLogger.integration(`‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç`);
        return response;
      } else {
        throw new Error('Thinking system failed or returned empty response');
      }

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –¥—É–º–∞—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã: ${error.message}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç`);

      // –£–ª—É—á—à–µ–Ω–Ω—ã–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ë–ï–ó —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
      const prompt_lower = prompt.toLowerCase();

      if (prompt_lower.includes('–ø—Ä–∏–≤–µ—Ç') || prompt_lower.includes('—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ') || prompt_lower.includes('–∫—Ç–æ —Ç—ã')) {
        return `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç BOOOMERANGS AI, –∏ —è –≤–∞—à —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫!

üöÄ **–ú–æ–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ü—Ä–µ–≤—Ä–∞—â–∞—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –≥—Ä–∞—Ñ–∏–∫—É  
‚Ä¢ –ì–æ—Ç–æ–≤–ª—é –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –≤—ã—à–∏–≤–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –ø–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ –ü—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–æ –æ–±—â–∞—é—Å—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã!

–ê –µ—â–µ —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å –∏ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å —É–º–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –¥–∏–∞–ª–æ–≥–æ–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
      } else if (prompt_lower.includes('–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ') || prompt_lower.includes('—á—Ç–æ –∑–Ω–∞–µ—à—å')) {
        return `–û—Ö, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —è –∑–Ω–∞—é –º–Ω–æ–≥–æ! ü§ì –°–º–æ—Ç—Ä—è —á—Ç–æ —Ç–µ–±—è –∑–∞—Ü–µ–ø–∏—Ç:

üé® **–í –¥–∏–∑–∞–π–Ω–µ:** –ó–Ω–∞–µ—à—å –ª–∏ —Ç—ã, —á—Ç–æ –∑–æ–ª–æ—Ç–æ–µ —Å–µ—á–µ–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ, –Ω–æ –∏ –≤ –ø—Ä–∏—Ä–æ–¥–µ? –û—Ç —Ä–∞–∫–æ–≤–∏–Ω —É–ª–∏—Ç–æ–∫ –¥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Å–µ–º—è–Ω –≤ –ø–æ–¥—Å–æ–ª–Ω—É—Ö–µ!

üñºÔ∏è **–í —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö:** –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ—Ç–ª–∏—á–∏–º—ã –æ—Ç —Ä–∞–±–æ—Ç —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤. –ù–æ —Å–∞–º–æ–µ –∫—Ä—É—Ç–æ–µ - –æ–Ω–∏ —É—á–∞—Ç—Å—è –ø–æ–Ω–∏–º–∞—Ç—å —ç–º–æ—Ü–∏–∏ –∏ —Å—Ç–∏–ª—å.

üßµ **–í –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ:** –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –≤—ã—à–∏–≤–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –º–æ–≥—É—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –ª—é–±–æ–π –¥–∏–∑–∞–π–Ω —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ –¥–æ–ª–µ–π –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞!

–ê —á—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç - —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∏–ª–∏ –º–æ–∂–µ—Ç —á—Ç–æ-—Ç–æ —Å–æ–≤—Å–µ–º –¥—Ä—É–≥–æ–µ? –Ø –≥–æ—Ç–æ–≤ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –ª—é–±—É—é —Ç–µ–º—É! üòä`;
      } else if (prompt_lower.includes('–ø—Ä–∏–Ω—Ç') && prompt_lower.includes('–º–æ–¥–µ')) {
        return `–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! üé® –í –º–∏—Ä–µ –ø—Ä–∏–Ω—Ç–æ–≤ —Å–µ–π—á–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏:

**üî• –°–µ–π—á–∞—Å –≤ —Ç—Ä–µ–Ω–¥–µ:**
‚Ä¢ **–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã** - –ø–ª–∞–≤–Ω—ã–µ –ª–∏–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞—é—Ç –ø—Ä–∏—Ä–æ–¥—É
‚Ä¢ **–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è –≥–µ–æ–º–µ—Ç—Ä–∏—è** - –Ω–µ —Å—Ç—Ä–æ–≥–∏–µ –∫–≤–∞–¥—Ä–∞—Ç—ã, –∞ —Å–≤–æ–±–æ–¥–Ω—ã–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
‚Ä¢ **–ú–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã** - –æ–¥–∏–Ω —è—Ä–∫–∏–π —Ü–≤–µ—Ç –Ω–∞ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–º —Ñ–æ–Ω–µ
‚Ä¢ **–†–µ—Ç—Ä–æ-—Ñ—É—Ç—É—Ä–∏–∑–º** - —Å–º–µ—Å—å 80-—Ö –∏ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —ç—Å—Ç–µ—Ç–∏–∫–∏

**üí° –ú–æ–π —Å–æ–≤–µ—Ç:** 
–í—ã–±–∏—Ä–∞–π —Ç–æ, —á—Ç–æ —Ä–µ–∑–æ–Ω–∏—Ä—É–µ—Ç –∏–º–µ–Ω–Ω–æ —Å —Ç–æ–±–æ–π. –ú–æ–¥–∞ —Ü–∏–∫–ª–∏—á–Ω–∞, –Ω–æ —Å—Ç–∏–ª—å - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–µ–Ω. –õ—É—á—à–µ —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ, —á—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç —Ç–≤–æ—é –ª–∏—á–Ω–æ—Å—Ç—å, —á–µ–º —Å–ª–µ–ø–æ —Å–ª–µ–¥–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥–∞–º.

–î–ª—è —á–µ–≥–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –ø—Ä–∏–Ω—Ç? –û–¥–µ–∂–¥–∞, –∏–Ω—Ç–µ—Ä—å–µ—Ä, –∏–ª–∏ —á—Ç–æ-—Ç–æ –µ—â–µ? –ú–æ–≥—É –¥–∞—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏! üòä`;
      } else {
        return "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ - –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å üòä";
      }
    }
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å NLG
   */
  normalizeSemanticDataForNLG(prompt, contextData, options) {
    // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø prompt
    const promptString = typeof prompt === 'string' ? prompt : String(prompt || '');
    const promptLower = promptString.toLowerCase();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    let intent = 'general_chat';

    if (promptLower.includes('—Ä–∞—Å—Å–∫–∞–∂–∏') || promptLower.includes('–æ —Å–µ–±–µ')) {
      intent = '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ';
    } else if (promptLower.includes('—Å–æ–∑–¥–∞–π') || promptLower.includes('—Å–¥–µ–ª–∞–π')) {
      intent = '—Å–æ–∑–¥–∞–π';
    } else if (promptLower.includes('–∞–Ω–∞–ª–∏–∑') || promptLower.includes('–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π')) {
      intent = '–∞–Ω–∞–ª–∏–∑';
    } else if (promptLower.includes('–∫–∞–∫') || promptLower.includes('—á—Ç–æ —Ç–∞–∫–æ–µ')) {
      intent = '–æ–±—ä—è—Å–Ω–∏';
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    const normalizedResult = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –¥–ª—è NLG
      intent: intent,
      content: promptString,
      query: promptString,
      originalQuery: promptString,

      // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      context: contextData || {},
      emotion: contextData?.emotionalState?.currentEmotion || 'neutral',
      style: contextData?.communicationAnalysis?.dominantStyle || 'friendly',
      complexity: contextData?.userProfile?.designComplexity || 'medium',

      // –ú–µ—Ç–∞-–¥–∞–Ω–Ω—ã–µ
      mainTopic: this.extractMainTopic(promptString),
      subTopics: this.extractSubTopics(promptString),
      contextDetails: contextData?.currentProject?.description || null,

      //
    };
  }

  async generateSmartResponse(userMessage, conversationHistory, sessionId) {
    let response = null;
    const metadata = {
      generatedBy: 'fallback',
      modulesUsed: []
    };

    // –ê–Ω–∞–ª–∏–∑ —Å–µ–º–∞–Ω—Ç–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    let analysis = null;
    try {
      analysis = await this.analyzeWithSemantics(userMessage, {
        sessionId: sessionId,
        conversationHistory: conversationHistory
      });
    } catch (error) {
      SmartLogger.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
      analysis = null;
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let userProfile = null;
    try {
      userProfile = await userMemoryManager.getOrCreateUserProfile(1); // userId = 1
      metadata.modulesUsed.push('user-memory-manager');
    } catch (error) {
      SmartLogger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É
      if (naturalLanguageGenerator) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∞
        let generateMethod = null;

        if (typeof naturalLanguageGenerator.generateResponse === 'function') {
          generateMethod = naturalLanguageGenerator.generateResponse;
        } else if (naturalLanguageGenerator.instance && typeof naturalLanguageGenerator.instance.generateResponse === 'function') {
          generateMethod = naturalLanguageGenerator.instance.generateResponse.bind(naturalLanguageGenerator.instance);
        } else if (typeof naturalLanguageGenerator === 'function') {
          // –ï—Å–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —Å–∞–º –∫–ª–∞—Å—Å/—Ñ—É–Ω–∫—Ü–∏—è
          try {
            const instance = new naturalLanguageGenerator();
            if (typeof instance.generateResponse === 'function') {
              generateMethod = instance.generateResponse.bind(instance);
            }
          } catch (error) {
            SmartLogger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:', error.message);
          }
        }

        if (generateMethod) {
          SmartLogger.debug('üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞');

          try {
            response = await generateMethod(userMessage, {
              conversationHistory: conversationHistory,
              semanticContext: analysis,
              userProfile: userProfile,
              sessionId: sessionId
            });

            metadata.generatedBy = 'natural-language-generator';
            metadata.modulesUsed.push('natural-language-generator');
          } catch (error) {
            SmartLogger.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:', error.message);
            // Fallback –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –Ω–∏–∂–µ
          }
        } else {
          SmartLogger.warn('‚ö†Ô∏è –ú–µ—Ç–æ–¥ generateResponse –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –º–æ–¥—É–ª–µ naturalLanguageGenerator');
        }
      }

    // Fallback, –µ—Å–ª–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    if (!response || (typeof response === 'string' && !response.trim()) || (typeof response !== 'string' && !response)) {
      SmartLogger.warn('‚ö†Ô∏è Fallback –∫ –±–∞–∑–æ–≤–æ–º—É –æ—Ç–≤–µ—Ç—É');
      response = "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?";
      metadata.generatedBy = 'fallback';
    }

    // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º, —á—Ç–æ response –≤—Å–µ–≥–¥–∞ —Å—Ç—Ä–æ–∫–∞
    if (typeof response !== 'string') {
      response = String(response || '');
    }

    return { response, metadata };
  }

  extractCategoryFromSemantic(semanticResult) {
    return semanticResult?.enhanced_recommendations?.category || semanticResult?.system_recommendations?.category || 'general';
  }

  extractMainTopic(text) {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const keywords = ['–¥–∏–∑–∞–π–Ω', '–≥—Ä–∞—Ñ–∏–∫–∞', '–≤–µ–∫—Ç–æ—Ä', '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–ø—Ä–∏–Ω—Ç', '–º–æ–¥–∞'];
    for (const keyword of keywords) {
      if (text.toLowerCase().includes(keyword)) {
        return keyword;
      }
    }
    return '–æ–±—â–µ–µ';
  }

  extractSubTopics(text) {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Ç–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    const subTopics = [];
    if (text.toLowerCase().includes('—Ü–≤–µ—Ç')) {
      subTopics.push('—Ü–≤–µ—Ç');
    }
    if (text.toLowerCase().includes('—Å—Ç–∏–ª—å')) {
      subTopics.push('—Å—Ç–∏–ª—å');
    }
    return subTopics;
  }

  adjustConfidenceWithImageAnalysis(confidence, imageAnalysisResult) {
    if (imageAnalysisResult && imageAnalysisResult.success) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const imageConfidence = imageAnalysisResult.confidence_score || 0;
      return Math.min(confidence + imageConfidence * 0.2, 100); // –ú–∞–∫—Å–∏–º—É–º 20% –ø—Ä–∏—Ä–æ—Å—Ç
    }
    return confidence;
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ performBasicSemanticAnalysis
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
   */
  async performBasicSemanticAnalysis(userInput, context = {}) {
    console.log(`üîç [BASIC-SEMANTIC] –ù–∞—á–∏–Ω–∞–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑: "${userInput.substring(0, 50)}"`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥—É–ª—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      if (semanticMemory && typeof semanticMemory.analyzeCompleteRequest === 'function') {
        const result = await semanticMemory.analyzeCompleteRequest(
          userInput,
          context.sessionId || 'default',
          {
            hasRecentImages: context.hasRecentImages || false,
            chatContext: context.chatContext,
            requestType: 'basic_analysis',
            userPreferences: context.userPreferences
          }
        );

        console.log(`‚úÖ [BASIC-SEMANTIC] –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        return {
          intent: result.intent || 'general_conversation',
          confidence: result.confidence || 0.6,
          category: result.enhanced_recommendations?.category || 'conversation',
          semantic_analysis: {
            query_type: result.query_type || 'dialog',
            dialog_category: result.dialog_category || 'general_chat',
            semantic_cluster: result.semantic_cluster || { name: 'conversation', confidence: 60 },
            intentions: result.intentions || [],
            context_clues: result.context_clues || {}
          },
          processing_time: result.processing_time || 0,
          fallback: false
        };
      } else {
        throw new Error('–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    } catch (error) {
      console.error(`‚ùå [BASIC-SEMANTIC] –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);

      // Fallback —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
      return {
        intent: 'general_conversation',
        confidence: 0.4,
        category: 'conversation',
        semantic_analysis: {
          query_type: 'dialog',
          dialog_category: 'general_chat',
          semantic_cluster: { name: 'conversation', confidence: 40 },
          intentions: [],
          context_clues: {}
        },
        processing_time: 0,
        fallback: true,
        error: error.message
      };
    }
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ performEmotionalAnalysis
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
   */
  async performEmotionalAnalysis(userInput, context = {}) {
    console.log(`üòä [EMOTIONAL-ANALYSIS] –ù–∞—á–∏–Ω–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: "${userInput.substring(0, 50)}"`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –º–∞—Ç—Ä–∏—Ü—É
      if (emotionalSemanticMatrix && typeof emotionalSemanticMatrix.analyzeEmotionalContext === 'function') {
        const emotionalResult = await emotionalSemanticMatrix.analyzeEmotionalContext(userInput, {
          userHistory: context.conversationHistory || [],
          sessionContext: context.sessionContext || {},
          previousEmotions: context.previousEmotions || []
        });

        console.log(`‚úÖ [EMOTIONAL-ANALYSIS] –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
        return {
          primary_emotion: emotionalResult.primary_emotion || 'neutral',
          confidence: emotionalResult.confidence || 0.5,
          emotional_intensity: emotionalResult.emotional_intensity || 0.5,
          emotional_valence: emotionalResult.emotional_valence || 0.5,
          secondary_emotions: emotionalResult.secondary_emotions || [],
          emotional_trajectory: emotionalResult.emotional_trajectory || 'stable',
          context_emotions: emotionalResult.context_emotions || {},
          processing_time: emotionalResult.processing_time || 0,
          fallback: false
        };
      } else {
        throw new Error('–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
      }
    } catch (error) {
      console.error(`‚ùå [EMOTIONAL-ANALYSIS] –û—à–∏–±–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);

      // Fallback —Å –±–∞–∑–æ–≤—ã–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
      const inputLower = userInput.toLowerCase();
      let primaryEmotion = 'neutral';
      let confidence = 0.3;

      // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–π –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      if (inputLower.includes('—Å–ø–∞—Å–∏–±–æ') || inputLower.includes('–æ—Ç–ª–∏—á–Ω–æ') || inputLower.includes('–∫—Ä—É—Ç–æ')) {
        primaryEmotion = 'joy';
        confidence = 0.7;
      } else if (inputLower.includes('–ø–æ–º–æ–≥–∏') || inputLower.includes('–Ω–µ –ø–æ–Ω–∏–º–∞—é') || inputLower.includes('–ø—Ä–æ–±–ª–µ–º–∞')) {
        primaryEmotion = 'frustration';
        confidence = 0.6;
      } else if (inputLower.includes('–ø—Ä–∏–≤–µ—Ç') || inputLower.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
        primaryEmotion = 'friendly';
        confidence = 0.8;
      }

      return {
        primary_emotion: primaryEmotion,
        confidence: confidence,
        emotional_intensity: 0.5,
        emotional_valence: primaryEmotion === 'joy' ? 0.8 : 0.5,
        secondary_emotions: [],
        emotional_trajectory: 'stable',
        context_emotions: {},
        processing_time: 0,
        fallback: true,
        error: error.message
      };
    }
  }

  /**
   * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ performUserProfiling
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞
   */
  async performUserProfiling(userInput, context = {}) {
    console.log(`üë§ [USER-PROFILING] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: "${userInput.substring(0, 50)}"`);

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (userProfiler && typeof userProfiler.analyzeCommunicationStyle === 'function') {
        const communicationAnalysis = userProfiler.analyzeCommunicationStyle(userInput);
        const designPreferences = userProfiler.analyzeDesignPreferences ? 
                                 userProfiler.analyzeDesignPreferences(userInput) : {};
        const emotionalState = userProfiler.analyzeEmotionalState ? 
                               userProfiler.analyzeEmotionalState(userInput, context.sessionHistory) : {};

        console.log(`‚úÖ [USER-PROFILING] –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
        return {
          communication_style: communicationAnalysis,
          design_preferences: designPreferences,
          emotional_state: emotionalState,
          user_context: {
            session_length: context.sessionHistory?.length || 0,
            interaction_patterns: this.extractInteractionPatterns(userInput),
            complexity_preference: this.determineComplexityPreference(userInput),
            tone_preference: this.determineTonePreference(userInput)
          },
          confidence: 0.7,
          processing_time: 0,
          fallback: false
        };
      } else {
        throw new Error('–ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤—â–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
    } catch (error) {
      console.error(`‚ùå [USER-PROFILING] –û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);

      // Fallback —Å –±–∞–∑–æ–≤—ã–º –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      return {
        communication_style: {
          dominantStyle: this.determineTonePreference(userInput),
          formality: userInput.includes('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞') || userInput.includes('–±–ª–∞–≥–æ–¥–∞—Ä—é') ? 'formal' : 'informal',
          directness: userInput.length < 50 ? 'direct' : 'descriptive'
        },
        design_preferences: {
          complexity: this.determineComplexityPreference(userInput),
          style_indicators: this.extractStyleIndicators(userInput)
        },
        emotional_state: {
          current_mood: 'neutral',
          engagement_level: 0.5
        },
        user_context: {
          session_length: context.sessionHistory?.length || 0,
          interaction_patterns: this.extractInteractionPatterns(userInput),
          complexity_preference: this.determineComplexityPreference(userInput),
          tone_preference: this.determineTonePreference(userInput)
        },
        confidence: 0.4,
        processing_time: 0,
        fallback: true,
        error: error.message
      };
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  extractInteractionPatterns(userInput) {
    const patterns = [];
    const inputLower = userInput.toLowerCase();

    if (inputLower.includes('—Å–æ–∑–¥–∞–π') || inputLower.includes('—Å–¥–µ–ª–∞–π')) {
      patterns.push('creative_requests');
    }
    if (inputLower.includes('–æ–±—ä—è—Å–Ω–∏') || inputLower.includes('—Ä–∞—Å—Å–∫–∞–∂–∏')) {
      patterns.push('information_seeking');
    }
    if (inputLower.includes('–ø–æ–º–æ–≥–∏') || inputLower.includes('–∫–∞–∫')) {
      patterns.push('assistance_seeking');
    }

    return patterns;
  }

  determineComplexityPreference(userInput) {
    const inputLower = userInput.toLowerCase();

    if (inputLower.includes('–ø—Ä–æ—Å—Ç–æ–π') || inputLower.includes('–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π') || inputLower.includes('–ª–µ–≥–∫–∏–π')) {
      return 'simple';
    } else if (inputLower.includes('—Å–ª–æ–∂–Ω—ã–π') || inputLower.includes('–¥–µ—Ç–∞–ª—å–Ω—ã–π') || inputLower.includes('–ø–æ–¥—Ä–æ–±–Ω—ã–π')) {
      return 'complex';
    }

    return 'medium';
  }

  determineTonePreference(userInput) {
    const inputLower = userInput.toLowerCase();

    if (inputLower.includes('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞') || inputLower.includes('–±–ª–∞–≥–æ–¥–∞—Ä—é') || inputLower.includes('–∏–∑–≤–∏–Ω–∏—Ç–µ')) {
      return 'formal';
    } else if (inputLower.includes('–ø—Ä–∏–≤–µ—Ç') || inputLower.includes('—Å–ø–∞—Å–∏–±–æ') || inputLower.includes('–∫—Ä—É—Ç–æ')) {
      return 'friendly';
    } else if (userInput.length < 30) {
      return 'brief';
    }

    return 'neutral';
  }

  extractStyleIndicators(userInput) {
    const indicators = [];
    const inputLower = userInput.toLowerCase();

    const styleKeywords = {
      minimalist: ['–º–∏–Ω–∏–º–∞–ª–∏–∑–º', '–ø—Ä–æ—Å—Ç–æ–π', '—á–∏—Å—Ç—ã–π', '–ª–∞–∫–æ–Ω–∏—á–Ω—ã–π'],
      vintage: ['–≤–∏–Ω—Ç–∞–∂', '—Ä–µ—Ç—Ä–æ', '—Å—Ç–∞—Ä–∏–Ω–Ω—ã–π', '–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π'],
      modern: ['—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–º–æ–¥–Ω—ã–π', '–∞–∫—Ç—É–∞–ª—å–Ω—ã–π', '—Ç—Ä–µ–Ω–¥–æ–≤—ã–π'],
      artistic: ['—Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π', '–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π']
    };

    Object.entries(styleKeywords).forEach(([style, keywords]) => {
      if (keywords.some(keyword => inputLower.includes(keyword))) {
        indicators.push(style);
      }
    });

    return indicators;
  }

  // –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  detectKnowledgeRequest(userInput) {
    const lowerInput = userInput.toLowerCase();

    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const knowledgeKeywords = [
      '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–æ–±—ä—è—Å–Ω–∏', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—á—Ç–æ –∑–Ω–∞–µ—à—å –æ',
      '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–æ–ø–∏—à–∏',
      '—á—Ç–æ —ç—Ç–æ', '–∫–∞–∫ —ç—Ç–æ', '–∑–∞—á–µ–º', '–¥–ª—è —á–µ–≥–æ', '–∏—Å—Ç–æ—Ä–∏—è', '–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ'
    ];

    // –ü—Ä–µ–¥–º–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    const knowledgeDomains = [
      '–ø–ª–∞–Ω–µ—Ç', '–º–∞—Ä—Å', '—é–ø–∏—Ç–µ—Ä', '–∑–µ–º–ª—è', '–∫–æ—Å–º–æ—Å', '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
      '–º–µ–¥–∏—Ü–∏–Ω', '–Ω–∞—É–∫–∞', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–±–∏–æ–ª–æ–≥–∏—è', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
      '–∏—Å—Ç–æ—Ä–∏—è', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
      '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∫—É–ª—å—Ç—É—Ä–∞', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '—Ä–µ–ª–∏–≥–∏—è',
      '–ø–æ–ª–∏—Ç–∏–∫–∞', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–æ–±—â–µ—Å—Ç–≤–æ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è'
    ];

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const hasKnowledgeKeywords = knowledgeKeywords.some(keyword => 
      lowerInput.includes(keyword)
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    const hasKnowledgeDomains = knowledgeDomains.some(domain => 
      lowerInput.includes(domain)
    );

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const isQuestion = lowerInput.includes('?') || 
                      lowerInput.startsWith('—á—Ç–æ') ||
                      lowerInput.startsWith('–∫–∞–∫') ||
                      lowerInput.startsWith('–≥–¥–µ') ||
                      lowerInput.startsWith('–∫–æ–≥–¥–∞') ||
                      lowerInput.startsWith('–ø–æ—á–µ–º—É') ||
                      lowerInput.startsWith('–∑–∞—á–µ–º');

    return hasKnowledgeKeywords || hasKnowledgeDomains || isQuestion;
  }

  /**
   * –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
   */
  async enrichWithExternalSources(analysisResult, context) {
    try {
      const { originalQuery, enhancedContext } = context;
      const startTime = Date.now();

      // –ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
      let metaAnalysis = null;
      if (enhancedContext.includeMetaAnalysis) {
        try {
          const { performMetaAnalysis } = require('../meta-analysis-provider');
          metaAnalysis = await performMetaAnalysis(originalQuery, {
            language: 'ru',
            domain: 'general',
            maxResults: 5
          });
        } catch (error) {
          SmartLogger.integration(`‚ö†Ô∏è –ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
        }
      }

      // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
      let emotionalProfile = null;
      if (enhancedContext.includeEmotionalAnalysis) {
        try {
          const { analyzeEmotionalTone } = require('../emotional-analysis-provider');
          emotionalProfile = await analyzeEmotionalTone(originalQuery, {
            userProfile: enhancedContext.userProfile
          });
        } catch (error) {
          SmartLogger.integration(`‚ö†Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
        }
      }

      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      let advancedSearchResults = null;
      let externalKnowledgeResults = null;

      if (enhancedContext.includeAdvancedSearch) {
        try {
          const { performAdvancedSearch } = require('../advanced-search-provider');
          advancedSearchResults = await performAdvancedSearch(originalQuery, {
            searchType: 'comprehensive',
            language: 'ru',
            maxResults: 8,
            includeAnalysis: true
          });
        } catch (error) {
          SmartLogger.integration(`‚ö†Ô∏è –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
        }
      }

      // –û–±–æ–≥–∞—â–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
      if (enhancedContext.includeExternalKnowledge) {
        try {
          const { enrichWithExternalKnowledge } = require('./semantic-memory/external-knowledge-integrator.cjs');
          externalKnowledgeResults = await enrichWithExternalKnowledge(originalQuery, {
            includeAdvancedSearch: true,
            searchType: 'comprehensive',
            language: enhancedContext.language || 'ru'
          });
        } catch (error) {
          SmartLogger.integration(`‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${error.message}`);
        }
      }

      // –§–∏–Ω–∞–ª—å–Ω–∞—è –∫–æ–º–ø–∏–ª—è—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const finalResult = {
        query: originalQuery,
        timestamp: new Date().toISOString(),
        processingTime: Date.now() - startTime,
        sessionId: enhancedContext.sessionId,
        analysis: {
          semanticResult: analysisResult,
          metaAnalysis: metaAnalysis,
          emotionalProfile: emotionalProfile
        },
        advancedSearch: advancedSearchResults,
        externalKnowledge: externalKnowledgeResults,
        recommendations: this.generateRecommendations(analysisResult, metaAnalysis),
        confidence: this.calculateOverallConfidence(analysisResult, metaAnalysis),
        context: enhancedContext
      };

      return finalResult;

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏: ${error.message}`);
      return { error: error.message };
    }
  }

  generateRecommendations(semanticResult, metaAnalysis) {
    const recommendations = [];

    if (semanticResult?.enhanced_recommendations?.suggestions) {
      recommendations.push(...semanticResult.enhanced_recommendations.suggestions);
    }
    if (metaAnalysis?.suggestions) {
      recommendations.push(...metaAnalysis.suggestions);
    }

    return recommendations;
  }

  calculateOverallConfidence(semanticResult, metaAnalysis) {
    let confidence = semanticResult?.confidence || 0;

    if (metaAnalysis?.confidence) {
      confidence = (confidence + metaAnalysis.confidence) / 2;
    }

    return confidence;
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤–æ –≤–Ω–µ—à–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
   */
  normalizeQueryForExternalSources(query) {
    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–∏–º–≤–æ–ª—ã
    let normalizedQuery = query.trim();

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    normalizedQuery = normalizedQuery.toLowerCase();

    // –ó–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    normalizedQuery = normalizedQuery.replace(/[\W_]+/g, ' ');

    return normalizedQuery;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
   */
  validateRegexPatterns() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    // (–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
   */
  safeStringify(data, replacer = null, space = 2) {
    try {
      return JSON.stringify(data, replacer, space);
    } catch (error) {
      SmartLogger.error(`‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ JSON: ${error.message}`);
      return '[–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏]';
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä SemanticIntegrationLayer
const semanticIntegrationLayer = new SemanticIntegrationLayer();

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è
module.exports = {
  analyzeWithSemantics: semanticIntegrationLayer.analyzeWithSemantics.bind(semanticIntegrationLayer),
  generateSmartResponse: semanticIntegrationLayer.generateSmartResponse.bind(semanticIntegrationLayer),
  initializeModules,

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –º–æ–¥—É–ª–µ–π
  get semanticMemory() { return semanticMemory; },
  get intelligentChatProcessor() { return intelligentChatProcessor; },
  get naturalLanguageGenerator() { return naturalLanguageGenerator; },

  // –£—Ç–∏–ª–∏—Ç—ã
  loadModuleSafely
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –æ–±–æ–≥–∞—â–∞—Ç—å –∑–∞–ø—Ä–æ—Å –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
function shouldEnrichWithExternalKnowledge(query, semanticResult) {
  // –ü—Ä–æ—Å—Ç—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏: –∑–∞–ø—Ä–æ—Å –¥–ª–∏–Ω–Ω–µ–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
  return query.length > 10 && !query.toLowerCase().includes('–ø—Ä–∏–≤–µ—Ç');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤–Ω–µ—à–Ω–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏
async function enrichWithExternalKnowledge(query, options = {}) {
  const { semanticContext, userProfile, includeAdvancedSearch = false, includeLocalProcessing = false } = options;
  const externalKnowledge = {};

  try {
    // 1. –ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏
    SmartLogger.integration(`üåê –ü–æ–∏—Å–∫ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏: "${query}"`);
    const wikipediaResults = await searchWikipedia(query);
    externalKnowledge.wikipediaResults = wikipediaResults;
    SmartLogger.integration(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –í–∏–∫–∏–ø–µ–¥–∏–∏: ${wikipediaResults.count} —Å—Ç–∞—Ç–µ–π`);
  } catch (error) {
    SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏: ${error.message}`);
    externalKnowledge.wikipediaResults = { count: 0, articles: [] };
  }

  try {
    // 2. –ü–æ–∏—Å–∫ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π (ArXiv)
    SmartLogger.integration(`üî¨ –ü–æ–∏—Å–∫ –Ω–∞—É—á–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π: "${query}"`);
    const scientificResults = await searchArxiv(query);
    externalKnowledge.scientificResults = scientificResults;
    SmartLogger.integration(`‚úÖ –ù–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏: ${scientificResults.count} —Å—Ç–∞—Ç–µ–π`);
  } catch (error) {
    SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ ArXiv: ${error.message}`);
    externalKnowledge.scientificResults = { count: 0, articles: [] };
  }

  try {
    // 3. –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π (–∫—Ä–∞—É–¥—Å–æ—Ä—Å–∏–Ω–≥)
    SmartLogger.integration(`üîó –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö–∫–æ–Ω—Ü–µ–ø—Ü–∏–π: "${query}"`);
    const relatedConcepts = await analyzeRelatedConcepts(query);
    externalKnowledge.relatedConcepts = relatedConcepts;
    SmartLogger.integration(`‚úÖ –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: ${relatedConcepts.count} –∫–æ–Ω—Ü–µ–ø—Ü–∏–π`);
  } catch (error) {
    SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π: ${error.message}`);
    externalKnowledge.relatedConcepts = { count: 0, concepts: [] };
  }

  if (includeAdvancedSearch) {
    try {
      // 4. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      SmartLogger.integration(`üîé –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–Ω–∞–ª–∏–∑–æ–º: "${query}"`);
      const analysis = await performAdvancedSearch(query, {
        userProfile: userProfile,
        semanticContext: semanticContext
      });
      externalKnowledge.analysis = analysis;
      SmartLogger.integration(`‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω`);
    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: ${error.message}`);
      externalKnowledge.analysis = null;
    }
  }

  if (includeLocalProcessing) {
    try {
      // 5. –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
      SmartLogger.integration(`‚öôÔ∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö: "${query}"`);
      const localAnalysis = await performLocalAnalysis(query, {
        userProfile: userProfile,
        semanticContext: semanticContext
      });
      externalKnowledge.localAnalysis = localAnalysis;
      SmartLogger.integration(`‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: –∑–∞–≤–µ—Ä—à–µ–Ω`);
    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      externalKnowledge.localAnalysis = null;
    }
  }

  return externalKnowledge;
}

// –ü—Ä–∏–º–µ—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ (–∑–∞–≥–ª—É—à–∫–∏)
async function searchWikipedia(query) {
  return { count: 3, articles: [{ title: 'Example', summary: '...' }] };
}

async function searchArxiv(query) {
  return { count: 2, articles: [{ title: 'Paper', abstract: '...' }] };
}

async function analyzeRelatedConcepts(query) {
  return { count: 5, concepts: ['A', 'B', 'C'] };
}

async function performAdvancedSearch(query, options = {}) {
  //const { userProfile, semanticContext } = options;
  return { summary: 'Advanced search results...' };
}

async function performLocalAnalysis(query, options = {}) {
  //const { userProfile, semanticContext } = options;
  return { details: 'Local data analysis...' };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–Ω–∏–π
function assessKnowledgeQuality(externalKnowledge) {
  let qualityScore = 0;

  if (externalKnowledge.wikipediaResults?.count > 0) {
    qualityScore += 30;
  }
  if (externalKnowledge.scientificResults?.count > 0) {
    qualityScore += 40;
  }
  if (externalKnowledge.relatedConcepts?.count > 0) {
    qualityScore += 15;
  }
  if (externalKnowledge.analysis) {
    qualityScore += 15;
  }

  return Math.min(qualityScore, 100);
}