/**
 * –°–ª–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
 */

const semanticMemory = require('./semantic-memory/index.cjs');
const userMemoryManager = require('./semantic-memory/user-memory-manager.cjs');
const userProfiler = require('./semantic-memory/user-profiler.cjs');
const learningSystem = require('./semantic-memory/learning-system.cjs');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
let visualSemanticIntegration;
try {
  visualSemanticIntegration = require('./visual-semantic-integration.cjs');
} catch (error) {
  console.log('‚ö†Ô∏è [SEMANTIC] –í–∏–∑—É–∞–ª—å–Ω–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
}

const SmartLogger = {
  integration: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üîó [${timestamp}] SEMANTIC INTEGRATION: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä - –≥–ª–∞–≤–Ω—ã–π –º–æ–∑–≥ —Å–∏—Å—Ç–µ–º—ã
 * –†–µ—à–∞–µ—Ç, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–æ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fallback
 */
class SemanticIntegrationLayer {
  constructor() {
    
  this.semanticThreshold = 30; // –ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è

    
    this.enabled = true;
  }

  /**
   * –§–ê–ó–ê 2: –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏—è
   */
  async analyzeWithSemantics(userQuery, options = {}) {
    SmartLogger.integration(`üöÄüß† –§–ê–ó–ê 2: –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: "${userQuery.substring(0, 50)}..."`);

    try {
      if (!this.enabled) {
        SmartLogger.integration('–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return { shouldUseSemantic: false, reason: 'disabled' };
      }

      // –ù–û–í–û–ï: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫—É
      const useMetaSemantics = this.shouldUseMetaSemantics(userQuery, options);
      
      if (useMetaSemantics) {
        SmartLogger.integration('üîÆ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ú–ï–¢–ê-–°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –∞–Ω–∞–ª–∏–∑');
        return await this.performMetaSemanticAnalysis(userQuery, options);
      } else {
        SmartLogger.integration('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
        return await this.performStandardSemanticAnalysis(userQuery, options);
      }

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
      return { shouldUseSemantic: false, reason: 'error', error: error.message };
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫—É
   */
  shouldUseMetaSemantics(userQuery, options) {
    // –ö—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–∏:
    
    // 1. –°–ª–æ–∂–Ω—ã–µ –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const isComplex = userQuery.length > 50 || 
                     userQuery.split(' ').length > 8 ||
                     userQuery.includes('?') ||
                     userQuery.includes('–∏–ª–∏') ||
                     userQuery.includes('maybe') ||
                     userQuery.includes('–≤–æ–∑–º–æ–∂–Ω–æ');
    
    // 2. –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    const isCritical = userQuery.includes('–≤–∞–∂–Ω–æ') ||
                      userQuery.includes('—Å—Ä–æ—á–Ω–æ') ||
                      userQuery.includes('—Ç–æ—á–Ω–æ') ||
                      userQuery.includes('–ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    
    // 3. –ü—Ä–æ–µ–∫—Ç—ã —Å –∏—Å—Ç–æ—Ä–∏–µ–π
    const hasProjectHistory = options.hasRecentImages || 
                             options.sessionId ||
                             options.chatContext;
    
    // 4. –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
    const isAnalytical = userQuery.includes('–∞–Ω–∞–ª–∏–∑') ||
                        userQuery.includes('—Å–æ–≤–µ—Ç') ||
                        userQuery.includes('—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏') ||
                        userQuery.includes('–≤–∞—Ä–∏–∞–Ω—Ç—ã');

    const shouldUse = isComplex || isCritical || hasProjectHistory || isAnalytical;
    
    SmartLogger.integration(`–ö—Ä–∏—Ç–µ—Ä–∏–∏ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏–∫–∏: —Å–ª–æ–∂–Ω—ã–π=${isComplex}, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π=${isCritical}, –∏—Å—Ç–æ—Ä–∏—è=${hasProjectHistory}, –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π=${isAnalytical} ‚Üí ${shouldUse ? '–í–ö–õ–Æ–ß–ï–ù–û' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
    
    return shouldUse;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  async performMetaSemanticAnalysis(userQuery, options) {
    SmartLogger.integration(`üîÆ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞`);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
      const semanticResult = await semanticMemory.analyzeCompleteRequestWithMeta(
        userQuery,
        options.sessionId || 'default',
        {
          hasRecentImages: options.hasRecentImages || false,
          chatContext: options.chatContext,
          requestType: options.requestType,
          userPreferences: options.userPreferences
        }
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const qualityScore = semanticResult.quality_score || 5;
      const metaConfidence = semanticResult.enhanced_confidence || 0.7;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–æ–º
      const shouldUseSemantic = qualityScore > 6 && metaConfidence > 0.65;
      
      SmartLogger.integration(`üìä –ú–µ—Ç–∞-–∫–∞—á–µ—Å—Ç–≤–æ: ${qualityScore}/10, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(metaConfidence * 100).toFixed(1)}%`);
      SmartLogger.integration(`üéØ –†–µ—à–µ–Ω–∏–µ: ${shouldUseSemantic ? '–°–ï–ú–ê–ù–¢–ò–ö–ê –£–ü–†–ê–í–õ–Ø–ï–¢' : 'fallback –∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É'}`);

      return {
        shouldUseSemantic,
        reason: shouldUseSemantic ? 'meta_semantic_analysis_success' : 'meta_semantic_quality_low',
        semanticResult,
        
        // –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        metaSemanticData: {
          qualityScore,
          metaConfidence,
          metaInsights: semanticResult.meta_insights,
          systemLearnings: semanticResult.system_learnings,
          recommendations: semanticResult.enhanced_recommendations,
          predictions: semanticResult.enhanced_predictions
        },
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        processingTime: semanticResult.total_processing_time,
        fallbackMode: semanticResult.fallback_mode || false
      };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      
      // Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É
      return await this.performStandardSemanticAnalysis(userQuery, options);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
   */
  async performStandardSemanticAnalysis(userQuery, options) {
    SmartLogger.integration(`üß† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞`);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
      const semanticResult = await semanticMemory.analyzeCompleteRequest(
        userQuery,
        options.sessionId || 'default',
        {
          hasRecentImages: options.hasRecentImages || false,
          chatContext: options.chatContext,
          requestType: options.requestType,
          userPreferences: options.userPreferences
        }
      );

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const confidence = semanticResult.confidence || 0.6;
      const projectRelevance = semanticResult.current_project ? 0.8 : 0.4;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
      const overallConfidence = (confidence + projectRelevance) / 2;
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ–ª–∂–Ω–∞ –ª–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ —É–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç–æ–º
      const shouldUseSemantic = overallConfidence > this.semanticThreshold / 100;
      
      SmartLogger.integration(`üìä –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å=${(confidence * 100).toFixed(1)}%, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å=${(projectRelevance * 100).toFixed(1)}%`);
      SmartLogger.integration(`üéØ –†–µ—à–µ–Ω–∏–µ: ${shouldUseSemantic ? '–°–ï–ú–ê–ù–¢–ò–ö–ê –£–ü–†–ê–í–õ–Ø–ï–¢' : 'fallback –∫ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä—É'}`);

      return {
        shouldUseSemantic,
        reason: shouldUseSemantic ? 'semantic_analysis_success' : 'semantic_confidence_low',
        semanticResult,
        confidence: overallConfidence,
        processingTime: semanticResult.processing_time
      };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return { shouldUseSemantic: false, reason: 'semantic_error', error: error.message };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç
   */
  async createSemanticResponse(semanticResult, userQuery, options) {

      // === –≠–¢–ê–ü 1: –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ò –ü–†–û–§–ò–õ–ò–†–û–í–ê–ù–ò–ï ===
      SmartLogger.integration('–≠—Ç–∞–ø 1: –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è');
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userProfile = await userMemoryManager.getOrCreateUserProfile(userId);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏ —ç–º–æ—Ü–∏–∏
      const communicationAnalysis = userProfiler.analyzeCommunicationStyle(userQuery);
      const designPreferences = userProfiler.analyzeDesignPreferences(userQuery);
      const emotionalState = userProfiler.analyzeEmotionalState(userQuery, options.sessionHistory);

      // === –≠–¢–ê–ü 2: –ö–û–ù–¢–ï–ö–°–¢–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï ===
      SmartLogger.integration('–≠—Ç–∞–ø 2: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
      const learningRecommendations = await learningSystem.getLearnedRecommendations(
        userId, userQuery, category
      );

      // === –≠–¢–ê–ü 3: –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ï–ö–¢–ê–ú–ò ===
      SmartLogger.integration('–≠—Ç–∞–ø 3: –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤');
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
      const projectContext = await userMemoryManager.getUserProjectContext(userId);

      // === –≠–¢–ê–ü 4: –ê–ù–ê–õ–ò–ó –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–ï–°–õ–ò –ü–†–ò–°–£–¢–°–¢–í–£–Æ–¢) ===
      let imageAnalysisResult = null;
      if (options.hasRecentImages && options.recentImageUrl && visualSemanticIntegration) {
        SmartLogger.integration('–≠—Ç–∞–ø 4–∞: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
        
        imageAnalysisResult = await visualSemanticIntegration.analyzeImageWithSemantics(
          options.recentImageUrl,
          {
            userId: userId,
            sessionId: sessionId,
            category: category,
            userProfile: userProfile
          }
        );
        
        if (imageAnalysisResult.success) {
          SmartLogger.integration('‚úÖ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω', {
            confidence: imageAnalysisResult.confidence_score,
            recommendations: imageAnalysisResult.recommendations?.length || 0
          });
        }
      }

      // === –≠–¢–ê–ü 4–±: –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (–û–†–ò–ì–ò–ù–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê) ===
      SmartLogger.integration('–≠—Ç–∞–ø 4–±: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑');
      
      const semanticResult = await semanticMemory.analyzeCompleteRequest(
        userQuery, 
        sessionId, 
        {
          chatContext: options.chatContext,
          hasRecentImages: options.hasRecentImages,
          userName: options.userName,
          userProfile: userProfile,
          projectContext: projectContext,
          imageAnalysis: imageAnalysisResult // –ü–µ—Ä–µ–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        }
      );

      if (semanticResult.error) {
        SmartLogger.integration('–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
        return { shouldUseSemantic: false, reason: 'error', error: semanticResult.error };
      }

      // === –≠–¢–ê–ü 5: –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –í–°–ï–• –ö–û–ú–ü–û–ù–ï–ù–¢–û–í ===
      const confidence = semanticResult.confidence || 0;
      
      // –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ
      let adjustedConfidence = confidence;
      if (learningRecommendations) {
        adjustedConfidence += 15; // –ë–æ–Ω—É—Å –∑–∞ –æ–±—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      }
      if (userProfile && userProfile.totalInteractions > 5) {
        adjustedConfidence += 10; // –ë–æ–Ω—É—Å –∑–∞ –∑–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      }
      
      adjustedConfidence = Math.min(adjustedConfidence, 100);

      SmartLogger.integration(`–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${confidence}% ‚Üí ${adjustedConfidence}% (—Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π)`);

      // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –§–∞–∑—ã 1 –∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const enhancedResult = {
        ...semanticResult,
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –§–∞–∑—ã 1
        phase1Data: {
          userProfile,
          communicationAnalysis,
          designPreferences,
          emotionalState,
          learningRecommendations,
          projectContext
        },
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        imageAnalysis: imageAnalysisResult,
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        originalConfidence: confidence,
        adjustedConfidence: this.adjustConfidenceWithImageAnalysis(adjustedConfidence, imageAnalysisResult)
      };

      if (adjustedConfidence >= this.semanticThreshold) {
        SmartLogger.integration(`‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –±–µ—Ä–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ${adjustedConfidence}% >= ${this.semanticThreshold}%)`);
        
        return {
          shouldUseSemantic: true,
          semanticResult: enhancedResult,
          confidence: adjustedConfidence,
          reason: 'high_confidence_with_personalization'
        };
      } else {
        SmartLogger.integration(`‚ö†Ô∏è –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —Å–µ–º–∞–Ω—Ç–∏–∫–∏ (${adjustedConfidence}% < ${this.semanticThreshold}%), –Ω–æ –ø–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏`);
        
        return {
          shouldUseSemantic: false,
          semanticResult: enhancedResult, // –ø–µ—Ä–µ–¥–∞–µ–º –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è
          confidence: adjustedConfidence,
          reason: 'low_confidence_but_enriched'
        };
      }

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${error.message}`);
      return { shouldUseSemantic: false, reason: 'exception', error: error.message };
    }
  }

  /**
   * –§–ê–ó–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  async createSemanticResponse(semanticResult, userQuery, options = {}) {
    SmartLogger.integration('üé® –§–ê–ó–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞');

    try {
      const userId = options.userId || 1;
      const category = this.extractCategoryFromSemantic(semanticResult);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –§–∞–∑—ã 1
      const phase1Data = semanticResult.phase1Data || {};
      const { userProfile, communicationAnalysis, designPreferences, emotionalState, learningRecommendations } = phase1Data;

      // === –≠–¢–ê–ü 1: –ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–†–û–ú–ü–¢–ê –° –û–ë–£–ß–ï–ù–ò–ï–ú ===
      let enhancedPrompt = semanticResult.enhanced_prompt || userQuery;
      
      if (learningRecommendations) {
        SmartLogger.integration('–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∫ –ø—Ä–æ–º–ø—Ç—É');
        const learningAdaptation = await learningSystem.adaptPromptWithLearning(userId, enhancedPrompt, category);
        if (learningAdaptation.adaptedPrompt) {
          enhancedPrompt = learningAdaptation.adaptedPrompt;
        }
      }

      // === –≠–¢–ê–ü 2: –ü–ï–†–°–û–ù–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–û–ú–ü–¢–ê ===
      if (userProfile && designPreferences) {
        enhancedPrompt = this.personalizePrompt(enhancedPrompt, userProfile, designPreferences);
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π
      const contextData = {
        currentProject: semanticResult.current_project,
        predictions: semanticResult.predictions || [],
        recommendations: semanticResult.system_recommendations || [],
        compatibility: semanticResult.compatibility,
        userProfile,
        communicationAnalysis,
        designPreferences,
        emotionalState,
        learningRecommendations
      };

      // === –≠–¢–ê–ü 3: –°–û–ó–î–ê–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–û–ì–û –û–¢–í–ï–¢–ê ===
      let response = await this.createPersonalizedResponse(enhancedPrompt, category, contextData, options);
      
      // === –≠–¢–ê–ü 4: –ê–î–ê–ü–¢–ê–¶–ò–Ø –ü–û–î –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===
      if (userProfile && emotionalState) {
        response = userProfiler.adaptResponseToProfile(response, userProfile, emotionalState);
      }

      // === –≠–¢–ê–ü 5: –°–û–•–†–ê–ù–ï–ù–ò–ï –ö–û–ù–¢–ï–ö–°–¢–ê –ü–†–û–ï–ö–¢–ê ===
      if (category === 'image_generation' || category === 'vectorization') {
        await this.saveProjectContext(userId, options.sessionId, category, userQuery, contextData);
      }

      SmartLogger.integration(`‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}`);
      
      return {
        success: true,
        response,
        provider: 'SemanticMemoryPhase1',
        category,
        semanticData: {
          confidence: semanticResult.adjustedConfidence || semanticResult.confidence,
          projectId: contextData.currentProject?.id,
          predictionsCount: contextData.predictions.length,
          hasPersonalization: !!userProfile,
          hasLearning: !!learningRecommendations
        },
        phase1Metadata: {
          userId,
          profileId: userProfile?.id,
          communicationStyle: communicationAnalysis?.dominantStyle,
          emotionalTone: emotionalState?.currentEmotion,
          learningConfidence: learningRecommendations?.confidence
        }
      };

    } catch (error) {
      SmartLogger.integration(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: ${error.message}`);
      return {
        success: false,
        error: error.message,
        shouldFallback: true
      };
    }
  }

  // === –§–ê–ó–ê 1: –ù–û–í–´–ï –ú–ï–¢–û–î–´ ===

  /**
   * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  personalizePrompt(prompt, userProfile, designPreferences) {
    let personalizedPrompt = prompt;

    // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if (userProfile.favoriteColors && userProfile.favoriteColors.length > 0) {
      const colors = userProfile.favoriteColors.slice(0, 2).join(' –∏ ');
      personalizedPrompt += ` –£—á—Ç–∏ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${colors}.`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
    if (userProfile.preferredStyles && userProfile.preferredStyles.length > 0) {
      const styles = userProfile.preferredStyles.slice(0, 2).join(' –∏ ');
      personalizedPrompt += ` –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ —Å—Ç–∏–ª–∏: ${styles}.`;
    }

    // –£—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–∏–∑–∞–π–Ω–∞
    if (userProfile.designComplexity) {
      const complexityHints = {
        simple: '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å, —á–∏—Å—Ç—ã–µ –ª–∏–Ω–∏–∏',
        medium: '—É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è',
        complex: '–¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
      };
      personalizedPrompt += ` –£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏: ${complexityHints[userProfile.designComplexity]}.`;
    }

    return personalizedPrompt;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  async createPersonalizedResponse(enhancedPrompt, category, contextData, options) {
    switch (category) {
      case 'image_generation':
        return this.createImageGenerationResponse(enhancedPrompt, contextData, options);
      case 'image_consultation':
        return this.createConsultationResponse(enhancedPrompt, contextData, options);
      case 'vectorization':
        return this.createVectorizationResponse(enhancedPrompt, contextData, options);
      case 'web_search':
        return this.createSearchResponse(enhancedPrompt, contextData, options);
      default:
        return this.createGeneralResponse(enhancedPrompt, contextData, options);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  createImageGenerationResponse(prompt, contextData, options) {
    let response = `–°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π: ${prompt}`;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (contextData.userProfile) {
      if (contextData.designPreferences?.styles) {
        const styles = Object.keys(contextData.designPreferences.styles);
        if (styles.length > 0) {
          response += `\n\n–£—á–∏—Ç—ã–≤–∞—é –≤–∞—à —Å—Ç–∏–ª—å: ${styles[0]}.`;
        }
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–∏—è
    if (contextData.learningRecommendations) {
      response += `\n\nüí° –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ–ø—ã—Ç–∞: ${contextData.learningRecommendations.styleAdjustments?.tone || '–ø—Ä–∏–º–µ–Ω—è—é –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}.`;
    }

    return response;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  createConsultationResponse(prompt, contextData, options) {
    let response = `–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å: ${prompt}`;

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    if (contextData.communicationAnalysis?.dominantStyle === 'detailed') {
      response += '\n\n–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:\n';
    } else if (contextData.communicationAnalysis?.dominantStyle === 'brief') {
      response = '–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: ';
    }

    return response;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  createVectorizationResponse(prompt, contextData, options) {
    let response = `–í–µ–∫—Ç–æ—Ä–∏–∑—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.`;

    if (contextData.userProfile?.designComplexity === 'simple') {
      response += ' –ù–∞—Å—Ç—Ä–æ–π–∫–∏: —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.';
    } else if (contextData.userProfile?.designComplexity === 'complex') {
      response += ' –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–µ—Ç–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.';
    }

    return response;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
   */
  createSearchResponse(prompt, contextData, options) {
    return `–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ${prompt}`;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  createGeneralResponse(prompt, contextData, options) {
    let response = '–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...';

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–æ–¥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (contextData.emotionalState?.currentEmotion === 'enthusiastic') {
      response = '–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ–º–æ–≥—É!';
    } else if (contextData.emotionalState?.currentEmotion === 'professional') {
      response = '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å.';
    }

    return response;
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async saveProjectContext(userId, sessionId, category, userQuery, contextData) {
    try {
      const projectData = {
        projectType: category,
        projectTitle: `${category} - ${new Date().toLocaleDateString()}`,
        description: userQuery,
        userIntent: userQuery,
        domain: this.determineDomain(category),
        semanticTags: this.extractSemanticTags(userQuery),
        concepts: this.extractConcepts(contextData),
        originalQuery: userQuery
      };

      await userMemoryManager.createOrUpdateProject(userId, sessionId, projectData);
      SmartLogger.integration(`–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
    } catch (error) {
      SmartLogger.integration(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞: ${error.message}`);
    }
  }

  /**
   * –ó–∞–ø–∏—Å—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
   */
  async recordInteractionFeedback(userId, sessionId, interactionData) {
    try {
      const {
        userRequest,
        systemResponse,
        userFeedback,
        category,
        responseTime = 0,
        additionalMetrics = {}
      } = interactionData;

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
      const successAnalysis = await learningSystem.analyzeInteractionSuccess(userId, sessionId, {
        userRequest,
        systemResponse,
        userFeedback,
        category,
        responseTime,
        additionalMetrics
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (successAnalysis.isSuccess) {
        await userMemoryManager.updateUserProfileFromInteraction(userId, {
          responseQuality: 8, // –•–æ—Ä–æ—à–∞—è –æ—Ü–µ–Ω–∫–∞
          category,
          preferredColors: additionalMetrics.detectedColors,
          designStyle: additionalMetrics.detectedStyle
        });
      }

      SmartLogger.integration(`–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∑–∞–ø–∏—Å–∞–Ω–∞`, {
        userId,
        category,
        success: successAnalysis.isSuccess
      });

      return successAnalysis;
    } catch (error) {
      SmartLogger.integration(`–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏: ${error.message}`);
      return null;
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  determineDomain(category) {
    const domainMap = {
      'image_generation': 'creative',
      'vectorization': 'technical',
      'web_search': 'information',
      'image_consultation': 'advisory'
    };
    return domainMap[category] || 'general';
  }

  extractSemanticTags(query) {
    const keywords = query.toLowerCase().split(' ').filter(word => word.length > 3);
    return keywords.slice(0, 5); // –ü–µ—Ä–≤—ã–µ 5 –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
  }

  extractConcepts(contextData) {
    const concepts = [];
    
    if (contextData.userProfile?.preferredStyles) {
      concepts.push(...contextData.userProfile.preferredStyles);
    }
    
    if (contextData.designPreferences?.styles) {
      concepts.push(...Object.keys(contextData.designPreferences.styles));
    }
    
    return [...new Set(concepts)].slice(0, 5);
  }

  /**
   * –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  adjustConfidenceWithImageAnalysis(currentConfidence, imageAnalysisResult) {
    if (!imageAnalysisResult || !imageAnalysisResult.success) {
      return currentConfidence;
    }

    // –ü–æ–≤—ã—à–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–ª —Ö–æ—Ä–æ—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const imageConfidence = imageAnalysisResult.confidence_score || 0;
    const bonus = imageConfidence > 0.7 ? 15 : (imageConfidence > 0.5 ? 10 : 5);
    
    SmartLogger.integration(`–ë–æ–Ω—É—Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: +${bonus}% (–∞–Ω–∞–ª–∏–∑: ${Math.round(imageConfidence * 100)}%)`);
    
    return Math.min(currentConfidence + bonus, 100);
  }

  /**
   * –û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  enrichStandardResponse(standardResponse, semanticResult) {
    if (!semanticResult || !standardResponse) return standardResponse;

    SmartLogger.integration('–û–±–æ–≥–∞—â–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏');

    try {
      let enrichedResponse = standardResponse.response || '';

      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
      if (semanticResult.current_project) {
        const project = semanticResult.current_project;
        enrichedResponse += `\n\nüí° **–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞**: ${project.title}`;
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
      if (semanticResult.predictions && semanticResult.predictions.length > 0) {
        const topPrediction = semanticResult.predictions[0];
        if (topPrediction.probability > 0.6) {
          enrichedResponse += `\n\nüîÆ **–í–æ–∑–º–æ–∂–Ω–æ, –¥–∞–ª–µ–µ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è**: ${topPrediction.description}`;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (semanticResult.system_recommendations && semanticResult.system_recommendations.length > 0) {
        const highPriorityRec = semanticResult.system_recommendations.find(r => r.priority === 'high');
        if (highPriorityRec) {
          enrichedResponse += `\n\n‚ö° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è**: ${highPriorityRec.message}`;
        }
      }

      return {
        ...standardResponse,
        response: enrichedResponse,
        semanticEnriched: true,
        semanticConfidence: semanticResult.confidence
      };

    } catch (error) {
      SmartLogger.integration(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: ${error.message}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª`);
      return standardResponse;
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
   */
  extractCategoryFromSemantic(semanticResult) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Ç–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const cluster = semanticResult.semantic_analysis?.semantic_cluster;
    
    if (cluster) {
      const clusterName = cluster.name;
      
      // –ú–∞–ø–ø–∏–Ω–≥ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const clusterMap = {
        'branding': 'image_generation',
        'design': 'image_generation', 
        'print': 'image_generation',
        'vectorization': 'vectorization',
        'research': 'web_search',
        'analysis': 'web_search'
      };
      
      return clusterMap[clusterName] || 'general';
    }

    // Fallback –∞–Ω–∞–ª–∏–∑ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const entities = semanticResult.entities || {};
    if (entities.actions?.some(a => a.category === 'convert')) return 'vectorization';
    if (entities.contexts?.some(c => c.category === 'logo')) return 'image_generation';
    
    return 'general';
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  async handleSemanticImageGeneration(prompt, contextData, options) {
    let response = `üé® –°–æ–∑–¥–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: **${prompt}**`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞
    if (contextData.currentProject) {
      response += `\n\nüìã **–ü—Ä–æ–µ–∫—Ç**: ${contextData.currentProject.title}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
      if (contextData.currentProject.progress?.goals) {
        const goals = contextData.currentProject.progress.goals.slice(0, 2);
        response += `\nüéØ **–¶–µ–ª–∏**: ${goals.join(', ')}`;
      }
    }

    return response;
  }

  async handleSemanticVectorization(prompt, contextData, options) {
    let response = `‚ö° –í–µ–∫—Ç–æ—Ä–∏–∑—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: **${prompt}**`;
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
    if (contextData.compatibility?.compatible) {
      response += `\n\n‚úÖ **–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å**: –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç –≤–∞—à —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç`;
    }

    return response;
  }

  async handleSemanticWebSearch(prompt, contextData, options) {
    let response = `üîç –ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: **${prompt}**`;
    
    return response;
  }

  async handleSemanticGeneral(prompt, contextData, options) {
    let response = `üí≠ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å: **${prompt}**`;
    
    return response;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
   */
  async addProactiveSuggestions(predictions) {
    if (!predictions || predictions.length === 0) return '';

    const topPredictions = predictions.slice(0, 2);
    let suggestions = '\n\nüîÆ **–í–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏**:';
    
    topPredictions.forEach((prediction, index) => {
      suggestions += `\n${index + 1}Ô∏è‚É£ ${prediction.description} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: ${Math.round(prediction.probability * 100)}%)`;
    });

    return suggestions;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const semanticIntegrationLayer = new SemanticIntegrationLayer();

module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  analyzeWithSemantics: semanticIntegrationLayer.analyzeWithSemantics.bind(semanticIntegrationLayer),
  createSemanticResponse: semanticIntegrationLayer.createSemanticResponse.bind(semanticIntegrationLayer),
  enrichStandardResponse: semanticIntegrationLayer.enrichStandardResponse.bind(semanticIntegrationLayer),
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  extractCategoryFromSemantic: semanticIntegrationLayer.extractCategoryFromSemantic.bind(semanticIntegrationLayer),
  mapSemanticClusterToCategory: semanticIntegrationLayer.extractCategoryFromSemantic.bind(semanticIntegrationLayer),
  
  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  setSemanticThreshold: (threshold) => { semanticIntegrationLayer.semanticThreshold = threshold; },
  enableSemantic: () => { semanticIntegrationLayer.enabled = true; },
  disableSemantic: () => { semanticIntegrationLayer.enabled = false; },
  
  // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  SemanticIntegrationLayer
};