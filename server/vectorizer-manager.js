/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ - —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–æ–º –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */

const { spawn } = require('child_process');
const path = require('path');
const fetch = require('node-fetch');

class VectorizerManager {
  constructor() {
    this.vectorizerProcess = null;
    this.isRunning = false;
    this.port = process.env.VECTORIZER_PORT || 5006;
    this.maxRestartAttempts = 3;
    this.restartAttempts = 0;
  }

  /**
   * –ó–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  async startVectorizer() {
    if (this.isRunning) {
      console.log(`üé® –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}`);
      return true;
    }

    try {
      console.log(`üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É ${this.port}...`);
      
      const vectorizerPath = path.join(__dirname, 'imagetracer-vectorizer.js');
      
      this.vectorizerProcess = spawn('node', [vectorizerPath], {
        stdio: ['pipe', 'pipe', 'pipe'],
        env: {
          ...process.env,
          VECTORIZER_PORT: this.port
        }
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–≤–æ–¥–∞
      this.vectorizerProcess.stdout.on('data', (data) => {
        console.log(`üé® [Vectorizer]: ${data.toString().trim()}`);
      });

      this.vectorizerProcess.stderr.on('data', (data) => {
        console.error(`‚ùå [Vectorizer Error]: ${data.toString().trim()}`);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
      this.vectorizerProcess.on('close', (code) => {
        console.log(`üõë –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º ${code}`);
        this.isRunning = false;
        this.vectorizerProcess = null;
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if (code !== 0 && this.restartAttempts < this.maxRestartAttempts) {
          console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${this.restartAttempts + 1}/${this.maxRestartAttempts})...`);
          this.restartAttempts++;
          setTimeout(() => this.startVectorizer(), 2000);
        } else if (this.restartAttempts >= this.maxRestartAttempts) {
          console.error(`‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞`);
        }
      });

      this.vectorizerProcess.on('error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞:`, error);
        this.isRunning = false;
      });

      // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
      await this.waitForStart();
      this.isRunning = true;
      this.restartAttempts = 0;
      
      console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${this.port}`);
      return true;

    } catch (error) {
      console.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä:`, error);
      return false;
    }
  }

  /**
   * –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
   */
  async waitForStart(maxAttempts = 10, interval = 1000) {
    for (let i = 0; i < maxAttempts; i++) {
      try {
        const response = await fetch(`http://localhost:${this.port}/health`, {
          timeout: 2000
        });
        
        if (response.ok) {
          return true;
        }
      } catch (error) {
        // –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –µ—â–µ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
      }
      
      await new Promise(resolve => setTimeout(resolve, interval));
    }
    
    throw new Error('–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
   */
  stopVectorizer() {
    if (this.vectorizerProcess && this.isRunning) {
      console.log(`üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞...`);
      this.vectorizerProcess.kill('SIGTERM');
      this.isRunning = false;
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
   */
  async checkHealth() {
    if (!this.isRunning) {
      return { status: 'stopped', available: false };
    }

    try {
      const response = await fetch(`http://localhost:${this.port}/health`, {
        timeout: 3000
      });
      
      if (response.ok) {
        const data = await response.json();
        return { status: 'running', available: true, data };
      } else {
        return { status: 'unhealthy', available: false };
      }
    } catch (error) {
      return { status: 'unreachable', available: false, error: error.message };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ URL API –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
   */
  getApiUrl() {
    return `http://localhost:${this.port}/api/vectorizer`;
  }

  /**
   * –ü—Ä–æ–∫—Å–∏ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
   */
  async vectorizeImage(imageBuffer, filename, options = {}) {
    if (!this.isRunning) {
      throw new Error('–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }

    try {
      const FormData = require('form-data');
      const form = new FormData();
      
      form.append('image', imageBuffer, { filename });
      form.append('quality', options.quality || 'standard');
      form.append('format', options.format || 'svg');
      form.append('optimizeFor', options.optimizeFor || 'web');

      const response = await fetch(`${this.getApiUrl()}/convert`, {
        method: 'POST',
        body: form,
        headers: form.getHeaders()
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π API
   */
  async professionalVectorize(imageBuffer, filename, options = {}) {
    if (!this.isRunning) {
      throw new Error('–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω');
    }

    try {
      const FormData = require('form-data');
      const form = new FormData();
      
      form.append('image', imageBuffer, { filename });
      form.append('quality', options.quality || 'premium');
      if (options.formats) {
        form.append('formats', options.formats.join(','));
      }
      form.append('generatePreviews', options.generatePreviews || 'false');
      form.append('optimizeFor', options.optimizeFor || 'web');
      form.append('includeMetadata', options.includeMetadata !== false ? 'true' : 'false');

      const response = await fetch(`${this.getApiUrl()}/professional`, {
        method: 'POST',
        body: form,
        headers: form.getHeaders()
      });

      return await response.json();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      throw error;
    }
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const vectorizerManager = new VectorizerManager();

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
vectorizerManager.startVectorizer().catch(error => {
  console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä:', error);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  vectorizerManager.stopVectorizer();
});

process.on('SIGINT', () => {
  vectorizerManager.stopVectorizer();
});

module.exports = vectorizerManager;