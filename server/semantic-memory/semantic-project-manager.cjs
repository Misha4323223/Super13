/**
 * –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º —Å–º—ã—Å–ª–æ–≤—ã—Ö —Å–≤—è–∑–µ–π
 */

const SmartLogger = {
  semantic: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üß† [${timestamp}] SEMANTIC MEMORY: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  project: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üìã [${timestamp}] PROJECT: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ö–ª–∞—Å—Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
 */
class SemanticProject {
  constructor(concept, sessionId, initialQuery) {
    this.id = this.generateProjectId();
    this.sessionId = sessionId;
    this.concept = concept; // –æ—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è: "–ª–æ–≥–æ—Ç–∏–ø", "–ø—Ä–∏–Ω—Ç", "–ø–µ—Ä—Å–æ–Ω–∞–∂"
    this.title = this.generateTitle(concept, initialQuery);
    this.entities = new Set(); // —Å—É—â–Ω–æ—Å—Ç–∏: —Ü–≤–µ—Ç–∞, —Å—Ç–∏–ª–∏, –æ–±—ä–µ–∫—Ç—ã
    this.artifacts = []; // —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    this.relationships = new Map(); // —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏
    this.goals = this.inferGoals(initialQuery); // —Ü–µ–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞
    this.context = this.analyzeContext(initialQuery); // –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.timeline = [];
    this.createdAt = Date.now();
    this.updatedAt = Date.now();
    this.isActive = true;

    SmartLogger.project(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: "${this.title}" (${this.concept})`, {
      projectId: this.id,
      sessionId: this.sessionId,
      goals: this.goals
    });
  }

  generateProjectId() {
    return 'proj_' + Math.random().toString(36).substr(2, 12) + '_' + Date.now();
  }

  generateTitle(concept, query) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
    const keywords = this.extractKeywords(query);
    const primaryKeyword = keywords[0] || concept;
    
    if (concept === 'logo' || concept === '–ª–æ–≥–æ—Ç–∏–ø') {
      return `–õ–æ–≥–æ—Ç–∏–ø ${primaryKeyword}`;
    } else if (concept === 'print' || concept === '–ø—Ä–∏–Ω—Ç') {
      return `–ü—Ä–∏–Ω—Ç ${primaryKeyword}`;
    } else if (concept === 'character' || concept === '–ø–µ—Ä—Å–æ–Ω–∞–∂') {
      return `–ü–µ—Ä—Å–æ–Ω–∞–∂ ${primaryKeyword}`;
    } else if (concept === 'embroidery' || concept === '–≤—ã—à–∏–≤–∫–∞') {
      return `–î–∏–∑–∞–π–Ω –≤—ã—à–∏–≤–∫–∏ ${primaryKeyword}`;
    }
    
    return `–ü—Ä–æ–µ–∫—Ç ${primaryKeyword}`;
  }

  extractKeywords(query) {
    const lowerQuery = query.toLowerCase();
    const stopWords = ['—Å–æ–∑–¥–∞–π', '–Ω–∞—Ä–∏—Å—É–π', '—Å–¥–µ–ª–∞–π', '–¥–ª—è', '–≤', '–Ω–∞', '—Å', '–∏', '–∞', '–Ω–æ'];
    
    return lowerQuery
      .split(/\s+/)
      .filter(word => word.length > 2 && !stopWords.includes(word))
      .slice(0, 3);
  }

  inferGoals(query) {
    const goals = [];
    const lowerQuery = query.toLowerCase();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (lowerQuery.includes('–ª–æ–≥–æ—Ç–∏–ø') || lowerQuery.includes('logo')) {
      goals.push('—Å–æ–∑–¥–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø', '–≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
    
    if (lowerQuery.includes('–ø—Ä–∏–Ω—Ç') || lowerQuery.includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || lowerQuery.includes('–ø–µ—á–∞—Ç—å')) {
      goals.push('–ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–ª—è –ø–µ—á–∞—Ç–∏', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–∞');
    }
    
    if (lowerQuery.includes('–≤—ã—à–∏–≤–∫–∞') || lowerQuery.includes('embroidery')) {
      goals.push('–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏', '—É–ø—Ä–æ—Å—Ç–∏—Ç—å –¥–µ—Ç–∞–ª–∏');
    }

    if (goals.length === 0) {
      goals.push('—Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }

    return goals;
  }

  analyzeContext(query) {
    const context = {
      businessType: null,
      useCase: null,
      targetFormat: null,
      complexity: 'medium'
    };

    const lowerQuery = query.toLowerCase();

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –±–∏–∑–Ω–µ—Å–∞
    const businessTypes = {
      '–∫–æ—Ñ–µ–π–Ω—è': 'coffee_shop',
      '–ø–∏—Ü—Ü–µ—Ä–∏—è': 'pizzeria', 
      '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant',
      '–º–∞–≥–∞–∑–∏–Ω': 'store',
      '–∫–æ–º–ø–∞–Ω–∏—è': 'company'
    };

    for (const [keyword, type] of Object.entries(businessTypes)) {
      if (lowerQuery.includes(keyword)) {
        context.businessType = type;
        break;
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
    if (lowerQuery.includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || lowerQuery.includes('–ø—Ä–∏–Ω—Ç')) {
      context.useCase = 'apparel_print';
    } else if (lowerQuery.includes('–≤—ã–≤–µ—Å–∫–∞') || lowerQuery.includes('–±–∞–Ω–Ω–µ—Ä')) {
      context.useCase = 'signage';
    } else if (lowerQuery.includes('—Å–∞–π—Ç') || lowerQuery.includes('–≤–µ–±')) {
      context.useCase = 'web';
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    if (lowerQuery.includes('–≤–µ–∫—Ç–æ—Ä') || lowerQuery.includes('svg')) {
      context.targetFormat = 'vector';
    } else if (lowerQuery.includes('–≤—ã—à–∏–≤–∫–∞')) {
      context.targetFormat = 'embroidery';
    }

    return context;
  }

  addEntity(type, value, confidence = 1.0) {
    const entity = { type, value, confidence, addedAt: Date.now() };
    this.entities.add(JSON.stringify(entity));
    this.updatedAt = Date.now();
    
    SmartLogger.semantic(`–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—É—â–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–µ–∫—Ç "${this.title}": ${type} = ${value}`);
  }

  addArtifact(artifact) {
    const artifactWithMeta = {
      ...artifact,
      id: Math.random().toString(36).substr(2, 9),
      createdAt: Date.now(),
      projectId: this.id
    };
    
    this.artifacts.push(artifactWithMeta);
    this.updatedAt = Date.now();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏
    if (artifact.style) {
      this.addEntity('style', artifact.style);
    }
    if (artifact.description) {
      this.extractEntitiesFromDescription(artifact.description);
    }

    SmartLogger.project(`–î–æ–±–∞–≤–ª–µ–Ω –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ –ø—Ä–æ–µ–∫—Ç "${this.title}": ${artifact.type}`, artifactWithMeta);
    
    return artifactWithMeta.id;
  }

  extractEntitiesFromDescription(description) {
    const lowerDesc = description.toLowerCase();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç–∞
    const colors = ['–∫—Ä–∞—Å–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–µ–ª–µ–Ω—ã–π', '–∂–µ–ª—Ç—ã–π', '—á–µ—Ä–Ω—ã–π', '–±–µ–ª—ã–π', '–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π', '—Å–µ—Ä—ã–π'];
    colors.forEach(color => {
      if (lowerDesc.includes(color)) {
        this.addEntity('color', color, 0.8);
      }
    });

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª–∏
    const styles = ['—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π', '–º—É–ª—å—Ç—è—à–Ω—ã–π', '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π', '–≤–∏–Ω—Ç–∞–∂–Ω—ã–π', '—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π'];
    styles.forEach(style => {
      if (lowerDesc.includes(style)) {
        this.addEntity('style', style, 0.9);
      }
    });
  }

  addRelationship(from, to, type, strength = 1.0) {
    const key = `${from}->${to}`;
    this.relationships.set(key, { type, strength, createdAt: Date.now() });
    this.updatedAt = Date.now();
    
    SmartLogger.semantic(`–î–æ–±–∞–≤–ª–µ–Ω–∞ —Å–≤—è–∑—å –≤ –ø—Ä–æ–µ–∫—Ç–µ "${this.title}": ${from} ${type} ${to}`);
  }

  getRecentArtifacts(count = 3) {
    return this.artifacts
      .sort((a, b) => b.createdAt - a.createdAt)
      .slice(0, count);
  }

  getProgressSummary() {
    const completedGoals = this.goals.filter(goal => this.isGoalCompleted(goal));
    
    return {
      projectId: this.id,
      title: this.title,
      concept: this.concept,
      progress: `${completedGoals.length}/${this.goals.length}`,
      completedGoals,
      remainingGoals: this.goals.filter(goal => !this.isGoalCompleted(goal)),
      artifactsCount: this.artifacts.length,
      lastUpdate: this.updatedAt
    };
  }

  isGoalCompleted(goal) {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏ —Ü–µ–ª–∏
    if (goal.includes('–≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å') && this.artifacts.some(a => a.type === 'vector')) {
      return true;
    }
    if (goal.includes('—Å–æ–∑–¥–∞—Ç—å') && this.artifacts.length > 0) {
      return true;
    }
    if (goal.includes('–≤—ã—à–∏–≤–∫–∞') && this.artifacts.some(a => a.type === 'embroidery')) {
      return true;
    }
    return false;
  }

  predictNextSteps() {
    const predictions = [];
    const hasImage = this.artifacts.some(a => a.type === 'image');
    const hasVector = this.artifacts.some(a => a.type === 'vector');
    const hasEmbroidery = this.artifacts.some(a => a.type === 'embroidery');

    // –õ–æ–≥–∏–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    if (this.concept === 'logo' || this.concept === '–ª–æ–≥–æ—Ç–∏–ø') {
      if (hasImage && !hasVector) {
        predictions.push({
          action: 'vectorize',
          description: '–í–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è',
          confidence: 0.9
        });
      }
      if (hasVector && this.context.useCase === 'apparel_print') {
        predictions.push({
          action: 'optimize_for_print',
          description: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ç–∫–∞–Ω–∏',
          confidence: 0.8
        });
      }
    }

    if (hasImage && this.context.targetFormat === 'embroidery' && !hasEmbroidery) {
      predictions.push({
        action: 'convert_to_embroidery',
        description: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏',
        confidence: 0.85
      });
    }

    SmartLogger.project(`–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${this.title}":`, predictions);
    return predictions;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
 */
class SemanticProjectManager {
  constructor() {
    this.projects = new Map(); // sessionId -> Set<SemanticProject>
    this.activeProjects = new Map(); // sessionId -> projectId
    this.conceptExtractor = new ConceptExtractor();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
   */
  async analyzeRequestInContext(userQuery, sessionId, context = {}) {
    SmartLogger.semantic(`–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ: "${userQuery.substring(0, 50)}..."`);

    const concept = this.conceptExtractor.extractMainConcept(userQuery);
    const currentProject = this.getCurrentProject(sessionId);
    
    let semanticContext = {
      concept,
      isNewProject: false,
      currentProject: null,
      suggestedActions: [],
      confidence: 0
    };

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–æ–∑–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
    if (this.isNewProjectRequest(userQuery, concept)) {
      SmartLogger.semantic('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
      semanticContext.isNewProject = true;
      semanticContext.confidence = 0.8;
    } else if (currentProject && this.isContinuationRequest(userQuery, currentProject)) {
      SmartLogger.semantic(`–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: "${currentProject.title}"`);
      semanticContext.currentProject = currentProject;
      semanticContext.suggestedActions = currentProject.predictNextSteps();
      semanticContext.confidence = 0.9;
    }

    return semanticContext;
  }

  isNewProjectRequest(query, concept) {
    const newProjectKeywords = [
      '—Å–æ–∑–¥–∞–π', '–Ω–∞—Ä–∏—Å—É–π', '—Å–¥–µ–ª–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø–æ—Å—Ç—Ä–æ–π',
      '–Ω–æ–≤—ã–π', '–¥—Ä—É–≥–æ–π', '–µ—â–µ –æ–¥–∏–Ω', '–¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º'
    ];
    
    const lowerQuery = query.toLowerCase();
    return newProjectKeywords.some(keyword => lowerQuery.includes(keyword)) && concept;
  }

  isContinuationRequest(query, project) {
    const continuationKeywords = [
      '—Å–¥–µ–ª–∞–π –µ–≥–æ', '–∏–∑–º–µ–Ω–∏', '–¥–æ–±–∞–≤—å', '—É–±–µ—Ä–∏', '–ø–æ–º–µ–Ω—è–π',
      '—Ç–µ–ø–µ—Ä—å', '–∞ —Ç–µ–ø–µ—Ä—å', '–∏ –µ—â–µ', '—Ç–∞–∫–∂–µ', '–≤–µ–∫—Ç–æ—Ä–∏–∑—É–π',
      '–¥–ª—è –ø–µ—á–∞—Ç–∏', '–¥–ª—è –≤—ã—à–∏–≤–∫–∏'
    ];
    
    const lowerQuery = query.toLowerCase();
    return continuationKeywords.some(keyword => lowerQuery.includes(keyword));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   */
  async getOrCreateProject(userQuery, sessionId, concept = null) {
    const extractedConcept = concept || this.conceptExtractor.extractMainConcept(userQuery);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å —Ç–∞–∫–∏–º –∂–µ –∫–æ–Ω—Ü–µ–ø—Ç–æ–º
    const currentProject = this.getCurrentProject(sessionId);
    
    if (currentProject && currentProject.concept === extractedConcept) {
      SmartLogger.project(`–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ–µ–∫—Ç: "${currentProject.title}"`);
      return currentProject;
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç
    const newProject = new SemanticProject(extractedConcept, sessionId, userQuery);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–æ–≤ —Å–µ—Å—Å–∏–∏
    if (!this.projects.has(sessionId)) {
      this.projects.set(sessionId, new Set());
    }
    this.projects.get(sessionId).add(newProject);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    this.activeProjects.set(sessionId, newProject.id);
    
    SmartLogger.project(`–°–æ–∑–¥–∞–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç: "${newProject.title}"`);
    return newProject;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–µ—Å—Å–∏–∏
   */
  getCurrentProject(sessionId) {
    const activeProjectId = this.activeProjects.get(sessionId);
    if (!activeProjectId) return null;

    const sessionProjects = this.projects.get(sessionId);
    if (!sessionProjects) return null;

    for (const project of sessionProjects) {
      if (project.id === activeProjectId) {
        return project;
      }
    }

    return null;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç –≤ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
   */
  async addArtifactToCurrentProject(sessionId, artifact) {
    const currentProject = this.getCurrentProject(sessionId);
    if (!currentProject) {
      SmartLogger.semantic('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞');
      return null;
    }

    const artifactId = currentProject.addArtifact(artifact);
    return { projectId: currentProject.id, artifactId };
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async predictNextSteps(sessionId) {
    const currentProject = this.getCurrentProject(sessionId);
    if (!currentProject) return [];

    const predictions = currentProject.predictNextSteps();
    return predictions.map(p => `‚Ä¢ ${p.description}`);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º —Å–µ—Å—Å–∏–∏
   */
  getSessionSummary(sessionId) {
    const sessionProjects = this.projects.get(sessionId);
    if (!sessionProjects || sessionProjects.size === 0) {
      return null;
    }

    const projectSummaries = Array.from(sessionProjects).map(p => p.getProgressSummary());
    const activeProjectId = this.activeProjects.get(sessionId);

    return {
      totalProjects: sessionProjects.size,
      activeProjectId,
      projects: projectSummaries
    };
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤
 */
class ConceptExtractor {
  constructor() {
    this.conceptMap = {
      // –õ–æ–≥–æ—Ç–∏–ø—ã –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥
      'logo': ['–ª–æ–≥–æ—Ç–∏–ø', 'logo', '—ç–º–±–ª–µ–º–∞', '—Å–∏–º–≤–æ–ª', '–∑–Ω–∞–∫'],
      '–ª–æ–≥–æ—Ç–∏–ø': ['–ª–æ–≥–æ—Ç–∏–ø', 'logo', '—ç–º–±–ª–µ–º–∞', '—Å–∏–º–≤–æ–ª', '–∑–Ω–∞–∫'],
      
      // –ü—Ä–∏–Ω—Ç—ã –∏ –æ–¥–µ–∂–¥–∞
      'print': ['–ø—Ä–∏–Ω—Ç', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–ø–µ—á–∞—Ç—å', '—Ç–∏—à–∞—Ä—Ç', '–æ–¥–µ–∂–¥–∞'],
      '–ø—Ä–∏–Ω—Ç': ['–ø—Ä–∏–Ω—Ç', '—Ñ—É—Ç–±–æ–ª–∫–∞', '–ø–µ—á–∞—Ç—å', '—Ç–∏—à–∞—Ä—Ç', '–æ–¥–µ–∂–¥–∞'],
      
      // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏
      'character': ['–ø–µ—Ä—Å–æ–Ω–∞–∂', 'character', '–≥–µ—Ä–æ–π', '—Ñ–∏–≥—É—Ä–∞', '—Å—É—â–µ—Å—Ç–≤–æ'],
      '–ø–µ—Ä—Å–æ–Ω–∞–∂': ['–ø–µ—Ä—Å–æ–Ω–∞–∂', 'character', '–≥–µ—Ä–æ–π', '—Ñ–∏–≥—É—Ä–∞', '—Å—É—â–µ—Å—Ç–≤–æ'],
      
      // –í—ã—à–∏–≤–∫–∞
      'embroidery': ['–≤—ã—à–∏–≤–∫–∞', 'embroidery', '–≤—ã—à–∏—Ç—å', '–º–∞—à–∏–Ω–Ω–∞—è –≤—ã—à–∏–≤–∫–∞'],
      '–≤—ã—à–∏–≤–∫–∞': ['–≤—ã—à–∏–≤–∫–∞', 'embroidery', '–≤—ã—à–∏—Ç—å', '–º–∞—à–∏–Ω–Ω–∞—è –≤—ã—à–∏–≤–∫–∞'],
      
      // –ò–∫–æ–Ω–∫–∏ –∏ UI —ç–ª–µ–º–µ–Ω—Ç—ã
      'icon': ['–∏–∫–æ–Ω–∫–∞', 'icon', '–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞', '–∑–Ω–∞—á–æ–∫'],
      '–∏–∫–æ–Ω–∫–∞': ['–∏–∫–æ–Ω–∫–∞', 'icon', '–ø–∏–∫—Ç–æ–≥—Ä–∞–º–º–∞', '–∑–Ω–∞—á–æ–∫']
    };
  }

  extractMainConcept(query) {
    const lowerQuery = query.toLowerCase();
    
    // –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø–µ—Ä–≤—ã–º–∏
    for (const [concept, keywords] of Object.entries(this.conceptMap)) {
      for (const keyword of keywords) {
        if (lowerQuery.includes(keyword)) {
          SmartLogger.semantic(`–ò–∑–≤–ª–µ—á–µ–Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è: "${concept}" –∏–∑ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞: "${keyword}"`);
          return concept;
        }
      }
    }

    // –ï—Å–ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –æ–±—â–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º
    if (lowerQuery.includes('—Å–æ–∑–¥–∞–π') || lowerQuery.includes('–Ω–∞—Ä–∏—Å—É–π')) {
      SmartLogger.semantic('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –æ–±—â–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è: "image"');
      return 'image';
    }

    SmartLogger.semantic('–ö–æ–Ω—Ü–µ–ø—Ü–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º "general"');
    return 'general';
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const semanticProjectManager = new SemanticProjectManager();

module.exports = {
  analyzeRequestInContext: semanticProjectManager.analyzeRequestInContext.bind(semanticProjectManager),
  getOrCreateProject: semanticProjectManager.getOrCreateProject.bind(semanticProjectManager),
  getCurrentProject: semanticProjectManager.getCurrentProject.bind(semanticProjectManager),
  addArtifactToCurrentProject: semanticProjectManager.addArtifactToCurrentProject.bind(semanticProjectManager),
  predictNextSteps: semanticProjectManager.predictNextSteps.bind(semanticProjectManager),
  getSessionSummary: semanticProjectManager.getSessionSummary.bind(semanticProjectManager),
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  SemanticProject,
  SemanticProjectManager,
  ConceptExtractor
};
// –£–¥–∞–ª–µ–Ω –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–ª–æ–∫ - –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã—à–µ
