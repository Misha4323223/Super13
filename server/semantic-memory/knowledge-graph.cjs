/**
 * –ì—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—è–º–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏, –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
 */

const SmartLogger = {
  graph: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üï∏Ô∏è [${timestamp}] KNOWLEDGE GRAPH: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –£–∑–µ–ª –≤ –≥—Ä–∞—Ñ–µ –∑–Ω–∞–Ω–∏–π
 */
class KnowledgeNode {
  constructor(id, type, data) {
    this.id = id;
    this.type = type; // concept, object, process, attribute
    this.data = data;
    this.connections = new Map(); // id -> {type, strength, metadata}
    this.metadata = {
      created: Date.now(),
      accessed: Date.now(),
      accessCount: 0,
      importance: 0.5
    };
  }

  addConnection(targetId, connectionType, strength = 1.0, metadata = {}) {
    this.connections.set(targetId, {
      type: connectionType,
      strength: strength,
      metadata: metadata,
      created: Date.now()
    });
  }

  getConnections(connectionType = null) {
    if (!connectionType) {
      return Array.from(this.connections.entries());
    }
    
    return Array.from(this.connections.entries())
      .filter(([, conn]) => conn.type === connectionType);
  }

  updateAccess() {
    this.metadata.accessed = Date.now();
    this.metadata.accessCount++;
    this.updateImportance();
  }

  updateImportance() {
    // –í–∞–∂–Ω–æ—Å—Ç—å —Ä–∞—Å—Ç–µ—Ç —Å —á–∞—Å—Ç–æ—Ç–æ–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–≤—è–∑–µ–π
    const recencyFactor = Math.max(0, 1 - (Date.now() - this.metadata.accessed) / (7 * 24 * 60 * 60 * 1000));
    const connectionFactor = Math.min(1, this.connections.size / 10);
    const accessFactor = Math.min(1, this.metadata.accessCount / 100);
    
    this.metadata.importance = (recencyFactor + connectionFactor + accessFactor) / 3;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≥—Ä–∞—Ñ–∞ –∑–Ω–∞–Ω–∏–π
 */
class KnowledgeGraph {
  constructor() {
    this.nodes = new Map(); // id -> KnowledgeNode
    this.initializeBaseKnowledge();
  }

  initializeBaseKnowledge() {
    SmartLogger.graph('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∞ –∑–Ω–∞–Ω–∏–π');

    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    this.addConcept('logo', {
      name: '–õ–æ–≥–æ—Ç–∏–ø',
      description: '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –∑–Ω–∞–∫, —ç–º–±–ª–µ–º–∞ –∏–ª–∏ —Å–∏–º–≤–æ–ª',
      domain: 'branding',
      requirements: ['–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å', '—É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å', '–ø—Ä–æ—Å—Ç–æ—Ç–∞']
    });

    this.addConcept('print', {
      name: '–ü—Ä–∏–Ω—Ç',
      description: '–î–∏–∑–∞–π–Ω –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ —Ç–∫–∞–Ω–∏',
      domain: 'apparel',
      requirements: ['–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å', '—Å—Ç–æ–π–∫–æ—Å—Ç—å –∫—Ä–∞—Å–æ–∫', '—á–∏—Ç–∞–µ–º–æ—Å—Ç—å']
    });

    this.addConcept('embroidery', {
      name: '–í—ã—à–∏–≤–∫–∞',
      description: '–î–∏–∑–∞–π–Ω –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–π –≤—ã—à–∏–≤–∫–∏',
      domain: 'textile',
      requirements: ['—É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤', '—Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π']
    });

    this.addConcept('character', {
      name: '–ü–µ—Ä—Å–æ–Ω–∞–∂',
      description: '–•—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–ª–∏ –º–∞—Å–∫–æ—Ç',
      domain: 'illustration',
      requirements: ['—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', '—É–∑–Ω–∞–≤–∞–µ–º–æ—Å—Ç—å', 'versatility']
    });

    // üìö –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    this.addConcept('educational_content', {
      name: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      description: '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–¥–∞—á–∏ –∑–Ω–∞–Ω–∏–π',
      domain: 'education',
      requirements: ['—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å', '–ø–æ–Ω—è—Ç–Ω–æ—Å—Ç—å', '–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å']
    });

    this.addConcept('knowledge_testing', {
      name: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ü–µ–Ω–∫–∞ —É—Ä–æ–≤–Ω—è –∑–Ω–∞–Ω–∏–π',
      domain: 'education',
      requirements: ['–æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', '–∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å', '–æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å']
    });

    // üìä –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    this.addConcept('data_analysis', {
      name: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö',
      description: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤ –∏–∑ –±–æ–ª—å—à–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤ –¥–∞–Ω–Ω—ã—Ö',
      domain: 'analytics',
      requirements: ['—Ç–æ—á–Ω–æ—Å—Ç—å', '–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è', '–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è']
    });

    this.addConcept('business_intelligence', {
      name: '–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
      description: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π',
      domain: 'business',
      requirements: ['—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å', 'actionable insights', 'KPI tracking']
    });

    // üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    this.addConcept('software_development', {
      name: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π',
      domain: 'technology',
      requirements: ['–∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞', '–º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å', 'maintainability']
    });

    this.addConcept('code_optimization', {
      name: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞',
      description: '–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞',
      domain: 'technology',
      requirements: ['–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—á–∏—Ç–∞–µ–º–æ—Å—Ç—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å']
    });

    // ‚úçÔ∏è –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    this.addConcept('copywriting', {
      name: '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥',
      description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞—é—â–∏—Ö –∏ —É–±–µ–∂–¥–∞—é—â–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤',
      domain: 'marketing',
      requirements: ['–∫–æ–Ω–≤–µ—Ä—Å–∏—è', '—Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è']
    });

    this.addConcept('content_marketing', {
      name: '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
      description: '–ü—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ —Ü–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      domain: 'marketing',
      requirements: ['—Ü–µ–Ω–Ω–æ—Å—Ç—å', '—Ä–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å', 'engagement']
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    this.addProcess('vectorization', {
      name: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      description: '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç—Ä–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ',
      input: ['raster_image'],
      output: ['vector_image'],
      tools: ['imagetracer', 'illustrator', 'inkscape']
    });

    this.addProcess('color_optimization', {
      name: '–¶–≤–µ—Ç–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
      description: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è',
      input: ['image'],
      output: ['optimized_image'],
      variants: ['cmyk_conversion', 'color_reduction', 'contrast_enhancement']
    });

    // –ù–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    this.addProcess('content_analysis', {
      name: '–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
      description: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
      input: ['text', 'metrics'],
      output: ['insights', 'recommendations'],
      tools: ['analytics', 'nlp', 'sentiment_analysis']
    });

    this.addProcess('knowledge_structuring', {
      name: '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞–Ω–∏–π',
      description: '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è',
      input: ['raw_information'],
      output: ['structured_content'],
      variants: ['lesson_plan', 'course_curriculum', 'learning_path']
    });

    this.addProcess('code_review', {
      name: '–†–µ–≤—å—é –∫–æ–¥–∞',
      description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º',
      input: ['source_code'],
      output: ['feedback', 'improvements'],
      tools: ['static_analysis', 'peer_review', 'automated_testing']
    });

    this.addProcess('market_research', {
      name: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
      description: '–ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
      input: ['market_data', 'customer_data'],
      output: ['market_insights', 'strategy'],
      variants: ['competitor_analysis', 'customer_journey', 'trend_analysis']
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    this.addAttribute('scalability', {
      name: '–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å',
      description: '–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞',
      importance: 'high',
      applicable_to: ['logo', 'vector_graphics']
    });

    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å–≤—è–∑–∏
    this.createBaseConnections();
  }

  createBaseConnections() {
    // –°–≤—è–∑–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–π —Å –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
    this.addConnection('logo', 'vectorization', 'requires', 0.9, {
      reason: '–õ–æ–≥–æ—Ç–∏–ø—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç–∏'
    });

    this.addConnection('print', 'color_optimization', 'requires', 0.8, {
      reason: '–ü—Ä–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ü–≤–µ—Ç–æ–≤–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏'
    });

    this.addConnection('embroidery', 'color_optimization', 'requires', 0.95, {
      reason: '–í—ã—à–∏–≤–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤'
    });

    // –°–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏
    this.addConnection('logo', 'print', 'can_become', 0.7, {
      reason: '–õ–æ–≥–æ—Ç–∏–ø—ã —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ –ø—Ä–∏–Ω—Ç–∞—Ö'
    });

    this.addConnection('character', 'embroidery', 'can_become', 0.6, {
      reason: '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏'
    });

    // –°–≤—è–∑–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    this.addConnection('logo', 'scalability', 'has_attribute', 1.0);
    this.addConnection('vectorization', 'scalability', 'provides', 1.0);

    // –°–≤—è–∑–∏ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    // –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
    this.addConnection('educational_content', 'knowledge_structuring', 'requires', 0.9, {
      reason: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏'
    });

    this.addConnection('knowledge_testing', 'educational_content', 'validates', 0.8, {
      reason: '–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–≤–æ–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
    });

    // –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
    this.addConnection('data_analysis', 'business_intelligence', 'feeds_into', 0.85, {
      reason: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤—É –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–∏'
    });

    this.addConnection('market_research', 'business_intelligence', 'enhances', 0.7, {
      reason: '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ–±–æ–≥–∞—â–∞—é—Ç –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫—É'
    });

    // –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç—Å–∫–∏–µ —Å–≤—è–∑–∏
    this.addConnection('software_development', 'code_review', 'requires', 0.95, {
      reason: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ü–û –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ä–µ–≤—å—é –∫–æ–¥–∞'
    });

    this.addConnection('code_optimization', 'software_development', 'improves', 0.8, {
      reason: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
    });

    // –ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ —Å–≤—è–∑–∏
    this.addConnection('copywriting', 'content_analysis', 'benefits_from', 0.75, {
      reason: '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ —É–ª—É—á—à–∞–µ—Ç—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è –∞–Ω–∞–ª–∏–∑—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
    });

    this.addConnection('content_marketing', 'market_research', 'requires', 0.8, {
      reason: '–ö–æ–Ω—Ç–µ–Ω—Ç-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ –æ—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ —Ä—ã–Ω–∫–∞'
    });

    // –ú–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω—ã–µ —Å–≤—è–∑–∏
    this.addConnection('educational_content', 'copywriting', 'can_use', 0.6, {
      reason: '–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ —Ç–µ—Ö–Ω–∏–∫–∏'
    });

    this.addConnection('data_analysis', 'educational_content', 'can_enhance', 0.5, {
      reason: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –æ–±–æ–≥–∞—Ç–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã'
    });
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
   */
  addConcept(id, data) {
    const node = new KnowledgeNode(id, 'concept', data);
    this.nodes.set(id, node);
    SmartLogger.graph(`–î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è: ${id}`);
    return node;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  addProcess(id, data) {
    const node = new KnowledgeNode(id, 'process', data);
    this.nodes.set(id, node);
    SmartLogger.graph(`–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: ${id}`);
    return node;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞
   */
  addAttribute(id, data) {
    const node = new KnowledgeNode(id, 'attribute', data);
    this.nodes.set(id, node);
    SmartLogger.graph(`–î–æ–±–∞–≤–ª–µ–Ω –∞—Ç—Ä–∏–±—É—Ç: ${id}`);
    return node;
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
   */
  addObject(id, data) {
    const node = new KnowledgeNode(id, 'object', data);
    this.nodes.set(id, node);
    SmartLogger.graph(`–î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç: ${id}`);
    return node;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —É–∑–ª–∞–º–∏
   */
  addConnection(fromId, toId, connectionType, strength = 1.0, metadata = {}) {
    const fromNode = this.nodes.get(fromId);
    const toNode = this.nodes.get(toId);

    if (!fromNode || !toNode) {
      SmartLogger.graph(`–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —É–∑–µ–ª –¥–ª—è —Å–≤—è–∑–∏ ${fromId} -> ${toId}`);
      return false;
    }

    fromNode.addConnection(toId, connectionType, strength, metadata);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (this.isSymmetricConnection(connectionType)) {
      const reverseType = this.getReverseConnectionType(connectionType);
      toNode.addConnection(fromId, reverseType, strength, metadata);
    }

    SmartLogger.graph(`–°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å: ${fromId} -[${connectionType}]-> ${toId} (${strength})`);
    return true;
  }

  /**
   * –ü–æ–∏—Å–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
   */
  findRelatedConcepts(conceptId, maxDepth = 2, minStrength = 0.3) {
    const visited = new Set();
    const results = [];

    this.exploreConnections(conceptId, 0, maxDepth, minStrength, visited, results);

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    results.sort((a, b) => b.relevance - a.relevance);

    SmartLogger.graph(`–ù–∞–π–¥–µ–Ω–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –¥–ª—è ${conceptId}: ${results.length}`);
    return results;
  }

  exploreConnections(nodeId, currentDepth, maxDepth, minStrength, visited, results) {
    if (currentDepth >= maxDepth || visited.has(nodeId)) {
      return;
    }

    visited.add(nodeId);
    const node = this.nodes.get(nodeId);
    if (!node) return;

    node.updateAccess();

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–≤—è–∑–∏ —É–∑–ª–∞
    const connections = node.getConnections();
    
    for (const [targetId, connection] of connections) {
      if (connection.strength >= minStrength && !visited.has(targetId)) {
        const targetNode = this.nodes.get(targetId);
        if (targetNode) {
          // –í—ã—á–∏—Å–ª—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
          const relevance = this.calculateRelevance(connection, currentDepth, targetNode);
          
          results.push({
            id: targetId,
            node: targetNode,
            connection: connection,
            depth: currentDepth + 1,
            relevance: relevance,
            path: this.getPath(nodeId, targetId)
          });

          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—Å—Å–ª–µ–¥—É–µ–º –¥–∞–ª—å—à–µ
          this.exploreConnections(targetId, currentDepth + 1, maxDepth, minStrength, visited, results);
        }
      }
    }
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–∏
   */
  calculateRelevance(connection, depth, targetNode) {
    const strengthFactor = connection.strength;
    const depthPenalty = Math.pow(0.7, depth); // –°–Ω–∏–∂–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Å –≥–ª—É–±–∏–Ω–æ–π
    const importanceFactor = targetNode.metadata.importance;
    const accessFactor = Math.min(1, targetNode.metadata.accessCount / 10);

    return strengthFactor * depthPenalty * importanceFactor * (1 + accessFactor);
  }

  /**
   * –ü–æ–∏—Å–∫ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏
   */
  findPath(fromId, toId, maxDepth = 4) {
    const queue = [{ id: fromId, path: [fromId], depth: 0 }];
    const visited = new Set();

    while (queue.length > 0) {
      const current = queue.shift();
      
      if (current.id === toId) {
        return current.path;
      }

      if (current.depth >= maxDepth || visited.has(current.id)) {
        continue;
      }

      visited.add(current.id);
      const node = this.nodes.get(current.id);
      if (!node) continue;

      const connections = node.getConnections();
      for (const [targetId] of connections) {
        if (!visited.has(targetId)) {
          queue.push({
            id: targetId,
            path: [...current.path, targetId],
            depth: current.depth + 1
          });
        }
      }
    }

    return null; // –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–≥–æ –ø—É—Ç–∏ (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è)
   */
  getPath(fromId, toId) {
    const fullPath = this.findPath(fromId, toId, 3);
    if (!fullPath || fullPath.length <= 2) {
      return [fromId, toId];
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π –ø—É—Ç—å
    return [fullPath[0], '...', fullPath[fullPath.length - 1]];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
   */
  analyzeProcessApplicability(conceptId, processId) {
    const concept = this.nodes.get(conceptId);
    const process = this.nodes.get(processId);

    if (!concept || !process) {
      return { applicable: false, confidence: 0 };
    }

    // –ü—Ä—è–º–∞—è —Å–≤—è–∑—å
    const directConnection = concept.connections.get(processId);
    if (directConnection) {
      return {
        applicable: true,
        confidence: directConnection.strength,
        reason: directConnection.metadata.reason || '–ü—Ä—è–º–∞—è —Å–≤—è–∑—å –≤ –≥—Ä–∞—Ñ–µ –∑–Ω–∞–Ω–∏–π',
        type: 'direct'
      };
    }

    // –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    const relatedConcepts = this.findRelatedConcepts(conceptId, 2, 0.4);
    
    for (const related of relatedConcepts) {
      const relatedConnection = related.node.connections.get(processId);
      if (relatedConnection) {
        const inheritedConfidence = related.relevance * relatedConnection.strength * 0.7;
        
        return {
          applicable: inheritedConfidence > 0.3,
          confidence: inheritedConfidence,
          reason: `–ü—Ä–∏–º–µ–Ω–∏–º–æ —á–µ—Ä–µ–∑ —Å–≤—è–∑–∞–Ω–Ω—É—é –∫–æ–Ω—Ü–µ–ø—Ü–∏—é: ${related.node.data.name}`,
          type: 'inherited',
          via: related.id
        };
      }
    }

    return { applicable: false, confidence: 0 };
  }

  /**
   * –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
   */
  suggestProcesses(conceptId, context = {}) {
    SmartLogger.graph(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏: ${conceptId}`);

    const suggestions = [];
    const concept = this.nodes.get(conceptId);
    if (!concept) return suggestions;

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    const processes = Array.from(this.nodes.values())
      .filter(node => node.type === 'process');

    for (const process of processes) {
      const applicability = this.analyzeProcessApplicability(conceptId, process.id);
      
      if (applicability.applicable) {
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let adjustedConfidence = applicability.confidence;
        
        if (context.hasImages && process.data.input?.includes('raster_image')) {
          adjustedConfidence += 0.2;
        }
        
        if (context.targetFormat && process.data.output?.includes(context.targetFormat)) {
          adjustedConfidence += 0.3;
        }

        suggestions.push({
          processId: process.id,
          process: process.data,
          confidence: Math.min(adjustedConfidence, 1.0),
          reason: applicability.reason,
          type: applicability.type,
          priority: this.calculateProcessPriority(process, context)
        });
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    suggestions.sort((a, b) => (b.confidence + b.priority) - (a.confidence + a.priority));

    SmartLogger.graph(`–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${suggestions.length}`, suggestions.slice(0, 3));
    return suggestions;
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  calculateProcessPriority(process, context) {
    let priority = 0.5;

    // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    const criticalProcesses = ['vectorization', 'color_optimization'];
    if (criticalProcesses.includes(process.id)) {
      priority += 0.3;
    }

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    priority += Math.min(0.2, process.metadata.accessCount / 100);

    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (context.urgency === 'high') {
      // –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø–æ–ª—É—á–∞—é—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      const fastProcesses = ['color_optimization', 'resize'];
      if (fastProcesses.includes(process.id)) {
        priority += 0.2;
      }
    }

    return Math.min(priority, 1.0);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
   */
  updateFromUserAction(action, context = {}) {
    SmartLogger.graph(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ–π—Å—Ç–≤–∏—è: ${action.type}`);

    if (action.type === 'image_generation') {
      this.reinforceConnection(action.concept, 'image_creation', 0.1);
    }

    if (action.type === 'vectorization') {
      this.reinforceConnection(action.fromConcept, 'vectorization', 0.2);
    }

    if (action.type === 'format_conversion') {
      this.reinforceConnection(action.fromFormat, action.toFormat, 0.15);
    }

    // –û—Å–ª–∞–±–ª—è–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–≤—è–∑–∏
    this.decayUnusedConnections();
  }

  /**
   * –£—Å–∏–ª–µ–Ω–∏–µ —Å–≤—è–∑–∏
   */
  reinforceConnection(fromId, toId, increment) {
    const fromNode = this.nodes.get(fromId);
    if (fromNode && fromNode.connections.has(toId)) {
      const connection = fromNode.connections.get(toId);
      connection.strength = Math.min(1.0, connection.strength + increment);
      connection.lastReinforced = Date.now();
    }
  }

  /**
   * –û—Å–ª–∞–±–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–≤—è–∑–µ–π
   */
  decayUnusedConnections() {
    const decayRate = 0.001; // –ù–µ–±–æ–ª—å—à–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    const now = Date.now();
    const dayInMs = 24 * 60 * 60 * 1000;

    for (const node of this.nodes.values()) {
      for (const [targetId, connection] of node.connections) {
        const daysSinceUse = (now - (connection.lastReinforced || connection.created)) / dayInMs;
        const decay = decayRate * daysSinceUse;
        connection.strength = Math.max(0.1, connection.strength - decay);
      }
    }
  }

  /**
   * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–∏–ø–æ–≤ —Å–≤—è–∑–µ–π
   */
  isSymmetricConnection(connectionType) {
    const symmetricTypes = ['related_to', 'similar_to', 'compatible_with'];
    return symmetricTypes.includes(connectionType);
  }

  getReverseConnectionType(connectionType) {
    const reverseMap = {
      'requires': 'required_by',
      'produces': 'produced_by',
      'enables': 'enabled_by',
      'related_to': 'related_to',
      'similar_to': 'similar_to'
    };
    
    return reverseMap[connectionType] || connectionType;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   */
  exportGraph() {
    const exportData = {
      nodes: [],
      connections: []
    };

    for (const [id, node] of this.nodes) {
      exportData.nodes.push({
        id,
        type: node.type,
        data: node.data,
        metadata: node.metadata
      });

      for (const [targetId, connection] of node.connections) {
        exportData.connections.push({
          from: id,
          to: targetId,
          type: connection.type,
          strength: connection.strength,
          metadata: connection.metadata
        });
      }
    }

    return exportData;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥—Ä–∞—Ñ–∞
   */
  getStatistics() {
    const stats = {
      totalNodes: this.nodes.size,
      nodeTypes: {},
      totalConnections: 0,
      averageConnections: 0,
      strongConnections: 0
    };

    for (const node of this.nodes.values()) {
      stats.nodeTypes[node.type] = (stats.nodeTypes[node.type] || 0) + 1;
      stats.totalConnections += node.connections.size;
      
      for (const connection of node.connections.values()) {
        if (connection.strength > 0.7) {
          stats.strongConnections++;
        }
      }
    }

    stats.averageConnections = stats.totalConnections / stats.totalNodes;

    return stats;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const knowledgeGraph = new KnowledgeGraph();

module.exports = {
  findRelatedConcepts: knowledgeGraph.findRelatedConcepts.bind(knowledgeGraph),
  suggestProcesses: knowledgeGraph.suggestProcesses.bind(knowledgeGraph),
  analyzeProcessApplicability: knowledgeGraph.analyzeProcessApplicability.bind(knowledgeGraph),
  updateFromUserAction: knowledgeGraph.updateFromUserAction.bind(knowledgeGraph),
  findPath: knowledgeGraph.findPath.bind(knowledgeGraph),
  addConcept: knowledgeGraph.addConcept.bind(knowledgeGraph),
  addConnection: knowledgeGraph.addConnection.bind(knowledgeGraph),
  exportGraph: knowledgeGraph.exportGraph.bind(knowledgeGraph),
  getStatistics: knowledgeGraph.getStatistics.bind(knowledgeGraph),
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞—Å—Å—ã
  KnowledgeGraph,
  KnowledgeNode
};