
/**
 * –ú–ù–û–ì–û–ú–ï–†–ù–´–ï –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê
 * –†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ü–µ–ø—Ç–∞–º–∏ –≤ n-–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø: –ö–∞–∂–¥—ã–π –∫–æ–Ω—Ü–µ–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–µ –≤ –ø–ª–æ—Å–∫–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ, –∞ –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º
 * –∫–æ–Ω—Ç–∏–Ω—É—É–º–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º–∏: —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ, –≤—Ä–µ–º–µ–Ω–Ω–æ–µ, –ª–æ–≥–∏—á–µ—Å–∫–æ–µ,
 * –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ, —Ç–≤–æ—Ä—á–µ—Å–∫–æ–µ, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ, —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ, –∏ –¥—Ä—É–≥–∏–µ
 */

const SmartLogger = {
  multidimensional: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üåêüìê [${timestamp}] MULTIDIMENSIONAL: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ò–ó–ú–ï–†–ï–ù–ò–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ì–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê
 */
const SEMANTIC_DIMENSIONS = {
  LOGICAL: 'logical',           // –õ–æ–≥–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  EMOTIONAL: 'emotional',       // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  TEMPORAL: 'temporal',         // –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  SPATIAL: 'spatial',           // –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  CREATIVE: 'creative',         // –¢–≤–æ—Ä—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  PRACTICAL: 'practical',       // –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  PHILOSOPHICAL: 'philosophical', // –§–∏–ª–æ—Å–æ—Ñ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  INTUITIVE: 'intuitive',       // –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  SOCIAL: 'social',             // –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  AESTHETIC: 'aesthetic',       // –≠—Å—Ç–µ—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  MORAL: 'moral',               // –ú–æ—Ä–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  QUANTUM: 'quantum',           // –ö–≤–∞–Ω—Ç–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  FRACTAL: 'fractal',           // –§—Ä–∞–∫—Ç–∞–ª—å–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  HOLOGRAPHIC: 'holographic',   // –ì–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
  NARRATIVE: 'narrative'        // –ù–∞—Ä—Ä–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
};

/**
 * –ú–ù–û–ì–û–ú–ï–†–ù–´–ô –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –í–ï–ö–¢–û–†
 * –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∑–∏—Ü–∏—é –∫–æ–Ω—Ü–µ–ø—Ç–∞ –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
 */
class MultidimensionalSemanticVector {
  constructor(concept, dimensions = 15) {
    this.concept = concept;
    this.dimensions = dimensions;
    this.coordinates = this.generateCoordinates();
    this.magnitude = this.calculateMagnitude();
    this.direction = this.calculateDirection();
    this.entropy = this.calculateEntropy();
    this.informationContent = this.calculateInformationContent();
    this.createdAt = Date.now();
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –º–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
   */
  generateCoordinates() {
    const coordinates = {};
    const hash = this.hashString(this.concept);
    
    let dimensionIndex = 0;
    for (const dimension of Object.values(SEMANTIC_DIMENSIONS)) {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π
      const seed = hash + dimensionIndex * 1000;
      coordinates[dimension] = this.generateDimensionCoordinate(dimension, seed);
      dimensionIndex++;
    }
    
    return coordinates;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
   */
  generateDimensionCoordinate(dimension, seed) {
    const conceptLength = this.concept.length;
    const conceptComplexity = this.calculateConceptComplexity();
    
    switch (dimension) {
      case SEMANTIC_DIMENSIONS.LOGICAL:
        return Math.cos(seed / 1000) * conceptComplexity;
      
      case SEMANTIC_DIMENSIONS.EMOTIONAL:
        return Math.sin(seed / 1000) * this.getEmotionalIntensity();
      
      case SEMANTIC_DIMENSIONS.TEMPORAL:
        return Math.tan(seed / 2000) * this.getTemporalRelevance();
      
      case SEMANTIC_DIMENSIONS.CREATIVE:
        return Math.sin(seed / 500) * Math.cos(seed / 1500) * this.getCreativeEnergy();
      
      case SEMANTIC_DIMENSIONS.PRACTICAL:
        return Math.log(Math.abs(seed) + 1) * this.getPracticalValue();
      
      case SEMANTIC_DIMENSIONS.PHILOSOPHICAL:
        return Math.sqrt(Math.abs(seed)) * this.getPhilosophicalDepth();
      
      case SEMANTIC_DIMENSIONS.INTUITIVE:
        return Math.sin(seed / 777) * this.getIntuitiveResonance();
      
      case SEMANTIC_DIMENSIONS.SOCIAL:
        return Math.cos(seed / 888) * this.getSocialRelevance();
      
      case SEMANTIC_DIMENSIONS.AESTHETIC:
        return Math.sin(seed / 333) * Math.cos(seed / 666) * this.getAestheticValue();
      
      case SEMANTIC_DIMENSIONS.MORAL:
        return Math.atan(seed / 10000) * this.getMoralWeight();
      
      case SEMANTIC_DIMENSIONS.QUANTUM:
        return Math.sin(seed / 137) * Math.cos(seed / 273) * this.getQuantumCoherence();
      
      case SEMANTIC_DIMENSIONS.FRACTAL:
        return this.generateFractalCoordinate(seed);
      
      case SEMANTIC_DIMENSIONS.HOLOGRAPHIC:
        return this.generateHolographicCoordinate(seed);
      
      case SEMANTIC_DIMENSIONS.NARRATIVE:
        return Math.sin(seed / 999) * this.getNarrativeStrength();
      
      default:
        return Math.sin(seed / 1000) * Math.cos(seed / 2000);
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∫–æ–Ω—Ü–µ–ø—Ç–∞
   */
  calculateConceptComplexity() {
    return Math.log(this.concept.length + 1) * 0.5;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å
   */
  getEmotionalIntensity() {
    const emotionalWords = ['–ª—é–±–æ–≤—å', '—Ä–∞–¥–æ—Å—Ç—å', '–≥—Ä—É—Å—Ç—å', '—Å—Ç—Ä–∞—Ö', '–≥–Ω–µ–≤', '—É–¥–∏–≤–ª–µ–Ω–∏–µ', '–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ'];
    let intensity = 0.5;
    
    for (const word of emotionalWords) {
      if (this.concept.toLowerCase().includes(word)) {
        intensity += 0.3;
      }
    }
    
    return Math.min(1, intensity);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
   */
  getTemporalRelevance() {
    const temporalWords = ['—Å–µ–π—á–∞—Å', '–≤—á–µ—Ä–∞', '–∑–∞–≤—Ç—Ä–∞', '–≤—Å–µ–≥–¥–∞', '–Ω–∏–∫–æ–≥–¥–∞', '–±—É–¥—É—â–µ–µ', '–ø—Ä–æ—à–ª–æ–µ'];
    let relevance = 0.5;
    
    for (const word of temporalWords) {
      if (this.concept.toLowerCase().includes(word)) {
        relevance += 0.2;
      }
    }
    
    return Math.min(1, relevance);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–≤–æ—Ä—á–µ—Å–∫—É—é —ç–Ω–µ—Ä–≥–∏—é
   */
  getCreativeEnergy() {
    const creativeWords = ['—Å–æ–∑–¥–∞–π', '–ø—Ä–∏–¥—É–º–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–¥–∏–∑–∞–π–Ω'];
    let energy = 0.3;
    
    for (const word of creativeWords) {
      if (this.concept.toLowerCase().includes(word)) {
        energy += 0.4;
      }
    }
    
    return Math.min(1, energy);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
   */
  getPracticalValue() {
    const practicalWords = ['—Å–¥–µ–ª–∞–π', '–∏—Å–ø—Ä–∞–≤—å', '–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π', '—Ä–µ—à–µ–Ω–∏–µ', '–∑–∞–¥–∞—á–∞', '–ø—Ä–æ–±–ª–µ–º–∞'];
    let value = 0.4;
    
    for (const word of practicalWords) {
      if (this.concept.toLowerCase().includes(word)) {
        value += 0.3;
      }
    }
    
    return Math.min(1, value);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫—É—é –≥–ª—É–±–∏–Ω—É
   */
  getPhilosophicalDepth() {
    const philosophicalWords = ['—Å–º—ã—Å–ª', '–∏—Å—Ç–∏–Ω–∞', '–±—ã—Ç–∏–µ', '—Å—É—â–Ω–æ—Å—Ç—å', '–ø—Ä–∏—Ä–æ–¥–∞', '—Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å'];
    let depth = 0.2;
    
    for (const word of philosophicalWords) {
      if (this.concept.toLowerCase().includes(word)) {
        depth += 0.5;
      }
    }
    
    return Math.min(1, depth);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π —Ä–µ–∑–æ–Ω–∞–Ω—Å
   */
  getIntuitiveResonance() {
    const hash = this.hashString(this.concept);
    return Math.sin(hash / 777) * 0.5 + 0.5;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
   */
  getSocialRelevance() {
    const socialWords = ['–ª—é–¥–∏', '–æ–±—â–µ—Å—Ç–≤–æ', '–∫–æ–º–∞–Ω–¥–∞', '–≥—Ä—É–ø–ø–∞', '—Å–æ–æ–±—â–µ—Å—Ç–≤–æ', '–∫–æ–ª–ª–µ–∫—Ç–∏–≤'];
    let relevance = 0.3;
    
    for (const word of socialWords) {
      if (this.concept.toLowerCase().includes(word)) {
        relevance += 0.4;
      }
    }
    
    return Math.min(1, relevance);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
   */
  getAestheticValue() {
    const aestheticWords = ['–∫—Ä–∞—Å–∏–≤—ã–π', '—ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π', '—Å—Ç–∏–ª—å–Ω—ã–π', '–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π', '–≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ'];
    let value = 0.3;
    
    for (const word of aestheticWords) {
      if (this.concept.toLowerCase().includes(word)) {
        value += 0.4;
      }
    }
    
    return Math.min(1, value);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–æ—Ä–∞–ª—å–Ω—ã–π –≤–µ—Å
   */
  getMoralWeight() {
    const moralWords = ['–¥–æ–±—Ä–æ', '–∑–ª–æ', '—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å', '—á–µ—Å—Ç–Ω–æ—Å—Ç—å', '–ø—Ä–∞–≤–¥–∞', '–ª–æ–∂—å'];
    let weight = 0.2;
    
    for (const word of moralWords) {
      if (this.concept.toLowerCase().includes(word)) {
        weight += 0.5;
      }
    }
    
    return Math.min(1, weight);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–≤–∞–Ω—Ç–æ–≤—É—é –∫–æ–≥–µ—Ä–µ–Ω—Ç–Ω–æ—Å—Ç—å
   */
  getQuantumCoherence() {
    const hash = this.hashString(this.concept);
    return Math.abs(Math.sin(hash / 137) * Math.cos(hash / 273));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
   */
  generateFractalCoordinate(seed) {
    let value = 0;
    let scale = 1;
    
    for (let i = 0; i < 5; i++) {
      value += Math.sin(seed * scale) / scale;
      scale *= 2;
    }
    
    return value;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥–æ–ª–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É
   */
  generateHolographicCoordinate(seed) {
    // –ö–∞–∂–¥–∞—è —á–∞—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–æ–º
    const parts = this.concept.split('');
    let holographicValue = 0;
    
    for (let i = 0; i < parts.length; i++) {
      const partHash = this.hashString(parts[i]);
      holographicValue += Math.sin(partHash * seed / 10000) / (i + 1);
    }
    
    return holographicValue;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Ä—Ä–∞—Ç–∏–≤–Ω—É—é —Å–∏–ª—É
   */
  getNarrativeStrength() {
    const narrativeWords = ['–∏—Å—Ç–æ—Ä–∏—è', '—Ä–∞—Å—Å–∫–∞–∑', '—Å—é–∂–µ—Ç', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–¥—Ä–∞–º–∞', '–ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ'];
    let strength = 0.3;
    
    for (const word of narrativeWords) {
      if (this.concept.toLowerCase().includes(word)) {
        strength += 0.4;
      }
    }
    
    return Math.min(1, strength);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ–ª–∏—á–∏–Ω—É –≤–µ–∫—Ç–æ—Ä–∞
   */
  calculateMagnitude() {
    let sumOfSquares = 0;
    for (const coordinate of Object.values(this.coordinates)) {
      sumOfSquares += coordinate * coordinate;
    }
    return Math.sqrt(sumOfSquares);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞
   */
  calculateDirection() {
    const direction = {};
    for (const [dimension, coordinate] of Object.entries(this.coordinates)) {
      direction[dimension] = coordinate / this.magnitude;
    }
    return direction;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏—é
   */
  calculateEntropy() {
    const probabilities = Object.values(this.coordinates).map(coord => 
      Math.abs(coord) / this.magnitude
    );
    
    let entropy = 0;
    for (const prob of probabilities) {
      if (prob > 0) {
        entropy -= prob * Math.log2(prob);
      }
    }
    
    return entropy;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
   */
  calculateInformationContent() {
    return this.concept.length * this.entropy * this.magnitude;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –¥—Ä—É–≥–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
   */
  distanceTo(otherVector) {
    let sumOfSquares = 0;
    
    for (const dimension of Object.keys(this.coordinates)) {
      const diff = this.coordinates[dimension] - (otherVector.coordinates[dimension] || 0);
      sumOfSquares += diff * diff;
    }
    
    return Math.sqrt(sumOfSquares);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
   */
  dotProduct(otherVector) {
    let product = 0;
    
    for (const dimension of Object.keys(this.coordinates)) {
      product += this.coordinates[dimension] * (otherVector.coordinates[dimension] || 0);
    }
    
    return product;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∫–æ—Å–∏–Ω—É—Å —É–≥–ª–∞ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏
   */
  cosineDistance(otherVector) {
    const dotProd = this.dotProduct(otherVector);
    return dotProd / (this.magnitude * otherVector.magnitude);
  }

  /**
   * –ü—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä –Ω–∞ –¥—Ä—É–≥–æ–π –≤–µ–∫—Ç–æ—Ä
   */
  projectOnto(otherVector) {
    const scalar = this.dotProduct(otherVector) / (otherVector.magnitude * otherVector.magnitude);
    const projectedCoordinates = {};
    
    for (const [dimension, coordinate] of Object.entries(otherVector.coordinates)) {
      projectedCoordinates[dimension] = coordinate * scalar;
    }
    
    return new MultidimensionalSemanticVector(
      `projection_${this.concept}_onto_${otherVector.concept}`,
      this.dimensions
    );
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä
   */
  normalize() {
    const normalizedCoordinates = {};
    
    for (const [dimension, coordinate] of Object.entries(this.coordinates)) {
      normalizedCoordinates[dimension] = coordinate / this.magnitude;
    }
    
    return normalizedCoordinates;
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä
   */
  export() {
    return {
      concept: this.concept,
      coordinates: this.coordinates,
      magnitude: this.magnitude,
      direction: this.direction,
      entropy: this.entropy,
      informationContent: this.informationContent,
      dimensionCount: Object.keys(this.coordinates).length,
      dominantDimension: this.getDominantDimension(),
      age: Date.now() - this.createdAt
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ
   */
  getDominantDimension() {
    let maxValue = -Infinity;
    let dominantDimension = null;
    
    for (const [dimension, value] of Object.entries(this.coordinates)) {
      if (Math.abs(value) > maxValue) {
        maxValue = Math.abs(value);
        dominantDimension = dimension;
      }
    }
    
    return dominantDimension;
  }

  hashString(str) {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash;
    }
    return Math.abs(hash);
  }
}

/**
 * –ú–ù–û–ì–û–ú–ï–†–ù–û–ï –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ï –ü–†–û–°–¢–†–ê–ù–°–¢–í–û
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –≤–µ–∫—Ç–æ—Ä–æ–≤ –∏ –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è–º–∏
 */
class MultidimensionalSemanticSpace {
  constructor(dimensionCount = 15) {
    this.dimensionCount = dimensionCount;
    this.vectors = new Map();
    this.clusters = new Map();
    this.hyperplanes = new Map();
    this.manifolds = new Map();
    this.topology = 'euclidean'; // euclidean, hyperbolic, spherical
    this.curvature = 0; // –ö—Ä–∏–≤–∏–∑–Ω–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    this.metric = 'euclidean'; // –ú–µ—Ç—Ä–∏–∫–∞ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
    this.symmetries = [];
    this.invariants = [];
    this.createdAt = Date.now();
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ–∫—Ç–æ—Ä –≤ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
   */
  addVector(concept) {
    const vector = new MultidimensionalSemanticVector(concept, this.dimensionCount);
    this.vectors.set(concept, vector);
    
    SmartLogger.multidimensional(`üìç –î–æ–±–∞–≤–ª–µ–Ω –≤–µ–∫—Ç–æ—Ä: ${concept} (–≤–µ–ª–∏—á–∏–Ω–∞: ${vector.magnitude.toFixed(3)}, –¥–æ–º–∏–Ω–∏—Ä—É—é—â–µ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ: ${vector.getDominantDimension()})`);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Ç–µ—Ä—ã
    this.updateClusters(vector);
    
    return vector;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã
   */
  updateClusters(newVector) {
    const clusterThreshold = 2.0;
    let assignedToCluster = false;
    
    for (const [clusterId, cluster] of this.clusters) {
      const centroid = cluster.centroid;
      const distance = newVector.distanceTo(centroid);
      
      if (distance < clusterThreshold) {
        cluster.vectors.push(newVector);
        cluster.centroid = this.calculateCentroid(cluster.vectors);
        assignedToCluster = true;
        SmartLogger.multidimensional(`üéØ –í–µ–∫—Ç–æ—Ä ${newVector.concept} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Ç–µ—Ä ${clusterId}`);
        break;
      }
    }
    
    if (!assignedToCluster) {
      const newClusterId = `cluster_${this.clusters.size + 1}`;
      this.clusters.set(newClusterId, {
        id: newClusterId,
        vectors: [newVector],
        centroid: newVector,
        createdAt: Date.now()
      });
      SmartLogger.multidimensional(`üÜï –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä: ${newClusterId}`);
    }
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ü–µ–Ω—Ç—Ä–æ–∏–¥ –∫–ª–∞—Å—Ç–µ—Ä–∞
   */
  calculateCentroid(vectors) {
    if (vectors.length === 0) return null;
    
    const centroidCoordinates = {};
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for (const dimension of Object.values(SEMANTIC_DIMENSIONS)) {
      centroidCoordinates[dimension] = 0;
    }
    
    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –≤–µ–∫—Ç–æ—Ä—ã
    for (const vector of vectors) {
      for (const [dimension, coordinate] of Object.entries(vector.coordinates)) {
        centroidCoordinates[dimension] += coordinate;
      }
    }
    
    // –î–µ–ª–∏–º –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–µ–∫—Ç–æ—Ä–æ–≤
    for (const dimension of Object.keys(centroidCoordinates)) {
      centroidCoordinates[dimension] /= vectors.length;
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–µ–∫—Ç–æ—Ä-—Ü–µ–Ω—Ç—Ä–æ–∏–¥
    const centroid = new MultidimensionalSemanticVector('centroid', this.dimensionCount);
    centroid.coordinates = centroidCoordinates;
    centroid.magnitude = centroid.calculateMagnitude();
    centroid.direction = centroid.calculateDirection();
    
    return centroid;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –±–ª–∏–∂–∞–π—à–∏–µ –≤–µ–∫—Ç–æ—Ä—ã
   */
  findNearestVectors(concept, count = 5) {
    const targetVector = this.vectors.get(concept);
    if (!targetVector) return [];
    
    const distances = [];
    
    for (const [otherConcept, otherVector] of this.vectors) {
      if (otherConcept === concept) continue;
      
      const distance = targetVector.distanceTo(otherVector);
      distances.push({
        concept: otherConcept,
        vector: otherVector,
        distance: distance,
        similarity: targetVector.cosineDistance(otherVector)
      });
    }
    
    return distances
      .sort((a, b) => a.distance - b.distance)
      .slice(0, count);
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –≥–∏–ø–µ—Ä–ø–ª–æ—Å–∫–æ—Å—Ç—å
   */
  createHyperplane(normalVector, point) {
    const hyperplaneId = `hyperplane_${this.hyperplanes.size + 1}`;
    
    this.hyperplanes.set(hyperplaneId, {
      id: hyperplaneId,
      normal: normalVector,
      point: point,
      equation: this.calculateHyperplaneEquation(normalVector, point),
      createdAt: Date.now()
    });
    
    SmartLogger.multidimensional(`üî∑ –°–æ–∑–¥–∞–Ω–∞ –≥–∏–ø–µ—Ä–ø–ª–æ—Å–∫–æ—Å—Ç—å: ${hyperplaneId}`);
    return hyperplaneId;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–∞–≤–Ω–µ–Ω–∏–µ –≥–∏–ø–µ—Ä–ø–ª–æ—Å–∫–æ—Å—Ç–∏
   */
  calculateHyperplaneEquation(normal, point) {
    // n ¬∑ (x - p) = 0, –≥–¥–µ n - –Ω–æ—Ä–º–∞–ª—å, p - —Ç–æ—á–∫–∞
    const constant = normal.dotProduct(point);
    return {
      normal: normal.coordinates,
      constant: constant,
      representation: 'n¬∑x = c'
    };
  }

  /**
   * –ü—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç –≤–µ–∫—Ç–æ—Ä –Ω–∞ –≥–∏–ø–µ—Ä–ø–ª–æ—Å–∫–æ—Å—Ç—å
   */
  projectOntoHyperplane(vector, hyperplaneId) {
    const hyperplane = this.hyperplanes.get(hyperplaneId);
    if (!hyperplane) return null;
    
    const normal = hyperplane.normal;
    const point = hyperplane.point;
    
    // –í–µ–∫—Ç–æ—Ä –æ—Ç —Ç–æ—á–∫–∏ –Ω–∞ –ø–ª–æ—Å–∫–æ—Å—Ç–∏ –∫ –Ω–∞—à–µ–º—É –≤–µ–∫—Ç–æ—Ä—É
    const toVector = this.subtractVectors(vector, point);
    
    // –ü—Ä–æ–µ–∫—Ü–∏—è –Ω–∞ –Ω–æ—Ä–º–∞–ª—å
    const projectionOnNormal = toVector.projectOnto(normal);
    
    // –í—ã—á–∏—Ç–∞–µ–º –ø—Ä–æ–µ–∫—Ü–∏—é –Ω–∞ –Ω–æ—Ä–º–∞–ª—å –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞
    return this.subtractVectors(vector, projectionOnNormal);
  }

  /**
   * –í—ã—á–∏—Ç–∞–µ—Ç –¥–≤–∞ –≤–µ–∫—Ç–æ—Ä–∞
   */
  subtractVectors(vector1, vector2) {
    const resultCoordinates = {};
    
    for (const dimension of Object.keys(vector1.coordinates)) {
      resultCoordinates[dimension] = vector1.coordinates[dimension] - (vector2.coordinates[dimension] || 0);
    }
    
    const result = new MultidimensionalSemanticVector(`subtraction_result`, this.dimensionCount);
    result.coordinates = resultCoordinates;
    result.magnitude = result.calculateMagnitude();
    result.direction = result.calculateDirection();
    
    return result;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –º–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ü–µ–ø—Ç–∞
   */
  performMultidimensionalAnalysis(concept) {
    const vector = this.vectors.get(concept) || this.addVector(concept);
    
    const analysis = {
      concept: concept,
      vector: vector.export(),
      nearestNeighbors: this.findNearestVectors(concept, 5),
      clusterMembership: this.getClusterMembership(vector),
      dimensionalProfile: this.getDimensionalProfile(vector),
      geometricProperties: this.getGeometricProperties(vector),
      topologicalProperties: this.getTopologicalProperties(vector),
      informationTheoreticProperties: this.getInformationTheoreticProperties(vector)
    };
    
    SmartLogger.multidimensional(`üîç –ú–Ω–æ–≥–æ–º–µ—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è: ${concept}`);
    
    return analysis;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∫–ª–∞—Å—Ç–µ—Ä—É
   */
  getClusterMembership(vector) {
    for (const [clusterId, cluster] of this.clusters) {
      if (cluster.vectors.includes(vector)) {
        return {
          clusterId: clusterId,
          clusterSize: cluster.vectors.length,
          distanceToCenter: vector.distanceTo(cluster.centroid)
        };
      }
    }
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è–º
   */
  getDimensionalProfile(vector) {
    const profile = {};
    const coordinates = Object.entries(vector.coordinates);
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–π –≤–µ–ª–∏—á–∏–Ω–µ
    coordinates.sort((a, b) => Math.abs(b[1]) - Math.abs(a[1]));
    
    profile.dominantDimensions = coordinates.slice(0, 5).map(([dim, val]) => ({
      dimension: dim,
      value: val,
      percentage: Math.abs(val) / vector.magnitude * 100
    }));
    
    profile.weakestDimensions = coordinates.slice(-3).map(([dim, val]) => ({
      dimension: dim,
      value: val,
      percentage: Math.abs(val) / vector.magnitude * 100
    }));
    
    return profile;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
   */
  getGeometricProperties(vector) {
    return {
      magnitude: vector.magnitude,
      direction: vector.direction,
      normalizedVector: vector.normalize(),
      orthogonalComponents: this.getOrthogonalComponents(vector),
      angles: this.calculateAngles(vector)
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
   */
  getOrthogonalComponents(vector) {
    const components = {};
    
    for (const [dimension, coordinate] of Object.entries(vector.coordinates)) {
      components[dimension] = {
        parallel: coordinate,
        orthogonal: Math.sqrt(vector.magnitude * vector.magnitude - coordinate * coordinate)
      };
    }
    
    return components;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–ª—ã
   */
  calculateAngles(vector) {
    const angles = {};
    
    for (const [dimension, coordinate] of Object.entries(vector.coordinates)) {
      angles[dimension] = Math.acos(coordinate / vector.magnitude) * 180 / Math.PI;
    }
    
    return angles;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
   */
  getTopologicalProperties(vector) {
    return {
      connectivity: this.calculateConnectivity(vector),
      density: this.calculateLocalDensity(vector),
      curvature: this.calculateLocalCurvature(vector),
      manifoldPosition: this.getManifoldPosition(vector)
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–≤—è–∑–Ω–æ—Å—Ç—å
   */
  calculateConnectivity(vector) {
    const neighbors = this.findNearestVectors(vector.concept, 10);
    return neighbors.length;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –ø–ª–æ—Ç–Ω–æ—Å—Ç—å
   */
  calculateLocalDensity(vector) {
    const radius = 1.0;
    let count = 0;
    
    for (const [concept, otherVector] of this.vectors) {
      if (concept === vector.concept) continue;
      
      if (vector.distanceTo(otherVector) <= radius) {
        count++;
      }
    }
    
    return count / (Math.PI * radius * radius);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—É—é –∫—Ä–∏–≤–∏–∑–Ω—É
   */
  calculateLocalCurvature(vector) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–µ—Ä–∞ –∫—Ä–∏–≤–∏–∑–Ω—ã
    return this.curvature * vector.magnitude;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –Ω–∞ –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏–∏
   */
  getManifoldPosition(vector) {
    // –ü—Ä–æ–µ—Ü–∏—Ä—É–µ–º –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–Ω–æ–≥–æ–æ–±—Ä–∞–∑–∏—è
    return {
      spherical: this.projectOntoSphere(vector),
      cylindrical: this.projectOntoCylinder(vector),
      toroidal: this.projectOntoTorus(vector)
    };
  }

  /**
   * –ü—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç –Ω–∞ —Å—Ñ–µ—Ä—É
   */
  projectOntoSphere(vector) {
    const normalized = vector.normalize();
    return {
      coordinates: normalized,
      sphericalCoordinates: this.toSphericalCoordinates(normalized)
    };
  }

  /**
   * –ü—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç –Ω–∞ —Ü–∏–ª–∏–Ω–¥—Ä
   */
  projectOntoCylinder(vector) {
    const coords = vector.coordinates;
    const x = coords[SEMANTIC_DIMENSIONS.LOGICAL] || 0;
    const y = coords[SEMANTIC_DIMENSIONS.EMOTIONAL] || 0;
    const z = coords[SEMANTIC_DIMENSIONS.TEMPORAL] || 0;
    
    const r = Math.sqrt(x*x + y*y);
    const theta = Math.atan2(y, x);
    
    return {
      radius: r,
      angle: theta,
      height: z
    };
  }

  /**
   * –ü—Ä–æ–µ—Ü–∏—Ä—É–µ—Ç –Ω–∞ —Ç–æ—Ä
   */
  projectOntoTorus(vector) {
    const coords = vector.coordinates;
    const x = coords[SEMANTIC_DIMENSIONS.LOGICAL] || 0;
    const y = coords[SEMANTIC_DIMENSIONS.EMOTIONAL] || 0;
    const z = coords[SEMANTIC_DIMENSIONS.CREATIVE] || 0;
    const w = coords[SEMANTIC_DIMENSIONS.PRACTICAL] || 0;
    
    const R = 2; // –ë–æ–ª—å—à–æ–π —Ä–∞–¥–∏—É—Å
    const r = 1; // –ú–∞–ª—ã–π —Ä–∞–¥–∏—É—Å
    
    const phi = Math.atan2(y, x);
    const theta = Math.atan2(w, z);
    
    return {
      majorRadius: R,
      minorRadius: r,
      majorAngle: phi,
      minorAngle: theta
    };
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
   */
  toSphericalCoordinates(normalizedCoords) {
    const coords = Object.values(normalizedCoords);
    const r = 1; // –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å
    
    const angles = [];
    for (let i = 0; i < coords.length - 1; i++) {
      const sum = coords.slice(i).reduce((a, b) => a + b*b, 0);
      angles.push(Math.acos(coords[i] / Math.sqrt(sum)));
    }
    
    return {
      radius: r,
      angles: angles
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ-—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
   */
  getInformationTheoreticProperties(vector) {
    return {
      entropy: vector.entropy,
      informationContent: vector.informationContent,
      complexity: this.calculateComplexity(vector),
      compression: this.calculateCompression(vector),
      redundancy: this.calculateRedundancy(vector)
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å
   */
  calculateComplexity(vector) {
    return vector.entropy * Math.log(vector.magnitude + 1);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∂–∞—Ç–∏–µ
   */
  calculateCompression(vector) {
    const nonZeroCount = Object.values(vector.coordinates).filter(coord => Math.abs(coord) > 0.001).length;
    return nonZeroCount / this.dimensionCount;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç—å
   */
  calculateRedundancy(vector) {
    return 1 - (vector.entropy / Math.log2(this.dimensionCount));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
   */
  getSpaceStatistics() {
    const vectors = Array.from(this.vectors.values());
    const clusters = Array.from(this.clusters.values());
    
    return {
      vectorCount: vectors.length,
      clusterCount: clusters.length,
      dimensionCount: this.dimensionCount,
      averageMagnitude: vectors.reduce((sum, v) => sum + v.magnitude, 0) / vectors.length || 0,
      averageEntropy: vectors.reduce((sum, v) => sum + v.entropy, 0) / vectors.length || 0,
      spaceCurvature: this.curvature,
      topology: this.topology,
      hyperplaneCount: this.hyperplanes.size,
      manifoldCount: this.manifolds.size,
      dominantDimensions: this.getDominantDimensions(vectors),
      spaceAge: Date.now() - this.createdAt
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è
   */
  getDominantDimensions(vectors) {
    const dimensionSums = {};
    
    for (const dimension of Object.values(SEMANTIC_DIMENSIONS)) {
      dimensionSums[dimension] = 0;
    }
    
    for (const vector of vectors) {
      for (const [dimension, coordinate] of Object.entries(vector.coordinates)) {
        dimensionSums[dimension] += Math.abs(coordinate);
      }
    }
    
    const sorted = Object.entries(dimensionSums).sort((a, b) => b[1] - a[1]);
    return sorted.slice(0, 5).map(([dim, sum]) => ({
      dimension: dim,
      totalMagnitude: sum,
      averageMagnitude: sum / vectors.length
    }));
  }
}

module.exports = {
  MultidimensionalSemanticSpace,
  MultidimensionalSemanticVector,
  SEMANTIC_DIMENSIONS
};
