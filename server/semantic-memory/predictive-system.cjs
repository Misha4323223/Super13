/**
 * –ü–†–ï–î–ò–ö–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
 * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–º–æ—â—å
 * –§–∞–∑–∞ 1: –£–ø—Ä–µ–∂–¥–∞—é—â–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
 */

const SmartLogger = {
  predict: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üîÆüìä [${timestamp}] PREDICTIVE: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–û–í–ï–î–ï–ù–ß–ï–°–ö–ò–• –ü–ê–¢–¢–ï–†–ù–û–í
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ü–µ–Ω–∞—Ä–∏–∏
 */
class BehavioralPatternAnalyzer {
  constructor() {
    this.userSessions = new Map();
    this.actionSequences = new Map();
    this.timePatterns = new Map();
    this.projectPatterns = new Map();
    this.contextualPatterns = new Map();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  analyzeUserBehavior(userId, currentAction, context = {}) {
    SmartLogger.predict('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, action: currentAction.type });
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!this.userSessions.has(userId)) {
      this.userSessions.set(userId, {
        actions: [],
        sessions: [],
        patterns: new Map(),
        preferences: {},
        lastActivity: null
      });
    }
    
    const userSession = this.userSessions.get(userId);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
    const actionWithContext = {
      ...currentAction,
      timestamp: Date.now(),
      context: context,
      sessionId: context.sessionId || this.generateSessionId()
    };
    
    userSession.actions.push(actionWithContext);
    userSession.lastActivity = actionWithContext.timestamp;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    this.analyzeActionSequences(userId, userSession);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    this.analyzeTimePatterns(userId, userSession);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    this.analyzeProjectPatterns(userId, userSession, context);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    this.analyzeContextualPatterns(userId, userSession, context);
    
    return this.extractBehavioralInsights(userId, userSession);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID —Å–µ—Å—Å–∏–∏
   */
  generateSessionId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏–π
   */
  analyzeActionSequences(userId, userSession) {
    const recentActions = userSession.actions.slice(-10); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –¥–µ–π—Å—Ç–≤–∏–π
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –¥–µ–π—Å—Ç–≤–∏–π
    for (let i = 2; i <= Math.min(5, recentActions.length); i++) {
      const sequence = recentActions.slice(-i).map(action => action.type).join(' ‚Üí ');
      
      if (!this.actionSequences.has(userId)) {
        this.actionSequences.set(userId, new Map());
      }
      
      const userSequences = this.actionSequences.get(userId);
      const currentCount = userSequences.get(sequence) || 0;
      userSequences.set(sequence, currentCount + 1);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      if (currentCount === 0) {
        userSequences.set(sequence + '_contexts', []);
      }
      
      const contexts = userSequences.get(sequence + '_contexts');
      contexts.push({
        timestamp: Date.now(),
        context: recentActions[recentActions.length - 1].context,
        outcome: this.determineActionOutcome(recentActions[recentActions.length - 1])
      });
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è
   */
  determineActionOutcome(action) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è
    const context = action.context || {};
    
    if (context.success === true) return 'success';
    if (context.success === false) return 'failure';
    if (context.userSatisfaction > 0.7) return 'success';
    if (context.userSatisfaction < 0.3) return 'failure';
    
    return 'neutral';
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   */
  analyzeTimePatterns(userId, userSession) {
    const recentActions = userSession.actions.slice(-50); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –¥–µ–π—Å—Ç–≤–∏–π
    
    if (!this.timePatterns.has(userId)) {
      this.timePatterns.set(userId, {
        dailyPatterns: new Map(),
        weeklyPatterns: new Map(),
        sessionDurations: [],
        peakTimes: [],
        activityFrequency: new Map()
      });
    }
    
    const timeData = this.timePatterns.get(userId);
    
    recentActions.forEach(action => {
      const date = new Date(action.timestamp);
      const hour = date.getHours();
      const dayOfWeek = date.getDay();
      
      // –î–Ω–µ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const dailyKey = `${hour}:${action.type}`;
      timeData.dailyPatterns.set(dailyKey, (timeData.dailyPatterns.get(dailyKey) || 0) + 1);
      
      // –ù–µ–¥–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const weeklyKey = `${dayOfWeek}:${action.type}`;
      timeData.weeklyPatterns.set(weeklyKey, (timeData.weeklyPatterns.get(weeklyKey) || 0) + 1);
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
    this.analyzeSessionDurations(userId, userSession, timeData);
    
    // –í—ã—è–≤–ª—è–µ–º –ø–∏–∫–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    this.identifyPeakTimes(userId, timeData);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–π
   */
  analyzeSessionDurations(userId, userSession, timeData) {
    const sessions = this.groupActionsBySessions(userSession.actions);
    
    sessions.forEach(session => {
      if (session.length > 1) {
        const duration = session[session.length - 1].timestamp - session[0].timestamp;
        timeData.sessionDurations.push({
          duration: duration,
          actionCount: session.length,
          types: [...new Set(session.map(action => action.type))],
          timestamp: session[0].timestamp
        });
      }
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 —Å–µ—Å—Å–∏—è–º–∏
    if (timeData.sessionDurations.length > 20) {
      timeData.sessionDurations = timeData.sessionDurations.slice(-20);
    }
  }

  /**
   * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–µ—Å—Å–∏—è–º
   */
  groupActionsBySessions(actions) {
    const sessions = [];
    let currentSession = [];
    let lastTimestamp = 0;
    
    const sessionGap = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
    
    actions.forEach(action => {
      if (lastTimestamp === 0 || action.timestamp - lastTimestamp < sessionGap) {
        currentSession.push(action);
      } else {
        if (currentSession.length > 0) {
          sessions.push([...currentSession]);
        }
        currentSession = [action];
      }
      lastTimestamp = action.timestamp;
    });
    
    if (currentSession.length > 0) {
      sessions.push(currentSession);
    }
    
    return sessions;
  }

  /**
   * –í—ã—è–≤–ª—è–µ—Ç –ø–∏–∫–æ–≤—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  identifyPeakTimes(userId, timeData) {
    const hourlyActivity = new Map();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
    timeData.dailyPatterns.forEach((count, key) => {
      const hour = parseInt(key.split(':')[0]);
      hourlyActivity.set(hour, (hourlyActivity.get(hour) || 0) + count);
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∞—Å—ã –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const sortedHours = Array.from(hourlyActivity.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5);
    
    timeData.peakTimes = sortedHours.map(([hour, count]) => ({
      hour: hour,
      activity: count,
      period: this.getTimePeriodName(hour)
    }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
   */
  getTimePeriodName(hour) {
    if (hour >= 6 && hour < 12) return 'morning';
    if (hour >= 12 && hour < 17) return 'afternoon';
    if (hour >= 17 && hour < 22) return 'evening';
    return 'night';
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   */
  analyzeProjectPatterns(userId, userSession, context) {
    if (!context.projectId && !context.currentProject) return;
    
    const projectId = context.projectId || context.currentProject;
    
    if (!this.projectPatterns.has(userId)) {
      this.projectPatterns.set(userId, new Map());
    }
    
    const userProjects = this.projectPatterns.get(userId);
    
    if (!userProjects.has(projectId)) {
      userProjects.set(projectId, {
        actions: [],
        phases: [],
        timeSpent: 0,
        completionRate: 0,
        commonWorkflows: new Map(),
        stuckPoints: []
      });
    }
    
    const projectData = userProjects.get(projectId);
    const lastAction = userSession.actions[userSession.actions.length - 1];
    
    projectData.actions.push({
      type: lastAction.type,
      timestamp: lastAction.timestamp,
      context: lastAction.context
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞
    this.analyzeProjectPhases(projectData, lastAction);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    this.analyzeProjectWorkflows(projectData);
    
    // –í—ã—è–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
    this.identifyStuckPoints(projectData);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–∑—ã –ø—Ä–æ–µ–∫—Ç–∞
   */
  analyzeProjectPhases(projectData, currentAction) {
    const phaseIndicators = {
      'planning': ['–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ–Ω—Ü–µ–ø—Ü–∏—è', '–∏–¥–µ—è', 'requirements'],
      'design': ['–¥–∏–∑–∞–π–Ω', '–º–∞–∫–µ—Ç', '–ø—Ä–æ—Ç–æ—Ç–∏–ø', 'layout'],
      'development': ['—Å–æ–∑–¥–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', 'implementation', 'coding'],
      'testing': ['—Ç–µ—Å—Ç', '–ø—Ä–æ–≤–µ—Ä–∫–∞', 'validation', 'review'],
      'optimization': ['–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '—É–ª—É—á—à–µ–Ω–∏–µ', 'optimization', 'refinement'],
      'completion': ['—Ñ–∏–Ω–∞–ª', '–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ', 'completion', 'delivery']
    };
    
    const actionType = currentAction.type.toLowerCase();
    const actionContext = JSON.stringify(currentAction.context).toLowerCase();
    
    let detectedPhase = 'unknown';
    
    Object.entries(phaseIndicators).forEach(([phase, indicators]) => {
      if (indicators.some(indicator => 
        actionType.includes(indicator) || actionContext.includes(indicator)
      )) {
        detectedPhase = phase;
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∑—É –µ—Å–ª–∏ –æ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
    const lastPhase = projectData.phases[projectData.phases.length - 1];
    if (!lastPhase || lastPhase.phase !== detectedPhase) {
      projectData.phases.push({
        phase: detectedPhase,
        startTime: currentAction.timestamp,
        actions: []
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∫ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ
    if (projectData.phases.length > 0) {
      projectData.phases[projectData.phases.length - 1].actions.push(currentAction);
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–µ–∫—Ç–∞
   */
  analyzeProjectWorkflows(projectData) {
    const recentActions = projectData.actions.slice(-10);
    
    // –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞
    for (let i = 2; i <= Math.min(4, recentActions.length); i++) {
      const workflow = recentActions.slice(-i).map(action => action.type).join(' ‚Üí ');
      const currentCount = projectData.commonWorkflows.get(workflow) || 0;
      projectData.commonWorkflows.set(workflow, currentCount + 1);
    }
  }

  /**
   * –í—ã—è–≤–ª—è–µ—Ç —Ç–æ—á–∫–∏ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
   */
  identifyStuckPoints(projectData) {
    const recentActions = projectData.actions.slice(-5);
    
    // –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –Ω–µ—É—Å–ø–µ—à–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const actionTypes = recentActions.map(action => action.type);
    const repeatedActions = actionTypes.filter((type, index) => 
      actionTypes.indexOf(type) !== index
    );
    
    if (repeatedActions.length > 0) {
      const stuckPoint = {
        actions: repeatedActions,
        timestamp: Date.now(),
        context: recentActions[recentActions.length - 1].context,
        phase: this.getCurrentPhase(projectData)
      };
      
      projectData.stuckPoints.push(stuckPoint);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
      if (projectData.stuckPoints.length > 10) {
        projectData.stuckPoints.shift();
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Ñ–∞–∑—É –ø—Ä–æ–µ–∫—Ç–∞
   */
  getCurrentPhase(projectData) {
    if (projectData.phases.length > 0) {
      return projectData.phases[projectData.phases.length - 1].phase;
    }
    return 'unknown';
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   */
  analyzeContextualPatterns(userId, userSession, context) {
    if (!this.contextualPatterns.has(userId)) {
      this.contextualPatterns.set(userId, {
        devicePatterns: new Map(),
        locationPatterns: new Map(),
        moodPatterns: new Map(),
        workloadPatterns: new Map()
      });
    }
    
    const contextData = this.contextualPatterns.get(userId);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (context.device) {
      const deviceKey = `${context.device}:${userSession.actions[userSession.actions.length - 1].type}`;
      contextData.devicePatterns.set(deviceKey, (contextData.devicePatterns.get(deviceKey) || 0) + 1);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (context.location) {
      const locationKey = `${context.location}:${userSession.actions[userSession.actions.length - 1].type}`;
      contextData.locationPatterns.set(locationKey, (contextData.locationPatterns.get(locationKey) || 0) + 1);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
    if (context.mood || context.userMood) {
      const mood = context.mood || context.userMood;
      const moodKey = `${mood}:${userSession.actions[userSession.actions.length - 1].type}`;
      contextData.moodPatterns.set(moodKey, (contextData.moodPatterns.get(moodKey) || 0) + 1);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–∞–±–æ—á–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
    if (context.workload) {
      const workloadKey = `${context.workload}:${userSession.actions[userSession.actions.length - 1].type}`;
      contextData.workloadPatterns.set(workloadKey, (contextData.workloadPatterns.get(workloadKey) || 0) + 1);
    }
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã
   */
  extractBehavioralInsights(userId, userSession) {
    const insights = {
      userId: userId,
      timestamp: Date.now(),
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      topActionSequences: this.getTopActionSequences(userId),
      preferredTimes: this.getPreferredTimes(userId),
      projectWorkflows: this.getProjectWorkflows(userId),
      contextualPreferences: this.getContextualPreferences(userId),
      
      // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
      nextLikelyActions: this.predictNextActions(userId),
      optimalTiming: this.predictOptimalTiming(userId),
      potentialStuckPoints: this.predictStuckPoints(userId),
      
      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      proactiveRecommendations: this.generateProactiveRecommendations(userId),
      optimizationSuggestions: this.generateOptimizationSuggestions(userId)
    };
    
    return insights;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –¥–µ–π—Å—Ç–≤–∏–π
   */
  getTopActionSequences(userId) {
    const userSequences = this.actionSequences.get(userId);
    if (!userSequences) return [];
    
    return Array.from(userSequences.entries())
      .filter(([key]) => !key.endsWith('_contexts'))
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([sequence, count]) => ({
        sequence: sequence,
        frequency: count,
        contexts: userSequences.get(sequence + '_contexts') || []
      }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
   */
  getPreferredTimes(userId) {
    const timeData = this.timePatterns.get(userId);
    if (!timeData) return {};
    
    return {
      peakTimes: timeData.peakTimes || [],
      averageSessionDuration: this.calculateAverageSessionDuration(timeData.sessionDurations),
      mostActiveDay: this.getMostActiveDay(timeData.weeklyPatterns),
      preferredTimeBlocks: this.getPreferredTimeBlocks(timeData.dailyPatterns)
    };
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω—é—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
   */
  calculateAverageSessionDuration(sessionDurations) {
    if (sessionDurations.length === 0) return 0;
    
    const totalDuration = sessionDurations.reduce((sum, session) => sum + session.duration, 0);
    return Math.round(totalDuration / sessionDurations.length);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å
   */
  getMostActiveDay(weeklyPatterns) {
    const dayActivity = new Map();
    const dayNames = ['–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ', '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞'];
    
    weeklyPatterns.forEach((count, key) => {
      const day = parseInt(key.split(':')[0]);
      dayActivity.set(day, (dayActivity.get(day) || 0) + count);
    });
    
    const mostActiveDay = Array.from(dayActivity.entries())
      .sort((a, b) => b[1] - a[1])[0];
    
    if (mostActiveDay) {
      return {
        day: dayNames[mostActiveDay[0]],
        activity: mostActiveDay[1]
      };
    }
    
    return null;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
   */
  getPreferredTimeBlocks(dailyPatterns) {
    const timeBlocks = {
      morning: 0,
      afternoon: 0,
      evening: 0,
      night: 0
    };
    
    dailyPatterns.forEach((count, key) => {
      const hour = parseInt(key.split(':')[0]);
      
      if (hour >= 6 && hour < 12) timeBlocks.morning += count;
      else if (hour >= 12 && hour < 17) timeBlocks.afternoon += count;
      else if (hour >= 17 && hour < 22) timeBlocks.evening += count;
      else timeBlocks.night += count;
    });
    
    return Object.entries(timeBlocks)
      .sort((a, b) => b[1] - a[1])
      .map(([period, activity]) => ({ period, activity }));
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–±–æ—á–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
   */
  getProjectWorkflows(userId) {
    const userProjects = this.projectPatterns.get(userId);
    if (!userProjects) return [];
    
    const workflows = [];
    
    userProjects.forEach((projectData, projectId) => {
      const topWorkflows = Array.from(projectData.commonWorkflows.entries())
        .sort((a, b) => b[1] - a[1])
        .slice(0, 3);
      
      workflows.push({
        projectId: projectId,
        phases: projectData.phases,
        topWorkflows: topWorkflows,
        stuckPoints: projectData.stuckPoints
      });
    });
    
    return workflows;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
   */
  getContextualPreferences(userId) {
    const contextData = this.contextualPatterns.get(userId);
    if (!contextData) return {};
    
    return {
      preferredDevices: this.getTopContextPattern(contextData.devicePatterns),
      preferredLocations: this.getTopContextPattern(contextData.locationPatterns),
      moodInfluences: this.getTopContextPattern(contextData.moodPatterns),
      workloadPatterns: this.getTopContextPattern(contextData.workloadPatterns)
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  getTopContextPattern(patternMap) {
    return Array.from(patternMap.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([pattern, count]) => {
        const [context, action] = pattern.split(':');
        return { context, action, frequency: count };
      });
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  predictNextActions(userId) {
    const userSequences = this.actionSequences.get(userId);
    if (!userSequences) return [];
    
    const userSession = this.userSessions.get(userId);
    const recentActions = userSession.actions.slice(-3).map(action => action.type);
    
    const predictions = [];
    
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –Ω–µ–¥–∞–≤–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    userSequences.forEach((count, sequence) => {
      if (sequence.endsWith('_contexts')) return;
      
      const sequenceActions = sequence.split(' ‚Üí ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –Ω–∞—á–∞–ª–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ –Ω–µ–¥–∞–≤–Ω–∏–º –¥–µ–π—Å—Ç–≤–∏—è–º
      for (let i = 1; i <= Math.min(recentActions.length, sequenceActions.length - 1); i++) {
        const recentSubseq = recentActions.slice(-i);
        const seqStart = sequenceActions.slice(0, i);
        
        if (JSON.stringify(recentSubseq) === JSON.stringify(seqStart)) {
          const nextAction = sequenceActions[i];
          if (nextAction) {
            predictions.push({
              action: nextAction,
              confidence: count / 10, // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
              basedOnSequence: sequence,
              frequency: count
            });
          }
        }
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-5
    return predictions
      .sort((a, b) => b.confidence - a.confidence)
      .slice(0, 5);
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
   */
  predictOptimalTiming(userId) {
    const timeData = this.timePatterns.get(userId);
    if (!timeData || !timeData.peakTimes.length) return null;
    
    const currentHour = new Date().getHours();
    const nextPeakTime = timeData.peakTimes.find(peak => peak.hour > currentHour) ||
                        timeData.peakTimes[0]; // –ü–µ—Ä–≤—ã–π –ø–∏–∫ –∑–∞–≤—Ç—Ä–∞
    
    return {
      nextOptimalHour: nextPeakTime.hour,
      period: nextPeakTime.period,
      expectedActivity: nextPeakTime.activity,
      suggestion: this.generateTimingSuggestion(nextPeakTime, currentHour)
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
   */
  generateTimingSuggestion(nextPeak, currentHour) {
    const hourDiff = nextPeak.hour > currentHour ? 
      nextPeak.hour - currentHour : 
      (24 - currentHour) + nextPeak.hour;
    
    if (hourDiff <= 2) {
      return `–°–∫–æ—Ä–æ –≤–∞—à–µ –∞–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è (—á–µ—Ä–µ–∑ ${hourDiff} —á.)`;
    } else if (hourDiff <= 6) {
      return `–†–µ–∫–æ–º–µ–Ω–¥—É—é –≤–µ—Ä–Ω—É—Ç—å—Å—è —á–µ—Ä–µ–∑ ${hourDiff} —á–∞—Å–æ–≤`;
    } else {
      return `–ó–∞–≤—Ç—Ä–∞ –≤ ${nextPeak.hour}:00 –≤—ã –æ–±—ã—á–Ω–æ –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã`;
    }
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
   */
  predictStuckPoints(userId) {
    const userProjects = this.projectPatterns.get(userId);
    if (!userProjects) return [];
    
    const stuckPredictions = [];
    
    userProjects.forEach((projectData, projectId) => {
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
      const stuckHistory = projectData.stuckPoints;
      const currentPhase = this.getCurrentPhase(projectData);
      
      // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è –≤ —Ç–µ–∫—É—â–µ–π —Ñ–∞–∑–µ
      const phaseStuckPoints = stuckHistory.filter(point => point.phase === currentPhase);
      
      if (phaseStuckPoints.length > 0) {
        const commonStuckActions = this.findCommonStuckActions(phaseStuckPoints);
        
        stuckPredictions.push({
          projectId: projectId,
          phase: currentPhase,
          riskLevel: this.calculateStuckRisk(phaseStuckPoints, projectData.actions),
          commonIssues: commonStuckActions,
          preventionSuggestions: this.generatePreventionSuggestions(commonStuckActions)
        });
      }
    });
    
    return stuckPredictions;
  }

  /**
   * –ù–∞—Ö–æ–¥–∏—Ç –æ–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
   */
  findCommonStuckActions(stuckPoints) {
    const actionCounts = new Map();
    
    stuckPoints.forEach(point => {
      point.actions.forEach(action => {
        actionCounts.set(action, (actionCounts.get(action) || 0) + 1);
      });
    });
    
    return Array.from(actionCounts.entries())
      .sort((a, b) => b[1] - a[1])
      .slice(0, 3)
      .map(([action, count]) => ({ action, frequency: count }));
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∏—Å–∫ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
   */
  calculateStuckRisk(stuckHistory, recentActions) {
    if (stuckHistory.length === 0) return 0;
    
    const recentActionTypes = recentActions.slice(-5).map(action => action.type);
    const stuckActionTypes = stuckHistory.flatMap(point => point.actions);
    
    const overlapCount = recentActionTypes.filter(action => 
      stuckActionTypes.includes(action)
    ).length;
    
    return Math.min(1.0, overlapCount / recentActionTypes.length);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é
   */
  generatePreventionSuggestions(commonStuckActions) {
    const suggestions = [];
    
    commonStuckActions.forEach(({ action, frequency }) => {
      if (action.includes('–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')) {
        suggestions.push('–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      } else if (action.includes('—Ü–≤–µ—Ç')) {
        suggestions.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã');
      } else if (action.includes('–¥–∏–∑–∞–π–Ω')) {
        suggestions.push('–í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç–æ–∏—Ç —É–ø—Ä–æ—Å—Ç–∏—Ç—å –¥–∏–∑–∞–π–Ω –∏–ª–∏ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —ç—Ç–∞–ø—ã');
      } else {
        suggestions.push(`–ò–∑–±–µ–≥–∞–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è "${action}" - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥`);
      }
    });
    
    return suggestions;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  generateProactiveRecommendations(userId) {
    const insights = this.extractBehavioralInsights(userId);
    const recommendations = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    insights.nextLikelyActions.forEach(prediction => {
      if (prediction.confidence > 0.5) {
        recommendations.push({
          type: 'next_action',
          priority: 'high',
          message: `–í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è "${prediction.action}"`,
          confidence: prediction.confidence,
          action: prediction.action
        });
      }
    });
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    if (insights.optimalTiming) {
      recommendations.push({
        type: 'timing',
        priority: 'medium',
        message: insights.optimalTiming.suggestion,
        timing: insights.optimalTiming
      });
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
    insights.potentialStuckPoints.forEach(stuckPoint => {
      if (stuckPoint.riskLevel > 0.6) {
        recommendations.push({
          type: 'stuck_prevention',
          priority: 'high',
          message: `–í–Ω–∏–º–∞–Ω–∏–µ: –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è –≤ —Ñ–∞–∑–µ "${stuckPoint.phase}"`,
          suggestions: stuckPoint.preventionSuggestions,
          riskLevel: stuckPoint.riskLevel
        });
      }
    });
    
    return recommendations.sort((a, b) => {
      const priorityOrder = { high: 3, medium: 2, low: 1 };
      return priorityOrder[b.priority] - priorityOrder[a.priority];
    });
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  generateOptimizationSuggestions(userId) {
    const insights = this.extractBehavioralInsights(userId);
    const suggestions = [];
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
    const timePrefs = insights.preferredTimes;
    if (timePrefs.averageSessionDuration > 0) {
      const optimalDuration = timePrefs.averageSessionDuration;
      suggestions.push({
        type: 'time_optimization',
        message: `–í–∞—à–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è—Ç—Å—è ~${Math.round(optimalDuration / 60000)} –º–∏–Ω—É—Ç`,
        suggestion: '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ –ø–æ–¥ —ç—Ç—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'
      });
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    insights.projectWorkflows.forEach(workflow => {
      if (workflow.topWorkflows.length > 0) {
        const mostCommon = workflow.topWorkflows[0];
        suggestions.push({
          type: 'workflow_optimization',
          message: `–í –ø—Ä–æ–µ–∫—Ç–µ "${workflow.projectId}" —á–∞—â–µ –≤—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ: ${mostCommon[0]}`,
          suggestion: '–°–æ–∑–¥–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞'
        });
      }
    });
    
    // –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    const contextPrefs = insights.contextualPreferences;
    if (contextPrefs.preferredDevices && contextPrefs.preferredDevices.length > 0) {
      const topDevice = contextPrefs.preferredDevices[0];
      suggestions.push({
        type: 'context_optimization',
        message: `–í—ã –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: ${topDevice.context}`,
        suggestion: '–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'
      });
    }
    
    return suggestions;
  }
}

/**
 * –ö–û–ù–¢–ï–ö–°–¢–ù–´–ô –ü–†–ï–î–ò–ö–¢–û–†
 * –£—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç –∏ —Å—Ç–∞–¥–∏—é —Ä–∞–±–æ—Ç—ã –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
 */
class ContextualPredictor {
  constructor() {
    this.projectContexts = new Map();
    this.workflowContexts = new Map();
    this.domainKnowledge = this.initializeDomainKnowledge();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞–Ω–∏–π –æ –ø—Ä–µ–¥–º–µ—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
   */
  initializeDomainKnowledge() {
    return {
      vectorization: {
        typical_sequence: ['upload_image', 'choose_settings', 'vectorize', 'review_result', 'adjust_settings', 'export'],
        common_issues: ['quality_too_low', 'too_many_colors', 'missing_details'],
        success_indicators: ['clean_vectors', 'appropriate_colors', 'scalable_result']
      },
      embroidery: {
        typical_sequence: ['vectorize_image', 'optimize_colors', 'generate_embroidery', 'review_pattern', 'adjust_settings', 'export_files'],
        common_issues: ['color_count_too_high', 'pattern_too_complex', 'thread_breaks'],
        success_indicators: ['embroidery_ready', 'color_count_optimal', 'machine_compatible']
      },
      design: {
        typical_sequence: ['concept', 'sketch', 'refine', 'color_scheme', 'finalize', 'export'],
        common_issues: ['unclear_concept', 'color_mismatch', 'scale_problems'],
        success_indicators: ['clear_design', 'good_composition', 'brand_aligned']
      }
    };
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  predictContextualSteps(userId, currentContext) {
    SmartLogger.predict('–ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —à–∞–≥–∏', { userId, context: currentContext.type });
    
    const predictions = {
      nextSteps: [],
      potentialIssues: [],
      optimizations: [],
      contextualTips: []
    };
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å
    const domain = this.identifyDomain(currentContext);
    
    if (domain && this.domainKnowledge[domain]) {
      // –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
      predictions.nextSteps = this.predictDomainSteps(domain, currentContext);
      
      // –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
      predictions.potentialIssues = this.predictDomainIssues(domain, currentContext);
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      predictions.optimizations = this.suggestDomainOptimizations(domain, currentContext);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
      predictions.contextualTips = this.generateContextualTips(domain, currentContext);
    }
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.enhanceWithUserHistory(userId, predictions, currentContext);
    
    return predictions;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–Ω—É—é –æ–±–ª–∞—Å—Ç—å
   */
  identifyDomain(context) {
    const contextStr = JSON.stringify(context).toLowerCase();
    
    if (contextStr.includes('vector') || contextStr.includes('svg')) return 'vectorization';
    if (contextStr.includes('embroidery') || contextStr.includes('–≤—ã—à–∏–≤–∫–∞')) return 'embroidery';
    if (contextStr.includes('design') || contextStr.includes('–¥–∏–∑–∞–π–Ω')) return 'design';
    
    return null;
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —à–∞–≥–∏ –≤ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
   */
  predictDomainSteps(domain, currentContext) {
    const domainData = this.domainKnowledge[domain];
    const currentStep = this.identifyCurrentStep(domain, currentContext);
    
    const currentIndex = domainData.typical_sequence.indexOf(currentStep);
    const nextSteps = [];
    
    if (currentIndex >= 0 && currentIndex < domainData.typical_sequence.length - 1) {
      // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      nextSteps.push({
        step: domainData.typical_sequence[currentIndex + 1],
        confidence: 0.8,
        type: 'sequential',
        description: this.getStepDescription(domain, domainData.typical_sequence[currentIndex + 1])
      });
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —à–∞–≥–∏
      if (currentIndex < domainData.typical_sequence.length - 2) {
        nextSteps.push({
          step: domainData.typical_sequence[currentIndex + 2],
          confidence: 0.4,
          type: 'alternative',
          description: this.getStepDescription(domain, domainData.typical_sequence[currentIndex + 2])
        });
      }
    }
    
    return nextSteps;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π —à–∞–≥
   */
  identifyCurrentStep(domain, context) {
    const contextStr = JSON.stringify(context).toLowerCase();
    const domainData = this.domainKnowledge[domain];
    
    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —à–∞–≥–∞–º
    for (const step of domainData.typical_sequence) {
      const stepKeywords = step.split('_');
      if (stepKeywords.some(keyword => contextStr.includes(keyword))) {
        return step;
      }
    }
    
    return domainData.typical_sequence[0]; // –ü–µ—Ä–≤—ã–π —à–∞–≥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —à–∞–≥–∞
   */
  getStepDescription(domain, step) {
    const descriptions = {
      vectorization: {
        upload_image: '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        choose_settings: '–í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        vectorize: '–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
        review_result: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∏ –æ—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞',
        adjust_settings: '–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
        export: '–≠–∫—Å–ø–æ—Ä—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞'
      },
      embroidery: {
        vectorize_image: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        optimize_colors: '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã',
        generate_embroidery: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã –≤—ã—à–∏–≤–∫–∏',
        review_pattern: '–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ö–µ–º—ã —Å—Ç–µ–∂–∫–æ–≤',
        adjust_settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤—ã—à–∏–≤–∫–∏',
        export_files: '–≠–∫—Å–ø–æ—Ä—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –º–∞—à–∏–Ω—ã'
      },
      design: {
        concept: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–∏–∑–∞–π–Ω–∞',
        sketch: '–°–æ–∑–¥–∞–Ω–∏–µ —ç—Å–∫–∏–∑–∞',
        refine: '–î–æ—Ä–∞–±–æ—Ç–∫–∞ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ',
        color_scheme: '–í—ã–±–æ—Ä —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã',
        finalize: '–§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∑–∞–π–Ω–∞',
        export: '–≠–∫—Å–ø–æ—Ä—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞'
      }
    };
    
    return descriptions[domain]?.[step] || step;
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
   */
  predictDomainIssues(domain, currentContext) {
    const domainData = this.domainKnowledge[domain];
    const currentStep = this.identifyCurrentStep(domain, currentContext);
    
    const potentialIssues = [];
    
    // –û–±—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    domainData.common_issues.forEach(issue => {
      potentialIssues.push({
        issue: issue,
        probability: this.calculateIssueProbability(issue, currentStep, currentContext),
        prevention: this.getPreventionTip(domain, issue),
        step: currentStep
      });
    });
    
    // –ü—Ä–æ–±–ª–µ–º—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    const stepSpecificIssues = this.getStepSpecificIssues(domain, currentStep);
    potentialIssues.push(...stepSpecificIssues);
    
    return potentialIssues.filter(issue => issue.probability > 0.3);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
   */
  calculateIssueProbability(issue, currentStep, context) {
    let probability = 0.5; // –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const contextStr = JSON.stringify(context).toLowerCase();
    
    if (issue.includes('quality') && contextStr.includes('low')) probability += 0.3;
    if (issue.includes('color') && contextStr.includes('many')) probability += 0.4;
    if (issue.includes('complex') && contextStr.includes('detailed')) probability += 0.3;
    
    return Math.min(1.0, probability);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–≤–µ—Ç –ø–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—é
   */
  getPreventionTip(domain, issue) {
    const tips = {
      vectorization: {
        quality_too_low: '–£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        too_many_colors: '–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö',
        missing_details: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π'
      },
      embroidery: {
        color_count_too_high: '–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–∞–ª–∏—Ç—Ä—É –¥–æ 15 —Ü–≤–µ—Ç–æ–≤',
        pattern_too_complex: '–£–ø—Ä–æ—Å—Ç–∏—Ç–µ –¥–∏–∑–∞–π–Ω –∏–ª–∏ —É–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä',
        thread_breaks: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Ç—è–∂–µ–Ω–∏–µ –∏ —Å–∫–æ—Ä–æ—Å—Ç—å –º–∞—à–∏–Ω—ã'
      },
      design: {
        unclear_concept: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞',
        color_mismatch: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ü–≤–µ—Ç–æ–≤–æ–π –∫—Ä—É–≥ –¥–ª—è –≥–∞—Ä–º–æ–Ω–∏–∏',
        scale_problems: '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–∏–∑–∞–π–Ω –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö'
      }
    };
    
    return tips[domain]?.[issue] || '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–º–æ—â—å—é';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã, —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —à–∞–≥–∞
   */
  getStepSpecificIssues(domain, step) {
    const stepIssues = {
      vectorization: {
        choose_settings: [
          { issue: 'wrong_color_count', probability: 0.6, prevention: '–ù–∞—á–Ω–∏—Ç–µ —Å 8-12 —Ü–≤–µ—Ç–æ–≤' },
          { issue: 'unsuitable_quality', probability: 0.4, prevention: '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏—Å—Ö–æ–¥—è –∏–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è' }
        ],
        review_result: [
          { issue: 'unsatisfactory_result', probability: 0.5, prevention: '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞' }
        ]
      }
    };
    
    return stepIssues[domain]?.[step] || [];
  }

  /**
   * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
   */
  suggestDomainOptimizations(domain, currentContext) {
    const optimizations = [];
    
    switch (domain) {
      case 'vectorization':
        optimizations.push({
          type: 'quality',
          suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ "–ø–µ—á–∞—Ç—å" –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤',
          benefit: '–õ—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è'
        });
        break;
        
      case 'embroidery':
        optimizations.push({
          type: 'efficiency',
          suggestion: '–ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–º–µ–Ω—ã –Ω–∏—Ç–µ–π',
          benefit: '–£—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã—à–∏–≤–∫–∏'
        });
        break;
        
      case 'design':
        optimizations.push({
          type: 'workflow',
          suggestion: '–°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ö–µ–º',
          benefit: '–ë–æ–ª—å—à–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞'
        });
        break;
    }
    
    return optimizations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã
   */
  generateContextualTips(domain, currentContext) {
    const tips = [];
    
    // –°–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    const currentHour = new Date().getHours();
    if (currentHour >= 9 && currentHour <= 11) {
      tips.push({
        type: 'timing',
        tip: '–£—Ç—Ä–µ–Ω–Ω–µ–µ –≤—Ä–µ–º—è –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á',
        relevance: 'high'
      });
    }
    
    // –°–æ–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    switch (domain) {
      case 'vectorization':
        tips.push({
          type: 'technical',
          tip: '–°–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã',
          relevance: 'medium'
        });
        break;
        
      case 'embroidery':
        tips.push({
          type: 'practical',
          tip: '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞ –æ–±—Ä–∞–∑—Ü–µ —Ç–∫–∞–Ω–∏ –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω–æ–π –≤—ã—à–∏–≤–∫–æ–π',
          relevance: 'high'
        });
        break;
    }
    
    return tips;
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  enhanceWithUserHistory(userId, predictions, currentContext) {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å BehavioralPatternAnalyzer
    // –¥–ª—è —É—á–µ—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    // –ü—Ä–∏–º–µ—Ä: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –ø—Ä–æ—à–ª—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    predictions.nextSteps.forEach(step => {
      // –õ–æ–≥–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
      if (this.hasUserSuccessWithStep(userId, step.step)) {
        step.confidence = Math.min(1.0, step.confidence + 0.1);
      }
    });
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º —à–∞–≥–æ–º
   */
  hasUserSuccessWithStep(userId, step) {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    return Math.random() > 0.5;
  }
}

/**
 * –ü–†–û–ê–ö–¢–ò–í–ù–´–ô –î–í–ò–ñ–û–ö
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
 */
class ProactiveEngine {
  constructor() {
    this.activeRecommendations = new Map();
    this.scheduledSuggestions = new Map();
    this.resourcePreparation = new Map();
    this.notificationQueue = [];
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  generateProactiveSuggestions(userId, behavioralInsights, contextPredictions) {
    SmartLogger.predict('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', { userId });
    
    const suggestions = {
      immediate: [],
      scheduled: [],
      conditional: [],
      preparatory: []
    };
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    suggestions.immediate = this.generateImmediateSuggestions(behavioralInsights);
    
    // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–∏
    suggestions.scheduled = this.generateScheduledSuggestions(behavioralInsights);
    
    // –£—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    suggestions.conditional = this.generateConditionalSuggestions(contextPredictions);
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    suggestions.preparatory = this.generatePreparatorySuggestions(contextPredictions);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    this.activeRecommendations.set(userId, suggestions);
    
    return suggestions;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  generateImmediateSuggestions(insights) {
    const immediate = [];
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    insights.nextLikelyActions.forEach(prediction => {
      if (prediction.confidence > 0.7) {
        immediate.push({
          type: 'next_action',
          priority: 'high',
          message: `–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å "${prediction.action}"`,
          action: prediction.action,
          confidence: prediction.confidence,
          preparationTime: 0
        });
      }
    });
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    insights.projectWorkflows.forEach(workflow => {
      workflow.stuckPoints.forEach(stuckPoint => {
        if (Date.now() - stuckPoint.timestamp < 3600000) { // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
          immediate.push({
            type: 'assistance',
            priority: 'high',
            message: `–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å "${stuckPoint.actions[0]}"?`,
            assistance: this.generateAssistanceOptions(stuckPoint),
            preparationTime: 0
          });
        }
      });
    });
    
    return immediate;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–º–æ—â–∏
   */
  generateAssistanceOptions(stuckPoint) {
    const options = [];
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è actions
    const actions = stuckPoint.actions || [];
    
    actions.forEach(action => {
      if (action && typeof action === 'string') {
        if (action.includes('–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è')) {
          options.push('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          options.push('–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
        } else if (action.includes('—Ü–≤–µ—Ç')) {
          options.push('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ª–∏—Ç—Ä—É');
          options.push('–ü–æ–∫–∞–∑–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ö–µ–º—ã');
        }
      }
    });
    
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤–∏–π, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–º–æ—â–∏
    if (options.length === 0) {
      options.push('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥');
      options.push('–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π');
    }
    
    return options;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  generateScheduledSuggestions(insights) {
    const scheduled = [];
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if (insights.optimalTiming) {
      const optimalTime = insights.optimalTiming;
      const timeUntilOptimal = this.calculateTimeUntilOptimal(optimalTime.nextOptimalHour);
      
      if (timeUntilOptimal > 0 && timeUntilOptimal < 24 * 60 * 60 * 1000) { // –í —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫
        scheduled.push({
          type: 'timing_reminder',
          priority: 'medium',
          message: `–ß–µ—Ä–µ–∑ ${Math.round(timeUntilOptimal / 3600000)} —á–∞—Å–æ–≤ –≤–∞—à–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä–∞–±–æ—Ç—ã`,
          scheduledTime: Date.now() + timeUntilOptimal,
          action: 'remind_optimal_time'
        });
      }
    }
    
    // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–µ–∫—Ç–Ω—ã—Ö —Ñ–∞–∑
    insights.projectWorkflows.forEach(workflow => {
      const lastPhase = workflow.phases[workflow.phases.length - 1];
      if (lastPhase) {
        const phaseTime = Date.now() - lastPhase.startTime;
        const avgPhaseTime = this.calculateAveragePhaseTime(workflow.phases);
        
        if (phaseTime > avgPhaseTime * 1.5) {
          scheduled.push({
            type: 'phase_transition',
            priority: 'medium',
            message: `–í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∞–∑–µ –ø—Ä–æ–µ–∫—Ç–∞`,
            scheduledTime: Date.now() + 1800000, // –ß–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç
            action: 'suggest_phase_transition',
            projectId: workflow.projectId
          });
        }
      }
    });
    
    return scheduled;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –¥–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∞—Å–∞
   */
  calculateTimeUntilOptimal(optimalHour) {
    const now = new Date();
    const currentHour = now.getHours();
    
    let hoursUntil;
    if (optimalHour > currentHour) {
      hoursUntil = optimalHour - currentHour;
    } else {
      hoursUntil = 24 - currentHour + optimalHour;
    }
    
    return hoursUntil * 60 * 60 * 1000; // –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —Ñ–∞–∑—ã
   */
  calculateAveragePhaseTime(phases) {
    if (phases.length < 2) return 3600000; // 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    const phaseDurations = [];
    for (let i = 1; i < phases.length; i++) {
      const duration = phases[i].startTime - phases[i - 1].startTime;
      phaseDurations.push(duration);
    }
    
    return phaseDurations.reduce((sum, duration) => sum + duration, 0) / phaseDurations.length;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  generateConditionalSuggestions(contextPredictions) {
    const conditional = [];
    
    // –£—Å–ª–æ–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    contextPredictions.nextSteps.forEach(step => {
      conditional.push({
        type: 'conditional_help',
        priority: 'medium',
        condition: `when_user_starts_${step.step}`,
        message: `–ö–æ–≥–¥–∞ –Ω–∞—á–Ω–µ—Ç–µ "${step.description}", —è –ø–æ–º–æ–≥—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏`,
        trigger: step.step,
        preparationActions: ['prepare_settings', 'load_templates'],
        confidence: step.confidence
      });
    });
    
    // –£—Å–ª–æ–≤–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
    contextPredictions.potentialIssues.forEach(issue => {
      if (issue.probability > 0.6) {
        conditional.push({
          type: 'issue_prevention',
          priority: 'high',
          condition: `if_issue_${issue.issue}_detected`,
          message: `–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º—ã: ${issue.issue}`,
          prevention: issue.prevention,
          trigger: issue.issue,
          probability: issue.probability
        });
      }
    });
    
    return conditional;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  generatePreparatorySuggestions(contextPredictions) {
    const preparatory = [];
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    contextPredictions.nextSteps.forEach(step => {
      if (step.confidence > 0.6) {
        preparatory.push({
          type: 'resource_preparation',
          priority: 'low',
          message: `–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è "${step.description}"`,
          action: 'preload_resources',
          resources: this.getRequiredResources(step.step),
          estimatedTime: this.estimatePreparationTime(step.step)
        });
      }
    });
    
    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è–º
    contextPredictions.optimizations.forEach(optimization => {
      preparatory.push({
        type: 'optimization_prep',
        priority: 'low',
        message: `–ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é: ${optimization.suggestion}`,
        action: 'prepare_optimization',
        optimization: optimization,
        benefit: optimization.benefit
      });
    });
    
    return preparatory;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è —à–∞–≥–∞
   */
  getRequiredResources(step) {
    const resourceMap = {
      vectorize: ['vectorization_engine', 'quality_presets', 'format_converters'],
      choose_settings: ['parameter_templates', 'quality_examples', 'preview_generator'],
      optimize_colors: ['color_algorithms', 'palette_generators', 'harmony_tools'],
      export: ['format_writers', 'compression_tools', 'metadata_processors']
    };
    
    return resourceMap[step] || ['basic_tools'];
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
   */
  estimatePreparationTime(step) {
    const timeMap = {
      vectorize: 2000,      // 2 —Å–µ–∫—É–Ω–¥—ã
      choose_settings: 500,  // 0.5 —Å–µ–∫—É–Ω–¥—ã
      optimize_colors: 1500, // 1.5 —Å–µ–∫—É–Ω–¥—ã
      export: 1000          // 1 —Å–µ–∫—É–Ω–¥–∞
    };
    
    return timeMap[step] || 1000;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
   */
  async executePreparatoryActions(userId, suggestions) {
    const preparationResults = [];
    
    for (const suggestion of suggestions.preparatory) {
      try {
        const result = await this.executePreparation(suggestion);
        preparationResults.push({
          suggestion: suggestion,
          success: true,
          result: result,
          executionTime: Date.now()
        });
      } catch (error) {
        preparationResults.push({
          suggestion: suggestion,
          success: false,
          error: error.message
        });
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    this.resourcePreparation.set(userId, preparationResults);
    
    return preparationResults;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É
   */
  async executePreparation(suggestion) {
    SmartLogger.predict(`–í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É: ${suggestion.action}`);
    
    switch (suggestion.action) {
      case 'preload_resources':
        return await this.preloadResources(suggestion.resources);
      
      case 'prepare_optimization':
        return await this.prepareOptimization(suggestion.optimization);
      
      case 'prepare_settings':
        return await this.prepareSettings(suggestion);
      
      default:
        return { prepared: true, message: '–ë–∞–∑–æ–≤–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' };
    }
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
   */
  async preloadResources(resources) {
    // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
    await new Promise(resolve => setTimeout(resolve, 100));
    
    return {
      preloaded: resources,
      count: resources.length,
      ready: true
    };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
   */
  async prepareOptimization(optimization) {
    return {
      optimization: optimization,
      prepared: true,
      estimatedBenefit: optimization.benefit
    };
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   */
  async prepareSettings(suggestion) {
    return {
      settings: 'prepared',
      templates: 'loaded',
      ready: true
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getActiveRecommendations(userId) {
    return this.activeRecommendations.get(userId) || {
      immediate: [],
      scheduled: [],
      conditional: [],
      preparatory: []
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
   */
  updateRecommendationStatus(userId, recommendationId, status) {
    const recommendations = this.activeRecommendations.get(userId);
    if (!recommendations) return false;
    
    // –ò—â–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –≤–æ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
    for (const category of Object.keys(recommendations)) {
      const recommendation = recommendations[category].find(rec => rec.id === recommendationId);
      if (recommendation) {
        recommendation.status = status;
        recommendation.updatedAt = Date.now();
        return true;
      }
    }
    
    return false;
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  scheduleNotifications(userId, suggestions) {
    suggestions.scheduled.forEach(suggestion => {
      const notification = {
        userId: userId,
        message: suggestion.message,
        scheduledTime: suggestion.scheduledTime,
        priority: suggestion.priority,
        action: suggestion.action,
        status: 'scheduled'
      };
      
      this.notificationQueue.push(notification);
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    this.notificationQueue.sort((a, b) => a.scheduledTime - b.scheduledTime);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  processNotificationQueue() {
    const now = Date.now();
    const readyNotifications = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    while (this.notificationQueue.length > 0 && this.notificationQueue[0].scheduledTime <= now) {
      const notification = this.notificationQueue.shift();
      notification.status = 'ready';
      readyNotifications.push(notification);
    }
    
    return readyNotifications;
  }
}

/**
 * –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–¨–Æ
 * –ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∏ —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
 */
class RelevanceManager {
  constructor() {
    this.userPreferences = new Map();
    this.notificationHistory = new Map();
    this.relevanceScores = new Map();
    this.adaptiveSettings = new Map();
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  assessRelevance(userId, suggestion, context) {
    SmartLogger.predict('–û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', { userId, type: suggestion.type });
    
    const relevance = {
      score: 0,
      factors: {},
      recommendation: 'show', // show, delay, skip
      timing: 'immediate' // immediate, delayed, scheduled
    };
    
    // –§–∞–∫—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    relevance.factors.timing = this.assessTimingRelevance(userId, suggestion, context);
    
    // –§–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    relevance.factors.context = this.assessContextRelevance(userId, suggestion, context);
    
    // –§–∞–∫—Ç–æ—Ä —á–∞—Å—Ç–æ—Ç—ã
    relevance.factors.frequency = this.assessFrequencyRelevance(userId, suggestion);
    
    // –§–∞–∫—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    relevance.factors.preferences = this.assessPreferenceRelevance(userId, suggestion);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
    relevance.score = this.calculateOverallRelevance(relevance.factors);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    relevance.recommendation = this.determineRecommendation(relevance.score, suggestion);
    relevance.timing = this.determineTiming(relevance.score, suggestion, context);
    
    return relevance;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
   */
  assessTimingRelevance(userId, suggestion, context) {
    const currentHour = new Date().getHours();
    const userPrefs = this.getUserPreferences(userId);
    
    let timingScore = 0.5; // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (userPrefs.activeTimes && userPrefs.activeTimes.includes(currentHour)) {
      timingScore += 0.3;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—Ä–µ–º—è –ª–∏ –æ—Ç–¥—ã—Ö–∞
    if (currentHour < 8 || currentHour > 22) {
      timingScore -= 0.4;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const lastActivity = this.getLastActivity(userId);
    if (lastActivity && Date.now() - lastActivity < 300000) { // 5 –º–∏–Ω—É—Ç
      timingScore += 0.2;
    }
    
    return Math.max(0, Math.min(1, timingScore));
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
   */
  assessContextRelevance(userId, suggestion, context) {
    let contextScore = 0.5;
    
    // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ
    if (context.currentTask && suggestion.message.toLowerCase().includes(context.currentTask.toLowerCase())) {
      contextScore += 0.4;
    }
    
    // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    if (context.projectId && suggestion.projectId === context.projectId) {
      contextScore += 0.3;
    }
    
    // –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫ —Ñ–∞–∑–µ —Ä–∞–±–æ—Ç—ã
    if (context.workPhase && suggestion.phase === context.workPhase) {
      contextScore += 0.2;
    }
    
    return Math.max(0, Math.min(1, contextScore));
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —á–∞—Å—Ç–æ—Ç–Ω—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
   */
  assessFrequencyRelevance(userId, suggestion) {
    const history = this.getNotificationHistory(userId);
    const recentNotifications = history.filter(notification => 
      Date.now() - notification.timestamp < 3600000 // –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    );
    
    let frequencyScore = 1.0;
    
    // –°–Ω–∏–∂–∞–µ–º –æ—Ü–µ–Ω–∫—É –ø—Ä–∏ —á–∞—Å—Ç—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
    if (recentNotifications.length > 5) {
      frequencyScore -= 0.5;
    } else if (recentNotifications.length > 2) {
      frequencyScore -= 0.2;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–∏–ø—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const sameTypeCount = recentNotifications.filter(notification => 
      notification.type === suggestion.type
    ).length;
    
    if (sameTypeCount > 2) {
      frequencyScore -= 0.3;
    }
    
    return Math.max(0, frequencyScore);
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º
   */
  assessPreferenceRelevance(userId, suggestion) {
    const userPrefs = this.getUserPreferences(userId);
    let prefScore = 0.5;
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Ç–∏–ø–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (userPrefs.notificationTypes) {
      if (userPrefs.notificationTypes.includes(suggestion.type)) {
        prefScore += 0.3;
      } else if (userPrefs.notificationTypes.includes('minimal')) {
        prefScore -= 0.4;
      }
    }
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    if (userPrefs.minPriority) {
      const priorityValues = { low: 1, medium: 2, high: 3 };
      const suggestionPriority = priorityValues[suggestion.priority] || 1;
      const minPriority = priorityValues[userPrefs.minPriority] || 1;
      
      if (suggestionPriority >= minPriority) {
        prefScore += 0.2;
      } else {
        prefScore -= 0.5;
      }
    }
    
    return Math.max(0, Math.min(1, prefScore));
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
   */
  calculateOverallRelevance(factors) {
    const weights = {
      timing: 0.3,
      context: 0.4,
      frequency: 0.2,
      preferences: 0.1
    };
    
    let totalScore = 0;
    Object.entries(factors).forEach(([factor, score]) => {
      totalScore += score * (weights[factor] || 0);
    });
    
    return totalScore;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
   */
  determineRecommendation(score, suggestion) {
    // –í—ã—Å–æ–∫–æ–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –æ—Ü–µ–Ω–∫–µ
    if (suggestion.priority === 'high' && score > 0.3) {
      return 'show';
    }
    
    if (score > 0.7) return 'show';
    if (score > 0.4) return 'delay';
    return 'skip';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∞–π–º–∏–Ω–≥ –ø–æ–∫–∞–∑–∞
   */
  determineTiming(score, suggestion, context) {
    if (suggestion.priority === 'high') return 'immediate';
    
    if (score > 0.8) return 'immediate';
    if (score > 0.5) return 'delayed';
    return 'scheduled';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getUserPreferences(userId) {
    if (!this.userPreferences.has(userId)) {
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      this.userPreferences.set(userId, {
        notificationTypes: ['next_action', 'assistance', 'timing_reminder'],
        minPriority: 'medium',
        activeTimes: [9, 10, 11, 14, 15, 16, 17],
        maxPerHour: 3
      });
    }
    
    return this.userPreferences.get(userId);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  getNotificationHistory(userId) {
    return this.notificationHistory.get(userId) || [];
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  getLastActivity(userId) {
    // –ó–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —ç—Ç–æ –±—ã–ª–æ –±—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    return Date.now() - Math.random() * 600000; // –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  recordShownNotification(userId, suggestion, relevanceData) {
    const history = this.getNotificationHistory(userId);
    
    history.push({
      timestamp: Date.now(),
      type: suggestion.type,
      priority: suggestion.priority,
      message: suggestion.message,
      relevanceScore: relevanceData.score,
      factors: relevanceData.factors,
      action: 'shown'
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 100 –∑–∞–ø–∏—Å—è–º–∏
    if (history.length > 100) {
      history.splice(0, history.length - 100);
    }
    
    this.notificationHistory.set(userId, history);
  }

  /**
   * –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   */
  adaptSettings(userId, feedback) {
    const userPrefs = this.getUserPreferences(userId);
    
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∫–ª–∏–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if (feedback.type === 'notification_dismissed' && feedback.dismissCount > 3) {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      if (userPrefs.minPriority === 'low') userPrefs.minPriority = 'medium';
      else if (userPrefs.minPriority === 'medium') userPrefs.minPriority = 'high';
    }
    
    if (feedback.type === 'notification_acted_upon') {
      // –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (userPrefs.minPriority === 'high') userPrefs.minPriority = 'medium';
    }
    
    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    if (feedback.type === 'timing_feedback') {
      const hour = new Date(feedback.timestamp).getHours();
      if (feedback.positive && !userPrefs.activeTimes.includes(hour)) {
        userPrefs.activeTimes.push(hour);
      } else if (!feedback.positive && userPrefs.activeTimes.includes(hour)) {
        userPrefs.activeTimes = userPrefs.activeTimes.filter(h => h !== hour);
      }
    }
    
    this.userPreferences.set(userId, userPrefs);
  }
}

/**
 * –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ü–†–ï–î–ò–ö–¢–ò–í–ù–û–ô –°–ò–°–¢–ï–ú–´
 */
class PredictiveSystem {
  constructor() {
    this.behavioralAnalyzer = new BehavioralPatternAnalyzer();
    this.contextualPredictor = new ContextualPredictor();
    this.proactiveEngine = new ProactiveEngine();
    this.relevanceManager = new RelevanceManager();
    this.initialized = false;
    this.predictionCache = new Map();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  initialize() {
    if (this.initialized) return;
    
    SmartLogger.predict('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    this.startBackgroundProcesses();
    
    this.initialized = true;
    SmartLogger.predict('–ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
   */
  startBackgroundProcesses() {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
      this.processNotificationQueue();
    }, 30000);
    
    // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    setInterval(() => {
      this.cleanupPredictionCache();
    }, 300000);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
   */
  async predict(userId, currentAction, context = {}) {
    this.initialize();
    
    SmartLogger.predict('–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, action: currentAction.type });
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      const cacheKey = this.generateCacheKey(userId, currentAction, context);
      if (this.predictionCache.has(cacheKey)) {
        SmartLogger.predict('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ');
        return this.predictionCache.get(cacheKey);
      }
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const behavioralInsights = this.behavioralAnalyzer.analyzeUserBehavior(userId, currentAction, context);
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
      const contextPredictions = this.contextualPredictor.predictContextualSteps(userId, context);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
      const proactiveSuggestions = this.proactiveEngine.generateProactiveSuggestions(
        userId, 
        behavioralInsights, 
        contextPredictions
      );
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
      const filteredSuggestions = await this.filterByRelevance(userId, proactiveSuggestions, context);
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
      await this.proactiveEngine.executePreparatoryActions(userId, filteredSuggestions);
      
      // –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      this.proactiveEngine.scheduleNotifications(userId, filteredSuggestions);
      
      const result = {
        success: true,
        timestamp: Date.now(),
        userId: userId,
        currentAction: currentAction,
        
        // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        behavioralInsights: behavioralInsights,
        contextPredictions: contextPredictions,
        
        // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
        suggestions: filteredSuggestions,
        
        // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        nextLikelyActions: behavioralInsights.nextLikelyActions,
        optimalTiming: behavioralInsights.optimalTiming,
        potentialIssues: contextPredictions.potentialIssues,
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        proactiveRecommendations: behavioralInsights.proactiveRecommendations,
        optimizations: contextPredictions.optimizations
      };
      
      // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç
      this.predictionCache.set(cacheKey, result);
      setTimeout(() => this.predictionCache.delete(cacheKey), 300000);
      
      SmartLogger.predict('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      return result;
      
    } catch (error) {
      SmartLogger.predict('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:', error);
      return {
        success: false,
        error: error.message,
        fallbackSuggestions: this.generateFallbackSuggestions(userId, currentAction)
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –∫—ç—à–∞
   */
  generateCacheKey(userId, currentAction, context) {
    const contextStr = JSON.stringify({
      type: context.type,
      projectId: context.projectId,
      phase: context.phase
    });
    
    return `${userId}_${currentAction.type}_${btoa(contextStr).slice(0, 10)}`;
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  async filterByRelevance(userId, suggestions, context) {
    const filtered = {
      immediate: [],
      scheduled: [],
      conditional: [],
      preparatory: []
    };
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    for (const category of Object.keys(suggestions)) {
      for (const suggestion of suggestions[category]) {
        const relevance = this.relevanceManager.assessRelevance(userId, suggestion, context);
        
        if (relevance.recommendation === 'show') {
          suggestion.relevance = relevance;
          suggestion.timing = relevance.timing;
          filtered[category].push(suggestion);
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–∫–∞–∑–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
          this.relevanceManager.recordShownNotification(userId, suggestion, relevance);
        }
      }
    }
    
    return filtered;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø–∞—Å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  generateFallbackSuggestions(userId, currentAction) {
    return {
      immediate: [{
        type: 'general_help',
        priority: 'medium',
        message: '–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å —Å —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–µ–π?',
        action: 'offer_help'
      }],
      scheduled: [],
      conditional: [],
      preparatory: []
    };
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  processNotificationQueue() {
    const readyNotifications = this.proactiveEngine.processNotificationQueue();
    
    if (readyNotifications.length > 0) {
      SmartLogger.predict(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${readyNotifications.length} –≥–æ—Ç–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ –¥—Ä—É–≥–æ–π –º–µ—Ö–∞–Ω–∏–∑–º
      readyNotifications.forEach(notification => {
        this.deliverNotification(notification);
      });
    }
  }

  /**
   * –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  deliverNotification(notification) {
    SmartLogger.predict('–î–æ—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ', { 
      userId: notification.userId, 
      message: notification.message.substring(0, 50) + '...' 
    });
    
    // –ó–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Ä–µ–∞–ª—å–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ WebSocket, push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Ç.–¥.
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫—ç—à –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
   */
  cleanupPredictionCache() {
    const now = Date.now();
    const maxAge = 300000; // 5 –º–∏–Ω—É—Ç
    
    let cleanedCount = 0;
    this.predictionCache.forEach((prediction, key) => {
      if (now - prediction.timestamp > maxAge) {
        this.predictionCache.delete(key);
        cleanedCount++;
      }
    });
    
    if (cleanedCount > 0) {
      SmartLogger.predict(`–û—á–∏—â–µ–Ω–æ ${cleanedCount} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ –∫—ç—à–∞`);
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getActivePredictions(userId) {
    const active = {
      nextActions: [],
      recommendations: [],
      notifications: [],
      preparations: []
    };
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendations = this.proactiveEngine.getActiveRecommendations(userId);
    active.recommendations = recommendations;
    
    // –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = this.proactiveEngine.processNotificationQueue()
      .filter(notification => notification.userId === userId);
    active.notifications = notifications;
    
    return active;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   */
  updatePredictionFeedback(userId, predictionId, feedback) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
    this.relevanceManager.adaptSettings(userId, feedback);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    this.proactiveEngine.updateRecommendationStatus(userId, predictionId, feedback.status);
    
    SmartLogger.predict('–û–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏', { userId, feedback: feedback.type });
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
   */
  getPredictiveStats() {
    return {
      cacheSize: this.predictionCache.size,
      activeUsers: this.behavioralAnalyzer.userSessions.size,
      queueSize: this.proactiveEngine.notificationQueue.length,
      systemHealth: this.assessSystemHealth()
    };
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã
   */
  assessSystemHealth() {
    const stats = this.getPredictiveStats();
    
    const health = {
      overall: 'healthy',
      components: {
        behavioral: 'healthy',
        contextual: 'healthy',
        proactive: 'healthy',
        relevance: 'healthy'
      },
      metrics: {
        cacheEfficiency: this.predictionCache.size > 0 ? 'good' : 'low',
        userEngagement: stats.activeUsers > 0 ? 'good' : 'low',
        queueProcessing: stats.queueSize < 100 ? 'good' : 'overloaded'
      }
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
    if (stats.queueSize > 100) {
      health.components.proactive = 'warning';
    }
    
    if (stats.activeUsers === 0) {
      health.overall = 'idle';
    }
    
    return health;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const predictiveSystem = new PredictiveSystem();

module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  predict: (userId, action, context) => 
    predictiveSystem.predict(userId, action, context),
  getActivePredictions: (userId) => 
    predictiveSystem.getActivePredictions(userId),
  updatePredictionFeedback: (predictionId, feedback) => 
    predictiveSystem.updatePredictionFeedback(predictionId, feedback),
  getPredictiveStats: () => 
    predictiveSystem.getPredictiveStats(),
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  PredictiveSystem,
  BehavioralPatternAnalyzer,
  ContextualPredictor,
  ProactiveEngine,
  RelevanceManager
};