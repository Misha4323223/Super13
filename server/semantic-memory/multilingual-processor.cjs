
/**
 * –°–∏—Å—Ç–µ–º–∞ –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ (–§–∞–∑–∞ 3)
 */

const SmartLogger = {
  lang: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üåç [${timestamp}] MULTILINGUAL: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

class MultilingualProcessor {
  constructor() {
    this.initializeLanguageSupport();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —è–∑—ã–∫–æ–≤
   */
  initializeLanguageSupport() {
    this.supportedLanguages = {
      'ru': {
        name: '–†—É—Å—Å–∫–∏–π',
        direction: 'ltr',
        family: 'cyrillic',
        cultural_context: 'eastern_european',
        formality_levels: ['informal', 'formal', 'official']
      },
      'en': {
        name: 'English',
        direction: 'ltr',
        family: 'latin',
        cultural_context: 'western',
        formality_levels: ['casual', 'formal', 'business']
      },
      'zh': {
        name: '‰∏≠Êñá',
        direction: 'ltr',
        family: 'sino_tibetan',
        cultural_context: 'eastern_asian',
        formality_levels: ['informal', 'formal', 'honorific']
      },
      'es': {
        name: 'Espa√±ol',
        direction: 'ltr',
        family: 'latin',
        cultural_context: 'hispanic',
        formality_levels: ['t√∫', 'usted', 'formal']
      },
      'fr': {
        name: 'Fran√ßais',
        direction: 'ltr',
        family: 'latin',
        cultural_context: 'western_european',
        formality_levels: ['tu', 'vous', 'formal']
      },
      'de': {
        name: 'Deutsch',
        direction: 'ltr',
        family: 'germanic',
        cultural_context: 'central_european',
        formality_levels: ['du', 'sie', 'formal']
      },
      'ja': {
        name: 'Êó•Êú¨Ë™û',
        direction: 'ltr',
        family: 'japonic',
        cultural_context: 'eastern_asian',
        formality_levels: ['casual', 'polite', 'formal', 'honorific']
      },
      'ar': {
        name: 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
        direction: 'rtl',
        family: 'semitic',
        cultural_context: 'middle_eastern',
        formality_levels: ['informal', 'formal', 'classical']
      }
    };

    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
    this.conceptTranslations = {
      'branding': {
        'ru': '–±—Ä–µ–Ω–¥–∏–Ω–≥',
        'en': 'branding',
        'zh': 'ÂìÅÁâå',
        'es': 'marca',
        'fr': 'image de marque',
        'de': 'markenbildung',
        'ja': '„Éñ„É©„É≥„Éá„Ç£„É≥„Ç∞',
        'ar': 'ÿßŸÑÿπŸÑÿßŸÖÿ© ÿßŸÑÿ™ÿ¨ÿßÿ±Ÿäÿ©'
      },
      'logo': {
        'ru': '–ª–æ–≥–æ—Ç–∏–ø',
        'en': 'logo',
        'zh': 'Ê†áÂøó',
        'es': 'logotipo',
        'fr': 'logo',
        'de': 'logo',
        'ja': '„É≠„Ç¥',
        'ar': 'ÿ¥ÿπÿßÿ±'
      },
      'design': {
        'ru': '–¥–∏–∑–∞–π–Ω',
        'en': 'design',
        'zh': 'ËÆæËÆ°',
        'es': 'dise√±o',
        'fr': 'conception',
        'de': 'design',
        'ja': '„Éá„Ç∂„Ç§„É≥',
        'ar': 'ÿ™ÿµŸÖŸäŸÖ'
      }
    };

    // –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
    this.culturalAdaptations = {
      'colors': {
        'western': {
          'red': { meaning: 'passion', context: 'love_danger' },
          'white': { meaning: 'purity', context: 'wedding_peace' },
          'black': { meaning: 'elegance', context: 'formal_mystery' }
        },
        'eastern_asian': {
          'red': { meaning: 'luck', context: 'celebration_prosperity' },
          'white': { meaning: 'mourning', context: 'death_sadness' },
          'black': { meaning: 'formal', context: 'business_serious' }
        },
        'middle_eastern': {
          'green': { meaning: 'islam', context: 'religious_nature' },
          'blue': { meaning: 'protection', context: 'safety_trust' },
          'gold': { meaning: 'wealth', context: 'luxury_divine' }
        }
      },
      'symbols': {
        'western': {
          'owl': 'wisdom',
          'dove': 'peace',
          'lion': 'strength'
        },
        'eastern_asian': {
          'dragon': 'power_luck',
          'crane': 'longevity',
          'lotus': 'purity'
        },
        'middle_eastern': {
          'crescent': 'islam',
          'palm': 'victory',
          'star': 'guidance'
        }
      }
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞
   */
  detectLanguage(text) {
    SmartLogger.lang('–û–ø—Ä–µ–¥–µ–ª—è—é —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞', { textLength: text.length });

    const detection = {
      primary_language: 'ru',
      confidence: 0.5,
      alternatives: [],
      script_type: 'cyrillic',
      mixed_language: false
    };

    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
    const cyrillicPattern = /[–∞-—è—ë]/i;
    const latinPattern = /[a-z]/i;
    const chinesePattern = /[\u4e00-\u9fff]/;
    const arabicPattern = /[\u0600-\u06ff]/;
    const japanesePattern = /[\u3040-\u309f\u30a0-\u30ff]/;

    const patterns = [
      { pattern: cyrillicPattern, lang: 'ru', script: 'cyrillic' },
      { pattern: latinPattern, lang: 'en', script: 'latin' },
      { pattern: chinesePattern, lang: 'zh', script: 'chinese' },
      { pattern: arabicPattern, lang: 'ar', script: 'arabic' },
      { pattern: japanesePattern, lang: 'ja', script: 'japanese' }
    ];

    const matches = [];
    patterns.forEach(({ pattern, lang, script }) => {
      const match = text.match(pattern);
      if (match) {
        matches.push({
          language: lang,
          script: script,
          match_count: match.length,
          confidence: Math.min(match.length / text.length * 2, 1.0)
        });
      }
    });

    if (matches.length > 0) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      matches.sort((a, b) => b.confidence - a.confidence);
      detection.primary_language = matches[0].language;
      detection.confidence = matches[0].confidence;
      detection.script_type = matches[0].script;
      detection.alternatives = matches.slice(1);
      detection.mixed_language = matches.length > 1;
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
    if (detection.primary_language === 'en' && detection.script_type === 'latin') {
      detection.primary_language = this.refineLatinLanguage(text);
    }

    SmartLogger.lang('–Ø–∑—ã–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', {
      language: detection.primary_language,
      confidence: detection.confidence,
      mixed: detection.mixed_language
    });

    return detection;
  }

  /**
   * –ö—É–ª—å—Ç—É—Ä–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  adaptToculture(content, targetLanguage, culturalContext = null) {
    SmartLogger.lang('–ê–¥–∞–ø—Ç–∏—Ä—É—é –∫–æ–Ω—Ç–µ–Ω—Ç –∫ –∫—É–ª—å—Ç—É—Ä–µ', {
      targetLang: targetLanguage,
      context: culturalContext
    });

    const langInfo = this.supportedLanguages[targetLanguage];
    if (!langInfo) {
      return { content, adaptations: [] };
    }

    const adaptedContent = { ...content };
    const adaptations = [];

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ü–≤–µ—Ç–∞
    if (content.colors && content.colors.length > 0) {
      const colorAdaptations = this.adaptColors(
        content.colors, 
        langInfo.cultural_context
      );
      adaptedContent.colors = colorAdaptations.colors;
      adaptations.push(...colorAdaptations.changes);
    }

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª—ã –∏ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (content.elements) {
      const elementAdaptations = this.adaptElements(
        content.elements,
        langInfo.cultural_context
      );
      adaptedContent.elements = elementAdaptations.elements;
      adaptations.push(...elementAdaptations.changes);
    }

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    if (content.communication_style) {
      const styleAdaptation = this.adaptCommunicationStyle(
        content.communication_style,
        targetLanguage
      );
      adaptedContent.communication_style = styleAdaptation.style;
      adaptations.push(...styleAdaptation.changes);
    }

    return {
      content: adaptedContent,
      adaptations: adaptations,
      cultural_context: langInfo.cultural_context
    };
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
   */
  translateSemanticConcepts(concepts, targetLanguage) {
    SmartLogger.lang('–ü–µ—Ä–µ–≤–æ–∂—É —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏', {
      conceptsCount: concepts.length,
      targetLang: targetLanguage
    });

    const translations = [];

    concepts.forEach(concept => {
      const translation = {
        original: concept,
        translated: concept, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        confidence: 0.5,
        cultural_notes: []
      };

      // –ò—â–µ–º –ø—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥
      if (this.conceptTranslations[concept.toLowerCase()]) {
        const conceptTranslation = this.conceptTranslations[concept.toLowerCase()][targetLanguage];
        if (conceptTranslation) {
          translation.translated = conceptTranslation;
          translation.confidence = 0.9;
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
      const culturalNotes = this.getCulturalNotes(concept, targetLanguage);
      translation.cultural_notes = culturalNotes;

      translations.push(translation);
    });

    return translations;
  }

  /**
   * –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
   */
  localizeInterface(interfaceElements, targetLanguage) {
    const localized = {};
    const langInfo = this.supportedLanguages[targetLanguage];

    // –ë–∞–∑–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    const uiTranslations = {
      'ru': {
        'create': '–°–æ–∑–¥–∞—Ç—å',
        'edit': '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å',
        'save': '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
        'cancel': '–û—Ç–º–µ–Ω–∞',
        'delete': '–£–¥–∞–ª–∏—Ç—å',
        'settings': '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
        'help': '–ü–æ–º–æ—â—å'
      },
      'en': {
        'create': 'Create',
        'edit': 'Edit',
        'save': 'Save',
        'cancel': 'Cancel',
        'delete': 'Delete',
        'settings': 'Settings',
        'help': 'Help'
      },
      'zh': {
        'create': 'ÂàõÂª∫',
        'edit': 'ÁºñËæë',
        'save': '‰øùÂ≠ò',
        'cancel': 'ÂèñÊ∂à',
        'delete': 'Âà†Èô§',
        'settings': 'ËÆæÁΩÆ',
        'help': 'Â∏ÆÂä©'
      }
    };

    const translations = uiTranslations[targetLanguage] || uiTranslations['en'];

    Object.keys(interfaceElements).forEach(key => {
      localized[key] = translations[key] || interfaceElements[key];
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    localized._meta = {
      direction: langInfo.direction,
      language: targetLanguage,
      formality_levels: langInfo.formality_levels
    };

    return localized;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
   */
  generateMultilingualPrompts(basePrompt, targetLanguages) {
    SmartLogger.lang('–ì–µ–Ω–µ—Ä–∏—Ä—É—é –º—É–ª—å—Ç–∏—è–∑—ã—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã', {
      basePrompt: basePrompt.substring(0, 50) + '...',
      languages: targetLanguages
    });

    const multilingualPrompts = {};

    targetLanguages.forEach(lang => {
      const langInfo = this.supportedLanguages[lang];
      if (!langInfo) return;

      let adaptedPrompt = basePrompt;

      // –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
      const concepts = this.extractConcepts(basePrompt);
      const translatedConcepts = this.translateSemanticConcepts(concepts, lang);

      translatedConcepts.forEach(({ original, translated }) => {
        adaptedPrompt = adaptedPrompt.replace(
          new RegExp(original, 'gi'),
          translated
        );
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const culturalContext = this.getCulturalPromptAdditions(lang);
      if (culturalContext) {
        adaptedPrompt += ` ${culturalContext}`;
      }

      multilingualPrompts[lang] = {
        prompt: adaptedPrompt,
        cultural_context: langInfo.cultural_context,
        formality: this.suggestFormality(basePrompt, lang),
        additional_notes: this.getLanguageSpecificNotes(lang)
      };
    });

    return multilingualPrompts;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  refineLatinLanguage(text) {
    // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–µ–Ω–∏—è –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö —è–∑—ã–∫–æ–≤
    const spanishIndicators = ['el ', 'la ', 'de ', 'en ', 'con ', 'que ', 'es ', 'un ', 'una '];
    const frenchIndicators = ['le ', 'la ', 'de ', 'et ', 'en ', 'du ', 'des ', 'une ', 'est '];
    const germanIndicators = ['der ', 'die ', 'das ', 'und ', 'ist ', 'mit ', 'f√ºr ', 'ein ', 'eine '];

    const lowerText = text.toLowerCase();
    
    const spanishCount = spanishIndicators.filter(ind => lowerText.includes(ind)).length;
    const frenchCount = frenchIndicators.filter(ind => lowerText.includes(ind)).length;
    const germanCount = germanIndicators.filter(ind => lowerText.includes(ind)).length;

    if (spanishCount > frenchCount && spanishCount > germanCount) return 'es';
    if (frenchCount > germanCount) return 'fr';
    if (germanCount > 0) return 'de';
    
    return 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  }

  adaptColors(colors, culturalContext) {
    const adaptations = { colors: [...colors], changes: [] };
    const colorMappings = this.culturalAdaptations.colors[culturalContext];

    if (!colorMappings) return adaptations;

    colors.forEach((color, index) => {
      const colorInfo = colorMappings[color.toLowerCase()];
      if (colorInfo && colorInfo.meaning) {
        adaptations.changes.push({
          type: 'color_meaning',
          original: color,
          cultural_meaning: colorInfo.meaning,
          context: colorInfo.context,
          suggestion: `–í —ç—Ç–æ–π –∫—É–ª—å—Ç—É—Ä–µ ${color} –∞—Å—Å–æ—Ü–∏–∏—Ä—É–µ—Ç—Å—è —Å ${colorInfo.meaning}`
        });
      }
    });

    return adaptations;
  }

  adaptElements(elements, culturalContext) {
    const adaptations = { elements: [...elements], changes: [] };
    const symbolMappings = this.culturalAdaptations.symbols[culturalContext];

    if (!symbolMappings) return adaptations;

    elements.forEach((element, index) => {
      const elementName = element.toLowerCase();
      if (symbolMappings[elementName]) {
        adaptations.changes.push({
          type: 'symbol_meaning',
          original: element,
          cultural_meaning: symbolMappings[elementName],
          suggestion: `–í —ç—Ç–æ–π –∫—É–ª—å—Ç—É—Ä–µ ${element} —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É–µ—Ç ${symbolMappings[elementName]}`
        });
      }
    });

    return adaptations;
  }

  adaptCommunicationStyle(style, targetLanguage) {
    const langInfo = this.supportedLanguages[targetLanguage];
    const adaptation = { style: style, changes: [] };

    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —É—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
    if (langInfo.formality_levels) {
      const suggestedFormality = this.mapFormalityLevel(style, langInfo.formality_levels);
      if (suggestedFormality) {
        adaptation.style = suggestedFormality;
        adaptation.changes.push({
          type: 'formality_adaptation',
          original: style,
          adapted: suggestedFormality,
          reason: `–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç—å ${targetLanguage}`
        });
      }
    }

    return adaptation;
  }

  getCulturalNotes(concept, targetLanguage) {
    const notes = [];
    const langInfo = this.supportedLanguages[targetLanguage];
    
    if (langInfo.cultural_context === 'eastern_asian' && concept === 'logo') {
      notes.push('–í –≤–æ—Å—Ç–æ—á–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–µ –≤–∞–∂–Ω–∞ —Å–∏–º–º–µ—Ç—Ä–∏—è –∏ –≥–∞—Ä–º–æ–Ω–∏—è –≤ –ª–æ–≥–æ—Ç–∏–ø–∞—Ö');
    }
    
    if (langInfo.cultural_context === 'middle_eastern' && concept === 'design') {
      notes.push('–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—Ç–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ');
    }

    return notes;
  }

  extractConcepts(text) {
    const concepts = [];
    const conceptKeys = Object.keys(this.conceptTranslations);
    
    conceptKeys.forEach(concept => {
      if (text.toLowerCase().includes(concept)) {
        concepts.push(concept);
      }
    });

    return concepts;
  }

  getCulturalPromptAdditions(language) {
    const additions = {
      'zh': ', —É—á–∏—Ç—ã–≤–∞—è –≤–æ—Å—Ç–æ—á–Ω—ã–µ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –¥–∏–∑–∞–π–Ω–∞',
      'ar': ', —Å —É—á–µ—Ç–æ–º –∞—Ä–∞–±—Å–∫–æ–π –∫–∞–ª–ª–∏–≥—Ä–∞—Ñ–∏–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ',
      'ja': ', –≤ —è–ø–æ–Ω—Å–∫–æ–º –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º —Å—Ç–∏–ª–µ',
      'es': ', —Å —è—Ä–∫–∏–º–∏ –∏ —Ç–µ–ø–ª—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –ª–∞—Ç–∏–Ω–æ–∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–æ–π –∫—É–ª—å—Ç—É—Ä—ã'
    };

    return additions[language] || '';
  }

  suggestFormality(basePrompt, targetLanguage) {
    const formal_indicators = ['–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π', '–¥–µ–ª–æ–≤–æ–π', '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π'];
    const informal_indicators = ['–¥—Ä—É–∂–µ—Å–∫–∏–π', '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π', 'casual'];
    
    const lowerPrompt = basePrompt.toLowerCase();
    
    if (formal_indicators.some(ind => lowerPrompt.includes(ind))) {
      return this.supportedLanguages[targetLanguage].formality_levels.slice(-1)[0]; // –°–∞–º—ã–π —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
    }
    
    if (informal_indicators.some(ind => lowerPrompt.includes(ind))) {
      return this.supportedLanguages[targetLanguage].formality_levels[0]; // –°–∞–º—ã–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π
    }

    // –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ñ–æ—Ä–º–∞–ª—å–Ω–æ—Å—Ç–∏
    const levels = this.supportedLanguages[targetLanguage].formality_levels;
    return levels[Math.floor(levels.length / 2)];
  }

  getLanguageSpecificNotes(language) {
    const notes = {
      'zh': ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è —É–¥–∞—á–∏', '–ò–∑–±–µ–≥–∞–π—Ç–µ —á–∏—Å–ª–æ 4'],
      'ar': ['–£—á–∏—Ç—ã–≤–∞–π—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ RTL', '–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–∏–≤—ã—Ö —Å—É—â–µ—Å—Ç–≤ –≤ —Ä–µ–ª–∏–≥–∏–æ–∑–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ'],
      'ja': ['–ú–∏–Ω–∏–º–∞–ª–∏–∑–º –≤—ã—Å–æ–∫–æ —Ü–µ–Ω–∏—Ç—Å—è', '–ö–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞'],
      'de': ['–¢–æ—á–Ω–æ—Å—Ç—å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã', '–ò–∑–±–µ–≥–∞–π—Ç–µ –∏–∑–ª–∏—à–Ω–µ–π –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏']
    };

    return notes[language] || [];
  }

  mapFormalityLevel(originalLevel, targetLevels) {
    const formalityMap = {
      'informal': targetLevels[0],
      'formal': targetLevels[Math.floor(targetLevels.length / 2)],
      'official': targetLevels[targetLevels.length - 1]
    };

    return formalityMap[originalLevel] || targetLevels[0];
  }
}

module.exports = new MultilingualProcessor();
