/**
 * –ê–í–¢–û–ù–û–ú–ù–ê–Ø –ú–û–î–ï–õ–¨ –û–ë–£–ß–ï–ù–ò–Ø
 * –°–∞–º–æ–æ–±—É—á–∞—é—â–∞—è—Å—è —Å–∏—Å—Ç–µ–º–∞, –∫–æ—Ç–æ—Ä–∞—è —É–ª—É—á—à–∞–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –§–∞–∑–∞ 1: Continuous Learning Engine
 */

const SmartLogger = {
  learning: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üéìüîÑ [${timestamp}] AUTONOMOUS LEARNING: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ê–ù–ê–õ–ò–ó–ê–¢–û–† –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–ò
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã
 */
class EffectivenessAnalyzer {
  constructor() {
    this.interactionHistory = [];
    this.successMetrics = new Map();
    this.failurePatterns = new Map();
    this.responseQualityHistory = [];
    this.userSatisfactionIndicators = new Map();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   */
  analyzeInteractionEffectiveness(interaction) {
    SmartLogger.learning('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è');
    
    const effectiveness = {
      timestamp: Date.now(),
      interactionId: interaction.id,
      userQuery: interaction.query,
      systemResponse: interaction.response,
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
      responseTime: interaction.responseTime,
      userEngagement: this.measureUserEngagement(interaction),
      responseRelevance: this.measureResponseRelevance(interaction),
      conversationContinuation: this.measureConversationContinuation(interaction),
      
      // –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      clarityScore: this.assessClarity(interaction.response),
      completenessScore: this.assessCompleteness(interaction),
      helpfulnessScore: this.assessHelpfulness(interaction),
      
      // –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Å–∏–≥–Ω–∞–ª—ã
      userSatisfactionSignals: this.detectSatisfactionSignals(interaction),
      errorSignals: this.detectErrorSignals(interaction),
      
      // –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
      contextRelevance: this.assessContextRelevance(interaction),
      personalizedFit: this.assessPersonalizedFit(interaction)
    };
    
    this.interactionHistory.push(effectiveness);
    this.updateSuccessMetrics(effectiveness);
    
    return effectiveness;
  }

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  measureUserEngagement(interaction) {
    let engagement = 0;
    
    // –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    if (interaction.readingTime > 5000) engagement += 0.3;
    
    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if (interaction.followUpQuestions > 0) engagement += 0.4;
    
    // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏
    if (interaction.positiveSignals > 0) engagement += 0.3;
    
    return Math.min(1.0, engagement);
  }

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  measureResponseRelevance(interaction) {
    const query = interaction.query.toLowerCase();
    const response = interaction.response.toLowerCase();
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ—Ç–≤–µ—Ç–µ
    const queryWords = query.split(' ').filter(word => word.length > 3);
    const responseWords = response.split(' ');
    
    const matchedWords = queryWords.filter(word => 
      responseWords.some(responseWord => 
        responseWord.includes(word) || word.includes(responseWord)
      )
    );
    
    return matchedWords.length / Math.max(queryWords.length, 1);
  }

  /**
   * –ò–∑–º–µ—Ä—è–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
   */
  measureConversationContinuation(interaction) {
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç
    if (interaction.nextInteractionTime && 
        interaction.nextInteractionTime - interaction.timestamp < 300000) {
      return 1.0;
    }
    
    // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞
    if (interaction.sessionEnded) {
      return 0.2;
    }
    
    return 0.5; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Å–ª—É—á–∞–π
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —á–µ—Ç–∫–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  assessClarity(response) {
    let clarity = 0.5;
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å
    if (response.includes('\n') || response.includes('‚Ä¢') || response.includes('1.')) {
      clarity += 0.2;
    }
    
    // –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π
    const complexTerms = ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Å–µ–º–∞–Ω—Ç–∏–∫–∞'];
    const hasComplexTerms = complexTerms.some(term => response.toLowerCase().includes(term));
    const hasExplanations = response.includes('—ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç') || response.includes('—Ç–æ –µ—Å—Ç—å');
    
    if (hasComplexTerms && !hasExplanations) {
      clarity -= 0.2;
    }
    
    // –î–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const sentences = response.split('. ');
    const avgSentenceLength = sentences.reduce((sum, sentence) => sum + sentence.length, 0) / sentences.length;
    
    if (avgSentenceLength < 100) clarity += 0.1;
    if (avgSentenceLength > 200) clarity -= 0.1;
    
    return Math.max(0, Math.min(1, clarity));
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞
   */
  assessCompleteness(interaction) {
    const query = interaction.query;
    const response = interaction.response;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –∞–¥—Ä–µ—Å—É–µ—Ç –≤—Å–µ —á–∞—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
    const questionParts = this.extractQuestionParts(query);
    const addressedParts = questionParts.filter(part => 
      response.toLowerCase().includes(part.toLowerCase())
    );
    
    return addressedParts.length / Math.max(questionParts.length, 1);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —á–∞—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
   */
  extractQuestionParts(query) {
    const parts = [];
    
    // –í–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
    if (query.includes('—á—Ç–æ')) parts.push('—á—Ç–æ');
    if (query.includes('–∫–∞–∫')) parts.push('–∫–∞–∫');
    if (query.includes('–ø–æ—á–µ–º—É')) parts.push('–ø–æ—á–µ–º—É');
    if (query.includes('–≥–¥–µ')) parts.push('–≥–¥–µ');
    if (query.includes('–∫–æ–≥–¥–∞')) parts.push('–∫–æ–≥–¥–∞');
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ
    const words = query.split(' ');
    words.forEach(word => {
      if (word.length > 5 && !parts.includes(word)) {
        parts.push(word);
      }
    });
    
    return parts;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  assessHelpfulness(interaction) {
    let helpfulness = 0.5;
    
    // –ù–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if (interaction.response.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é') || 
        interaction.response.includes('—Å–æ–≤–µ—Ç—É—é') || 
        interaction.response.includes('–ø—Ä–µ–¥–ª–∞–≥–∞—é')) {
      helpfulness += 0.2;
    }
    
    // –ù–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
    if (interaction.response.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä') || 
        interaction.response.includes('–∫ –ø—Ä–∏–º–µ—Ä—É')) {
      helpfulness += 0.2;
    }
    
    // –ù–∞–ª–∏—á–∏–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —à–∞–≥–æ–≤
    if (interaction.response.includes('—à–∞–≥') || 
        interaction.response.includes('—Å–Ω–∞—á–∞–ª–∞') || 
        interaction.response.includes('–∑–∞—Ç–µ–º')) {
      helpfulness += 0.2;
    }
    
    return Math.min(1.0, helpfulness);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  detectSatisfactionSignals(interaction) {
    const signals = {
      positive: 0,
      negative: 0,
      neutral: 0
    };
    
    // –°–ª–µ–¥—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (interaction.followUpMessages) {
      interaction.followUpMessages.forEach(message => {
        const content = message.toLowerCase();
        
        // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if (content.includes('—Å–ø–∞—Å–∏–±–æ') || content.includes('–æ—Ç–ª–∏—á–Ω–æ') || 
            content.includes('–∫–ª–∞—Å—Å–Ω–æ') || content.includes('–ø–æ–º–æ–≥–ª–æ')) {
          signals.positive++;
        }
        
        // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if (content.includes('–Ω–µ –ø–æ–Ω—è–ª') || content.includes('–Ω–µ –ø–æ–º–æ–≥–ª–æ') || 
            content.includes('–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ') || content.includes('–æ—à–∏–±–∫–∞')) {
          signals.negative++;
        }
        
        // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
        if (content.includes('–ø–æ–Ω—è—Ç–Ω–æ') || content.includes('—Ö–æ—Ä–æ—à–æ')) {
          signals.neutral++;
        }
      });
    }
    
    return signals;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—à–∏–±–æ–∫
   */
  detectErrorSignals(interaction) {
    const errorSignals = [];
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç
    if (interaction.followUpMessages) {
      interaction.followUpMessages.forEach(message => {
        const content = message.toLowerCase();
        
        if (content.includes('—á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç') || 
            content.includes('–º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω–∏—Ç—å') || 
            content.includes('–Ω–µ –ø–æ–Ω—è–ª')) {
          errorSignals.push('clarification_needed');
        }
        
        if (content.includes('—ç—Ç–æ –Ω–µ —Ç–æ') || 
            content.includes('–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç') || 
            content.includes('–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ')) {
          errorSignals.push('incorrect_response');
        }
        
        if (content.includes('–ø–æ–≤—Ç–æ—Ä–∏') || 
            content.includes('–µ—â–µ —Ä–∞–∑') || 
            content.includes('–∑–∞–Ω–æ–≤–æ')) {
          errorSignals.push('repetition_requested');
        }
      });
    }
    
    return errorSignals;
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  assessContextRelevance(interaction) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç —É—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    const contextFactors = {
      previousTopics: interaction.previousTopics || [],
      userProfile: interaction.userProfile || {},
      currentProject: interaction.currentProject || null
    };
    
    let relevance = 0.5;
    
    // –£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ–º
    if (contextFactors.previousTopics.length > 0) {
      const mentionedTopics = contextFactors.previousTopics.filter(topic => 
        interaction.response.toLowerCase().includes(topic.toLowerCase())
      );
      relevance += (mentionedTopics.length / contextFactors.previousTopics.length) * 0.3;
    }
    
    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–∏–ª—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (contextFactors.userProfile.technicalLevel) {
      const responseComplexity = this.assessResponseComplexity(interaction.response);
      const profileMatch = 1 - Math.abs(responseComplexity - contextFactors.userProfile.technicalLevel);
      relevance += profileMatch * 0.2;
    }
    
    return Math.min(1.0, relevance);
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  assessPersonalizedFit(interaction) {
    const userProfile = interaction.userProfile || {};
    let personalization = 0.5;
    
    // –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è
    if (userProfile.communicationStyle) {
      const styleMatch = this.assessStyleMatch(interaction.response, userProfile.communicationStyle);
      personalization += styleMatch * 0.3;
    }
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –¥–µ—Ç–∞–ª—è—Ö
    if (userProfile.preferredDetailLevel) {
      const detailMatch = this.assessDetailMatch(interaction.response, userProfile.preferredDetailLevel);
      personalization += detailMatch * 0.2;
    }
    
    return Math.min(1.0, personalization);
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  assessResponseComplexity(response) {
    let complexity = 0;
    
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
    const technicalTerms = ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'];
    technicalTerms.forEach(term => {
      if (response.toLowerCase().includes(term)) complexity += 0.1;
    });
    
    // –î–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
    const sentences = response.split('. ');
    const avgLength = sentences.reduce((sum, s) => sum + s.length, 0) / sentences.length;
    complexity += Math.min(0.3, avgLength / 500);
    
    return Math.min(1.0, complexity);
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∏–ª—è
   */
  assessStyleMatch(response, preferredStyle) {
    const styleIndicators = {
      formal: ['—Å–ª–µ–¥—É–µ—Ç', '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ', '—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è', '–≤–∞–∂–Ω–æ –æ—Ç–º–µ—Ç–∏—Ç—å'],
      casual: ['–¥–∞–≤–∞–π—Ç–µ', '–ø—Ä–æ—Å—Ç–æ', '–∫—Å—Ç–∞—Ç–∏', '–º–µ–∂–¥—É –ø—Ä–æ—á–∏–º'],
      technical: ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è'],
      friendly: ['—Ä–∞–¥ –ø–æ–º–æ—á—å', '–æ—Ç–ª–∏—á–Ω–æ', '–∫–ª–∞—Å—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ']
    };
    
    const indicators = styleIndicators[preferredStyle] || [];
    const foundIndicators = indicators.filter(indicator => 
      response.toLowerCase().includes(indicator)
    );
    
    return foundIndicators.length / Math.max(indicators.length, 1);
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Ä–æ–≤–Ω—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
   */
  assessDetailMatch(response, preferredLevel) {
    const responseDetailLevel = response.length > 500 ? 'high' : 
                               response.length > 200 ? 'medium' : 'low';
    
    return responseDetailLevel === preferredLevel ? 1.0 : 0.5;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
   */
  updateSuccessMetrics(effectiveness) {
    const overallScore = (
      effectiveness.userEngagement * 0.3 +
      effectiveness.responseRelevance * 0.2 +
      effectiveness.helpfulnessScore * 0.2 +
      effectiveness.clarityScore * 0.15 +
      effectiveness.completenessScore * 0.15
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
    const queryType = this.classifyQueryType(effectiveness.userQuery);
    
    if (!this.successMetrics.has(queryType)) {
      this.successMetrics.set(queryType, {
        totalInteractions: 0,
        successfulInteractions: 0,
        averageScore: 0,
        scores: []
      });
    }
    
    const metrics = this.successMetrics.get(queryType);
    metrics.totalInteractions++;
    metrics.scores.push(overallScore);
    
    if (overallScore > 0.7) {
      metrics.successfulInteractions++;
    }
    
    metrics.averageScore = metrics.scores.reduce((sum, score) => sum + score, 0) / metrics.scores.length;
    
    SmartLogger.learning(`–û–±–Ω–æ–≤–ª–µ–Ω—ã –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —Ç–∏–ø–∞ "${queryType}": —É—Å–ø–µ—à–Ω–æ—Å—Ç—å ${(metrics.successfulInteractions / metrics.totalInteractions * 100).toFixed(1)}%`);
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
   */
  classifyQueryType(query) {
    const lowerQuery = query.toLowerCase();
    
    if (lowerQuery.includes('–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è') || lowerQuery.includes('svg')) return 'vectorization';
    if (lowerQuery.includes('–≤—ã—à–∏–≤–∫–∞') || lowerQuery.includes('dst')) return 'embroidery';
    if (lowerQuery.includes('–¥–∏–∑–∞–π–Ω') || lowerQuery.includes('–ª–æ–≥–æ—Ç–∏–ø')) return 'design';
    if (lowerQuery.includes('—Ü–≤–µ—Ç') || lowerQuery.includes('–ø–∞–ª–∏—Ç—Ä–∞')) return 'color';
    if (lowerQuery.includes('–∫–∞–∫') || lowerQuery.includes('—á—Ç–æ —Ç–∞–∫–æ–µ')) return 'educational';
    if (lowerQuery.includes('—Å–æ–∑–¥–∞–π') || lowerQuery.includes('—Å–¥–µ–ª–∞–π')) return 'creative';
    if (lowerQuery.includes('–∞–Ω–∞–ª–∏–∑') || lowerQuery.includes('—Å–æ–≤–µ—Ç—É—é')) return 'analytical';
    
    return 'general';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  getEffectivenessStats() {
    const stats = {
      totalInteractions: this.interactionHistory.length,
      byType: {},
      overallTrends: this.calculateOverallTrends(),
      topFailurePatterns: this.identifyTopFailurePatterns(),
      improvementOpportunities: this.identifyImprovementOpportunities()
    };
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
    this.successMetrics.forEach((metrics, type) => {
      stats.byType[type] = {
        successRate: (metrics.successfulInteractions / metrics.totalInteractions * 100).toFixed(1) + '%',
        averageScore: metrics.averageScore.toFixed(2),
        totalInteractions: metrics.totalInteractions
      };
    });
    
    return stats;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â–∏–µ —Ç—Ä–µ–Ω–¥—ã
   */
  calculateOverallTrends() {
    if (this.interactionHistory.length < 10) return null;
    
    const recentInteractions = this.interactionHistory.slice(-10);
    const olderInteractions = this.interactionHistory.slice(-20, -10);
    
    const recentAvg = recentInteractions.reduce((sum, i) => sum + i.userEngagement, 0) / recentInteractions.length;
    const olderAvg = olderInteractions.reduce((sum, i) => sum + i.userEngagement, 0) / olderInteractions.length;
    
    return {
      trend: recentAvg > olderAvg ? 'improving' : 'declining',
      change: ((recentAvg - olderAvg) * 100).toFixed(1) + '%'
    };
  }

  /**
   * –í—ã—è–≤–ª—è–µ—Ç –≥–ª–∞–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ—É–¥–∞—á
   */
  identifyTopFailurePatterns() {
    const failures = this.interactionHistory.filter(i => 
      i.userEngagement < 0.3 || i.errorSignals.length > 0
    );
    
    const patterns = new Map();
    
    failures.forEach(failure => {
      const queryType = this.classifyQueryType(failure.userQuery);
      const pattern = `${queryType}_failure`;
      
      if (!patterns.has(pattern)) {
        patterns.set(pattern, {
          count: 0,
          commonIssues: [],
          examples: []
        });
      }
      
      const patternData = patterns.get(pattern);
      patternData.count++;
      patternData.examples.push(failure.userQuery);
      patternData.commonIssues.push(...failure.errorSignals);
    });
    
    return Array.from(patterns.entries())
      .sort((a, b) => b[1].count - a[1].count)
      .slice(0, 5);
  }

  /**
   * –í—ã—è–≤–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
   */
  identifyImprovementOpportunities() {
    const opportunities = [];
    
    // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
    this.successMetrics.forEach((metrics, type) => {
      if (metrics.averageScore < 0.6) {
        opportunities.push({
          area: type,
          issue: 'low_success_rate',
          priority: 'high',
          suggestion: `–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "${type}"`
        });
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑ —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
    const failurePatterns = this.identifyTopFailurePatterns();
    failurePatterns.forEach(([pattern, data]) => {
      if (data.count > 3) {
        opportunities.push({
          area: pattern,
          issue: 'frequent_failures',
          priority: 'medium',
          suggestion: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏ –≤ "${pattern}"`
        });
      }
    });
    
    return opportunities;
  }
}

/**
 * –ò–ó–í–õ–ï–ö–ê–¢–ï–õ–¨ –ü–ê–¢–¢–ï–†–ù–û–í
 * –ù–∞—Ö–æ–¥–∏—Ç —É—Å–ø–µ—à–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */
class PatternExtractor {
  constructor() {
    this.successfulPatterns = new Map();
    this.effectivePhrasings = new Map();
    this.userPreferencePatterns = new Map();
    this.contextualPatterns = new Map();
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
   */
  extractSuccessPatterns(effectiveInteractions) {
    SmartLogger.learning('–ò–∑–≤–ª–µ–∫–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π');
    
    effectiveInteractions.forEach(interaction => {
      this.extractResponsePatterns(interaction);
      this.extractPhrasingPatterns(interaction);
      this.extractContextualPatterns(interaction);
      this.extractUserPreferencePatterns(interaction);
    });
    
    return {
      responsePatterns: this.successfulPatterns,
      effectivePhrasings: this.effectivePhrasings,
      contextualPatterns: this.contextualPatterns,
      userPreferences: this.userPreferencePatterns
    };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
   */
  extractResponsePatterns(interaction) {
    const queryType = this.classifyInteractionType(interaction);
    const response = interaction.response;
    
    if (!this.successfulPatterns.has(queryType)) {
      this.successfulPatterns.set(queryType, {
        structures: [],
        keywords: new Set(),
        effectiveStarters: [],
        effectiveEndings: []
      });
    }
    
    const patterns = this.successfulPatterns.get(queryType);
    
    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞
    patterns.structures.push(this.analyzeResponseStructure(response));
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    this.extractKeywords(response).forEach(keyword => patterns.keywords.add(keyword));
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞—á–∞–ª–∞
    const starter = this.extractResponseStarter(response);
    if (starter) patterns.effectiveStarters.push(starter);
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
    const ending = this.extractResponseEnding(response);
    if (ending) patterns.effectiveEndings.push(ending);
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç —Ç–∏–ø –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   */
  classifyInteractionType(interaction) {
    const query = interaction.userQuery.toLowerCase();
    
    if (query.includes('–æ–±—ä—è—Å–Ω–∏') || query.includes('—á—Ç–æ —Ç–∞–∫–æ–µ')) return 'explanation';
    if (query.includes('–∫–∞–∫') || query.includes('–ø–æ–∫–∞–∂–∏')) return 'instruction';
    if (query.includes('—Å–æ–∑–¥–∞–π') || query.includes('—Å–¥–µ–ª–∞–π')) return 'creation';
    if (query.includes('–∞–Ω–∞–ª–∏–∑') || query.includes('–æ—Ü–µ–Ω–∏')) return 'analysis';
    if (query.includes('—Å–æ–≤–µ—Ç—É—é') || query.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é')) return 'recommendation';
    
    return 'general';
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
   */
  analyzeResponseStructure(response) {
    const structure = {
      hasList: response.includes('‚Ä¢') || response.includes('1.'),
      hasHeaders: response.includes('##') || response.includes('**'),
      hasExamples: response.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä') || response.includes('–∫ –ø—Ä–∏–º–µ—Ä—É'),
      hasSteps: response.includes('—à–∞–≥') || response.includes('—ç—Ç–∞–ø'),
      paragraphCount: response.split('\n\n').length,
      sentenceCount: response.split('. ').length
    };
    
    return structure;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
   */
  extractKeywords(response) {
    const words = response.toLowerCase().match(/\b\w{4,}\b/g) || [];
    const stopWords = ['—ç—Ç–æ—Ç', '–∫–æ—Ç–æ—Ä—ã–π', '–º–æ–∂–µ—Ç', '–±—ã—Ç—å', '–æ—á–µ–Ω—å', '—Ç–∞–∫–∂–µ', '–±–æ–ª–µ–µ'];
    
    return words.filter(word => !stopWords.includes(word));
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞
   */
  extractResponseStarter(response) {
    const sentences = response.split('. ');
    if (sentences.length > 0) {
      const firstSentence = sentences[0];
      if (firstSentence.length < 100) {
        return firstSentence;
      }
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
   */
  extractResponseEnding(response) {
    const sentences = response.split('. ');
    if (sentences.length > 1) {
      const lastSentence = sentences[sentences.length - 1];
      if (lastSentence.length < 100) {
        return lastSentence;
      }
    }
    return null;
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫
   */
  extractPhrasingPatterns(interaction) {
    const response = interaction.response;
    const effectiveness = interaction.userEngagement;
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    const transitions = this.extractTransitions(response);
    transitions.forEach(transition => {
      if (!this.effectivePhrasings.has('transitions')) {
        this.effectivePhrasings.set('transitions', new Map());
      }
      
      const transitionMap = this.effectivePhrasings.get('transitions');
      const currentScore = transitionMap.get(transition) || 0;
      transitionMap.set(transition, (currentScore + effectiveness) / 2);
    });
    
    // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
    const explanationPhrases = this.extractExplanationPhrases(response);
    explanationPhrases.forEach(phrase => {
      if (!this.effectivePhrasings.has('explanations')) {
        this.effectivePhrasings.set('explanations', new Map());
      }
      
      const explanationMap = this.effectivePhrasings.get('explanations');
      const currentScore = explanationMap.get(phrase) || 0;
      explanationMap.set(phrase, (currentScore + effectiveness) / 2);
    });
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥—ã
   */
  extractTransitions(response) {
    const transitionRegex = /\b(–∫—Ä–æ–º–µ —Ç–æ–≥–æ|—Ç–∞–∫–∂–µ|–Ω–∞–ø—Ä–∏–º–µ—Ä|–æ–¥–Ω–∞–∫–æ|–ø–æ—ç—Ç–æ–º—É|—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º|–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ|—Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)\b/gi;
    return response.match(transitionRegex) || [];
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ—Ä–∞–∑—ã –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
   */
  extractExplanationPhrases(response) {
    const explanationRegex = /\b(—ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç|—Ç–æ –µ—Å—Ç—å|–∏–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏|–ø—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è|–¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏)\b/gi;
    return response.match(explanationRegex) || [];
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   */
  extractContextualPatterns(interaction) {
    const context = {
      timeOfDay: new Date(interaction.timestamp).getHours(),
      userMood: interaction.userMood || 'neutral',
      conversationLength: interaction.conversationLength || 1,
      topicComplexity: this.assessTopicComplexity(interaction.userQuery)
    };
    
    const contextKey = `${context.timeOfDay}-${context.userMood}-${context.topicComplexity}`;
    
    if (!this.contextualPatterns.has(contextKey)) {
      this.contextualPatterns.set(contextKey, {
        interactions: [],
        averageEffectiveness: 0,
        commonApproaches: []
      });
    }
    
    const pattern = this.contextualPatterns.get(contextKey);
    pattern.interactions.push(interaction);
    
    // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    const totalEffectiveness = pattern.interactions.reduce((sum, i) => sum + i.userEngagement, 0);
    pattern.averageEffectiveness = totalEffectiveness / pattern.interactions.length;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã
    const approach = this.categorizeApproach(interaction.response);
    if (approach && !pattern.commonApproaches.includes(approach)) {
      pattern.commonApproaches.push(approach);
    }
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–º—ã
   */
  assessTopicComplexity(query) {
    const technicalTerms = ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã'];
    const hasComplexTerms = technicalTerms.some(term => query.toLowerCase().includes(term));
    
    if (hasComplexTerms) return 'high';
    if (query.length > 100) return 'medium';
    return 'low';
  }

  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –ø–æ–¥—Ö–æ–¥ –æ—Ç–≤–µ—Ç–∞
   */
  categorizeApproach(response) {
    if (response.includes('—à–∞–≥') || response.includes('—ç—Ç–∞–ø')) return 'step-by-step';
    if (response.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä') || response.includes('–∫ –ø—Ä–∏–º–µ—Ä—É')) return 'example-based';
    if (response.includes('–≤–∞–∂–Ω–æ') || response.includes('–∫–ª—é—á–µ–≤–æ–µ')) return 'principle-focused';
    if (response.includes('‚Ä¢') || response.includes('1.')) return 'structured';
    
    return 'conversational';
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
   */
  extractUserPreferencePatterns(interaction) {
    const userProfile = interaction.userProfile || {};
    const userId = userProfile.userId || 'anonymous';
    
    if (!this.userPreferencePatterns.has(userId)) {
      this.userPreferencePatterns.set(userId, {
        preferredResponseLength: [],
        preferredStyles: [],
        preferredComplexity: [],
        effectiveApproaches: []
      });
    }
    
    const preferences = this.userPreferencePatterns.get(userId);
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ –¥–ª–∏–Ω–µ –æ—Ç–≤–µ—Ç–∞
    preferences.preferredResponseLength.push({
      length: interaction.response.length,
      effectiveness: interaction.userEngagement
    });
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å—Ç–∏–ª—é
    const style = this.detectResponseStyle(interaction.response);
    preferences.preferredStyles.push({
      style: style,
      effectiveness: interaction.userEngagement
    });
    
    // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const complexity = this.assessResponseComplexity(interaction.response);
    preferences.preferredComplexity.push({
      complexity: complexity,
      effectiveness: interaction.userEngagement
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ—Ç–≤–µ—Ç–∞
   */
  detectResponseStyle(response) {
    if (response.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é') || response.includes('—Å–ª–µ–¥—É–µ—Ç')) return 'formal';
    if (response.includes('–∫–ª–∞—Å—Å–Ω–æ') || response.includes('–æ—Ç–ª–∏—á–Ω–æ')) return 'enthusiastic';
    if (response.includes('–¥–∞–≤–∞–π—Ç–µ') || response.includes('–ø–æ–ø—Ä–æ–±—É–µ–º')) return 'collaborative';
    if (response.includes('–ø–æ–Ω–∏–º–∞—é') || response.includes('–ø–æ–º–æ–≥—É')) return 'supportive';
    
    return 'neutral';
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  assessResponseComplexity(response) {
    const technicalTerms = ['–∞–ª–≥–æ—Ä–∏—Ç–º', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–ø–∞—Ä–∞–º–µ—Ç—Ä—ã', '–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'];
    const termCount = technicalTerms.filter(term => response.toLowerCase().includes(term)).length;
    
    if (termCount > 3) return 'high';
    if (termCount > 1) return 'medium';
    return 'low';
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
   */
  getTopPatterns(category = 'all', limit = 10) {
    const results = {};
    
    if (category === 'all' || category === 'response') {
      results.responsePatterns = Array.from(this.successfulPatterns.entries())
        .slice(0, limit);
    }
    
    if (category === 'all' || category === 'phrasing') {
      results.phrasings = {};
      this.effectivePhrasings.forEach((phrases, type) => {
        results.phrasings[type] = Array.from(phrases.entries())
          .sort((a, b) => b[1] - a[1])
          .slice(0, limit);
      });
    }
    
    if (category === 'all' || category === 'contextual') {
      results.contextualPatterns = Array.from(this.contextualPatterns.entries())
        .sort((a, b) => b[1].averageEffectiveness - a[1].averageEffectiveness)
        .slice(0, limit);
    }
    
    return results;
  }
}

/**
 * –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –ë–ê–ó–ê –ó–ù–ê–ù–ò–ô
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
 */
class AdaptiveKnowledgeBase {
  constructor() {
    this.knowledgeGraph = new Map();
    this.conceptFrequency = new Map();
    this.conceptRelations = new Map();
    this.knowledgeQuality = new Map();
    this.learningHistory = [];
    this.obsoleteDetector = new ObsoleteDetector();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
   */
  updateKnowledge(interaction, effectiveness) {
    SmartLogger.learning('–û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
    const concepts = this.extractConcepts(interaction);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π
    this.updateKnowledgeGraph(concepts, effectiveness);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    this.updateConceptFrequency(concepts);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–Ω–∞–Ω–∏–π
    this.updateKnowledgeQuality(concepts, effectiveness);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏
    this.updateConceptRelations(concepts);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
    this.learningHistory.push({
      timestamp: Date.now(),
      interaction: interaction,
      effectiveness: effectiveness,
      concepts: concepts
    });
    
    // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–Ω–∞–Ω–∏—è
    this.obsoleteDetector.checkForObsoleteKnowledge(this.knowledgeGraph);
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   */
  extractConcepts(interaction) {
    const concepts = new Set();
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const queryWords = interaction.userQuery.toLowerCase().match(/\b\w{4,}\b/g) || [];
    queryWords.forEach(word => {
      if (this.isImportantConcept(word)) {
        concepts.add(word);
      }
    });
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
    const responseWords = interaction.response.toLowerCase().match(/\b\w{4,}\b/g) || [];
    responseWords.forEach(word => {
      if (this.isImportantConcept(word)) {
        concepts.add(word);
      }
    });
    
    return Array.from(concepts);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è –≤–∞–∂–Ω–æ–π
   */
  isImportantConcept(word) {
    const importantDomains = [
      '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–≤—ã—à–∏–≤–∫–∞', '–¥–∏–∑–∞–π–Ω', '—Ü–≤–µ—Ç', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
      '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è', '–∫–∞—á–µ—Å—Ç–≤–æ', '—Ñ–æ—Ä–º–∞—Ç', '—Ñ–∞–π–ª', '—Å—Ç–∏–ª—å',
      '—Ç–µ–∫—Å—Ç—É—Ä–∞', '–ø–∞–ª–∏—Ç—Ä–∞', '–ª–æ–≥–æ—Ç–∏–ø', '–ø—Ä–∏–Ω—Ç', '–º–∞—à–∏–Ω–∞', '–Ω–∏—Ç–∫–∏'
    ];
    
    return importantDomains.some(domain => 
      word.includes(domain) || domain.includes(word)
    ) || word.length > 6;
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ –∑–Ω–∞–Ω–∏–π
   */
  updateKnowledgeGraph(concepts, effectiveness) {
    concepts.forEach(concept => {
      if (!this.knowledgeGraph.has(concept)) {
        this.knowledgeGraph.set(concept, {
          appearances: 0,
          totalEffectiveness: 0,
          averageEffectiveness: 0,
          contexts: [],
          relatedConcepts: new Set(),
          knowledgeStrength: 0
        });
      }
      
      const knowledge = this.knowledgeGraph.get(concept);
      knowledge.appearances++;
      knowledge.totalEffectiveness += effectiveness;
      knowledge.averageEffectiveness = knowledge.totalEffectiveness / knowledge.appearances;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–ª—É –∑–Ω–∞–Ω–∏—è
      knowledge.knowledgeStrength = this.calculateKnowledgeStrength(knowledge);
    });
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Å–∏–ª—É –∑–Ω–∞–Ω–∏—è
   */
  calculateKnowledgeStrength(knowledge) {
    const frequencyWeight = Math.min(knowledge.appearances / 10, 1.0);
    const effectivenessWeight = knowledge.averageEffectiveness;
    const recencyWeight = this.calculateRecencyWeight(knowledge);
    
    return (frequencyWeight * 0.4 + effectivenessWeight * 0.4 + recencyWeight * 0.2);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –≤–µ—Å –Ω–µ–¥–∞–≤–Ω–æ—Å—Ç–∏
   */
  calculateRecencyWeight(knowledge) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    const recentUsage = this.learningHistory
      .filter(entry => entry.concepts.some(c => knowledge.contexts.includes(c)))
      .sort((a, b) => b.timestamp - a.timestamp)[0];
    
    if (!recentUsage) return 0;
    
    const daysSinceUsage = (Date.now() - recentUsage.timestamp) / (1000 * 60 * 60 * 24);
    return Math.max(0, 1 - daysSinceUsage / 30); // –°–Ω–∏–∂–∞–µ—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —á–∞—Å—Ç–æ—Ç—É –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
   */
  updateConceptFrequency(concepts) {
    concepts.forEach(concept => {
      const currentFreq = this.conceptFrequency.get(concept) || 0;
      this.conceptFrequency.set(concept, currentFreq + 1);
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∑–Ω–∞–Ω–∏–π
   */
  updateKnowledgeQuality(concepts, effectiveness) {
    concepts.forEach(concept => {
      if (!this.knowledgeQuality.has(concept)) {
        this.knowledgeQuality.set(concept, {
          qualityScores: [],
          averageQuality: 0,
          reliability: 0
        });
      }
      
      const quality = this.knowledgeQuality.get(concept);
      quality.qualityScores.push(effectiveness);
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 –æ—Ü–µ–Ω–∫–∞–º–∏
      if (quality.qualityScores.length > 20) {
        quality.qualityScores.shift();
      }
      
      quality.averageQuality = quality.qualityScores.reduce((sum, score) => sum + score, 0) / quality.qualityScores.length;
      quality.reliability = this.calculateReliability(quality.qualityScores);
    });
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∑–Ω–∞–Ω–∏—è
   */
  calculateReliability(qualityScores) {
    if (qualityScores.length < 3) return 0;
    
    const mean = qualityScores.reduce((sum, score) => sum + score, 0) / qualityScores.length;
    const variance = qualityScores.reduce((sum, score) => sum + Math.pow(score - mean, 2), 0) / qualityScores.length;
    const standardDeviation = Math.sqrt(variance);
    
    // –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é
    return Math.max(0, 1 - standardDeviation);
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏
   */
  updateConceptRelations(concepts) {
    // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–∏–ª–∏—Å—å –≤ –æ–¥–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    for (let i = 0; i < concepts.length; i++) {
      for (let j = i + 1; j < concepts.length; j++) {
        const concept1 = concepts[i];
        const concept2 = concepts[j];
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        if (this.knowledgeGraph.has(concept1)) {
          this.knowledgeGraph.get(concept1).relatedConcepts.add(concept2);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑–∏ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
        if (this.knowledgeGraph.has(concept2)) {
          this.knowledgeGraph.get(concept2).relatedConcepts.add(concept1);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–ª—É —Å–≤—è–∑–∏
        this.updateRelationStrength(concept1, concept2);
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–∏–ª—É —Å–≤—è–∑–∏ –º–µ–∂–¥—É –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏
   */
  updateRelationStrength(concept1, concept2) {
    const relationKey = [concept1, concept2].sort().join('-');
    
    if (!this.conceptRelations.has(relationKey)) {
      this.conceptRelations.set(relationKey, {
        strength: 0,
        coOccurrences: 0,
        contexts: []
      });
    }
    
    const relation = this.conceptRelations.get(relationKey);
    relation.coOccurrences++;
    relation.strength = Math.min(relation.coOccurrences / 10, 1.0);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–Ω–∞–Ω–∏—è
   */
  getRelevantKnowledge(query, limit = 10) {
    const queryWords = query.toLowerCase().match(/\b\w{4,}\b/g) || [];
    const relevantConcepts = [];
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—É
    this.knowledgeGraph.forEach((knowledge, concept) => {
      const relevance = this.calculateRelevance(concept, queryWords);
      if (relevance > 0) {
        relevantConcepts.push({
          concept: concept,
          relevance: relevance,
          strength: knowledge.knowledgeStrength,
          effectiveness: knowledge.averageEffectiveness,
          knowledge: knowledge
        });
      }
    });
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —Å–∏–ª–µ –∑–Ω–∞–Ω–∏—è
    return relevantConcepts
      .sort((a, b) => (b.relevance * b.strength) - (a.relevance * a.strength))
      .slice(0, limit);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∫ –∑–∞–ø—Ä–æ—Å—É
   */
  calculateRelevance(concept, queryWords) {
    let relevance = 0;
    
    // –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (queryWords.includes(concept)) {
      relevance += 1.0;
    }
    
    // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    queryWords.forEach(word => {
      if (concept.includes(word) || word.includes(concept)) {
        relevance += 0.5;
      }
    });
    
    // –°–≤—è–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
    if (this.knowledgeGraph.has(concept)) {
      const knowledge = this.knowledgeGraph.get(concept);
      knowledge.relatedConcepts.forEach(relatedConcept => {
        if (queryWords.includes(relatedConcept)) {
          relevance += 0.3;
        }
      });
    }
    
    return relevance;
  }

  /**
   * –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è (alias –¥–ª—è learnFromInteraction)
   */
  async recordInteraction(interactionData, additionalData = {}) {
    return await this.learnFromInteraction(interactionData, additionalData);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   */
  getKnowledgeStats() {
    const stats = {
      totalConcepts: this.knowledgeGraph.size,
      totalRelations: this.conceptRelations.size,
      averageKnowledgeStrength: 0,
      topConcepts: [],
      strongestRelations: [],
      learningTrend: this.calculateLearningTrend()
    };
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Å–∏–ª—É –∑–Ω–∞–Ω–∏–π
    let totalStrength = 0;
    this.knowledgeGraph.forEach(knowledge => {
      totalStrength += knowledge.knowledgeStrength;
    });
    stats.averageKnowledgeStrength = totalStrength / this.knowledgeGraph.size;
    
    // –¢–æ–ø –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
    stats.topConcepts = Array.from(this.knowledgeGraph.entries())
      .sort((a, b) => b[1].knowledgeStrength - a[1].knowledgeStrength)
      .slice(0, 10)
      .map(([concept, knowledge]) => ({
        concept,
        strength: knowledge.knowledgeStrength,
        appearances: knowledge.appearances
      }));
    
    // –°–∏–ª—å–Ω–µ–π—à–∏–µ —Å–≤—è–∑–∏
    stats.strongestRelations = Array.from(this.conceptRelations.entries())
      .sort((a, b) => b[1].strength - a[1].strength)
      .slice(0, 10)
      .map(([relation, data]) => ({
        relation,
        strength: data.strength,
        coOccurrences: data.coOccurrences
      }));
    
    return stats;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥ –æ–±—É—á–µ–Ω–∏—è
   */
  calculateLearningTrend() {
    if (this.learningHistory.length < 10) return null;
    
    const recentLearning = this.learningHistory.slice(-10);
    const olderLearning = this.learningHistory.slice(-20, -10);
    
    const recentEffectiveness = recentLearning.reduce((sum, entry) => sum + entry.effectiveness, 0) / recentLearning.length;
    const olderEffectiveness = olderLearning.reduce((sum, entry) => sum + entry.effectiveness, 0) / olderLearning.length;
    
    return {
      trend: recentEffectiveness > olderEffectiveness ? 'improving' : 'declining',
      change: ((recentEffectiveness - olderEffectiveness) * 100).toFixed(1) + '%',
      recentEffectiveness: recentEffectiveness.toFixed(2),
      olderEffectiveness: olderEffectiveness.toFixed(2)
    };
  }
}

/**
 * –î–ï–¢–ï–ö–¢–û–† –£–°–¢–ê–†–ï–í–®–ò–• –ó–ù–ê–ù–ò–ô
 * –í—ã—è–≤–ª—è–µ—Ç –∏ –ø–æ–º–µ—á–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */
class ObsoleteDetector {
  constructor() {
    this.obsoleteThreshold = 0.3; // –ü–æ—Ä–æ–≥ —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è
    this.inactivityPeriod = 30 * 24 * 60 * 60 * 1000; // 30 –¥–Ω–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–Ω–∞–Ω–∏—è
   */
  checkForObsoleteKnowledge(knowledgeGraph) {
    const obsoleteConcepts = [];
    const currentTime = Date.now();
    
    knowledgeGraph.forEach((knowledge, concept) => {
      const isObsolete = this.isConceptObsolete(knowledge, currentTime);
      if (isObsolete) {
        obsoleteConcepts.push({
          concept: concept,
          reason: this.getObsoleteReason(knowledge, currentTime),
          lastUsed: this.getLastUsageTime(knowledge),
          obsoleteScore: this.calculateObsoleteScore(knowledge, currentTime)
        });
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —É—Å—Ç–∞—Ä–µ–≤—à–µ–µ
        knowledge.obsolete = true;
        knowledge.obsoleteReason = this.getObsoleteReason(knowledge, currentTime);
      }
    });
    
    if (obsoleteConcepts.length > 0) {
      SmartLogger.learning(`–ù–∞–π–¥–µ–Ω–æ ${obsoleteConcepts.length} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π`, obsoleteConcepts);
    }
    
    return obsoleteConcepts;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è —É—Å—Ç–∞—Ä–µ–≤—à–µ–π
   */
  isConceptObsolete(knowledge, currentTime) {
    const obsoleteScore = this.calculateObsoleteScore(knowledge, currentTime);
    return obsoleteScore > this.obsoleteThreshold;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è
   */
  calculateObsoleteScore(knowledge, currentTime) {
    let obsoleteScore = 0;
    
    // –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (knowledge.averageEffectiveness < 0.3) {
      obsoleteScore += 0.4;
    }
    
    // –†–µ–¥–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
    if (knowledge.appearances < 3) {
      obsoleteScore += 0.2;
    }
    
    // –î–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    const lastUsage = this.getLastUsageTime(knowledge);
    if (lastUsage && (currentTime - lastUsage) > this.inactivityPeriod) {
      obsoleteScore += 0.4;
    }
    
    return obsoleteScore;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   */
  getLastUsageTime(knowledge) {
    // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å timestamps
    return knowledge.lastUsed || (Date.now() - Math.random() * this.inactivityPeriod * 2);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è
   */
  getObsoleteReason(knowledge, currentTime) {
    const reasons = [];
    
    if (knowledge.averageEffectiveness < 0.3) {
      reasons.push('–Ω–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å');
    }
    
    if (knowledge.appearances < 3) {
      reasons.push('—Ä–µ–¥–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ');
    }
    
    const lastUsage = this.getLastUsageTime(knowledge);
    if (lastUsage && (currentTime - lastUsage) > this.inactivityPeriod) {
      reasons.push('–¥–æ–ª–≥–æ–µ –≤—Ä–µ–º—è –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è');
    }
    
    return reasons.join(', ');
  }
}

/**
 * –°–ò–°–¢–ï–ú–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —è–≤–Ω–æ–π –∏ –Ω–µ—è–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
 */
class FeedbackSystem {
  constructor() {
    this.feedbackHistory = [];
    this.implicitSignals = new Map();
    this.explicitFeedback = new Map();
    this.satisfactionMetrics = new Map();
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
   */
  processFeedback(interaction, feedbackData) {
    SmartLogger.learning('–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å', feedbackData);
    
    // –ù–µ—è–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    this.processImplicitFeedback(interaction);
    
    // –Ø–≤–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if (feedbackData.explicit) {
      this.processExplicitFeedback(interaction, feedbackData.explicit);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    this.feedbackHistory.push({
      timestamp: Date.now(),
      interaction: interaction,
      feedback: feedbackData,
      processedSignals: this.extractProcessedSignals(interaction, feedbackData)
    });
    
    return this.generateFeedbackInsights(interaction, feedbackData);
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ—è–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
   */
  processImplicitFeedback(interaction) {
    const signals = {
      responseTime: interaction.responseTime,
      readingTime: interaction.readingTime || 0,
      followUpQuestions: interaction.followUpQuestions || 0,
      conversationContinuation: interaction.conversationContinued || false,
      sessionDuration: interaction.sessionDuration || 0
    };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Å–∏–≥–Ω–∞–ª
    const interpretedSignals = this.interpretImplicitSignals(signals);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    const interactionId = interaction.id || Date.now().toString();
    this.implicitSignals.set(interactionId, interpretedSignals);
    
    return interpretedSignals;
  }

  /**
   * –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –Ω–µ—è–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
   */
  interpretImplicitSignals(signals) {
    const interpretation = {
      engagement: 0,
      satisfaction: 0,
      comprehension: 0,
      relevance: 0
    };
    
    // –í—Ä–µ–º—è —á—Ç–µ–Ω–∏—è (–±–æ–ª—å—à–µ = –ª—É—á—à–µ, –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–µ–ª–∞)
    if (signals.readingTime > 3000 && signals.readingTime < 30000) {
      interpretation.engagement += 0.3;
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    if (signals.conversationContinuation) {
      interpretation.engagement += 0.4;
      interpretation.satisfaction += 0.3;
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    if (signals.followUpQuestions > 0) {
      interpretation.engagement += 0.2;
      
      // –ï—Å–ª–∏ –º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –≤–æ–∑–º–æ–∂–Ω–æ, –æ—Ç–≤–µ—Ç –±—ã–ª –Ω–µ–ø–æ–ª–Ω—ã–º
      if (signals.followUpQuestions > 2) {
        interpretation.comprehension -= 0.2;
      }
    }
    
    // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
    if (signals.sessionDuration > 60000) { // –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç—ã
      interpretation.engagement += 0.2;
    }
    
    return interpretation;
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —è–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
   */
  processExplicitFeedback(interaction, explicitData) {
    const feedback = {
      rating: explicitData.rating || null,
      comment: explicitData.comment || null,
      categories: explicitData.categories || [],
      suggestions: explicitData.suggestions || []
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–≤–Ω—É—é –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    const interactionId = interaction.id || Date.now().toString();
    this.explicitFeedback.set(interactionId, feedback);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
    if (feedback.comment) {
      const sentimentAnalysis = this.analyzeSentiment(feedback.comment);
      feedback.sentiment = sentimentAnalysis;
    }
    
    return feedback;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  analyzeSentiment(comment) {
    const positiveWords = ['–æ—Ç–ª–∏—á–Ω–æ', '—Ö–æ—Ä–æ—à–æ', '–ø–æ–ª–µ–∑–Ω–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '–ø–æ–º–æ–≥–ª–æ', '–∫–ª–∞—Å—Å–Ω–æ'];
    const negativeWords = ['–ø–ª–æ—Ö–æ', '–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', '–Ω–µ –ø–æ–º–æ–≥–ª–æ', '—Å–ª–æ–∂–Ω–æ', '–Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç'];
    
    const words = comment.toLowerCase().split(' ');
    let sentiment = 0;
    
    words.forEach(word => {
      if (positiveWords.includes(word)) sentiment += 1;
      if (negativeWords.includes(word)) sentiment -= 1;
    });
    
    return {
      score: sentiment,
      polarity: sentiment > 0 ? 'positive' : sentiment < 0 ? 'negative' : 'neutral',
      confidence: Math.abs(sentiment) / words.length
    };
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
   */
  extractProcessedSignals(interaction, feedbackData) {
    const signals = {
      implicit: this.implicitSignals.get(interaction.id) || {},
      explicit: this.explicitFeedback.get(interaction.id) || {},
      combined: this.combineSignals(interaction, feedbackData)
    };
    
    return signals;
  }

  /**
   * –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã
   */
  combineSignals(interaction, feedbackData) {
    const implicitSignals = this.implicitSignals.get(interaction.id) || {};
    const explicitSignals = this.explicitFeedback.get(interaction.id) || {};
    
    const combined = {
      overallSatisfaction: 0,
      overallEngagement: 0,
      areas_for_improvement: []
    };
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    let satisfactionSources = 0;
    if (implicitSignals.satisfaction !== undefined) {
      combined.overallSatisfaction += implicitSignals.satisfaction;
      satisfactionSources++;
    }
    
    if (explicitSignals.rating !== undefined) {
      combined.overallSatisfaction += explicitSignals.rating / 5; // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫ 0-1
      satisfactionSources++;
    }
    
    if (satisfactionSources > 0) {
      combined.overallSatisfaction /= satisfactionSources;
    }
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
    combined.overallEngagement = implicitSignals.engagement || 0;
    
    // –í—ã—è–≤–ª—è–µ–º –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
    if (implicitSignals.comprehension && implicitSignals.comprehension < 0.5) {
      combined.areas_for_improvement.push('comprehension');
    }
    
    if (explicitSignals.suggestions && explicitSignals.suggestions.length > 0) {
      combined.areas_for_improvement.push(...explicitSignals.suggestions);
    }
    
    return combined;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å–∞–π—Ç—ã –∏–∑ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   */
  generateFeedbackInsights(interaction, feedbackData) {
    const insights = {
      strengths: [],
      weaknesses: [],
      actionableItems: [],
      confidenceLevel: 0
    };
    
    const processedSignals = this.extractProcessedSignals(interaction, feedbackData);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    if (processedSignals.combined.overallSatisfaction > 0.7) {
      insights.strengths.push('–≤—ã—Å–æ–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    if (processedSignals.combined.overallEngagement > 0.7) {
      insights.strengths.push('–≤—ã—Å–æ–∫–∞—è –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    if (processedSignals.combined.overallSatisfaction < 0.4) {
      insights.weaknesses.push('–Ω–∏–∑–∫–∞—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
    
    if (processedSignals.implicit.comprehension < 0.5) {
      insights.weaknesses.push('–ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –æ—Ç–≤–µ—Ç–∞');
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    processedSignals.combined.areas_for_improvement.forEach(area => {
      insights.actionableItems.push(`—É–ª—É—á—à–∏—Ç—å ${area}`);
    });
    
    // –í—ã—á–∏—Å–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    insights.confidenceLevel = this.calculateInsightConfidence(processedSignals);
    
    return insights;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –∏–Ω—Å–∞–π—Ç–∞—Ö
   */
  calculateInsightConfidence(processedSignals) {
    let confidence = 0;
    let sources = 0;
    
    // –ù–µ—è–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if (Object.keys(processedSignals.implicit).length > 0) {
      confidence += 0.3;
      sources++;
    }
    
    // –Ø–≤–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã
    if (Object.keys(processedSignals.explicit).length > 0) {
      confidence += 0.7;
      sources++;
    }
    
    // –ß–µ–º –±–æ–ª—å—à–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Ç–µ–º –≤—ã—à–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    if (sources > 1) {
      confidence += 0.2;
    }
    
    return Math.min(1.0, confidence);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   */
  getFeedbackSummary(timeRange = 'all') {
    const summary = {
      totalFeedback: this.feedbackHistory.length,
      averageSatisfaction: 0,
      averageEngagement: 0,
      commonStrengths: new Map(),
      commonWeaknesses: new Map(),
      topActionItems: new Map(),
      trends: this.calculateFeedbackTrends()
    };
    
    let satisfactionSum = 0;
    let engagementSum = 0;
    let validFeedback = 0;
    
    this.feedbackHistory.forEach(entry => {
      const signals = entry.processedSignals;
      
      if (signals.combined.overallSatisfaction !== undefined) {
        satisfactionSum += signals.combined.overallSatisfaction;
        validFeedback++;
      }
      
      if (signals.combined.overallEngagement !== undefined) {
        engagementSum += signals.combined.overallEngagement;
      }
      
      // –°–æ–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const insights = this.generateFeedbackInsights(entry.interaction, entry.feedback);
      insights.strengths.forEach(strength => {
        summary.commonStrengths.set(strength, (summary.commonStrengths.get(strength) || 0) + 1);
      });
      
      insights.weaknesses.forEach(weakness => {
        summary.commonWeaknesses.set(weakness, (summary.commonWeaknesses.get(weakness) || 0) + 1);
      });
      
      insights.actionableItems.forEach(item => {
        summary.topActionItems.set(item, (summary.topActionItems.get(item) || 0) + 1);
      });
    });
    
    if (validFeedback > 0) {
      summary.averageSatisfaction = satisfactionSum / validFeedback;
      summary.averageEngagement = engagementSum / validFeedback;
    }
    
    return summary;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç—Ä–µ–Ω–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
   */
  calculateFeedbackTrends() {
    if (this.feedbackHistory.length < 10) return null;
    
    const recent = this.feedbackHistory.slice(-5);
    const older = this.feedbackHistory.slice(-10, -5);
    
    const recentSatisfaction = recent.reduce((sum, entry) => 
      sum + (entry.processedSignals.combined.overallSatisfaction || 0), 0) / recent.length;
    
    const olderSatisfaction = older.reduce((sum, entry) => 
      sum + (entry.processedSignals.combined.overallSatisfaction || 0), 0) / older.length;
    
    return {
      satisfactionTrend: recentSatisfaction > olderSatisfaction ? 'improving' : 'declining',
      change: ((recentSatisfaction - olderSatisfaction) * 100).toFixed(1) + '%'
    };
  }
}

/**
 * –ì–õ–ê–í–ù–´–ô –ö–õ–ê–°–° –ê–í–¢–û–ù–û–ú–ù–û–ô –°–ò–°–¢–ï–ú–´ –û–ë–£–ß–ï–ù–ò–Ø
 */
class AutonomousLearningEngine {
  constructor() {
    this.effectivenessAnalyzer = new EffectivenessAnalyzer();
    this.patternExtractor = new PatternExtractor();
    this.adaptiveKnowledgeBase = new AdaptiveKnowledgeBase();
    this.feedbackSystem = new FeedbackSystem();
    this.initialized = false;
    this.learningQueue = [];
    this.isProcessing = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
   */
  initialize() {
    if (this.initialized) return;
    
    SmartLogger.learning('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è');
    this.initialized = true;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
    this.startLearningProcess();
    
    SmartLogger.learning('–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è
   */
  startLearningProcess() {
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±—É—á–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    setInterval(() => {
      this.processLearningQueue();
    }, 5000);
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—É—á–µ–Ω–∏—è –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏
   */
  async learnFromInteraction(interaction, additionalData = {}) {
    this.initialize();
    
    SmartLogger.learning('–ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏', { 
      query: interaction.query?.substring(0, 50) + '...',
      responseLength: interaction.response?.length 
    });
    
    try {
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—É—á–µ–Ω–∏—è
      this.learningQueue.push({
        interaction: interaction,
        additionalData: additionalData,
        timestamp: Date.now()
      });
      
      return {
        success: true,
        message: '–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –æ–±—É—á–µ–Ω–∏—è',
        queueSize: this.learningQueue.length
      };
      
    } catch (error) {
      SmartLogger.learning('–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:', error);
      return {
        success: false,
        error: error.message
      };
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—á–µ—Ä–µ–¥—å –æ–±—É—á–µ–Ω–∏—è
   */
  async processLearningQueue() {
    if (this.isProcessing || this.learningQueue.length === 0) return;
    
    this.isProcessing = true;
    
    try {
      const batch = this.learningQueue.splice(0, 5); // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –∑–∞ —Ä–∞–∑
      
      for (const item of batch) {
        await this.processLearningItem(item);
      }
      
      SmartLogger.learning(`–û–±—Ä–∞–±–æ—Ç–∞–Ω –±–∞—Ç—á –æ–±—É—á–µ–Ω–∏—è: ${batch.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
      
    } catch (error) {
      SmartLogger.learning('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –æ–±—É—á–µ–Ω–∏—è:', error);
    } finally {
      this.isProcessing = false;
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –æ–±—É—á–µ–Ω–∏—è
   */
  async processLearningItem(item) {
    const { interaction, additionalData } = item;
    
    // –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    const effectiveness = this.effectivenessAnalyzer.analyzeInteractionEffectiveness(interaction);
    
    // –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
    this.adaptiveKnowledgeBase.updateKnowledge(interaction, effectiveness.userEngagement);
    
    // –®–∞–≥ 3: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π)
    if (effectiveness.userEngagement > 0.6) {
      this.patternExtractor.extractSuccessPatterns([interaction]);
    }
    
    // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if (additionalData.feedback) {
      this.feedbackSystem.processFeedback(interaction, additionalData.feedback);
    }
    
    // –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π
    const improvements = this.generateImprovements(effectiveness, interaction);
    
    return {
      effectiveness: effectiveness,
      improvements: improvements,
      processed: true
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
   */
  generateImprovements(effectiveness, interaction) {
    const improvements = [];
    
    // –£–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∏–∑–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (effectiveness.userEngagement < 0.5) {
      improvements.push({
        type: 'engagement',
        suggestion: '–°–¥–µ–ª–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∏ –≤–æ–≤–ª–µ–∫–∞—é—â–∏–º–∏',
        priority: 'high'
      });
    }
    
    if (effectiveness.clarityScore < 0.5) {
      improvements.push({
        type: 'clarity',
        suggestion: '–£–ª—É—á—à–∏—Ç—å —á–µ—Ç–∫–æ—Å—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–æ–≤',
        priority: 'high'
      });
    }
    
    if (effectiveness.helpfulnessScore < 0.5) {
      improvements.push({
        type: 'helpfulness',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤',
        priority: 'medium'
      });
    }
    
    // –£–ª—É—á—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if (effectiveness.contextRelevance < 0.5) {
      improvements.push({
        type: 'context',
        suggestion: '–õ—É—á—à–µ —É—á–∏—Ç—ã–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        priority: 'medium'
      });
    }
    
    return improvements;
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
   */
  getImprovementRecommendations(queryType = 'all') {
    const stats = this.effectivenessAnalyzer.getEffectivenessStats();
    const patterns = this.patternExtractor.getTopPatterns();
    const knowledgeStats = this.adaptiveKnowledgeBase.getKnowledgeStats();
    
    const recommendations = {
      priority: [],
      suggestions: [],
      patterns: patterns,
      knowledgeInsights: knowledgeStats
    };
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    Object.entries(stats.byType).forEach(([type, typeStats]) => {
      const successRate = parseFloat(typeStats.successRate);
      
      if (successRate < 60) {
        recommendations.priority.push({
          area: type,
          issue: '–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏',
          suggestion: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "${type}"`,
          currentRate: typeStats.successRate
        });
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
    const opportunities = this.effectivenessAnalyzer.identifyImprovementOpportunities();
    recommendations.suggestions.push(...opportunities);
    
    return recommendations;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
   */
  async applyImprovements(improvements) {
    const results = [];
    
    for (const improvement of improvements) {
      try {
        const result = await this.applyImprovement(improvement);
        results.push(result);
      } catch (error) {
        results.push({
          improvement: improvement,
          success: false,
          error: error.message
        });
      }
    }
    
    return results;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
   */
  async applyImprovement(improvement) {
    SmartLogger.learning(`–ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ: ${improvement.type}`);
    
    switch (improvement.type) {
      case 'engagement':
        return this.improveEngagement(improvement);
      
      case 'clarity':
        return this.improveClarity(improvement);
      
      case 'helpfulness':
        return this.improveHelpfulness(improvement);
      
      case 'context':
        return this.improveContextAwareness(improvement);
      
      default:
        return {
          improvement: improvement,
          success: false,
          error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–ª—É—á—à–µ–Ω–∏—è'
        };
    }
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å
   */
  improveEngagement(improvement) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –≤–æ–≤–ª–µ–∫–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const engagementPatterns = this.patternExtractor.getTopPatterns('phrasing');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è –≤–æ–≤–ª–µ—á–µ–Ω–∏—è
    const newEngagementPhrases = [
      '–ê —á—Ç–æ –µ—Å–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å...',
      '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —á—Ç–æ –≤—ã –¥—É–º–∞–µ—Ç–µ –æ...',
      '–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º —ç—Ç–æ –ø–æ—ç—Ç–∞–ø–Ω–æ...',
      '–í–æ—Ç —á—Ç–æ —è –ø—Ä–µ–¥–ª–∞–≥–∞—é...'
    ];
    
    return {
      improvement: improvement,
      success: true,
      changes: {
        addedPhrases: newEngagementPhrases,
        updatedPatterns: engagementPatterns
      }
    };
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç —á–µ—Ç–∫–æ—Å—Ç—å
   */
  improveClarity(improvement) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–æ–ª–µ–µ —á–µ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const clarityRules = [
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
      '–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —Å–ø–∏—Å–∫–∞–º–∏',
      '–û–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã',
      '–î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–∏–º–µ—Ä—ã'
    ];
    
    return {
      improvement: improvement,
      success: true,
      changes: {
        clarityRules: clarityRules,
        structureUpdates: '–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è'
      }
    };
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å
   */
  improveHelpfulness(improvement) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —à–∞–±–ª–æ–Ω—ã –¥–ª—è –±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    const helpfulnessTemplates = [
      '–í–æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏: ...',
      '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç: ...',
      '–†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å: ...',
      '–ß—Ç–æ–±—ã –¥–æ—Å—Ç–∏—á—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ...'
    ];
    
    return {
      improvement: improvement,
      success: true,
      changes: {
        helpfulnessTemplates: helpfulnessTemplates,
        practicalFocus: '–£–≤–µ–ª–∏—á–µ–Ω —Ñ–æ–∫—É—Å –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã'
      }
    };
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
   */
  improveContextAwareness(improvement) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–ª–≥–æ—Ä–∏—Ç–º—ã —É—á–µ—Ç–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const contextRules = [
      '–°—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è',
      '–£—á–∏—Ç—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
      '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞',
      '–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É'
    ];
    
    return {
      improvement: improvement,
      success: true,
      changes: {
        contextRules: contextRules,
        memoryIntegration: '–£–ª—É—á—à–µ–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–∞–º—è—Ç—å—é'
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—É—á–µ–Ω–∏—è
   */
  getLearningStats() {
    return {
      effectivenessStats: this.effectivenessAnalyzer.getEffectivenessStats(),
      patternStats: this.patternExtractor.getTopPatterns(),
      knowledgeStats: this.adaptiveKnowledgeBase.getKnowledgeStats(),
      feedbackStats: this.feedbackSystem.getFeedbackSummary(),
      learningQueue: {
        size: this.learningQueue.length,
        processing: this.isProcessing
      },
      systemHealth: this.assessSystemHealth()
    };
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è
   */
  assessSystemHealth() {
    const stats = this.getLearningStats();
    const health = {
      overall: 'healthy',
      components: {
        effectiveness: 'healthy',
        patterns: 'healthy',
        knowledge: 'healthy',
        feedback: 'healthy'
      },
      recommendations: []
    };
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    if (stats.effectivenessStats.totalInteractions < 10) {
      health.components.effectiveness = 'warning';
      health.recommendations.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    if (stats.knowledgeStats.totalConcepts < 20) {
      health.components.knowledge = 'warning';
      health.recommendations.push('–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Ç—Ä–µ–±—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
    if (stats.feedbackStats.totalFeedback < 5) {
      health.components.feedback = 'warning';
      health.recommendations.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏');
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const warningCount = Object.values(health.components).filter(status => status === 'warning').length;
    if (warningCount > 1) {
      health.overall = 'warning';
    }
    
    return health;
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
const autonomousLearningEngine = new AutonomousLearningEngine();

module.exports = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  learnFromInteraction: (interaction, additionalData) => 
    autonomousLearningEngine.learnFromInteraction(interaction, additionalData),
  getImprovementRecommendations: (queryType) => 
    autonomousLearningEngine.getImprovementRecommendations(queryType),
  applyImprovements: (improvements) => 
    autonomousLearningEngine.applyImprovements(improvements),
  getLearningStats: () => 
    autonomousLearningEngine.getLearningStats(),
  
  // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  AutonomousLearningEngine,
  EffectivenessAnalyzer,
  PatternExtractor,
  AdaptiveKnowledgeBase,
  FeedbackSystem
};