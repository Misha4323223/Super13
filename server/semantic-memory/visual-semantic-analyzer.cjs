
/**
 * –°–∏—Å—Ç–µ–º–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–∏ (–§–∞–∑–∞ 2)
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏ –∏—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 */

const SmartLogger = {
  visual: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üé® [${timestamp}] VISUAL SEMANTICS: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

class VisualSemanticAnalyzer {
  constructor() {
    this.initializeVisualSemantics();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–∞–≤–∏–ª
   */
  initializeVisualSemantics() {
    // –í–∏–∑—É–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –∏—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
    this.visualConcepts = {
      color_semantics: {
        red: {
          emotions: ['passion', 'energy', 'danger', 'love'],
          contexts: ['warning', 'emphasis', 'brand_power'],
          associations: ['fire', 'blood', 'roses', 'power'],
          cultural_meanings: { 
            western: 'passion', 
            eastern: 'luck', 
            universal: 'attention' 
          }
        },
        blue: {
          emotions: ['calm', 'trust', 'sadness', 'peace'],
          contexts: ['corporate', 'medical', 'technology'],
          associations: ['sky', 'water', 'stability', 'professionalism'],
          cultural_meanings: { 
            western: 'trust', 
            eastern: 'healing', 
            universal: 'reliability' 
          }
        },
        green: {
          emotions: ['nature', 'growth', 'harmony', 'freshness'],
          contexts: ['environmental', 'health', 'money'],
          associations: ['plants', 'renewal', 'prosperity'],
          cultural_meanings: { 
            western: 'nature', 
            eastern: 'prosperity', 
            universal: 'growth' 
          }
        }
      },

      shape_semantics: {
        circle: {
          meanings: ['unity', 'completeness', 'infinity', 'protection'],
          psychological: ['harmony', 'wholeness', 'community'],
          brand_usage: ['inclusive', 'eternal', 'cycle']
        },
        square: {
          meanings: ['stability', 'order', 'reliability', 'structure'],
          psychological: ['security', 'foundation', 'tradition'],
          brand_usage: ['corporate', 'established', 'solid']
        },
        triangle: {
          meanings: ['direction', 'progress', 'hierarchy', 'dynamic'],
          psychological: ['movement', 'achievement', 'focus'],
          brand_usage: ['innovative', 'forward', 'aspirational']
        }
      },

      composition_semantics: {
        symmetrical: {
          feelings: ['balance', 'formal', 'traditional', 'stable'],
          use_cases: ['corporate', 'institutional', 'classical']
        },
        asymmetrical: {
          feelings: ['dynamic', 'modern', 'creative', 'energetic'],
          use_cases: ['artistic', 'innovative', 'contemporary']
        },
        centered: {
          feelings: ['focus', 'importance', 'unity', 'prominence'],
          use_cases: ['logos', 'hero_elements', 'focal_points']
        }
      },

      style_semantics: {
        minimalist: {
          values: ['simplicity', 'clarity', 'sophistication', 'modern'],
          emotions: ['calm', 'focused', 'premium', 'clean'],
          brand_archetypes: ['luxury', 'tech', 'professional']
        },
        vintage: {
          values: ['nostalgia', 'authenticity', 'craftsmanship', 'heritage'],
          emotions: ['warm', 'trusted', 'established', 'unique'],
          brand_archetypes: ['artisan', 'traditional', 'authentic']
        },
        futuristic: {
          values: ['innovation', 'technology', 'progress', 'cutting_edge'],
          emotions: ['excitement', 'possibility', 'advanced', 'modern'],
          brand_archetypes: ['tech', 'startup', 'revolutionary']
        }
      }
    };

    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
    this.semanticConnections = {
      complementary_concepts: [
        ['minimalist', 'blue', 'circle', 'trust'],
        ['vintage', 'brown', 'square', 'tradition'],
        ['futuristic', 'silver', 'triangle', 'innovation']
      ],
      conflicting_concepts: [
        ['vintage', 'futuristic'],
        ['minimalist', 'complex'],
        ['formal', 'playful']
      ]
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/–¥–∏–∑–∞–π–Ω–∞
   */
  analyzeVisualSemantics(visualData) {
    SmartLogger.visual('–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∏–∑—É–∞–ª—å–Ω—É—é —Å–µ–º–∞–Ω—Ç–∏–∫—É', { dataType: typeof visualData });

    const analysis = {
      visual_elements: this.extractVisualElements(visualData),
      semantic_meanings: {},
      emotional_impact: {},
      brand_implications: {},
      cultural_context: {},
      recommendations: []
    };

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
    analysis.visual_elements.forEach(element => {
      const semantics = this.getElementSemantics(element);
      analysis.semantic_meanings[element.type] = semantics;
    });

    // –û—Ü–µ–Ω–∏–≤–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ
    analysis.emotional_impact = this.calculateEmotionalImpact(analysis.visual_elements);

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã–µ –∏–º–ø–ª–∏–∫–∞—Ü–∏–∏
    analysis.brand_implications = this.analyzeBrandImplications(analysis.visual_elements);

    // –ö—É–ª—å—Ç—É—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    analysis.cultural_context = this.analyzeCulturalContext(analysis.visual_elements);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    analysis.recommendations = this.generateVisualRecommendations(analysis);

    SmartLogger.visual('–ê–Ω–∞–ª–∏–∑ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      elements_count: analysis.visual_elements.length,
      meanings_count: Object.keys(analysis.semantic_meanings).length
    });

    return analysis;
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
   */
  extractVisualElements(visualData) {
    const elements = [];

    // –ï—Å–ª–∏ —ç—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–æ–º–ø—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (typeof visualData === 'string') {
      const text = visualData.toLowerCase();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–≤–µ—Ç–∞
      Object.keys(this.visualConcepts.color_semantics).forEach(color => {
        if (text.includes(color) || text.includes(this.getColorSynonyms(color))) {
          elements.push({
            type: 'color',
            value: color,
            confidence: 0.8
          });
        }
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ–æ—Ä–º—ã
      Object.keys(this.visualConcepts.shape_semantics).forEach(shape => {
        if (text.includes(shape) || text.includes(this.getShapeSynonyms(shape))) {
          elements.push({
            type: 'shape',
            value: shape,
            confidence: 0.7
          });
        }
      });

      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∏–ª–∏
      Object.keys(this.visualConcepts.style_semantics).forEach(style => {
        if (text.includes(style) || text.includes(this.getStyleSynonyms(style))) {
          elements.push({
            type: 'style',
            value: style,
            confidence: 0.9
          });
        }
      });
    }

    return elements;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ–º–∞–Ω—Ç–∏–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞
   */
  getElementSemantics(element) {
    const conceptCategory = `${element.type}_semantics`;
    const concept = this.visualConcepts[conceptCategory]?.[element.value];
    
    if (!concept) return { meanings: [], confidence: 0 };

    return {
      meanings: concept.meanings || concept.emotions || concept.values || [],
      psychological: concept.psychological || [],
      cultural: concept.cultural_meanings || {},
      confidence: element.confidence || 0.5
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
   */
  calculateEmotionalImpact(visualElements) {
    const emotions = {};
    let totalWeight = 0;

    visualElements.forEach(element => {
      const semantics = this.getElementSemantics(element);
      const weight = element.confidence || 0.5;
      
      semantics.meanings.forEach(meaning => {
        if (!emotions[meaning]) emotions[meaning] = 0;
        emotions[meaning] += weight;
        totalWeight += weight;
      });
    });

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    Object.keys(emotions).forEach(emotion => {
      emotions[emotion] = emotions[emotion] / Math.max(totalWeight, 1);
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —ç–º–æ—Ü–∏–∏
    const sortedEmotions = Object.entries(emotions)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 3);

    return {
      primary_emotions: sortedEmotions,
      emotional_balance: this.calculateEmotionalBalance(emotions),
      overall_tone: this.determineOverallTone(sortedEmotions)
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –±—Ä–µ–Ω–¥–∏–Ω–≥–æ–≤—ã—Ö –∏–º–ø–ª–∏–∫–∞—Ü–∏–π
   */
  analyzeBrandImplications(visualElements) {
    const brandValues = [];
    const brandArchetypes = [];
    const brandPersonality = {};

    visualElements.forEach(element => {
      const conceptCategory = `${element.type}_semantics`;
      const concept = this.visualConcepts[conceptCategory]?.[element.value];
      
      if (concept) {
        if (concept.brand_usage) brandValues.push(...concept.brand_usage);
        if (concept.brand_archetypes) brandArchetypes.push(...concept.brand_archetypes);
      }
    });

    return {
      brand_values: [...new Set(brandValues)],
      brand_archetypes: [...new Set(brandArchetypes)],
      brand_personality: this.buildBrandPersonality(visualElements),
      market_positioning: this.suggestMarketPositioning(brandValues)
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  analyzeCulturalContext(visualElements) {
    const culturalMeanings = {
      western: {},
      eastern: {},
      universal: {}
    };

    visualElements.forEach(element => {
      const semantics = this.getElementSemantics(element);
      if (semantics.cultural) {
        Object.keys(culturalMeanings).forEach(culture => {
          if (semantics.cultural[culture]) {
            culturalMeanings[culture][element.value] = semantics.cultural[culture];
          }
        });
      }
    });

    return {
      cultural_meanings: culturalMeanings,
      cultural_sensitivity: this.assessCulturalSensitivity(visualElements),
      global_appeal: this.calculateGlobalAppeal(culturalMeanings)
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  generateVisualRecommendations(analysis) {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞—Ä–º–æ–Ω–∏–∏
    const colorRecommendations = this.generateColorRecommendations(analysis.visual_elements);
    recommendations.push(...colorRecommendations);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
    const compositionRecommendations = this.generateCompositionRecommendations(analysis);
    recommendations.push(...compositionRecommendations);

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—Ä–µ–Ω–¥–∏–Ω–≥—É
    const brandRecommendations = this.generateBrandRecommendations(analysis.brand_implications);
    recommendations.push(...brandRecommendations);

    return recommendations;
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  getColorSynonyms(color) {
    const synonyms = {
      red: '–∫—Ä–∞—Å–Ω—ã–π|–∞–ª—ã–π|–±–∞–≥—Ä–æ–≤—ã–π',
      blue: '—Å–∏–Ω–∏–π|–≥–æ–ª—É–±–æ–π|–ª–∞–∑—É—Ä–Ω—ã–π',
      green: '–∑–µ–ª–µ–Ω—ã–π|–∏–∑—É–º—Ä—É–¥–Ω—ã–π|—Å–∞–ª–∞—Ç–æ–≤—ã–π'
    };
    return synonyms[color] || color;
  }

  getShapeSynonyms(shape) {
    const synonyms = {
      circle: '–∫—Ä—É–≥|–æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å|–∫–æ–ª—å—Ü–æ',
      square: '–∫–≤–∞–¥—Ä–∞—Ç|–ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫|—Ä–æ–º–±',
      triangle: '—Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫|—Å—Ç—Ä–µ–ª–∞|–ø–∏—Ä–∞–º–∏–¥–∞'
    };
    return synonyms[shape] || shape;
  }

  getStyleSynonyms(style) {
    const synonyms = {
      minimalist: '–º–∏–Ω–∏–º–∞–ª–∏–∑–º|–ø—Ä–æ—Å—Ç–æ–π|–ª–∞–∫–æ–Ω–∏—á–Ω—ã–π',
      vintage: '–≤–∏–Ω—Ç–∞–∂|—Ä–µ—Ç—Ä–æ|—Å—Ç–∞—Ä–∏–Ω–Ω—ã–π',
      futuristic: '—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π|—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π|—Ç–µ—Ö–Ω–æ'
    };
    return synonyms[style] || style;
  }

  calculateEmotionalBalance(emotions) {
    const positiveEmotions = ['trust', 'calm', 'growth', 'harmony', 'unity'];
    const negativeEmotions = ['danger', 'sadness', 'conflict'];
    
    let positiveScore = 0;
    let negativeScore = 0;

    Object.entries(emotions).forEach(([emotion, weight]) => {
      if (positiveEmotions.includes(emotion)) positiveScore += weight;
      if (negativeEmotions.includes(emotion)) negativeScore += weight;
    });

    return {
      balance: positiveScore - negativeScore,
      polarity: positiveScore > negativeScore ? 'positive' : 'negative'
    };
  }

  determineOverallTone(sortedEmotions) {
    if (sortedEmotions.length === 0) return 'neutral';
    return sortedEmotions[0][0]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
  }

  buildBrandPersonality(visualElements) {
    const personality = {
      sophistication: 0,
      sincerity: 0,
      excitement: 0,
      competence: 0,
      ruggedness: 0
    };

    // –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    visualElements.forEach(element => {
      if (element.value === 'minimalist' || element.value === 'blue') {
        personality.sophistication += 0.3;
        personality.competence += 0.2;
      }
      if (element.value === 'vintage') {
        personality.sincerity += 0.4;
        personality.ruggedness += 0.2;
      }
      if (element.value === 'red' || element.value === 'triangle') {
        personality.excitement += 0.3;
      }
    });

    return personality;
  }

  suggestMarketPositioning(brandValues) {
    if (brandValues.includes('luxury') || brandValues.includes('premium')) {
      return 'premium_market';
    } else if (brandValues.includes('tech') || brandValues.includes('innovative')) {
      return 'technology_leader';
    } else if (brandValues.includes('traditional') || brandValues.includes('authentic')) {
      return 'heritage_brand';
    }
    return 'mainstream_market';
  }

  assessCulturalSensitivity(visualElements) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–π —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return {
      risk_level: 'low',
      concerns: [],
      recommendations: ['Review with local cultural experts', 'Test with target audience']
    };
  }

  calculateGlobalAppeal(culturalMeanings) {
    const universalCount = Object.keys(culturalMeanings.universal).length;
    const totalCount = Object.keys(culturalMeanings.western).length + 
                      Object.keys(culturalMeanings.eastern).length + universalCount;
    
    return universalCount / Math.max(totalCount, 1);
  }

  generateColorRecommendations(visualElements) {
    const recommendations = [];
    const colors = visualElements.filter(e => e.type === 'color');
    
    if (colors.length < 2) {
      recommendations.push({
        type: 'color_harmony',
        message: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ–π –ø–∞–ª–∏—Ç—Ä—ã',
        priority: 'medium'
      });
    }

    return recommendations;
  }

  generateCompositionRecommendations(analysis) {
    const recommendations = [];
    
    recommendations.push({
      type: 'composition',
      message: '–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–∞–ª–∞–Ω—Å –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏',
      priority: 'medium'
    });

    return recommendations;
  }

  generateBrandRecommendations(brandImplications) {
    const recommendations = [];
    
    if (brandImplications.brand_values.length > 0) {
      recommendations.push({
        type: 'branding',
        message: `–í–∞—à –¥–∏–∑–∞–π–Ω –æ—Ç—Ä–∞–∂–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –±—Ä–µ–Ω–¥–æ–≤—ã–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: ${brandImplications.brand_values.join(', ')}`,
        priority: 'high'
      });
    }

    return recommendations;
  }
}

module.exports = new VisualSemanticAnalyzer();
