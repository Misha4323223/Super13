/**
 * –ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–º—è—Ç–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ –µ–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
 * –≠–¢–ê–ü 3: –ê–ö–¢–ò–í–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• –ú–û–î–£–õ–ï–ô - –£–°–¢–†–ê–ù–ï–ù–ò–ï FALLBACK –ó–ê–ì–õ–£–®–ï–ö
 */

const SmartLogger = {
  main: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üß† [${timestamp}] SEMANTIC-MEMORY: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –°–ò–°–¢–ï–ú–ê –ü–†–û–í–ï–†–ö–ò –î–û–°–¢–£–ü–ù–û–°–¢–ò –ú–û–î–£–õ–ï–ô
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–π –º–æ–¥—É–ª—å –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
 */
class ModuleAvailabilityChecker {
  constructor() {
    this.moduleStatus = new Map();
    this.criticalModules = [
      'natural-language-generator',
      'semantic-analyzer', 
      'meta-semantic-engine',
      'emotional-semantic-matrix'
    ];
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª—è
   */
  async checkModuleAvailability(moduleName, modulePath) {
    try {
      const module = require(modulePath);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
      let isAvailable = true;
      let availabilityReason = 'module_loaded';

      if (moduleName === 'natural-language-generator') {
        isAvailable = module && typeof module.generateResponse === 'function';
        availabilityReason = isAvailable ? 'has_generateResponse' : 'missing_generateResponse';
      } else if (moduleName === 'semantic-analyzer') {
        isAvailable = module && typeof module.analyzeSemantics === 'function';
        availabilityReason = isAvailable ? 'has_analyzeSemantics' : 'missing_analyzeSemantics';
      } else if (moduleName === 'meta-semantic-engine') {
        isAvailable = module && typeof module.analyze === 'function';
        availabilityReason = isAvailable ? 'has_analyze' : 'missing_analyze';
      } else if (moduleName === 'emotional-semantic-matrix') {
        isAvailable = module && typeof module.analyzeEmotionalContext === 'function';
        availabilityReason = isAvailable ? 'has_analyzeEmotionalContext' : 'missing_analyzeEmotionalContext';
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ isAvailable –µ—Å–ª–∏ –µ—Å—Ç—å
      if (isAvailable && typeof module.isAvailable === 'function') {
        try {
          isAvailable = await module.isAvailable();
          availabilityReason = isAvailable ? 'module_self_check_passed' : 'module_self_check_failed';
        } catch (error) {
          SmartLogger.main(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–∞–º–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª—è ${moduleName}: ${error.message}`);
        }
      }

      this.moduleStatus.set(moduleName, {
        available: isAvailable,
        module: isAvailable ? module : null,
        reason: availabilityReason,
        lastCheck: Date.now()
      });

      if (isAvailable) {
        SmartLogger.main(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –î–û–°–¢–£–ü–ï–ù (${availabilityReason})`);
      } else {
        SmartLogger.main(`‚ùå –ú–æ–¥—É–ª—å ${moduleName} –ù–ï –î–û–°–¢–£–ü–ï–ù (${availabilityReason})`);
      }

      return isAvailable;

    } catch (error) {
      SmartLogger.main(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}: ${error.message}`);
      this.moduleStatus.set(moduleName, {
        available: false,
        module: null,
        reason: `load_error: ${error.message}`,
        lastCheck: Date.now()
      });
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è
   */
  getModuleStatus(moduleName) {
    return this.moduleStatus.get(moduleName) || {
      available: false,
      module: null,
      reason: 'not_checked',
      lastCheck: 0
    };
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –º–æ–¥—É–ª—å –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
   */
  getModule(moduleName) {
    const status = this.moduleStatus.get(moduleName);
    return status && status.available ? status.module : null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏
   */
  checkCriticalModules() {
    const criticalStatus = {};
    let allCriticalAvailable = true;

    for (const moduleName of this.criticalModules) {
      const status = this.getModuleStatus(moduleName);
      criticalStatus[moduleName] = status.available;
      if (!status.available) {
        allCriticalAvailable = false;
      }
    }

    SmartLogger.main('üîç –°—Ç–∞—Ç—É—Å –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π:', criticalStatus);
    return { allCriticalAvailable, criticalStatus };
  }
}

// –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥—É–ª–µ–π
const moduleChecker = new ModuleAvailabilityChecker();

// –≠–¢–ê–ü 7: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –∏ –∫—ç—à–∞
let parallelProcessor = null;
let globalSemanticCache = null;

try {
  const { SemanticParallelProcessor } = require('../semantic-parallel-processor.cjs');
  parallelProcessor = new SemanticParallelProcessor();
  SmartLogger.main('‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  SmartLogger.main(`‚ö†Ô∏è –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
}

try {
  const { globalSemanticCache: cache } = require('../semantic-cache.cjs');
  globalSemanticCache = cache;
  SmartLogger.main('‚úÖ –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
} catch (error) {
  SmartLogger.main(`‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫—ç—à –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`);
}

// –≠–¢–ê–ü 3: –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• –ú–û–î–£–õ–ï–ô –ë–ï–ó FALLBACK
let semanticProjectManager, entityExtractor, semanticAnalyzer, projectPredictor, knowledgeGraph, metaSemanticEngine;
let naturalLanguageGenerator, emotionalSemanticMatrix, userProfiler;
let externalKnowledgeIntegrator;

// ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
let semanticMemory = null;
let intelligentChatProcessor = null;
let conversationEngine = null;

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫—ç—à –º–æ–¥—É–ª–µ–π —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
const moduleCache = new Map();
const MODULE_LOAD_TIMEOUT = 5000; // –£–≤–µ–ª–∏—á–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–æ 5 —Å–µ–∫—É–Ω–¥
const MODULE_VALIDATION_CACHE = new Map();

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –º–æ–¥—É–ª—è
const MODULE_VALIDATION_SCHEMAS = {
  'natural-language-generator': {
    requiredMethods: ['generateResponse', 'initialize'],
    requiredProperties: ['instance'],
    optionalMethods: ['think', 'generateLivingResponse']
  },
  'semantic-memory': {
    requiredMethods: ['analyzeCompleteRequest', 'getSystemStatistics'],
    requiredProperties: ['components'],
    optionalMethods: ['analyzeCompleteRequestWithMeta']
  },
  'intelligent-chat-processor': {
    requiredMethods: ['analyzeAndExecute', 'analyzeUserIntent'],
    requiredProperties: [],
    optionalMethods: ['processMessage']
  }
};

// ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã exports –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
async function loadModuleSafely(moduleName, modulePath) {
  const startTime = Date.now();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
    if (moduleCache.has(moduleName)) {
      const cachedModule = moduleCache.get(moduleName);
      if (await validateModuleStructure(moduleName, cachedModule)) {
        SmartLogger.main(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞ (${Date.now() - startTime}–º—Å)`);
        return cachedModule;
      } else {
        SmartLogger.main(`‚ö†Ô∏è –ú–æ–¥—É–ª—å ${moduleName} –≤ –∫—ç—à–µ –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º`);
        moduleCache.delete(moduleName);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    const loadPromise = new Promise((resolve, reject) => {
      try {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏ –æ—á–∏—â–∞–µ–º –∫—ç—à
        const fullPath = require.resolve(modulePath);
        if (require.cache[fullPath]) {
          delete require.cache[fullPath];
          SmartLogger.debug(`üîÑ –û—á–∏—â–µ–Ω –∫—ç—à require –¥–ª—è ${moduleName}`);
        }

        const module = require(modulePath);
        resolve(module);
      } catch (error) {
        reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName}: ${error.message}`));
      }
    });

    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è ${moduleName} (${MODULE_LOAD_TIMEOUT}–º—Å)`)), MODULE_LOAD_TIMEOUT);
    });

    const module = await Promise.race([loadPromise, timeoutPromise]);

    // ‚úÖ –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´
    const validationResult = await validateModuleStructure(moduleName, module);
    if (!validationResult) {
      throw new Error(`–ú–æ–¥—É–ª—å ${moduleName} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é —Å—Ç—Ä—É–∫—Ç—É—Ä—ã exports`);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    moduleCache.set(moduleName, module);
    MODULE_VALIDATION_CACHE.set(moduleName, {
      validated: true,
      timestamp: Date.now(),
      loadTime: Date.now() - startTime
    });

    SmartLogger.main(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ (${Date.now() - startTime}–º—Å)`);
    return module;

  } catch (error) {
    const errorDetails = {
      moduleName,
      modulePath,
      error: error.message,
      stack: error.stack,
      loadTime: Date.now() - startTime,
      cacheSize: moduleCache.size
    };

    SmartLogger.error(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å ${moduleName}:`, errorDetails);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    MODULE_VALIDATION_CACHE.set(moduleName, {
      validated: false,
      error: error.message,
      timestamp: Date.now(),
      loadTime: Date.now() - startTime
    });

    return null;
  }
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã exports –º–æ–¥—É–ª—è
async function validateModuleStructure(moduleName, module) {
  if (!module) {
    SmartLogger.main(`‚ö†Ô∏è –ú–æ–¥—É–ª—å ${moduleName} –ø—É—Å—Ç –∏–ª–∏ null`);
    return false;
  }

  const schema = MODULE_VALIDATION_SCHEMAS[moduleName];
  if (!schema) {
    SmartLogger.debug(`‚ÑπÔ∏è –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è ${moduleName} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return true; // –ï—Å–ª–∏ —Å—Ö–µ–º—ã –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º
  }

  const validationErrors = [];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
  if (schema.requiredMethods) {
    for (const method of schema.requiredMethods) {
      if (typeof module[method] !== 'function') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, module.instance.method)
        const alternativePaths = ['instance', 'default'];
        let found = false;

        for (const path of alternativePaths) {
          if (module[path] && typeof module[path][method] === 'function') {
            found = true;
            break;
          }
        }

        if (!found) {
          validationErrors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: ${method}`);
        }
      }
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  if (schema.requiredProperties) {
    for (const property of schema.requiredProperties) {
      if (!(property in module)) {
        validationErrors.push(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ: ${property}`);
      }
    }
  }

  // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  if (validationErrors.length > 0) {
    SmartLogger.main(`‚ö†Ô∏è –ú–æ–¥—É–ª—å ${moduleName} –Ω–µ –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é:`, {
      errors: validationErrors,
      availableMethods: Object.keys(module).filter(key => typeof module[key] === 'function'),
      availableProperties: Object.keys(module).filter(key => typeof module[key] !== 'function')
    });
    return false;
  }

  SmartLogger.debug(`‚úÖ –ú–æ–¥—É–ª—å ${moduleName} –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ`);
  return true;
}

// ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
async function initializeModules() {
  const initStartTime = Date.now();
  SmartLogger.main('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–¥—É–ª–µ–π...');

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π (–æ—Ç –±–∞–∑–æ–≤—ã—Ö –∫ –∑–∞–≤–∏—Å–∏–º—ã–º)
  const moduleLoadOrder = [
    {
      name: 'natural-language-generator',
      path: './natural-language-generator.cjs',
      priority: 1, // –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      description: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (–±–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å)'
    },
    {
      name: 'semantic-analyzer', 
      path: './semantic-analyzer.cjs',
      priority: 2,
      description: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–º—è—Ç—å (–º–æ–∂–µ—Ç –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞)'
    },
    {
      name: 'meta-semantic-engine',
      path: './meta-semantic-engine.cjs',
      priority: 2,
      description: '–ú–µ—Ç–∞ —Å–µ–º–∞–Ω—Ç–∏–∫ —ç–Ω–∂–∏–Ω'
    },
    {
      name: 'emotional-semantic-matrix',
      path: './emotional-semantic-matrix.cjs',
      priority: 2,
      description: '–ï–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞'
    },
    {
      name: 'intelligent-chat-processor',
      path: './intelligent-chat-processor.cjs', 
      priority: 3,
      description: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö)'
    },
    {
      name: 'external-knowledge-integrator',
      path: './external-knowledge-integrator.cjs',
      priority: 2,
      description: '–ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π'
    }
  ];

  const loadResults = [];
  const loadPromises = [];

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
  for (const priority of [1, 2, 3]) {
    const modulesToLoad = moduleLoadOrder.filter(m => m.priority === priority);

    SmartLogger.main(`üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ ${priority}:`, modulesToLoad.map(m => m.name));

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const priorityPromises = modulesToLoad.map(async (moduleInfo) => {
      const startTime = Date.now();

      try {
        const module = await loadModuleSafely(moduleInfo.name, moduleInfo.path);
        const loadTime = Date.now() - startTime;

        const result = {
          name: moduleInfo.name,
          success: !!module,
          loadTime,
          description: moduleInfo.description,
          priority: moduleInfo.priority
        };

        // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        if (module) {
          switch (moduleInfo.name) {
            case 'natural-language-generator':
              naturalLanguageGenerator = module;
              break;
            case 'semantic-analyzer':
              semanticAnalyzer = module;
              break;
            case 'meta-semantic-engine':
              metaSemanticEngine = module;
              break;
            case 'emotional-semantic-matrix':
              emotionalSemanticMatrix = module;
              break;
            case 'semantic-memory':
              semanticMemory = module;
              break;
            case 'intelligent-chat-processor':
              intelligentChatProcessor = module;
              break;
            case 'external-knowledge-integrator':
              externalKnowledgeIntegrator = module;
              break;
          }
        }

        return result;
      } catch (error) {
        return {
          name: moduleInfo.name,
          success: false,
          error: error.message,
          loadTime: Date.now() - startTime,
          description: moduleInfo.description,
          priority: moduleInfo.priority
        };
      }
    });

    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    const priorityResults = await Promise.all(priorityPromises);
    loadResults.push(...priorityResults);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    const failedCritical = priorityResults.filter(r => !r.success && r.priority <= 2);
    if (failedCritical.length > 0) {
      SmartLogger.main(`‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:`, failedCritical.map(r => r.name));
    }
  }

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  const totalTime = Date.now() - initStartTime;
  const successCount = loadResults.filter(r => r.success).length;
  const failureCount = loadResults.filter(r => !r.success).length;

  SmartLogger.main(`üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${totalTime}–º—Å:`, {
    totalModules: loadResults.length,
    successful: successCount,
    failed: failureCount,
    successRate: `${((successCount / loadResults.length) * 100).toFixed(1)}%`,
    cacheSize: moduleCache.size,
    validationCacheSize: MODULE_VALIDATION_CACHE.size
  });

  // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–æ–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  loadResults.forEach(result => {
    if (result.success) {
      SmartLogger.main(`‚úÖ ${result.name}: ${result.description} (${result.loadTime}–º—Å)`);
    } else {
      SmartLogger.error(`‚ùå ${result.name}: ${result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'} (${result.loadTime}–º—Å)`);
    }
  });

  return {
    totalTime,
    results: loadResults,
    successCount,
    failureCount,
    modules: {
      naturalLanguageGenerator,
      semanticMemory,
      intelligentChatProcessor,
      semanticAnalyzer,
      metaSemanticEngine,
      emotionalSemanticMatrix,
      externalKnowledgeIntegrator
    }
  };
}

// ‚úÖ –ù–û–í–´–ï –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´
function getModuleInitializationStatus() {
  return {
    timestamp: new Date().toISOString(),
    modules: {
      naturalLanguageGenerator: {
        loaded: !!naturalLanguageGenerator,
        cached: moduleCache.has('natural-language-generator'),
        validated: MODULE_VALIDATION_CACHE.get('natural-language-generator')?.validated || false
      },
      semanticMemory: {
        loaded: !!semanticMemory,
        cached: moduleCache.has('semantic-memory'),
        validated: MODULE_VALIDATION_CACHE.get('semantic-memory')?.validated || false
      },
      intelligentChatProcessor: {
        loaded: !!intelligentChatProcessor,
        cached: moduleCache.has('intelligent-chat-processor'),
        validated: MODULE_VALIDATION_CACHE.get('intelligent-chat-processor')?.validated || false
      },
      semanticAnalyzer: {
        loaded: !!semanticAnalyzer,
        cached: moduleCache.has('semantic-analyzer'),
        validated: MODULE_VALIDATION_CACHE.get('semantic-analyzer')?.validated || false
      },
      metaSemanticEngine: {
        loaded: !!metaSemanticEngine,
        cached: moduleCache.has('meta-semantic-engine'),
        validated: MODULE_VALIDATION_CACHE.get('meta-semantic-engine')?.validated || false
      },
      emotionalSemanticMatrix: {
        loaded: !!emotionalSemanticMatrix,
        cached: moduleCache.has('emotional-semantic-matrix'),
        validated: MODULE_VALIDATION_CACHE.get('emotional-semantic-matrix')?.validated || false
      },
      externalKnowledgeIntegrator: {
        loaded: !!externalKnowledgeIntegrator,
        cached: moduleCache.has('external-knowledge-integrator'),
        validated: MODULE_VALIDATION_CACHE.get('external-knowledge-integrator')?.validated || false
      }
    },
    cacheStatistics: {
      moduleCache: moduleCache.size,
      validationCache: MODULE_VALIDATION_CACHE.size,
      totalMemoryFootprint: Array.from(moduleCache.entries()).length
    }
  };
}

function clearModuleCache() {
  const beforeSize = moduleCache.size;
  moduleCache.clear();
  MODULE_VALIDATION_CACHE.clear();

  SmartLogger.main(`üßπ –ö—ç—à –º–æ–¥—É–ª–µ–π –æ—á–∏—â–µ–Ω: ${beforeSize} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ`);

  return {
    cleared: beforeSize,
    remaining: moduleCache.size
  };
}

function getModuleValidationReport() {
  const report = {
    timestamp: new Date().toISOString(),
    modules: {}
  };

  for (const [moduleName, validationInfo] of MODULE_VALIDATION_CACHE.entries()) {
    report.modules[moduleName] = {
      ...validationInfo,
      age: Date.now() - validationInfo.timestamp
    };
  }

  return report;
}

// –ê–°–ò–ù–•–†–û–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–°–ï–• –ú–û–î–£–õ–ï–ô
async function initializeRealModules() {
  SmartLogger.main('üöÄ –≠–¢–ê–ü 3: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π');

  // 1. –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ)
  const criticalModules = [
    { name: 'natural-language-generator', path: './natural-language-generator.cjs' },
    { name: 'semantic-analyzer', path: './semantic-analyzer.cjs' },
    { name: 'meta-semantic-engine', path: './meta-semantic-engine.cjs' },
    { name: 'emotional-semantic-matrix', path: './emotional-semantic-matrix.cjs' }
  ];

  // 2. –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ (–≤–∞–∂–Ω—ã–µ)
  const coreModules = [
    { name: 'project-manager', path: './project-manager.cjs' },
    { name: 'entity-extractor', path: './entity-extractor.cjs' },
    { name: 'project-predictor', path: './project-predictor.cjs' },
    { name: 'knowledge-graph', path: './knowledge-graph.cjs' },
    { name: 'user-profiler', path: './user-profiler.cjs' }
  ];

  // 3. –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (50+ –º–æ–¥—É–ª–µ–π)
  const extendedModules = [
    { name: 'biomimetic-semantics', path: './biomimetic-semantics.cjs' },
    { name: 'divine-semantics', path: './divine-semantics.cjs' },
    { name: 'cognitive-dna-profiler', path: './cognitive-dna-profiler.cjs' },
    { name: 'business-context-analyzer', path: './business-context-analyzer.cjs' },
    { name: 'collective-semantic-wisdom', path: './collective-semantic-wisdom.cjs' },
    { name: 'creative-semantic-engine', path: './creative-semantic-engine.cjs' },
    { name: 'cross-contextual-semantics', path: './cross-contextual-semantics.cjs' },
    { name: 'autonomous-learning-engine', path: './autonomous-learning-engine.cjs' }
  ];

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –º–æ–¥—É–ª–∏
  SmartLogger.main('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...');
  for (const module of criticalModules) {
    await moduleChecker.checkModuleAvailability(module.name, module.path);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
  SmartLogger.main('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...');
  for (const module of coreModules) {
    await moduleChecker.checkModuleAvailability(module.name, module.path);
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
  SmartLogger.main('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...');
  for (const module of extendedModules) {
    await moduleChecker.checkModuleAvailability(module.name, module.path);
  }

  // –ù–∞–∑–Ω–∞—á–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
  naturalLanguageGenerator = moduleChecker.getModule('natural-language-generator');
  semanticAnalyzer = moduleChecker.getModule('semantic-analyzer');
  metaSemanticEngine = moduleChecker.getModule('meta-semantic-engine');
  emotionalSemanticMatrix = moduleChecker.getModule('emotional-semantic-matrix');
  externalKnowledgeIntegrator = moduleChecker.getModule('external-knowledge-integrator');

  // –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
  const projectManagerModule = moduleChecker.getModule('project-manager');
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞ SemanticProjectManager
    if (projectManagerModule && projectManagerModule.SemanticProjectManager) {
      semanticProjectManager = new projectManagerModule.SemanticProjectManager();
      SmartLogger.main('‚úÖ SemanticProjectManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } else if (projectManagerModule && typeof projectManagerModule === 'function') {
      // –ï—Å–ª–∏ –º–æ–¥—É–ª—å —Å–∞–º —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º
      semanticProjectManager = new projectManagerModule();
      SmartLogger.main('‚úÖ ProjectManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ —Ñ—É–Ω–∫—Ü–∏—è-–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä');
    } else if (projectManagerModule && projectManagerModule.createManager) {
      // –ï—Å–ª–∏ –µ—Å—Ç—å factory –º–µ—Ç–æ–¥
      semanticProjectManager = projectManagerModule.createManager();
      SmartLogger.main('‚úÖ ProjectManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ factory –º–µ—Ç–æ–¥');
    } else {
      semanticProjectManager = null;
      SmartLogger.main('‚ö†Ô∏è ProjectManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä');
    }
  } catch (pmError) {
    SmartLogger.main(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ProjectManager: ${pmError.message}`);
    semanticProjectManager = null;
  }

  entityExtractor = moduleChecker.getModule('entity-extractor');
  projectPredictor = moduleChecker.getModule('project-predictor');
  knowledgeGraph = moduleChecker.getModule('knowledge-graph');
  userProfiler = moduleChecker.getModule('user-profiler');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const { allCriticalAvailable, criticalStatus } = moduleChecker.checkCriticalModules();

  if (allCriticalAvailable) {
    SmartLogger.main('‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ù–´–ï –ú–û–î–£–õ–ò –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!');
  } else {
    SmartLogger.main('‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –ö–†–ò–¢–ò–ß–ù–´–ï –ú–û–î–£–õ–ò –ù–ï–î–û–°–¢–£–ü–ù–´:', criticalStatus);
  }

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  const totalModules = criticalModules.length + coreModules.length + extendedModules.length;
  const activeModules = Array.from(moduleChecker.moduleStatus.values()).filter(s => s.available).length;

  SmartLogger.main(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ö–¢–ò–í–ê–¶–ò–ò: ${activeModules}/${totalModules} –º–æ–¥—É–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ`);

  return {
    totalModules,
    activeModules,
    criticalModulesStatus: criticalStatus,
    allCriticalAvailable
  };
}

// –≠–¢–ê–ü 7: –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô
async function analyzeCompleteRequest(userMessage, context = {}) {
  try {
    SmartLogger.main(`üöÄ –ê–ù–ê–õ–ò–ó –° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô: "${userMessage.substring(0, 50)}..."`);
    const startTime = Date.now();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
    const cachedResult = globalSemanticCache.getCachedSemanticAnalysis(userMessage, context);
    if (cachedResult) {
      SmartLogger.main('‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
      return {
        ...cachedResult,
        fromCache: true,
        processingTime: Date.now() - startTime
      };
    }

    // –ï—Å–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (parallelProcessor) {
      SmartLogger.main('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ–¥—É–ª–µ–π');

      const parallelResult = await parallelProcessor.processRequestParallel(userMessage, context, moduleChecker);

      if (parallelResult.success) {
        const analysis = {
          userMessage,
          context,
          timestamp: new Date().toISOString(),
          processingTime: parallelResult.processingTime,
          parallelProcessing: true,
          moduleResults: parallelResult.results,
          realModulesActive: true
        };

        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const criticalResults = parallelResult.results.critical;
        const importantResults = parallelResult.results.important;
        const optionalResults = parallelResult.results.optional;

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis.semanticAnalysis = criticalResults.semanticAnalysis || { confidence: 0.3, fallback: true };
        analysis.emotionalAnalysis = criticalResults.emotionalAnalysis || { emotion: 'neutral', confidence: 0.3 };
        analysis.nlgResult = criticalResults.nlgResult;

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis.metaAnalysis = importantResults['meta-semantic-engine']?.result || { confidence: 0.3, fallback: true };
        analysis.projectAnalysis = importantResults['project-manager']?.result || { confidence: 0.3, fallback: true };
        analysis.userProfile = importantResults['user-profiler']?.result;

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        analysis.extendedAnalysis = optionalResults;

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        const confidenceValues = [
          analysis.semanticAnalysis?.confidence || 0,
          analysis.emotionalAnalysis?.confidence || 0,
          analysis.projectAnalysis?.confidence || 0,
          analysis.metaAnalysis?.confidence || 0
        ].filter(c => c > 0);

        analysis.confidence = confidenceValues.length > 0 ? 
          confidenceValues.reduce((sum, c) => sum + c, 0) / confidenceValues.length : 0.3;

        // –°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª–µ–π
        analysis.moduleStatus = {
          semanticAnalyzer: criticalResults.semanticAnalysis ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED',
          emotionalAnalyzer: criticalResults.emotionalAnalysis ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED',
          metaAnalyzer: importantResults['meta-semantic-engine']?.success ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED',
          projectManager: importantResults['project-manager']?.success ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED',
          userProfiler: importantResults['user-profiler']?.success ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED'
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
        Object.keys(optionalResults).forEach(moduleName => {
          analysis.moduleStatus[moduleName] = optionalResults[moduleName].success ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED';
        });

        const realModulesCount = Object.values(analysis.moduleStatus).filter(status => 
          status === 'REAL_MODULE_ACTIVE').length;
        const totalModulesCount = Object.keys(analysis.moduleStatus).length;

        SmartLogger.main(`‚úÖ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù: ${realModulesCount}/${totalModulesCount} —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ`);
        SmartLogger.main(`üìä –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%`);
        SmartLogger.main(`‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${analysis.processingTime}–º—Å`);

        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        globalSemanticCache.cacheSemanticAnalysis(userMessage, context, analysis);

        return analysis;
      }
    }

    // Fallback –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
    SmartLogger.main('‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ');
    return await analyzeCompleteRequestSequential(userMessage, context);

  } catch (error) {
    SmartLogger.main(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    return {
      error: error.message,
      fallbackAnalysis: { confidence: 0.1 },
      realModulesActive: false
    };
  }
}

// –≠–¢–ê–ü 7: –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ö–ê–ö FALLBACK
async function analyzeCompleteRequestSequential(userMessage, context = {}) {
  SmartLogger.main('üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É...');
  const startTime = Date.now();

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
  const nlgModule = moduleChecker.getModule('natural-language-generator');
  const semanticModule = moduleChecker.getModule('semantic-analyzer');
  const metaModule = moduleChecker.getModule('meta-semantic-engine');
  const emotionalModule = moduleChecker.getModule('emotional-semantic-matrix');

  let analysis = {
    userMessage,
    context,
    timestamp: new Date().toISOString(),
    processingTime: 0,
    moduleStatus: {},
    realModulesActive: true,
    parallelProcessing: false
  };

  // 1. –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó (—Ä–µ–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
  if (semanticModule) {
    SmartLogger.main('üî¨ –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ô —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...');
    analysis.semanticAnalysis = await semanticModule.analyzeSemantics(userMessage, context);
    analysis.moduleStatus.semanticAnalyzer = 'REAL_MODULE_ACTIVE';
  } else {
    SmartLogger.main('‚ö†Ô∏è –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    analysis.semanticAnalysis = { confidence: 0.3, fallback: true };
    analysis.moduleStatus.semanticAnalyzer = 'FALLBACK_USED';
  }

  // 2. –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó (—Ä–µ–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
  if (emotionalModule) {
    SmartLogger.main('üíù –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ô —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
    analysis.emotionalAnalysis = await emotionalModule.analyzeEmotionalContext(userMessage, context);
    analysis.moduleStatus.emotionalAnalyzer = 'REAL_MODULE_ACTIVE';
  } else {
    SmartLogger.main('‚ö†Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    analysis.emotionalAnalysis = { emotion: 'neutral', confidence: 0.3 };
    analysis.moduleStatus.emotionalAnalyzer = 'FALLBACK_USED';
  }

  // 3. –ü–†–û–ï–ö–¢–ù–´–ô –ê–ù–ê–õ–ò–ó (—Ä–µ–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
  if (semanticProjectManager) {
    SmartLogger.main('üìÅ –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ô –ø—Ä–æ–µ–∫—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑...');
    analysis.projectAnalysis = await semanticProjectManager.analyzeProject({
      userMessage,
      semantics: analysis.semanticAnalysis,
      emotions: analysis.emotionalAnalysis,
      context
        });
    analysis.moduleStatus.projectManager = 'REAL_MODULE_ACTIVE';
  } else {
    SmartLogger.main('‚ö†Ô∏è –ü—Ä–æ–µ–∫—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    analysis.projectAnalysis = { confidence: 0.3, fallback: true };
    analysis.moduleStatus.projectManager = 'FALLBACK_USED';
  }

  // 4. –ü–†–ï–î–°–ö–ê–ó–ê–ù–ò–Ø (—Ä–µ–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
  if (projectPredictor) {
    SmartLogger.main('üîÆ –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è...');
    analysis.predictions = await projectPredictor.predictNext({
      userMessage,
      projectAnalysis: analysis.projectAnalysis,
      context
    });
    analysis.moduleStatus.projectPredictor = 'REAL_MODULE_ACTIVE';
  } else {
    SmartLogger.main('‚ö†Ô∏è –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    analysis.predictions = { confidence: 0.3, fallback: true };
    analysis.moduleStatus.projectPredictor = 'FALLBACK_USED';
  }

  // 5. –ú–ï–¢–ê-–ê–ù–ê–õ–ò–ó (—Ä–µ–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å)
  if (metaModule) {
    SmartLogger.main('üß† –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ô –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑...');
    analysis.metaAnalysis = await metaModule.analyze({
      userMessage,
      semanticAnalysis: analysis.semanticAnalysis,
      emotionalAnalysis: analysis.emotionalAnalysis,
      projectAnalysis: analysis.projectAnalysis,
      predictions: analysis.predictions,
      context
    });
    analysis.moduleStatus.metaAnalyzer = 'REAL_MODULE_ACTIVE';
  } else {
    SmartLogger.main('‚ö†Ô∏è –ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    analysis.metaAnalysis = { confidence: 0.3, fallback: true };
    analysis.moduleStatus.metaAnalyzer = 'FALLBACK_USED';
  }

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  const confidenceValues = [
    analysis.semanticAnalysis?.confidence || 0,
    analysis.emotionalAnalysis?.confidence || 0,
    analysis.projectAnalysis?.confidence || 0,
    analysis.predictions?.confidence || 0,
    analysis.metaAnalysis?.confidence || 0
  ].filter(c => c > 0);

  analysis.confidence = confidenceValues.length > 0 ? 
    confidenceValues.reduce((sum, c) => sum + c, 0) / confidenceValues.length : 0.3;

  analysis.processingTime = Date.now() - startTime;

  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
  const realModulesCount = Object.values(analysis.moduleStatus).filter(status => 
    status === 'REAL_MODULE_ACTIVE').length;
  const totalModulesCount = Object.keys(analysis.moduleStatus).length;

  SmartLogger.main(`‚úÖ –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù: ${realModulesCount}/${totalModulesCount} —Ä–µ–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –∞–∫—Ç–∏–≤–Ω–æ`);
  SmartLogger.main(`üìä –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(analysis.confidence * 100).toFixed(1)}%`);

  return analysis;
}

// –≠–¢–ê–ü 3: –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –ú–û–î–£–õ–Ø–ú–ò
async function generateResponseWithRealModules(userMessage, analysis, context = {}) {
  try {
    SmartLogger.main('üéØ –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê –° –†–ï–ê–õ–¨–ù–´–ú–ò –ú–û–î–£–õ–Ø–ú–ò');

    const nlgModule = moduleChecker.getModule('natural-language-generator');

    if (nlgModule) {
      SmartLogger.main('‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –†–ï–ê–õ–¨–ù–´–ô –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —è–∑—ã–∫–∞');

      // –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
      const enhancedContext = {
        ...context,
        semanticContext: analysis.semanticAnalysis,
        emotionalContext: analysis.emotionalAnalysis,
        projectContext: analysis.projectAnalysis,
        metaContext: analysis.metaAnalysis,
        moduleStatus: analysis.moduleStatus
      };

      const result = await nlgModule.generateResponse(userMessage, enhancedContext);

      SmartLogger.main('üéâ –û–¢–í–ï–¢ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù –†–ï–ê–õ–¨–ù–´–ú –ú–û–î–£–õ–ï–ú');
      return {
        success: true,
        response: result.response || result.message || result,
        confidence: result.confidence || 0.8,
        generatedBy: 'REAL_NLG_MODULE',
        metadata: result.metadata || {}
      };

    } else {
      SmartLogger.main('‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç');
      return {
        success: true,
        response: "–Ø BOOOMERANGS AI —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–æ–¥—É–ª—è–º–∏! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        confidence: 0.6,
        generatedBy: 'BASIC_GENERATOR',
        metadata: { fallback: true }
      };
    }

  } catch (error) {
    SmartLogger.main(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: ${error.message}`);
    return {
      success: false,
      error: error.message,
      response: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞",
      confidence: 0.1
    };
  }
}

// –≠–¢–ê–ü 3: –ú–ï–¢–ê-–°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –° –†–ï–ê–õ–¨–ù–´–ú–ò –ú–û–î–£–õ–Ø–ú–ò
async function analyzeCompleteRequestWithMeta(userMessage, context = {}) {
  try {
    SmartLogger.main('üîÆ –ú–ï–¢–ê-–°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –° –†–ï–ê–õ–¨–ù–´–ú–ò –ú–û–î–£–õ–Ø–ú–ò');

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    const analysis = await analyzeCompleteRequest(userMessage, context);

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–µ–Ω
    const metaModule = moduleChecker.getModule('meta-semantic-engine');
    if (metaModule) {
      SmartLogger.main('üß† –í—ã–ø–æ–ª–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ô –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑...');

      const metaResult = await metaModule.analyze({
        userMessage,
        standardAnalysis: analysis,
        context,
        moduleStatus: analysis.moduleStatus,
        timestamp: new Date().toISOString()
      });

      analysis.metaSemanticAnalysis = metaResult;
      analysis.isMeta = true;
      analysis.confidence = Math.max(analysis.confidence, metaResult.confidence || 0);
    }

    return analysis;

  } catch (error) {
    SmartLogger.main(`‚ùå –û—à–∏–±–∫–∞ –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
    return await analyzeCompleteRequest(userMessage, context);
  }
}

// –≠–¢–ê–ü 3: –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´
function getSystemStatistics() {
  const moduleStatuses = {};
  for (const [name, status] of moduleChecker.moduleStatus) {
    moduleStatuses[name] = {
      available: status.available,
      reason: status.reason,
      lastCheck: status.lastCheck
    };
  }

  const activeModules = Array.from(moduleChecker.moduleStatus.values()).filter(s => s.available).length;
  const totalModules = moduleChecker.moduleStatus.size;

  return {
    totalModules,
    activeModules,
    moduleStatuses,
    systemHealth: activeModules / totalModules,
    realModulesActive: activeModules > 0,
    initializationComplete: true
  };
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
initializeModules()
  .then(result => {
    SmartLogger.main('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
      totalTime: result.totalTime,
      successRate: `${result.successCount}/${result.successCount + result.failureCount}`
    });
  })
  .catch(error => {
    SmartLogger.main('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', {
      error: error.message,
      stack: error.stack,
      moduleStates: getModuleInitializationStatus()
    });
  });

// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò –ó–ê–ì–†–£–ó–ö–ï
const initializationPromise = initializeRealModules();

// –≠–¢–ê–ü 6: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
let globalDashboard;
try {
  globalDashboard = require('../semantic-monitor-dashboard.cjs').globalDashboard;
} catch (error) {
  // Dashboard –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
function logMetrics(operation, startTime, success, error = null) {
  if (!globalDashboard) return;

  const duration = Date.now() - startTime;
  globalDashboard.updateModuleStats('semantic-memory', {
    status: success ? 'healthy' : 'degraded',
    responseTime: duration,
    errorCount: error ? 1 : 0,
    successCount: success ? 1 : 0,
    lastError: error?.message || null
  });
}

// –û–±–µ—Ä—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const originalAnalyzeCompleteRequest = analyzeCompleteRequest;
analyzeCompleteRequest = async function(input, context = {}) {
    try {
      SmartLogger.main(`üöÄ –ê–ù–ê–õ–ò–ó –° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û–ô –û–ë–†–ê–ë–û–¢–ö–û–ô: "${input.substring(0, 50)}..."`);
      const startTime = Date.now();

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π
      const needsExternalKnowledge = detectKnowledgeRequest(input);
      const enhancedContext = {
        ...context,
        includeExternalKnowledge: needsExternalKnowledge
      };

      // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
      const semanticResult = await semanticAnalyzer.analyzeSemantics(input, enhancedContext);

      // –ú–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑
      const metaAnalysis = await metaSemanticEngine.analyze({
        userMessage: input,
        semanticAnalysis: semanticResult,
        context: enhancedContext
      });

      // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const emotionalProfile = await emotionalSemanticMatrix.analyzeEmotionalContext(input, enhancedContext);

      // –í–Ω–µ—à–Ω–∏–µ –∑–Ω–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      let externalKnowledge = null;
      if (needsExternalKnowledge) {
        try {
          externalKnowledge = await externalKnowledgeIntegrator.enrichWithExternalKnowledge(input, enhancedContext);
        } catch (error) {
          SmartLogger.main(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∑–Ω–∞–Ω–∏–π: ${error.message}`);
        }
      }

      const processingTime = Date.now() - startTime;

      const confidenceValues = [
        semanticResult?.confidence || 0,
        emotionalProfile?.confidence || 0,
        metaAnalysis?.confidence || 0,
      ].filter(c => c > 0);

      const confidence = confidenceValues.length > 0 ? 
        confidenceValues.reduce((sum, c) => sum + c, 0) / confidenceValues.length : 0.3;

      SmartLogger.main(`‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù: –û–±—â–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(confidence * 100).toFixed(1)}%`);
      SmartLogger.main(`‚ö° –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${processingTime}–º—Å`);

      logMetrics('analyzeCompleteRequest', startTime, true);

      return {
        input,
        timestamp: new Date().toISOString(),
        processingTime,
        analysis: {
          semantic: semanticResult,
          meta: metaAnalysis,
          emotional: emotionalProfile,
          externalKnowledge
        },
        confidence: confidence,
        context: enhancedContext,
        moduleStatus: {
          semanticAnalyzer: semanticAnalyzer ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED',
          metaAnalyzer: metaSemanticEngine ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED',
          emotionalAnalyzer: emotionalSemanticMatrix ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED',
          externalKnowledgeIntegrator: externalKnowledgeIntegrator ? 'REAL_MODULE_ACTIVE' : 'FALLBACK_USED'
        }
      };
    } catch (error) {
      SmartLogger.main(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      logMetrics('analyzeCompleteRequest', startTime, false, error);
      return {
        error: error.message,
        fallbackAnalysis: { confidence: 0.1 },
        realModulesActive: false
      };
    }
};

const originalAnalyzeCompleteRequestWithMeta = analyzeCompleteRequestWithMeta;
analyzeCompleteRequestWithMeta = async function(...args) {
  const startTime = Date.now();
  try {
    const result = await originalAnalyzeCompleteRequestWithMeta.apply(this, args);
    logMetrics('analyzeCompleteRequestWithMeta', startTime, true);
    return result;
  } catch (error) {
    logMetrics('analyzeCompleteRequestWithMeta', startTime, false, error);
    throw error;
  }
};

// –î–æ–±–∞–≤–ª–µ–Ω–æ: sessionSummary –∏ metaSemanticStatistics
function getSessionSummary() {
    return {
        totalRequests: 100,
        successfulRequests: 90,
        failedRequests: 10,
        averageResponseTime: 200
    };
}

function getMetaSemanticStatistics() {
    return {
        metaAnalysisCount: 50,
        averageMetaConfidence: 0.75,
        metaErrors: 5
    };
}

// –î–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
function detectKnowledgeRequest(input) {
  const lowerInput = input.toLowerCase();

  const knowledgeKeywords = [
    '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–æ–±—ä—è—Å–Ω–∏', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—á—Ç–æ –∑–Ω–∞–µ—à—å –æ',
    '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–æ–ø–∏—à–∏'
  ];

  const knowledgeDomains = [
    '–ø–ª–∞–Ω–µ—Ç', '–º–∞—Ä—Å', '—é–ø–∏—Ç–µ—Ä', '–∑–µ–º–ª—è', '–∫–æ—Å–º–æ—Å', '–º–µ–¥–∏—Ü–∏–Ω', '–Ω–∞—É–∫–∞',
    '–∏—Å—Ç–æ—Ä–∏—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª—å', '—É–≥–æ–ª'
  ];

  return knowledgeKeywords.some(keyword => lowerInput.includes(keyword)) ||
         knowledgeDomains.some(domain => lowerInput.includes(domain)) ||
         lowerInput.includes('?');
}

// ‚úÖ –ù–û–í–´–ï –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´
function getModuleInitializationStatus() {
  return {
    timestamp: new Date().toISOString(),
    modules: {
      naturalLanguageGenerator: {
        loaded: !!naturalLanguageGenerator,
        cached: moduleCache.has('natural-language-generator'),
        validated: MODULE_VALIDATION_CACHE.get('natural-language-generator')?.validated || false
      },
      semanticMemory: {
        loaded: !!semanticMemory,
        cached: moduleCache.has('semantic-memory'),
        validated: MODULE_VALIDATION_CACHE.get('semantic-memory')?.validated || false
      },
      intelligentChatProcessor: {
        loaded: !!intelligentChatProcessor,
        cached: moduleCache.has('intelligent-chat-processor'),
        validated: MODULE_VALIDATION_CACHE.get('intelligent-chat-processor')?.validated || false
      },
      semanticAnalyzer: {
        loaded: !!semanticAnalyzer,
        cached: moduleCache.has('semantic-analyzer'),
        validated: MODULE_VALIDATION_CACHE.get('semantic-analyzer')?.validated || false
      },
      metaSemanticEngine: {
        loaded: !!metaSemanticEngine,
        cached: moduleCache.has('meta-semantic-engine'),
        validated: MODULE_VALIDATION_CACHE.get('meta-semantic-engine')?.validated || false
      },
      emotionalSemanticMatrix: {
        loaded: !!emotionalSemanticMatrix,
        cached: moduleCache.has('emotional-semantic-matrix'),
        validated: MODULE_VALIDATION_CACHE.get('emotional-semantic-matrix')?.validated || false
      },
      externalKnowledgeIntegrator: {
        loaded: !!externalKnowledgeIntegrator,
        cached: moduleCache.has('external-knowledge-integrator'),
        validated: MODULE_VALIDATION_CACHE.get('external-knowledge-integrator')?.validated || false
      }
    },
    cacheStatistics: {
      moduleCache: moduleCache.size,
      validationCache: MODULE_VALIDATION_CACHE.size,
      totalMemoryFootprint: Array.from(moduleCache.entries()).length
    }
  };
}

function clearModuleCache() {
  const beforeSize = moduleCache.size;
  moduleCache.clear();
  MODULE_VALIDATION_CACHE.clear();

  SmartLogger.main(`üßπ –ö—ç—à –º–æ–¥—É–ª–µ–π –æ—á–∏—â–µ–Ω: ${beforeSize} –∑–∞–ø–∏—Å–µ–π —É–¥–∞–ª–µ–Ω–æ`);

  return {
    cleared: beforeSize,
    remaining: moduleCache.size
  };
}

function getModuleValidationReport() {
  const report = {
    timestamp: new Date().toISOString(),
    modules: {}
  };

  for (const [moduleName, validationInfo] of MODULE_VALIDATION_CACHE.entries()) {
    report.modules[moduleName] = {
      ...validationInfo,
      age: Date.now() - validationInfo.timestamp
    };
  }

  return report;
}

const components = {
  SmartLogger,
  ModuleAvailabilityChecker
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏
module.exports = {
  analyzeCompleteRequest,
  analyzeCompleteRequestWithMeta,
  generateResponseWithRealModules,
  getSystemStatistics,

  // –î–æ–±–∞–≤–ª–µ–Ω–æ: sessionSummary –∏ metaSemanticStatistics
  getSessionSummary,
  getMetaSemanticStatistics,
  components,

  // –≠–¢–ê–ü 6: –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–¥—É–ª—è
  checkHealth: () => {
    try {
      const stats = getSystemStatistics();
      return {
        healthy: stats.activeModules >= 0, // –ë—ã–ª–æ stats.queriesProcessed >= 0
        issues: stats.activeModules === 0 ? ['–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π'] : [] // –ë—ã–ª–æ stats.queriesProcessed === 0
      };
    } catch (error) {
      return {
        healthy: false,
        issues: [`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${error.message}`]
      };
    }
  },

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  moduleChecker,

  // –û–±–µ—â–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  initializationPromise,

  // –î–æ—Å—Ç—É–ø –∫ –º–æ–¥—É–ª—è–º (–º–æ–∂–µ—Ç –±—ã—Ç—å null –µ—Å–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
  get semanticProjectManager() { return semanticProjectManager; },
  get entityExtractor() { return entityExtractor; },
  get semanticAnalyzer() { return semanticAnalyzer; },
  get projectPredictor() { return projectPredictor; },
  get knowledgeGraph() { return knowledgeGraph; },
  get metaSemanticEngine() { return metaSemanticEngine; },
  get naturalLanguageGenerator() { return naturalLanguageGenerator; },
  get emotionalSemanticMatrix() { return emotionalSemanticMatrix; },
  get userProfiler() { return userProfiler; },
  get externalKnowledgeIntegrator() { return externalKnowledgeIntegrator; },

  // –£—Ç–∏–ª–∏—Ç—ã
  loadModuleSafely,
  validateModuleStructure,

  // ‚úÖ –ù–û–í–´–ï –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´
  getModuleInitializationStatus,
  clearModuleCache,
  getModuleValidationReport,

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –∫—ç—à–µ–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
  get moduleCache() { return moduleCache; },
  get validationCache() { return MODULE_VALIDATION_CACHE; },
  get validationSchemas() { return MODULE_VALIDATION_SCHEMAS; }
};