/**
 * –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è - Few-Shot Learning
 * –£—á–∏—Ç—Å—è –Ω–∞ —É—Å–ø–µ—à–Ω—ã—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è—Ö –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 * –§–ê–ó–ê 1: –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤
 */

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è ES –º–æ–¥—É–ª–µ–π
let storage = null;

async function getStorage() {
  if (!storage) {
    const storageModule = await import('../storage.ts');
    storage = storageModule.storage;
  }
  return storage;
}

const SmartLogger = {
  learning: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üéìüîÑ [${timestamp}] LEARNING SYSTEM: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
 */
class LearningSystem {
  constructor() {
    this.initialized = false;
    this.learningThreshold = 70; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    this.initializeLearningCategories();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—É—á–µ–Ω–∏—è
   */
  initializeLearningCategories() {
    // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    this.learningCategories = {
      image_generation: {
        keyMetrics: ['user_satisfaction', 'prompt_quality', 'style_match'],
        successIndicators: ['–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∏–º–µ–Ω–Ω–æ —Ç–æ', '–∏–¥–µ–∞–ª—å–Ω–æ'],
        failureIndicators: ['–Ω–µ —Ç–æ', '–ø–ª–æ—Ö–æ', '–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '–ø–µ—Ä–µ–¥–µ–ª–∞–π'],
        weight: 1.2
      },

      image_consultation: {
        keyMetrics: ['advice_relevance', 'solution_practicality', 'user_understanding'],
        successIndicators: ['–ø–æ–Ω—è—Ç–Ω–æ', '–ø–æ–ª–µ–∑–Ω–æ', '–ø–æ–º–æ–∂–µ—Ç', '—Å–ø–∞—Å–∏–±–æ'],
        failureIndicators: ['–Ω–µ –ø–æ–Ω—è–ª', '—Å–ª–æ–∂–Ω–æ', '–Ω–µ –ø–æ–º–æ–≥–∞–µ—Ç'],
        weight: 1.0
      },

      vectorization: {
        keyMetrics: ['output_quality', 'processing_speed', 'user_expectations'],
        successIndicators: ['–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ', '–±—ã—Å—Ç—Ä–æ', '–æ—Ç–ª–∏—á–Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å'],
        failureIndicators: ['–º–µ–¥–ª–µ–Ω–Ω–æ', '–ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', '–æ—à–∏–±–∫–∏'],
        weight: 1.1
      },

      web_search: {
        keyMetrics: ['information_relevance', 'answer_completeness', 'source_credibility'],
        successIndicators: ['–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ', '–ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç', '–∏–º–µ–Ω–Ω–æ —ç—Ç–æ –∏—Å–∫–∞–ª'],
        failureIndicators: ['–Ω–µ —Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–Ω–µ–ø–æ–ª–Ω–æ', '–Ω–µ –ø–æ–º–æ–≥–ª–æ'],
        weight: 0.9
      },

      general_chat: {
        keyMetrics: ['response_helpfulness', 'communication_style', 'problem_solving'],
        successIndicators: ['–ø–æ–º–æ–≥–ª–∏', '–ø–æ–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω–∏–ª–∏', '—Ä–µ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É'],
        failureIndicators: ['–Ω–µ –ø–æ–º–æ–≥–ª–∏', '–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ', '–Ω–µ —Ä–µ—à–∏–ª–∏'],
        weight: 0.8
      }
    };

    SmartLogger.learning('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', {
      categories: Object.keys(this.learningCategories).length
    });
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   */
  async analyzeInteractionSuccess(userId, sessionId, interactionData) {
    try {
      const {
        userRequest,
        systemResponse,
        userFeedback,
        category,
        responseTime,
        additionalMetrics = {}
      } = interactionData;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
      const successAnalysis = this.evaluateSuccess(userFeedback, category);

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –∑–∞–ø—Ä–æ—Å–∞
      const requestPattern = this.extractRequestPattern(userRequest);

      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const contextPattern = await this.analyzeRequestContext(userId, sessionId, userRequest);

      // –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ—Ç–≤–µ—Ç–∞
      const responsePattern = this.createResponsePattern(systemResponse, successAnalysis, additionalMetrics);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –æ–±—É—á–µ–Ω–∏—è
      await this.saveOrUpdateLearningPattern(userId, {
        category,
        requestPattern,
        contextPattern,
        responsePattern,
        successAnalysis,
        responseTime
      });

      SmartLogger.learning(`–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ`, {
        userId,
        category,
        success: successAnalysis.isSuccess,
        confidence: successAnalysis.confidence
      });

      return successAnalysis;
    } catch (error) {
      SmartLogger.learning(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è: ${error.message}`);
      return { isSuccess: false, confidence: 0, reason: 'analysis_error' };
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  async getLearnedRecommendations(userId, currentRequest, category) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —É—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      const db = await getStorage();
      const successfulPatterns = await db.getSuccessfulPatterns(userId, category);

      if (successfulPatterns.length === 0) {
        SmartLogger.learning(`–ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}`);
        return null;
      }

      // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
      const relevantPattern = this.findMostRelevantPattern(currentRequest, successfulPatterns);

      if (!relevantPattern) {
        SmartLogger.learning('–ù–µ –Ω–∞–π–¥–µ–Ω —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω');
        return null;
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
      const recommendations = this.createRecommendationsFromPattern(relevantPattern, currentRequest);

      SmartLogger.learning(`–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–∞`, {
        patternId: relevantPattern.id,
        successRate: relevantPattern.successRate,
        usageCount: relevantPattern.usageCount
      });

      return recommendations;
    } catch (error) {
      SmartLogger.learning(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${error.message}`);
      return null;
    }
  }

  /**
   * –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
   */
  async adaptPromptWithLearning(userId, originalPrompt, category) {
    try {
      const recommendations = await this.getLearnedRecommendations(userId, originalPrompt, category);

      if (!recommendations) {
        return originalPrompt; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      }

      let adaptedPrompt = originalPrompt;

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (recommendations.styleAdjustments) {
        adaptedPrompt = this.applyStyleAdjustments(adaptedPrompt, recommendations.styleAdjustments);
      }

      if (recommendations.additionalElements) {
        adaptedPrompt = this.addRecommendedElements(adaptedPrompt, recommendations.additionalElements);
      }

      if (recommendations.specificPhrases) {
        adaptedPrompt = this.incorporateSuccessfulPhrases(adaptedPrompt, recommendations.specificPhrases);
      }

      SmartLogger.learning(`–ü—Ä–æ–º–ø—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–∏—è`, {
        originalLength: originalPrompt.length,
        adaptedLength: adaptedPrompt.length,
        category
      });

      return {
        adaptedPrompt,
        learningSource: recommendations.source,
        confidence: recommendations.confidence
      };
    } catch (error) {
      SmartLogger.learning(`–û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞: ${error.message}`);
      return originalPrompt;
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
   */
  async updatePatternsWithSuccess(userId, successData) {
    try {
      const { category, requestPattern, responseQuality, specificFactors } = successData;

      // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
      const existingPatterns = await db.getLearningPatterns(userId, category);

      // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
      const similarPattern = this.findSimilarPattern(requestPattern, existingPatterns);

      if (similarPattern) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        const updatedSuccessRate = this.calculateNewSuccessRate(
          similarPattern.successRate,
          similarPattern.usageCount,
          responseQuality
        );

        await db.updateLearningPattern(similarPattern.id, {
          successRate: updatedSuccessRate,
          usageCount: similarPattern.usageCount + 1,
          lastSuccess: new Date(),
          confidence: Math.min(similarPattern.confidence + 5, 100),
          adaptationData: JSON.stringify({
            ...JSON.parse(similarPattern.adaptationData || '{}'),
            lastSuccess: {
              quality: responseQuality,
              factors: specificFactors,
              timestamp: new Date().toISOString()
            }
          })
        });

        SmartLogger.learning(`–û–±–Ω–æ–≤–ª–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω`, {
          patternId: similarPattern.id,
          newSuccessRate: updatedSuccessRate
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        const newPattern = {
          userId,
          patternType: 'success_flow',
          category,
          inputPattern: requestPattern,
          contextPattern: JSON.stringify({}),
          responsePattern: JSON.stringify({
            quality: responseQuality,
            factors: specificFactors
          }),
          successRate: responseQuality,
          usageCount: 1,
          lastSuccess: new Date(),
          confidence: 60,
          adaptationData: JSON.stringify({
            initialSuccess: {
              quality: responseQuality,
              factors: specificFactors,
              timestamp: new Date().toISOString()
            }
          })
        };

        const createdPattern = await db.createLearningPattern(newPattern);
        SmartLogger.learning(`–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω —É—Å–ø–µ—Ö–∞`, { patternId: createdPattern.id });
      }

      return true;
    } catch (error) {
      SmartLogger.learning(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: ${error.message}`);
      return false;
    }
  }

  // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

  evaluateSuccess(userFeedback, category) {
    if (!userFeedback) {
      return { isSuccess: false, confidence: 0, reason: 'no_feedback' };
    }

    const feedback = userFeedback.toLowerCase();
    const categoryConfig = this.learningCategories[category] || this.learningCategories.general_chat;

    let successScore = 0;
    let failureScore = 0;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—Ö–∞
    categoryConfig.successIndicators.forEach(indicator => {
      if (feedback.includes(indicator)) {
        successScore += 1;
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ—É–¥–∞—á–∏
    categoryConfig.failureIndicators.forEach(indicator => {
      if (feedback.includes(indicator)) {
        failureScore += 1;
      }
    });

    const isSuccess = successScore > failureScore;
    const confidence = Math.min((Math.abs(successScore - failureScore) + 1) * 20, 100);

    return {
      isSuccess,
      confidence,
      successScore,
      failureScore,
      reason: isSuccess ? 'positive_feedback' : 'negative_feedback'
    };
  }

  extractRequestPattern(userRequest) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–ø—Ä–æ—Å–∞
    const words = userRequest.toLowerCase().split(' ').filter(word => word.length > 2);
    const keyWords = words.slice(0, 10); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
    let requestType = 'general';
    if (userRequest.includes('—Å–æ–∑–¥–∞–π') || userRequest.includes('—Å–¥–µ–ª–∞–π')) {
      requestType = 'creation';
    } else if (userRequest.includes('–æ–±—ä—è—Å–Ω–∏') || userRequest.includes('—Ä–∞—Å—Å–∫–∞–∂–∏')) {
      requestType = 'explanation';
    } else if (userRequest.includes('–Ω–∞–π–¥–∏') || userRequest.includes('–ø–æ–∏—â–∏')) {
      requestType = 'search';
    }

    return {
      type: requestType,
      keyWords: keyWords,
      length: userRequest.length,
      hasSpecifics: this.hasSpecificRequirements(userRequest)
    };
  }

  hasSpecificRequirements(request) {
    const specificWords = ['—Å—Ç–∏–ª—å', '—Ü–≤–µ—Ç', '—Ä–∞–∑–º–µ—Ä', '—Ñ–æ—Ä–º–∞—Ç', '–∫–∞—á–µ—Å—Ç–≤–æ', '–¥–µ—Ç–∞–ª–∏'];
    return specificWords.some(word => request.toLowerCase().includes(word));
  }

  async analyzeRequestContext(userId, sessionId, userRequest) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
      const recentMessages = await db.getLatestAiMessages(sessionId, 5);

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
      const userProjects = await db.getActiveProjects(userId);

      return {
        hasRecentImages: recentMessages.some(msg => msg.imageUrl),
        activeProjectsCount: userProjects.length,
        dominantProjectType: this.findDominantProjectType(userProjects),
        sessionLength: recentMessages.length,
        timeOfDay: new Date().getHours()
      };
    } catch (error) {
      SmartLogger.learning(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.message}`);
      return {};
    }
  }

  findDominantProjectType(projects) {
    if (projects.length === 0) return null;

    const typeCounts = {};
    projects.forEach(project => {
      typeCounts[project.projectType] = (typeCounts[project.projectType] || 0) + 1;
    });

    return Object.keys(typeCounts).reduce((a, b) => 
      typeCounts[a] > typeCounts[b] ? a : b
    );
  }

  createResponsePattern(systemResponse, successAnalysis, additionalMetrics) {
    return {
      responseLength: systemResponse.length,
      wasSuccessful: successAnalysis.isSuccess,
      successConfidence: successAnalysis.confidence,
      tone: this.detectResponseTone(systemResponse),
      includedElements: this.extractResponseElements(systemResponse),
      metrics: additionalMetrics
    };
  }

  detectResponseTone(response) {
    if (response.includes('!') && response.includes('–æ—Ç–ª–∏—á–Ω–æ')) return 'enthusiastic';
    if (response.includes('–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ') || response.includes('–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ')) return 'professional';
    if (response.includes('–ø–æ–ø—Ä–æ–±—É–π—Ç–µ') || response.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é')) return 'advisory';
    return 'neutral';
  }

  extractResponseElements(response) {
    const elements = [];
    if (response.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é')) elements.push('recommendation');
    if (response.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä')) elements.push('example');
    if (response.includes('–≤–∞–∂–Ω–æ')) elements.push('important_note');
    if (response.includes('–ø–æ–ø—Ä–æ–±—É–π—Ç–µ')) elements.push('suggestion');
    return elements;
  }

  async saveOrUpdateLearningPattern(userId, patternData) {
    try {
      const existingPatterns = await db.getLearningPatterns(userId, patternData.category);

      // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
      const similarPattern = this.findSimilarPattern(patternData.requestPattern, existingPatterns);

      if (similarPattern) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
        const newSuccessRate = this.calculateNewSuccessRate(
          similarPattern.successRate,
          similarPattern.usageCount,
          patternData.successAnalysis.isSuccess ? 100 : 0
        );

        await db.updateLearningPattern(similarPattern.id, {
          successRate: newSuccessRate,
          usageCount: similarPattern.usageCount + 1,
          confidence: Math.min(similarPattern.confidence + 2, 100),
          adaptationData: JSON.stringify({
            ...JSON.parse(similarPattern.adaptationData || '{}'),
            lastInteraction: {
              success: patternData.successAnalysis.isSuccess,
              responseTime: patternData.responseTime,
              timestamp: new Date().toISOString()
            }
          })
        });
      } else {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        const newPattern = {
          userId,
          patternType: 'request_pattern',
          category: patternData.category,
          inputPattern: JSON.stringify(patternData.requestPattern),
          contextPattern: JSON.stringify(patternData.contextPattern),
          responsePattern: JSON.stringify(patternData.responsePattern),
          successRate: patternData.successAnalysis.isSuccess ? 100 : 0,
          usageCount: 1,
          confidence: 50,
          adaptationData: JSON.stringify({
            initialData: {
              success: patternData.successAnalysis.isSuccess,
              responseTime: patternData.responseTime,
              timestamp: new Date().toISOString()
            }
          })
        };

        await db.createLearningPattern(newPattern);
      }

      return true;
    } catch (error) {
      SmartLogger.learning(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞: ${error.message}`);
      return false;
    }
  }

  findSimilarPattern(requestPattern, existingPatterns) {
    if (!existingPatterns || existingPatterns.length === 0) return null;

    for (const pattern of existingPatterns) {
      try {
        const storedPattern = JSON.parse(pattern.inputPattern);
        const similarity = this.calculatePatternSimilarity(requestPattern, storedPattern);

        if (similarity > 0.7) { // 70% —Å—Ö–æ–¥—Å—Ç–≤–∞
          return pattern;
        }
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º JSON
        continue;
      }
    }

    return null;
  }

  calculatePatternSimilarity(pattern1, pattern2) {
    if (!pattern1 || !pattern2) return 0;

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∏–ø—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if (pattern1.type !== pattern2.type) return 0;

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    const words1 = pattern1.keyWords || [];
    const words2 = pattern2.keyWords || [];

    if (words1.length === 0 && words2.length === 0) return 0.5;

    const intersection = words1.filter(word => words2.includes(word));
    const union = [...new Set([...words1, ...words2])];

    const wordSimilarity = intersection.length / union.length;

    // –£—á–∏—Ç—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    const lengthSimilarity = 1 - Math.abs(pattern1.length - pattern2.length) / Math.max(pattern1.length, pattern2.length);
    const specificsSimilarity = pattern1.hasSpecifics === pattern2.hasSpecifics ? 1 : 0;

    return (wordSimilarity * 0.6 + lengthSimilarity * 0.2 + specificsSimilarity * 0.2);
  }

  calculateNewSuccessRate(oldRate, oldCount, newQuality) {
    const newSuccessValue = newQuality > 50 ? 100 : 0;
    return Math.round((oldRate * oldCount + newSuccessValue) / (oldCount + 1));
  }

  findMostRelevantPattern(currentRequest, patterns) {
    if (!patterns || patterns.length === 0) return null;

    const currentPattern = this.extractRequestPattern(currentRequest);
    let bestPattern = null;
    let bestScore = 0;

    for (const pattern of patterns) {
      try {
        const storedPattern = JSON.parse(pattern.inputPattern);
        const similarity = this.calculatePatternSimilarity(currentPattern, storedPattern);

        // –£—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∏ —á–∞—Å—Ç–æ—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        const score = similarity * 0.6 + (pattern.successRate / 100) * 0.3 + Math.min(pattern.usageCount / 10, 1) * 0.1;

        if (score > bestScore && score > 0.5) {
          bestScore = score;
          bestPattern = pattern;
        }
      } catch (error) {
        continue;
      }
    }

    return bestPattern;
  }

  createRecommendationsFromPattern(pattern, currentRequest) {
    try {
      const responsePattern = JSON.parse(pattern.responsePattern);
      const adaptationData = JSON.parse(pattern.adaptationData || '{}');

      return {
        source: {
          patternId: pattern.id,
          successRate: pattern.successRate,
          usageCount: pattern.usageCount
        },
        confidence: pattern.confidence,
        styleAdjustments: {
          tone: responsePattern.tone,
          length: responsePattern.responseLength > 500 ? 'detailed' : 'concise',
          elements: responsePattern.includedElements
        },
        additionalElements: this.extractRecommendedElements(adaptationData),
        specificPhrases: this.extractSuccessfulPhrases(adaptationData)
      };
    } catch (error) {
      SmartLogger.learning(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: ${error.message}`);
      return null;
    }
  }

  extractRecommendedElements(adaptationData) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –ø—Ä–∏–≤–æ–¥–∏–ª–∏ –∫ —É—Å–ø–µ—Ö—É
    const elements = [];

    if (adaptationData.lastSuccess?.factors?.includes('detailed_explanation')) {
      elements.push('–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ');
    }

    if (adaptationData.lastSuccess?.factors?.includes('examples')) {
      elements.push('–ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã');
    }

    return elements;
  }

  extractSuccessfulPhrases(adaptationData) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ñ—Ä–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–ª–∏
    const phrases = [];

    // –ë–∞–∑–æ–≤—ã–µ —Ñ—Ä–∞–∑—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    if (adaptationData.initialData?.success) {
      phrases.push('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å');
      phrases.push('–æ—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä');
    }

    return phrases;
  }

  applyStyleAdjustments(prompt, adjustments) {
    let adjusted = prompt;

    if (adjustments.tone === 'enthusiastic') {
      adjusted = adjusted.replace(/\./g, '!');
    }

    if (adjustments.tone === 'professional') {
      adjusted = '–° –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è: ' + adjusted;
    }

    return adjusted;
  }

  addRecommendedElements(prompt, elements) {
    let enhanced = prompt;

    elements.forEach(element => {
      if (element === '–¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ' && !enhanced.includes('–ø–æ–¥—Ä–æ–±–Ω–æ')) {
        enhanced += ' –ü–æ–¥—Ä–æ–±–Ω–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –∫–∞–∂–¥—ã–π –∞—Å–ø–µ–∫—Ç.';
      }

      if (element === '–ø—Ä–∏–≤–µ—Å—Ç–∏ –ø—Ä–∏–º–µ—Ä—ã' && !enhanced.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä')) {
        enhanced += ' –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–∞–∫–∏–µ –ø–æ–¥—Ö–æ–¥—ã.';
      }
    });

    return enhanced;
  }

  incorporateSuccessfulPhrases(prompt, phrases) {
    let enhanced = prompt;

    phrases.forEach(phrase => {
      if (!enhanced.toLowerCase().includes(phrase.toLowerCase())) {
        enhanced = phrase.charAt(0).toUpperCase() + phrase.slice(1) + ': ' + enhanced;
      }
    });

    return enhanced;
  }
  
  /**
   * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π (–§–∞–∑–∞ 2)
   */
  analyzeInteractionSuccess(userQuery, aiResponse, userFeedback = null) {
    const analysis = {
      query: userQuery,
      response: aiResponse,
      feedback: userFeedback,
      timestamp: Date.now(),
      metrics: {},
      // –ù–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –§–∞–∑—ã 2
      interactionFlow: this.analyzeInteractionFlow(userQuery, aiResponse),
      userSatisfaction: this.calculateUserSatisfaction(userFeedback),
      responseQuality: this.assessResponseQuality(aiResponse),
      contextRelevance: this.measureContextRelevance(userQuery, aiResponse),
      taskCompletion: this.evaluateTaskCompletion(userQuery, aiResponse)
    };
  }
}

module.exports = new LearningSystem();