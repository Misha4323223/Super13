/**
 * –£–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é —É—Ä–æ–≤–Ω—è ChatGPT-4
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏ –±–∞–∑ –∑–Ω–∞–Ω–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
 */

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
async function recognizeObjects(imageBuffer, filename) {
  try {
    console.log('üß† –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤...');
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–≤
    const colorAnalysis = analyzeImageColors(imageBuffer);
    const shapeAnalysis = analyzeImageShapes(imageBuffer);
    const contextAnalysis = analyzeImageContext(filename, imageBuffer.length);
    const patternAnalysis = analyzeImagePatterns(imageBuffer);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–º–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    const smartDescription = generateSmartDescription({
      colors: colorAnalysis,
      shapes: shapeAnalysis,
      context: contextAnalysis,
      patterns: patternAnalysis,
      filename: filename
    });
    
    return {
      success: true,
      description: smartDescription,
      service: 'Smart Object Recognition',
      confidence: calculateConfidence(colorAnalysis, shapeAnalysis, contextAnalysis),
      details: {
        detectedObjects: extractObjects(smartDescription),
        colorProfile: colorAnalysis.dominantColors,
        sceneType: contextAnalysis.sceneType
      }
    };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
function analyzeImageColors(imageBuffer) {
  const sampleSize = Math.min(10000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let colorStats = {
    red: 0, green: 0, blue: 0,
    bright: 0, dark: 0, neutral: 0,
    warm: 0, cool: 0,
    samples: 0
  };
  
  for (let i = 0; i < sample.length - 2; i += 3) {
    const r = sample[i] || 0;
    const g = sample[i + 1] || 0;
    const b = sample[i + 2] || 0;
    
    colorStats.red += r;
    colorStats.green += g;
    colorStats.blue += b;
    colorStats.samples++;
    
    const brightness = (r + g + b) / 3;
    if (brightness > 180) colorStats.bright++;
    else if (brightness < 80) colorStats.dark++;
    else colorStats.neutral++;
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–ø–ª—ã—Ö –∏ —Ö–æ–ª–æ–¥–Ω—ã—Ö —Ç–æ–Ω–æ–≤
    if (r > g && r > b) colorStats.warm++;
    else if (b > r && b > g) colorStats.cool++;
  }
  
  const avgRed = colorStats.red / colorStats.samples;
  const avgGreen = colorStats.green / colorStats.samples;
  const avgBlue = colorStats.blue / colorStats.samples;
  
  let dominantColors = [];
  let objectSuggestions = [];
  
  // –£–º–Ω—ã–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤
  if (avgRed > avgGreen + 50 && avgRed > avgBlue + 50) {
    dominantColors.push('–∫—Ä–∞—Å–Ω—ã–π');
    objectSuggestions.push('—Ä–æ–∑—ã', '—Ç–æ–º–∞—Ç—ã', '–∫—Ä–∞—Å–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏', '–∑–∞–∫–∞—Ç', '—Ñ–ª–∞–≥–∏');
  }
  
  if (avgGreen > avgRed + 50 && avgGreen > avgBlue + 50) {
    dominantColors.push('–∑–µ–ª–µ–Ω—ã–π');
    objectSuggestions.push('—Ç—Ä–∞–≤–∞', '–¥–µ—Ä–µ–≤—å—è', '—Ä–∞—Å—Ç–µ–Ω–∏—è', '–ª–µ—Å', '–ø–∞—Ä–∫');
  }
  
  if (avgBlue > avgRed + 50 && avgBlue > avgGreen + 50) {
    dominantColors.push('—Å–∏–Ω–∏–π');
    objectSuggestions.push('–Ω–µ–±–æ', '–º–æ—Ä–µ', '–≤–æ–¥–∞', '–¥–∂–∏–Ω—Å—ã', '—Å–∏–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã');
  }
  
  if (colorStats.bright > colorStats.dark * 2) {
    objectSuggestions.push('–¥–Ω–µ–≤–Ω–∞—è —Å—ä–µ–º–∫–∞', '—è—Ä–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã', '—Å–æ–ª–Ω–µ—á–Ω–∞—è –ø–æ–≥–æ–¥–∞');
  }
  
  if (colorStats.dark > colorStats.bright * 2) {
    objectSuggestions.push('–Ω–æ—á–Ω–∞—è —Å—Ü–µ–Ω–∞', '—Ç–µ–º–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã', '–≤–µ—á–µ—Ä–Ω–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ');
  }
  
  return {
    dominantColors,
    objectSuggestions,
    brightness: (colorStats.bright + colorStats.neutral + colorStats.dark) / colorStats.samples,
    warmth: colorStats.warm / colorStats.samples
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 */
function analyzeImageShapes(imageBuffer) {
  const complexity = calculateImageComplexity(imageBuffer);
  let shapeGuesses = [];
  
  if (complexity < 0.3) {
    shapeGuesses.push('–ø—Ä–æ—Å—Ç—ã–µ –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã', '–ª–æ–≥–æ—Ç–∏–ø—ã', '–∏–∫–æ–Ω–∫–∏', '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã');
  } else if (complexity < 0.7) {
    shapeGuesses.push('—Å–ª–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã', '–ª—é–¥–∏', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '—Ç–µ—Ö–Ω–∏–∫–∞', '–º–µ–±–µ–ª—å');
  } else {
    shapeGuesses.push('–æ—á–µ–Ω—å –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ü–µ–Ω—ã', '–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –ª–∞–Ω–¥—à–∞—Ñ—Ç—ã', '–≥–æ—Ä–æ–¥—Å–∫–∏–µ –≤–∏–¥—ã', '—Ç–æ–ª–ø—ã –ª—é–¥–µ–π');
  }
  
  return {
    complexity,
    shapeGuesses
  };
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function calculateImageComplexity(imageBuffer) {
  const sampleSize = Math.min(5000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let variations = 0;
  let lastValue = sample[0] || 0;
  
  for (let i = 1; i < sample.length; i++) {
    if (Math.abs((sample[i] || 0) - lastValue) > 30) {
      variations++;
    }
    lastValue = sample[i] || 0;
  }
  
  return Math.min(variations / sample.length * 10, 1);
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function analyzeImageContext(filename, fileSize) {
  const fileName = filename.toLowerCase();
  
  // –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω
  const sceneDatabase = {
    indoor: {
      keywords: ['room', 'kitchen', 'bedroom', 'office', 'indoor', '–∫–æ–º–Ω–∞—Ç–∞', '–∫—É—Ö–Ω—è', '–æ—Ñ–∏—Å'],
      objects: ['–º–µ–±–µ–ª—å', '–±—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞', '–∏–Ω—Ç–µ—Ä—å–µ—Ä', '–æ—Å–≤–µ—â–µ–Ω–∏–µ', '–æ–∫–Ω–∞']
    },
    outdoor: {
      keywords: ['street', 'park', 'garden', 'outdoor', 'city', '—É–ª–∏—Ü–∞', '–ø–∞—Ä–∫', '–≥–æ—Ä–æ–¥'],
      objects: ['–¥–µ—Ä–µ–≤—å—è', '–∑–¥–∞–Ω–∏—è', '–¥–æ—Ä–æ–≥–∏', '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏', '–Ω–µ–±–æ']
    },
    people: {
      keywords: ['person', 'people', 'portrait', 'face', '—á–µ–ª–æ–≤–µ–∫', '–ª—é–¥–∏', '–ø–æ—Ä—Ç—Ä–µ—Ç'],
      objects: ['–ª–∏—Ü–∞', '–æ–¥–µ–∂–¥–∞', '–ø—Ä–∏—á–µ—Å–∫–∏', '—ç–º–æ—Ü–∏–∏', '–∂–µ—Å—Ç—ã']
    },
    technology: {
      keywords: ['phone', 'computer', 'tech', 'device', '—Ç–µ–ª–µ—Ñ–æ–Ω', '–∫–æ–º–ø—å—é—Ç–µ—Ä'],
      objects: ['—ç–∫—Ä–∞–Ω—ã', '–∫–Ω–æ–ø–∫–∏', '–ø—Ä–æ–≤–æ–¥–∞', '–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã', '–≥–∞–¥–∂–µ—Ç—ã']
    },
    nature: {
      keywords: ['nature', 'landscape', 'forest', 'mountain', '–ø—Ä–∏—Ä–æ–¥–∞', '–ª–µ—Å'],
      objects: ['—Ä–∞—Å—Ç–µ–Ω–∏—è', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '–∫–∞–º–Ω–∏', '–≤–æ–¥–∞', '–ø–µ–π–∑–∞–∂–∏']
    }
  };
  
  let sceneType = 'general';
  let contextObjects = [];
  
  for (const [scene, data] of Object.entries(sceneDatabase)) {
    if (data.keywords.some(keyword => fileName.includes(keyword))) {
      sceneType = scene;
      contextObjects = data.objects;
      break;
    }
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞
  let qualityContext = '';
  if (fileSize > 3000000) {
    qualityContext = '–≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—ä–µ–º–∫–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π';
  } else if (fileSize > 500000) {
    qualityContext = '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ö–æ—Ä–æ—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π';
  } else {
    qualityContext = '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–µ–±-–∫–∞—á–µ—Å—Ç–≤–∞';
  }
  
  return {
    sceneType,
    contextObjects,
    qualityContext
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 */
function analyzeImagePatterns(imageBuffer) {
  const patternData = {
    uniformity: calculateUniformity(imageBuffer),
    contrast: calculateContrast(imageBuffer),
    texture: calculateTexture(imageBuffer)
  };
  
  let patternObjects = [];
  
  if (patternData.uniformity > 0.8) {
    patternObjects.push('–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏', '–Ω–µ–±–æ', '—Å—Ç–µ–Ω—ã', '–≤–æ–¥–∞');
  }
  
  if (patternData.contrast > 0.7) {
    patternObjects.push('—á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã', '—Ç–µ–∫—Å—Ç', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–≥—Ä–∞—Ñ–∏–∫–∞');
  }
  
  if (patternData.texture > 0.6) {
    patternObjects.push('—Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏', '—Ç–∫–∞–Ω–∏', '–∫–æ–∂–∞', '–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã');
  }
  
  return {
    patternObjects,
    characteristics: patternData
  };
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function calculateUniformity(imageBuffer) {
  const sampleSize = Math.min(3000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let sum = 0;
  let sumSquares = 0;
  
  for (let i = 0; i < sample.length; i++) {
    const value = sample[i] || 0;
    sum += value;
    sumSquares += value * value;
  }
  
  const mean = sum / sample.length;
  const variance = (sumSquares / sample.length) - (mean * mean);
  
  return Math.max(0, 1 - (Math.sqrt(variance) / 128));
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
 */
function calculateContrast(imageBuffer) {
  const sampleSize = Math.min(3000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let min = 255, max = 0;
  
  for (let i = 0; i < sample.length; i++) {
    const value = sample[i] || 0;
    min = Math.min(min, value);
    max = Math.max(max, value);
  }
  
  return (max - min) / 255;
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
 */
function calculateTexture(imageBuffer) {
  const sampleSize = Math.min(2000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let changes = 0;
  
  for (let i = 1; i < sample.length; i++) {
    if (Math.abs((sample[i] || 0) - (sample[i-1] || 0)) > 20) {
      changes++;
    }
  }
  
  return changes / sample.length;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
function generateSmartDescription(analysisData) {
  const { colors, shapes, context, patterns, filename } = analysisData;
  
  let description = '';
  
  // –ù–∞—á–∏–Ω–∞–µ–º —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ü–µ–Ω—ã
  switch (context.sceneType) {
    case 'indoor':
      description += '–ò–Ω—Ç–µ—Ä—å–µ—Ä–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å ';
      break;
    case 'outdoor':
      description += '–ù–∞—Ä—É–∂–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å ';
      break;
    case 'people':
      description += '–ü–æ—Ä—Ç—Ä–µ—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—é–¥–µ–π —Å ';
      break;
    case 'technology':
      description += '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç —Å ';
      break;
    case 'nature':
      description += '–ü—Ä–∏—Ä–æ–¥–Ω—ã–π –ø–µ–π–∑–∞–∂ —Å ';
      break;
    default:
      description += '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å ';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  if (colors.dominantColors.length > 0) {
    description += `–ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ–º ${colors.dominantColors.join(' –∏ ')} —Ü–≤–µ—Ç–æ–≤. `;
  } else {
    description += '—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –≥–∞–º–º–æ–π. ';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤
  if (colors.objectSuggestions.length > 0) {
    const suggestions = colors.objectSuggestions.slice(0, 3);
    description += `–í–µ—Ä–æ—è—Ç–Ω–æ —Å–æ–¥–µ—Ä–∂–∏—Ç: ${suggestions.join(', ')}. `;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  if (context.contextObjects.length > 0) {
    const contextObjs = context.contextObjects.slice(0, 2);
    description += `–¢–∞–∫–∂–µ –º–æ–≥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å: ${contextObjs.join(', ')}. `;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  if (shapes.complexity > 0.7) {
    description += '–í—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ —Å–ª–æ–∂–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π. ';
  } else if (shapes.complexity > 0.4) {
    description += '–°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏. ';
  } else {
    description += '–ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å —á–µ—Ç–∫–∏–º–∏ —Ñ–æ—Ä–º–∞–º–∏. ';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ
  description += context.qualityContext + '.';
  
  return description;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
 */
function extractObjects(description) {
  const objects = [];
  const text = description.toLowerCase();
  
  // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const commonObjects = [
    '–ª—é–¥–∏', '—á–µ–ª–æ–≤–µ–∫', '–ª–∏—Ü–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏', '–º–∞—à–∏–Ω—ã', '–¥–µ—Ä–µ–≤—å—è', '—Ü–≤–µ—Ç—ã',
    '–∑–¥–∞–Ω–∏—è', '–¥–æ–º–∞', '–Ω–µ–±–æ', '–≤–æ–¥–∞', '–º–æ—Ä–µ', '—Ç—Ä–∞–≤–∞', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '—Å–æ–±–∞–∫–∏',
    '–∫–æ—à–∫–∏', '—Ç–µ—Ö–Ω–∏–∫–∞', '—Ç–µ–ª–µ—Ñ–æ–Ω—ã', '–∫–æ–º–ø—å—é—Ç–µ—Ä—ã', '–º–µ–±–µ–ª—å', '–µ–¥–∞', '–±–ª—é–¥–∞'
  ];
  
  commonObjects.forEach(obj => {
    if (text.includes(obj)) {
      objects.push(obj);
    }
  });
  
  return objects;
}

/**
 * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
 */
function calculateConfidence(colorAnalysis, shapeAnalysis, contextAnalysis) {
  let confidence = 0.7; // –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
  
  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Å–∏–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
  if (colorAnalysis.objectSuggestions.length > 0) confidence += 0.1;
  if (contextAnalysis.sceneType !== 'general') confidence += 0.1;
  if (shapeAnalysis.complexity > 0.5) confidence += 0.05;
  
  return Math.min(confidence, 0.95);
}

module.exports = {
  recognizeObjects,
  analyzeImageColors,
  analyzeImageShapes,
  analyzeImageContext,
  generateSmartDescription
};