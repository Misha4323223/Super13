/**
 * AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–∏–∑–∞–π–Ω–æ–≤ –≤—ã—à–∏–≤–∫–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const sharp = require('sharp');
const fs = require('fs').promises;
const path = require('path');

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
async function analyzeImageForEmbroidery(imageBuffer, originalPrompt) {
  try {
    console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã—à–∏–≤–∫–∏...');
    
    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const metadata = await sharp(imageBuffer).metadata();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const complexityAnalysis = await analyzeImageComplexity(imageBuffer);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
    const colorAnalysis = await analyzeColors(imageBuffer);
    
    // –ü–æ–ª—É—á–∞–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const aiRecommendations = await getAIOptimizationRecommendations(
      complexityAnalysis, 
      colorAnalysis, 
      originalPrompt
    );
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
    const optimizationReport = {
      imageInfo: {
        width: metadata.width,
        height: metadata.height,
        channels: metadata.channels
      },
      complexity: complexityAnalysis,
      colors: colorAnalysis,
      recommendations: aiRecommendations,
      optimizedSettings: calculateOptimalSettings(complexityAnalysis, colorAnalysis)
    };
    
    console.log('‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω');
    return optimizationReport;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ AI-–∞–Ω–∞–ª–∏–∑–µ:', error);
    return null;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeImageComplexity(imageBuffer) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const { channels, density, width, height } = await sharp(imageBuffer).metadata();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∞—è –∏ –∫–æ–Ω—Ç—É—Ä—ã
    const edges = await sharp(imageBuffer)
      .greyscale()
      .convolve({
        width: 3,
        height: 3,
        kernel: [-1, -1, -1, -1, 8, -1, -1, -1, -1]
      })
      .toBuffer();
    
    const edgeStats = await sharp(edges).stats();
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const totalPixels = width * height;
    const edgeIntensity = edgeStats.channels[0].mean;
    
    let complexityLevel = '–ø—Ä–æ—Å—Ç–æ–π';
    if (edgeIntensity > 100) complexityLevel = '—Å–ª–æ–∂–Ω—ã–π';
    else if (edgeIntensity > 50) complexityLevel = '—Å—Ä–µ–¥–Ω–∏–π';
    
    return {
      level: complexityLevel,
      edgeIntensity: Math.round(edgeIntensity),
      totalPixels,
      suitableForEmbroidery: edgeIntensity < 120, // –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–Ω—Ç—É—Ä—ã –ª—É—á—à–µ –¥–ª—è –≤—ã—à–∏–≤–∫–∏
      recommendedSimplification: edgeIntensity > 80
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:', error);
    return { level: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ', error: error.message };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeColors(imageBuffer) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–Ω–∞–ª–∞–º
    const stats = await sharp(imageBuffer).stats();
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤
    const smallImage = await sharp(imageBuffer)
      .resize(100, 100, { fit: 'inside' })
      .raw()
      .toBuffer();
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
    const dominantColors = extractDominantColors(smallImage);
    
    // –û—Ü–µ–Ω–∏–≤–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã—à–∏–≤–∫–∏
    const embroideryScore = calculateEmbroideryColorScore(dominantColors);
    
    return {
      totalColors: dominantColors.length,
      dominantColors: dominantColors.slice(0, 8), // –¢–æ–ø-8 —Ü–≤–µ—Ç–æ–≤
      embroideryScore,
      recommendedColors: Math.min(dominantColors.length, 15), // –ú–∞–∫—Å–∏–º—É–º 15 –¥–ª—è DST
      needsColorReduction: dominantColors.length > 15,
      brightness: Math.round(stats.channels[0].mean),
      contrast: Math.round(stats.channels[0].stdev)
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤:', error);
    return { totalColors: 0, error: error.message };
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function extractDominantColors(imageBuffer) {
  const colors = new Map();
  
  // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ —Ü–≤–µ—Ç–æ–≤
  for (let i = 0; i < imageBuffer.length; i += 3) {
    const r = Math.floor(imageBuffer[i] / 32) * 32;
    const g = Math.floor(imageBuffer[i + 1] / 32) * 32;
    const b = Math.floor(imageBuffer[i + 2] / 32) * 32;
    
    const colorKey = `${r},${g},${b}`;
    colors.set(colorKey, (colors.get(colorKey) || 0) + 1);
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  return Array.from(colors.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, 20)
    .map(([color, count]) => {
      const [r, g, b] = color.split(',').map(Number);
      return { r, g, b, count, hex: `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}` };
    });
}

/**
 * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏
 */
function calculateEmbroideryColorScore(colors) {
  let score = 100;
  
  // –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤
  if (colors.length > 15) score -= (colors.length - 15) * 5;
  
  // –®—Ç—Ä–∞—Ñ—É–µ–º –∑–∞ —Å–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞
  for (let i = 0; i < colors.length; i++) {
    for (let j = i + 1; j < colors.length; j++) {
      const diff = colorDifference(colors[i], colors[j]);
      if (diff < 50) score -= 10; // –°–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞
    }
  }
  
  return Math.max(0, Math.min(100, score));
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ü–≤–µ—Ç–∞–º–∏
 */
function colorDifference(color1, color2) {
  const dr = color1.r - color2.r;
  const dg = color1.g - color2.g;
  const db = color1.b - color2.b;
  return Math.sqrt(dr * dr + dg * dg + db * db);
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
async function getAIOptimizationRecommendations(complexity, colors, originalPrompt) {
  const recommendations = [];
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  if (complexity.recommendedSimplification) {
    recommendations.push({
      type: 'simplification',
      priority: '–≤—ã—Å–æ–∫–∏–π',
      message: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã—à–∏–≤–∫–∏',
      action: '–£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π'
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ü–≤–µ—Ç–∞–º
  if (colors.needsColorReduction) {
    recommendations.push({
      type: 'colors',
      priority: '—Å—Ä–µ–¥–Ω–∏–π',
      message: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ü–≤–µ—Ç–æ–≤ (${colors.totalColors}). –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–æ–∫—Ä–∞—Ç–∏—Ç—å –¥–æ ${colors.recommendedColors}`,
      action: '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞'
    });
  }
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
  if (colors.contrast < 30) {
    recommendations.push({
      type: 'contrast',
      priority: '—Å—Ä–µ–¥–Ω–∏–π',
      message: '–ù–∏–∑–∫–∏–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç –º–æ–∂–µ—Ç –∑–∞—Ç—Ä—É–¥–Ω–∏—Ç—å –≤—ã—à–∏–≤–∫—É',
      action: '–£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏'
    });
  }
  
  // AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π
  const promptRecommendations = analyzePromptForEmbroidery(originalPrompt);
  recommendations.push(...promptRecommendations);
  
  return recommendations;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –≤—ã—à–∏–≤–∫–∏
 */
function analyzePromptForEmbroidery(prompt) {
  const recommendations = [];
  const lowerPrompt = prompt.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –≤—ã—à–∏–≤–∫–∏
  const embroideryKeywords = ['–ø—Ä–æ—Å—Ç–æ–π', '—á–µ—Ç–∫–∏–π', '–∫–æ–Ω—Ç—É—Ä', '–≤—ã—à–∏–≤–∫–∞', '—Å—Ö–µ–º–∞'];
  const hasEmbroideryTerms = embroideryKeywords.some(keyword => lowerPrompt.includes(keyword));
  
  if (!hasEmbroideryTerms) {
    recommendations.push({
      type: 'prompt',
      priority: '–Ω–∏–∑–∫–∏–π',
      message: '–ü—Ä–æ–º–ø—Ç –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–æ–≤ –≤—ã—à–∏–≤–∫–∏',
      action: '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞: "–ø—Ä–æ—Å—Ç–æ–π –¥–∏–∑–∞–π–Ω", "—á–µ—Ç–∫–∏–µ –∫–æ–Ω—Ç—É—Ä—ã", "–¥–ª—è –≤—ã—à–∏–≤–∫–∏"'
    });
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–æ–∂–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  const complexTerms = ['—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π', '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è', '–¥–µ—Ç–∞–ª—å–Ω—ã–π', '–≥—Ä–∞–¥–∏–µ–Ω—Ç'];
  const hasComplexTerms = complexTerms.some(term => lowerPrompt.includes(term));
  
  if (hasComplexTerms) {
    recommendations.push({
      type: 'prompt',
      priority: '–≤—ã—Å–æ–∫–∏–π',
      message: '–ü—Ä–æ–º–ø—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ—Ä–º–∏–Ω—ã, —É—Å–ª–æ–∂–Ω—è—é—â–∏–µ –≤—ã—à–∏–≤–∫—É',
      action: '–ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞: "–ø—Ä–æ—Å—Ç–æ–π", "—Å—Ö–µ–º–∞—Ç–∏—á–Ω—ã–π", "—Å —á–µ—Ç–∫–∏–º–∏ –ª–∏–Ω–∏—è–º–∏"'
    });
  }
  
  return recommendations;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—ã—à–∏–≤–∫–∏
 */
function calculateOptimalSettings(complexity, colors) {
  return {
    recommendedFormat: 'dst', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Tajima DST
    maxColors: Math.min(colors.recommendedColors, 15),
    stitchDensity: complexity.level === '–ø—Ä–æ—Å—Ç–æ–π' ? '–Ω–æ—Ä–º–∞–ª—å–Ω–∞—è' : '–Ω–∏–∑–∫–∞—è',
    needsSimplification: complexity.recommendedSimplification,
    optimalSize: {
      width: complexity.level === '—Å–ª–æ–∂–Ω—ã–π' ? 300 : 400,
      height: complexity.level === '—Å–ª–æ–∂–Ω—ã–π' ? 300 : 400
    }
  };
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 */
async function applyAIOptimizations(imageBuffer, optimizationReport) {
  try {
    console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    let processedImage = sharp(imageBuffer);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ø—Ä–æ—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è
    if (optimizationReport.optimizedSettings.needsSimplification) {
      // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
      processedImage = processedImage.blur(1);
    }
    
    // –£–ª—É—á—à–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (optimizationReport.colors.contrast < 30) {
      processedImage = processedImage.normalise();
    }
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
    const optimalSize = optimizationReport.optimizedSettings.optimalSize;
    processedImage = processedImage.resize(optimalSize.width, optimalSize.height, {
      fit: 'inside',
      withoutEnlargement: true
    });
    
    const optimizedBuffer = await processedImage.toBuffer();
    
    console.log('‚úÖ AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã');
    return optimizedBuffer;
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π:', error);
    return imageBuffer; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
 */
function generateOptimizationReport(report, originalPrompt) {
  if (!report) return '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
  
  let reportText = `ü§ñ **AI-–∞–Ω–∞–ª–∏–∑ –¥–∏–∑–∞–π–Ω–∞ –≤—ã—à–∏–≤–∫–∏:**\n\n`;
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
  reportText += `üìä **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**\n`;
  reportText += `‚Ä¢ –†–∞–∑–º–µ—Ä: ${report.imageInfo.width}√ó${report.imageInfo.height}px\n`;
  reportText += `‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${report.complexity.level}\n`;
  reportText += `‚Ä¢ –¶–≤–µ—Ç–æ–≤: ${report.colors.totalColors}\n`;
  reportText += `‚Ä¢ –û—Ü–µ–Ω–∫–∞ –¥–ª—è –≤—ã—à–∏–≤–∫–∏: ${report.colors.embroideryScore}/100\n\n`;
  
  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (report.recommendations.length > 0) {
    reportText += `üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:**\n`;
    
    const highPriority = report.recommendations.filter(r => r.priority === '–≤—ã—Å–æ–∫–∏–π');
    const mediumPriority = report.recommendations.filter(r => r.priority === '—Å—Ä–µ–¥–Ω–∏–π');
    const lowPriority = report.recommendations.filter(r => r.priority === '–Ω–∏–∑–∫–∏–π');
    
    if (highPriority.length > 0) {
      reportText += `\nüî¥ **–í–∞–∂–Ω—ã–µ:**\n`;
      highPriority.forEach(rec => {
        reportText += `‚Ä¢ ${rec.message}\n  *${rec.action}*\n`;
      });
    }
    
    if (mediumPriority.length > 0) {
      reportText += `\nüü° **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ:**\n`;
      mediumPriority.forEach(rec => {
        reportText += `‚Ä¢ ${rec.message}\n  *${rec.action}*\n`;
      });
    }
    
    if (lowPriority.length > 0) {
      reportText += `\nüü¢ **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:**\n`;
      lowPriority.forEach(rec => {
        reportText += `‚Ä¢ ${rec.message}\n  *${rec.action}*\n`;
      });
    }
  } else {
    reportText += `‚úÖ **–î–∏–∑–∞–π–Ω –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è –≤—ã—à–∏–≤–∫–∏!**\n`;
  }
  
  // –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  reportText += `\n‚öôÔ∏è **–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n`;
  reportText += `‚Ä¢ –§–æ—Ä–º–∞—Ç: ${report.optimizedSettings.recommendedFormat.toUpperCase()}\n`;
  reportText += `‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ü–≤–µ—Ç–æ–≤: ${report.optimizedSettings.maxColors}\n`;
  reportText += `‚Ä¢ –ü–ª–æ—Ç–Ω–æ—Å—Ç—å —Å—Ç–µ–∂–∫–æ–≤: ${report.optimizedSettings.stitchDensity}\n`;
  reportText += `‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ä–∞–∑–º–µ—Ä: ${report.optimizedSettings.optimalSize.width}√ó${report.optimizedSettings.optimalSize.height}–º–º\n`;
  
  return reportText;
}

module.exports = {
  analyzeImageForEmbroidery,
  applyAIOptimizations,
  generateOptimizationReport
};