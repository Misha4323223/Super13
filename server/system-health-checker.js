/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
 * –í–∫–ª—é—á–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 5006
 */

const fetch = require('node-fetch');
const fs = require('fs').promises;
const path = require('path');

class SystemHealthChecker {
  constructor() {
    this.components = {
      mainServer: { port: 5000, name: 'Main Server' },
      streamServer: { port: 5001, name: 'Stream Server' },
      g4fProvider: { port: 5004, name: 'G4F Provider' },
      vectorizer: { port: 5006, name: 'Vectorizer Server' }
    };
  }

  async checkComponentHealth(component) {
    const { port, name } = component;
    const baseUrl = `http://localhost:${port}`;
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π endpoint
      const response = await fetch(baseUrl, {
        timeout: 3000
      });
      
      const status = response.ok ? 'healthy' : 'unhealthy';
      
      return {
        name,
        port,
        status,
        responseTime: Date.now(),
        accessible: true
      };
    } catch (error) {
      return {
        name,
        port,
        status: 'unreachable',
        error: error.message,
        accessible: false
      };
    }
  }

  async checkVectorizerEndpoints() {
    const vectorizerBase = 'http://localhost:5006/api/vectorizer';
    const endpoints = [
      '/health',
      '/formats'
    ];

    const results = {};
    
    for (const endpoint of endpoints) {
      try {
        const response = await fetch(`${vectorizerBase}${endpoint}`, {
          timeout: 3000
        });
        
        results[endpoint] = {
          status: response.ok ? 'available' : 'error',
          statusCode: response.status,
          accessible: true
        };
      } catch (error) {
        results[endpoint] = {
          status: 'unreachable',
          error: error.message,
          accessible: false
        };
      }
    }
    
    return results;
  }

  async checkFileSystem() {
    const requiredDirs = ['output', 'temp', 'uploads'];
    const results = {};
    
    for (const dir of requiredDirs) {
      try {
        await fs.access(dir);
        results[dir] = { exists: true, accessible: true };
      } catch (error) {
        try {
          await fs.mkdir(dir, { recursive: true });
          results[dir] = { exists: true, created: true, accessible: true };
        } catch (createError) {
          results[dir] = { exists: false, error: createError.message, accessible: false };
        }
      }
    }
    
    return results;
  }

  async performFullHealthCheck() {
    console.log('üè• –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã...\n');
    
    const results = {
      timestamp: new Date().toISOString(),
      components: {},
      vectorizerEndpoints: {},
      filesystem: {},
      summary: {
        total: 0,
        healthy: 0,
        unhealthy: 0,
        unreachable: 0
      }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:');
    for (const [key, component] of Object.entries(this.components)) {
      const health = await this.checkComponentHealth(component);
      results.components[key] = health;
      results.summary.total++;
      
      if (health.status === 'healthy') {
        results.summary.healthy++;
        console.log(`  ‚úÖ ${health.name} (–ø–æ—Ä—Ç ${health.port}) - OK`);
      } else if (health.status === 'unhealthy') {
        results.summary.unhealthy++;
        console.log(`  ‚ö†Ô∏è ${health.name} (–ø–æ—Ä—Ç ${health.port}) - –ü—Ä–æ–±–ª–µ–º—ã`);
      } else {
        results.summary.unreachable++;
        console.log(`  ‚ùå ${health.name} (–ø–æ—Ä—Ç ${health.port}) - –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä endpoints
    console.log('\nüé® –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞:');
    if (results.components.vectorizer.accessible) {
      results.vectorizerEndpoints = await this.checkVectorizerEndpoints();
      
      for (const [endpoint, status] of Object.entries(results.vectorizerEndpoints)) {
        if (status.accessible) {
          console.log(`  ‚úÖ ${endpoint} - –¥–æ—Å—Ç—É–ø–µ–Ω`);
        } else {
          console.log(`  ‚ùå ${endpoint} - –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
        }
      }
    } else {
      console.log('  ‚ùå –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ endpoints');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã:');
    results.filesystem = await this.checkFileSystem();
    
    for (const [dir, status] of Object.entries(results.filesystem)) {
      if (status.accessible) {
        const created = status.created ? ' (—Å–æ–∑–¥–∞–Ω–∞)' : '';
        console.log(`  ‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir}${created} - OK`);
      } else {
        console.log(`  ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dir} - –û—à–∏–±–∫–∞: ${status.error}`);
      }
    }

    // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    console.log('\nüìä –°–≤–æ–¥–∫–∞:');
    console.log(`  –í—Å–µ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: ${results.summary.total}`);
    console.log(`  –†–∞–±–æ—Ç–∞–µ—Ç: ${results.summary.healthy}`);
    console.log(`  –ü—Ä–æ–±–ª–µ–º—ã: ${results.summary.unhealthy}`);
    console.log(`  –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ: ${results.summary.unreachable}`);
    
    const allHealthy = results.summary.healthy === results.summary.total;
    console.log(`\n${allHealthy ? '‚úÖ' : '‚ö†Ô∏è'} –°–∏—Å—Ç–µ–º–∞ ${allHealthy ? '–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–∞' : '—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}`);

    return results;
  }

  async saveHealthReport(results) {
    const reportPath = path.join(__dirname, '..', 'system-health-report.json');
    try {
      await fs.writeFile(reportPath, JSON.stringify(results, null, 2));
      console.log(`\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${reportPath}`);
    } catch (error) {
      console.log(`\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: ${error.message}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const checker = new SystemHealthChecker();
  checker.performFullHealthCheck()
    .then(results => checker.saveHealthReport(results))
    .catch(error => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:', error);
      process.exit(1);
    });
}

module.exports = { SystemHealthChecker };