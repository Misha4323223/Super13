/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ –≤–Ω–µ –ª–∏–º–∏—Ç–æ–≤ Replit
 */

import fs from 'fs';
import path from 'path';

export interface Checkpoint {
  step: number;
  description: string;
  code?: string;
  files?: string[];
  timestamp: string;
  sessionId: string;
  action: 'create' | 'modify' | 'delete' | 'execute';
  metadata?: Record<string, any>;
}

export class CheckpointManager {
  private checkpointDir: string;
  private sessionId: string;
  private currentStep: number = 0;

  constructor(sessionId: string = this.generateSessionId()) {
    this.sessionId = sessionId;
    this.checkpointDir = path.join(process.cwd(), 'checkpoints');
    this.ensureCheckpointDir();
    this.loadCurrentStep();
  }

  private generateSessionId(): string {
    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }

  private ensureCheckpointDir(): void {
    if (!fs.existsSync(this.checkpointDir)) {
      fs.mkdirSync(this.checkpointDir, { recursive: true });
    }
  }

  private loadCurrentStep(): void {
    try {
      const files = fs.readdirSync(this.checkpointDir);
      const sessionFiles = files.filter(f => f.includes(this.sessionId));
      this.currentStep = sessionFiles.length;
    } catch (error) {
      this.currentStep = 0;
    }
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —á–µ–∫–ø–æ–∏–Ω—Ç–∞
   */
  async saveCheckpoint(
    description: string,
    action: 'create' | 'modify' | 'delete' | 'execute',
    options: {
      code?: string;
      files?: string[];
      metadata?: Record<string, any>;
    } = {}
  ): Promise<Checkpoint> {
    this.currentStep++;

    const checkpoint: Checkpoint = {
      step: this.currentStep,
      description,
      code: options.code,
      files: options.files,
      timestamp: new Date().toISOString(),
      sessionId: this.sessionId,
      action,
      metadata: options.metadata
    };

    const filename = `step_${this.currentStep.toString().padStart(3, '0')}_${this.sessionId}.json`;
    const filepath = path.join(this.checkpointDir, filename);

    try {
      fs.writeFileSync(filepath, JSON.stringify(checkpoint, null, 2), 'utf-8');
      console.log(`‚úÖ –ß–µ–∫–ø–æ–∏–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: ${description} (—à–∞–≥ ${this.currentStep})`);
      return checkpoint;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ–∫–ø–æ–∏–Ω—Ç–∞:`, error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–µ–∫–ø–æ–∏–Ω—Ç—ã —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
   */
  getAllCheckpoints(): Checkpoint[] {
    try {
      const files = fs.readdirSync(this.checkpointDir);
      const sessionFiles = files
        .filter(f => f.includes(this.sessionId) && f.endsWith('.json'))
        .sort();

      return sessionFiles.map(file => {
        const content = fs.readFileSync(path.join(this.checkpointDir, file), 'utf-8');
        return JSON.parse(content);
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫–ø–æ–∏–Ω—Ç
   */
  getCheckpoint(step: number): Checkpoint | null {
    const checkpoints = this.getAllCheckpoints();
    return checkpoints.find(cp => cp.step === step) || null;
  }

  /**
   * –û—Ç–∫–∞—Ç –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É —à–∞–≥—É
   */
  rollbackToStep(step: number): boolean {
    try {
      const checkpoint = this.getCheckpoint(step);
      if (!checkpoint) {
        console.error(`–®–∞–≥ ${step} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        return false;
      }

      // –£–¥–∞–ª—è–µ–º —á–µ–∫–ø–æ–∏–Ω—Ç—ã –ø–æ—Å–ª–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —à–∞–≥–∞
      const files = fs.readdirSync(this.checkpointDir);
      const laterFiles = files.filter(f => {
        if (!f.includes(this.sessionId)) return false;
        const match = f.match(/step_(\d+)_/);
        if (!match) return false;
        return parseInt(match[1]) > step;
      });

      laterFiles.forEach(file => {
        fs.unlinkSync(path.join(this.checkpointDir, file));
      });

      this.currentStep = step;
      console.log(`‚Ü©Ô∏è –û—Ç–∫–∞—Ç –∫ —à–∞–≥—É ${step}: ${checkpoint.description}`);
      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–∫–∞—Ç–∞:', error);
      return false;
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —á–µ–∫–ø–æ–∏–Ω—Ç–æ–≤ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª
   */
  exportSession(filename?: string): string {
    const checkpoints = this.getAllCheckpoints();
    const exportData = {
      sessionId: this.sessionId,
      totalSteps: checkpoints.length,
      exportedAt: new Date().toISOString(),
      checkpoints
    };

    const exportFilename = filename || `session_export_${this.sessionId}.json`;
    const exportPath = path.join(this.checkpointDir, exportFilename);
    
    fs.writeFileSync(exportPath, JSON.stringify(exportData, null, 2));
    console.log(`üì¶ –°–µ—Å—Å–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞: ${exportFilename}`);
    return exportPath;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
   */
  getSessionStats(): {
    sessionId: string;
    totalSteps: number;
    actions: Record<string, number>;
    duration: string;
    firstStep?: string;
    lastStep?: string;
  } {
    const checkpoints = this.getAllCheckpoints();
    const actions: Record<string, number> = {};
    
    checkpoints.forEach(cp => {
      actions[cp.action] = (actions[cp.action] || 0) + 1;
    });

    let duration = '';
    if (checkpoints.length > 0) {
      const first = new Date(checkpoints[0].timestamp);
      const last = new Date(checkpoints[checkpoints.length - 1].timestamp);
      const diffMs = last.getTime() - first.getTime();
      const diffMins = Math.round(diffMs / 60000);
      duration = `${diffMins} –º–∏–Ω—É—Ç`;
    }

    return {
      sessionId: this.sessionId,
      totalSteps: checkpoints.length,
      actions,
      duration,
      firstStep: checkpoints[0]?.timestamp,
      lastStep: checkpoints[checkpoints.length - 1]?.timestamp
    };
  }

  /**
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
   */
  watchFiles(watchPaths: string[] = ['server', 'client', 'shared']): void {
    watchPaths.forEach(watchPath => {
      if (fs.existsSync(watchPath)) {
        fs.watch(watchPath, { recursive: true }, (eventType, filename) => {
          if (filename && (filename.endsWith('.ts') || filename.endsWith('.js') || filename.endsWith('.tsx'))) {
            this.saveCheckpoint(
              `–§–∞–π–ª ${eventType}: ${filename}`,
              eventType === 'rename' ? 'create' : 'modify',
              {
                files: [filename],
                metadata: { eventType, watchPath }
              }
            );
          }
        });
      }
    });
    console.log('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ');
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
export const checkpointManager = new CheckpointManager();