/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤
 */

const express = require('express');
const router = express.Router();
const fs = require('fs');
const path = require('path');
const advancedDetector = require('./advanced-object-detector');

/**
 * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –ø—É—Ç–∏
 */
async function analyzeLocalImage(imagePath, prompt = '–ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ?') {
  try {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imagePath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (—Å–Ω–∞—á–∞–ª–∞ –∫–∞–∫ –µ—Å—Ç—å, –ø–æ—Ç–æ–º –≤ –ø–∞–ø–∫–µ images)
    let fullPath = path.join(process.cwd(), imagePath);
    if (!fs.existsSync(fullPath)) {
      // –ü—Ä–æ–±—É–µ–º –≤ –ø–∞–ø–∫–µ images
      fullPath = path.join(process.cwd(), 'uploads', 'images', path.basename(imagePath));
      if (!fs.existsSync(fullPath)) {
        throw new Error(`–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imagePath}`);
      }
    }
    
    // –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = fs.readFileSync(fullPath);
    const filename = path.basename(imagePath);
    
    console.log(`üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(imageBuffer.length / 1024)}KB`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    const smartAnalyzer = require('./smart-vision-analyzer');
    const detectionResult = await smartAnalyzer.analyzeImageContent(imageBuffer, filename);
    
    if (detectionResult.success) {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const response = formatAnalysisResponse(detectionResult, filename, prompt);
      
      return {
        success: true,
        response,
        provider: 'Advanced Object Detection',
        model: `AI Vision (${Math.round(detectionResult.confidence * 100)}% —Ç–æ—á–Ω–æ—Å—Ç—å)`,
        details: detectionResult.details
      };
    } else {
      throw new Error(detectionResult.error);
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function formatAnalysisResponse(detectionResult, filename, userPrompt) {
  let response = 'üñºÔ∏è **AI –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n';
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
  response += `üìÅ **–§–∞–π–ª:** ${filename}\n`;
  response += `üìè **–†–∞–∑–º–µ—Ä:** ${Math.round(detectionResult.details?.fileSize / 1024) || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}KB\n`;
  response += `üé® **–§–æ—Ä–º–∞—Ç:** JPEG —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è\n\n`;
  
  // –û—Å–Ω–æ–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  response += 'ü§ñ **–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:**\n';
  response += `${detectionResult.description}\n\n`;
  
  // –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  if (detectionResult.recognizedObjects && detectionResult.recognizedObjects.length > 0) {
    response += 'üéØ **–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:**\n';
    detectionResult.recognizedObjects.forEach(obj => {
      const confidence = Math.round(obj.confidence * 100);
      response += `‚Ä¢ ${obj.name} - ${obj.description} (${confidence}% —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å)\n`;
    });
    response += '\n';
  }
  
  // –î–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
  if (detectionResult.details) {
    response += 'üé® **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n';
    if (detectionResult.details.dominantColors?.length > 0) {
      response += `‚Ä¢ –û—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞: ${detectionResult.details.dominantColors.join(', ')}\n`;
    }
    if (detectionResult.details.sceneType) {
      response += `‚Ä¢ –¢–∏–ø —Å—Ü–µ–Ω—ã: ${detectionResult.details.sceneType}\n`;
    }
    if (detectionResult.details.lighting) {
      response += `‚Ä¢ –û—Å–≤–µ—â–µ–Ω–∏–µ: ${detectionResult.details.lighting}\n`;
    }
    if (detectionResult.details.composition) {
      response += `‚Ä¢ –ö–æ–º–ø–æ–∑–∏—Ü–∏—è: ${detectionResult.details.composition}\n`;
    }
    response += '\n';
  }
  
  // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ
  response += `üîß **–°–µ—Ä–≤–∏—Å:** ${detectionResult.service}\n`;
  response += `üìä **–¢–æ—á–Ω–æ—Å—Ç—å:** ${Math.round(detectionResult.confidence * 100)}%\n\n`;
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
  response += `\nüí≠ **–í–∞—à –∑–∞–ø—Ä–æ—Å:** ${userPrompt}\n\n`;
  response += '*üöÄ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø–æ–º–æ—â—å—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è!*';
  
  return response;
}

/**
 * API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
router.post('/analyze', async (req, res) => {
  const { imageUrl, prompt } = req.body;
  
  if (!imageUrl) {
    return res.status(400).json({
      success: false,
      error: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
    });
  }
  
  try {
    const result = await analyzeLocalImage(imageUrl, prompt);
    res.json(result);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ API –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${error.message}`);
    res.status(500).json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`
    });
  }
});

module.exports = {
  router,
  analyzeLocalImage
};