/**
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤ –≤ –ø–µ—á–∞—Ç–∏
 */

const sharp = require('sharp');

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–≤–µ—Ç–æ–≤
 */
async function analyzeImageComplexity(imageBuffer) {
  console.log('üîç [COLOR-ANALYSIS] –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  
  try {
    // 1. –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const { data, info } = await sharp(imageBuffer)
      .resize(256, 256)
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    // 2. –ü–æ–¥—Å—á–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    const colorMap = new Map();
    const pixelCount = info.width * info.height;
    
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞ (tolerance = 8)
      const colorKey = `${Math.floor(r/8)*8},${Math.floor(g/8)*8},${Math.floor(b/8)*8}`;
      colorMap.set(colorKey, (colorMap.get(colorKey) || 0) + 1);
    }
    
    const uniqueColors = colorMap.size;
    
    // 3. –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    const colorDistribution = Array.from(colorMap.values())
      .sort((a, b) => b - a)
      .map(count => count / pixelCount);
    
    // 4. –†–∞—Å—á–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏ (—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ü–≤–µ—Ç–æ–≤)
    let entropy = 0;
    for (const probability of colorDistribution) {
      if (probability > 0) {
        entropy -= probability * Math.log2(probability);
      }
    }
    
    // 5. –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤
    const gradientComplexity = await analyzeGradients(imageBuffer);
    
    // 6. –ê–Ω–∞–ª–∏–∑ –∫—Ä–∞–µ–≤ –∏ –¥–µ—Ç–∞–ª–µ–π
    const edgeComplexity = await analyzeEdgeComplexity(imageBuffer);
    
    // 7. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const complexity = calculateComplexityScore({
      uniqueColors,
      entropy,
      gradientComplexity,
      edgeComplexity,
      colorDistribution
    });
    
    // 8. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–≤–µ—Ç–æ–≤
    const recommendations = generateColorRecommendations(complexity, uniqueColors);
    
    console.log(`‚úÖ [COLOR-ANALYSIS] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ª–æ–∂–Ω–æ—Å—Ç—å: ${complexity.level}`);
    
    return {
      success: true,
      complexity: complexity,
      uniqueColors: uniqueColors,
      recommendations: recommendations,
      analysis: {
        entropy: entropy.toFixed(2),
        gradientComplexity: gradientComplexity.toFixed(2),
        edgeComplexity: edgeComplexity.toFixed(2),
        dominantColors: getTopColors(colorMap, 5)
      }
    };
    
  } catch (error) {
    console.error('‚ùå [COLOR-ANALYSIS] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    throw error;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤ –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 */
async function analyzeGradients(imageBuffer) {
  try {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ grayscale –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    const gradientData = await sharp(imageBuffer)
      .resize(128, 128)
      .greyscale()
      .convolve({
        width: 3,
        height: 3,
        kernel: [-1, 0, 1, -2, 0, 2, -1, 0, 1]
      })
      .raw()
      .toBuffer();
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
    let sum = 0;
    for (let i = 0; i < gradientData.length; i++) {
      sum += gradientData[i];
    }
    
    return sum / gradientData.length / 255; // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç 0 –¥–æ 1
    
  } catch (error) {
    console.error('‚ùå [GRADIENT] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–≤:', error);
    return 0;
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–∞–µ–≤
 */
async function analyzeEdgeComplexity(imageBuffer) {
  try {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º edge detection
    const edgeData = await sharp(imageBuffer)
      .resize(128, 128)
      .greyscale()
      .convolve({
        width: 3,
        height: 3,
        kernel: [-1, -1, -1, -1, 8, -1, -1, -1, -1]
      })
      .raw()
      .toBuffer();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–Ω–∞—á–∏–º—ã—Ö –∫—Ä–∞–µ–≤
    let edgePixels = 0;
    for (let i = 0; i < edgeData.length; i++) {
      if (edgeData[i] > 50) { // –ü–æ—Ä–æ–≥ –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∫—Ä–∞–µ–≤
        edgePixels++;
      }
    }
    
    return edgePixels / edgeData.length; // –ü—Ä–æ—Ü–µ–Ω—Ç –∫—Ä–∞–µ–≤—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
    
  } catch (error) {
    console.error('‚ùå [EDGE] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∞–µ–≤:', error);
    return 0;
  }
}

/**
 * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 */
function calculateComplexityScore(metrics) {
  const {
    uniqueColors,
    entropy,
    gradientComplexity,
    edgeComplexity,
    colorDistribution
  } = metrics;
  
  // –í–µ—Å–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
  const weights = {
    colors: 0.3,
    entropy: 0.25,
    gradients: 0.25,
    edges: 0.2
  };
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
  const normalizedColors = Math.min(uniqueColors / 100, 1);
  const normalizedEntropy = Math.min(entropy / 8, 1);
  const normalizedGradients = Math.min(gradientComplexity, 1);
  const normalizedEdges = Math.min(edgeComplexity, 1);
  
  // –†–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π score
  const totalScore = 
    normalizedColors * weights.colors +
    normalizedEntropy * weights.entropy +
    normalizedGradients * weights.gradients +
    normalizedEdges * weights.edges;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
  let level, description;
  if (totalScore < 0.3) {
    level = '–ø—Ä–æ—Å—Ç–æ–µ';
    description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ —Ñ–æ—Ä–º–∞–º–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π';
  } else if (totalScore < 0.6) {
    level = '—Å—Ä–µ–¥–Ω–µ–µ';
    description = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ü–≤–µ—Ç–∞–º–∏ –∏ –¥–µ—Ç–∞–ª—è–º–∏';
  } else if (totalScore < 0.8) {
    level = '—Å–ª–æ–∂–Ω–æ–µ';
    description = '–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Ü–≤–µ—Ç–æ–≤ –∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤';
  } else {
    level = '–æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ–µ';
    description = '–í—ã—Å–æ–∫–æ–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–≥–∞—Ç–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π';
  }
  
  return {
    score: totalScore,
    level: level,
    description: description,
    metrics: {
      normalizedColors,
      normalizedEntropy,
      normalizedGradients,
      normalizedEdges
    }
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ü–≤–µ—Ç–æ–≤
 */
function generateColorRecommendations(complexity, uniqueColors) {
  const recommendations = [];
  
  if (complexity.score < 0.3) {
    // –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    recommendations.push({
      technique: '–û–¥–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è',
      colors: 1,
      cost: '–Ω–∏–∑–∫–∞—è',
      quality: '–æ—Ç–ª–∏—á–Ω–∞—è',
      description: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞—Ñ–∏–∫–∏'
    });
    
    recommendations.push({
      technique: '–î–≤—É—Ö—Ü–≤–µ—Ç–Ω–∞—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è',
      colors: 2,
      cost: '–Ω–∏–∑–∫–∞—è',
      quality: '–æ—Ç–ª–∏—á–Ω–∞—è',
      description: '–î–æ–±–∞–≤–ª—è–µ—Ç –∞–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –±–æ–ª—å—à–µ–π –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'
    });
    
  } else if (complexity.score < 0.6) {
    // –°—Ä–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    recommendations.push({
      technique: '–¢—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è',
      colors: 3,
      cost: '—Å—Ä–µ–¥–Ω—è—è',
      quality: '—Ö–æ—Ä–æ—à–∞—è',
      description: '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏'
    });
    
    recommendations.push({
      technique: '–ß–µ—Ç—ã—Ä–µ—Ö—Ü–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å',
      colors: 4,
      cost: '—Å—Ä–µ–¥–Ω—è—è',
      quality: '—Ö–æ—Ä–æ—à–∞—è',
      description: '–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    });
    
  } else if (complexity.score < 0.8) {
    // –°–ª–æ–∂–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    recommendations.push({
      technique: '–ú–Ω–æ–≥–æ—Ü–≤–µ—Ç–Ω–∞—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è',
      colors: Math.min(uniqueColors, 6),
      cost: '–≤—ã—Å–æ–∫–∞—è',
      quality: '—Ö–æ—Ä–æ—à–∞—è',
      description: '–î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–æ–≤ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–µ—Ç–∞–ª–µ–π'
    });
    
    recommendations.push({
      technique: 'DTF –ø–µ—á–∞—Ç—å',
      colors: '–ø–æ–ª–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è',
      cost: '—Å—Ä–µ–¥–Ω—è—è',
      quality: '–æ—Ç–ª–∏—á–Ω–∞—è',
      description: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –º–Ω–æ–≥–æ—Ü–≤–µ—Ç–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
    });
    
  } else {
    // –û—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    recommendations.push({
      technique: 'DTF –ø–µ—á–∞—Ç—å',
      colors: '–ø–æ–ª–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è',
      cost: '—Å—Ä–µ–¥–Ω—è—è',
      quality: '–æ—Ç–ª–∏—á–Ω–∞—è',
      description: '–õ—É—á—à–∏–π –≤—ã–±–æ—Ä –¥–ª—è —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
    });
    
    recommendations.push({
      technique: '–°—É–±–ª–∏–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–µ—á–∞—Ç—å',
      colors: '–ø–æ–ª–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è',
      cost: '—Å—Ä–µ–¥–Ω—è—è',
      quality: '–æ—Ç–ª–∏—á–Ω–∞—è',
      description: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª–∏—ç—Å—Ç–µ—Ä–∞ –∏ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–∫–∞–Ω–µ–π'
    });
  }
  
  return recommendations;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø —Ü–≤–µ—Ç–æ–≤
 */
function getTopColors(colorMap, count = 5) {
  return Array.from(colorMap.entries())
    .sort((a, b) => b[1] - a[1])
    .slice(0, count)
    .map(([color, frequency]) => {
      const [r, g, b] = color.split(',').map(Number);
      return {
        hex: `#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`,
        rgb: [r, g, b],
        frequency: frequency
      };
    });
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ—Ö–Ω–∏–∫–∏ –ø–µ—á–∞—Ç–∏
 */
async function getOptimalColorCount(imageBuffer, printTechnique = 'screen-print') {
  try {
    const analysis = await analyzeImageComplexity(imageBuffer);
    
    if (!analysis.success) {
      return { colors: 4, reason: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' };
    }
    
    const { complexity, recommendations } = analysis;
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ—Ö–Ω–∏–∫–µ –ø–µ—á–∞—Ç–∏
    let filteredRecommendations;
    
    if (printTechnique === 'screen-print') {
      filteredRecommendations = recommendations.filter(r => 
        r.technique.includes('—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è') || r.technique.includes('—Ü–≤–µ—Ç–Ω–∞—è')
      );
    } else if (printTechnique === 'dtf') {
      filteredRecommendations = recommendations.filter(r => 
        r.technique.includes('DTF') || r.colors === '–ø–æ–ª–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è'
      );
    } else {
      filteredRecommendations = recommendations;
    }
    
    // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    const optimal = filteredRecommendations[0] || recommendations[0];
    
    return {
      colors: typeof optimal.colors === 'number' ? optimal.colors : 6,
      technique: optimal.technique,
      complexity: complexity.level,
      reason: optimal.description,
      analysis: analysis
    };
    
  } catch (error) {
    console.error('‚ùå [OPTIMAL-COLORS] –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤:', error);
    return { colors: 4, reason: '–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏' };
  }
}

module.exports = {
  analyzeImageComplexity,
  getOptimalColorCount,
  analyzeGradients,
  analyzeEdgeComplexity
};