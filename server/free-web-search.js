/**
 * –ú–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–µ API –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
 */

import fetch from 'node-fetch';

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
async function searchRealTimeInfo(query) {
    try {
        console.log('üîç [SEARCH] === –ù–ê–ß–ò–ù–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö ===');
        console.log('üîç [SEARCH] –ó–∞–ø—Ä–æ—Å:', query);
        
        const results = [];
        const searchTerms = query.toLowerCase();
        
        // 1. –ü–æ–∏—Å–∫ –º–µ—Å—Ç (–º–∞–≥–∞–∑–∏–Ω—ã, —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã, –∫–∞—Ñ–µ)
        if (searchTerms.includes('–º–∞–≥–∞–∑–∏–Ω') || searchTerms.includes('—Ä–µ—Å—Ç–æ—Ä–∞–Ω') || 
            searchTerms.includes('–∫–∞—Ñ–µ') || searchTerms.includes('–≥–¥–µ') || 
            searchTerms.includes('–∞–¥—Ä–µ—Å')) {
            const placeResults = await searchPlaces(query);
            results.push(...placeResults);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–±—É–µ–º –æ–±—â–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –º–µ—Å—Ç
            const generalResults = await searchGeneral(query);
            results.push(...generalResults);
        }
        
        // 2. –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã
        if (searchTerms.includes('–ø–æ–≥–æ–¥–∞') || searchTerms.includes('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞') ||
            searchTerms.includes('–ø—Ä–æ–≥–Ω–æ–∑')) {
            const weatherResults = await searchWeather(query);
            results.push(...weatherResults);
        }
        
        // 3. –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
        if (searchTerms.includes('–Ω–æ–≤–æ—Å—Ç') || searchTerms.includes('—Å–æ–±—ã—Ç–∏') ||
            searchTerms.includes('—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç')) {
            const newsResults = await searchNews(query);
            results.push(...newsResults);
        }
        
        // 4. –û–±—â–∏–π –ø–æ–∏—Å–∫ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        if (results.length === 0) {
            const webResults = await searchGeneral(query);
            results.push(...webResults);
        }
        
        console.log('üîç [SEARCH] –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', results.length);
        
        return {
            success: results.length > 0,
            results: results,
            provider: 'FreeSearch'
        };
        
    } catch (error) {
        console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'FreeSearch'
        };
    }
}

/**
 * –ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ OpenStreetMap (–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function searchPlaces(query) {
    try {
        console.log('üîç [PLACES] –ü–æ–∏—Å–∫ –º–µ—Å—Ç –¥–ª—è:', query);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        const cityMatch = query.match(/(–≤|–æ–∫–æ–ª–æ|—Ä—è–¥–æ–º|–≤ –≥–æ—Ä–æ–¥–µ)\s+([–∞-—è—ë\w]+)/i);
        const city = cityMatch ? cityMatch[2] : '–í–æ—Ä–æ–Ω–µ–∂';
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        let searchTerms = [];
        if (query.includes('–º–∞–≥–∞–∑–∏–Ω')) searchTerms.push('shop');
        if (query.includes('–æ–¥–µ–∂–¥')) searchTerms.push('clothes');
        if (query.includes('—É–ª–∏—á–Ω')) searchTerms.push('streetwear');
        
        const searchQuery = searchTerms.length > 0 ? 
            encodeURIComponent(`${searchTerms.join(' ')} ${city} Russia`) :
            encodeURIComponent(`shop clothes ${city} Russia`);
            
        const url = `https://nominatim.openstreetmap.org/search?q=${searchQuery}&format=json&limit=10&addressdetails=1&countrycodes=ru`;
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            }
        });
        
        if (!response.ok) {
            console.log('üîç [PLACES] OpenStreetMap –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return [];
        }
        
        const data = await response.json();
        console.log('üîç [PLACES] –ù–∞–π–¥–µ–Ω–æ –º–µ—Å—Ç OSM:', data.length);
        
        return data.slice(0, 3).map(place => ({
            title: place.display_name.split(',')[0],
            snippet: `üìç ${place.display_name}`,
            url: `https://www.openstreetmap.org/#map=18/${place.lat}/${place.lon}`,
            source: 'OpenStreetMap'
        }));
        
    } catch (error) {
        console.log('üîç [PLACES] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ wttr.in (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å)
 */
async function searchWeather(query) {
    try {
        console.log('üîç [WEATHER] –ü–æ–∏—Å–∫ –ø–æ–≥–æ–¥—ã –¥–ª—è:', query);
        
        // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
        let city = 'Moscow';
        
        // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã: "–≤ –≥–æ—Ä–æ–¥–µ", "–≤ —Ä–∞–π–æ–Ω–µ", –ø—Ä–æ—Å—Ç–æ "–≤ ..."
        const cityMatch1 = query.match(/–≤\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)*)/i);
        const cityMatch2 = query.match(/–¥–ª—è\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)*)/i);
        const cityMatch3 = query.match(/–ø–æ–≥–æ–¥–∞\s+([–∞-—è—ë]+(?:\s+[–∞-—è—ë]+)*)/i);
        
        if (cityMatch1) city = cityMatch1[1].trim();
        else if (cityMatch2) city = cityMatch2[1].trim();
        else if (cityMatch3) city = cityMatch3[1].trim();
        
        console.log('üîç [WEATHER] –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥:', city);
        
        const url = `http://wttr.in/${encodeURIComponent(city)}?format=j1`;
        
        const response = await fetch(url, {
            headers: {
                'User-Agent': 'curl/7.68.0'
            }
        });
        
        if (!response.ok) {
            console.log('üîç [WEATHER] wttr.in –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return [];
        }
        
        const data = await response.json();
        
        if (!data.current_condition || !data.weather) {
            console.log('üîç [WEATHER] –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ');
            return [];
        }
        
        const current = data.current_condition[0];
        const today = data.weather[0];
        
        console.log('üîç [WEATHER] –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ');
        
        return [{
            title: `üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ ${city}`,
            snippet: `–°–µ–π—á–∞—Å: ${current.temp_C}¬∞C, ${current.weatherDesc[0].value}. –ú–∞–∫—Å: ${today.maxtempC}¬∞C, –º–∏–Ω: ${today.mintempC}¬∞C. –í–ª–∞–∂–Ω–æ—Å—Ç—å: ${current.humidity}%, –≤–µ—Ç–µ—Ä: ${current.windspeedKmph} –∫–º/—á`,
            url: `http://wttr.in/${encodeURIComponent(city)}`,
            source: 'wttr.in'
        }];
        
    } catch (error) {
        console.log('üîç [WEATHER] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–≥–æ–¥—ã:', error.message);
        return [];
    }
}

/**
 * –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ RSS (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
 */
async function searchNews(query) {
    try {
        console.log('üîç [NEWS] –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è:', query);
        
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö RSS –ª–µ–Ω—Ç
        const newsFeeds = [
            'https://lenta.ru/rss',
            'https://www.rbc.ru/rss/news'
        ];
        
        for (const feedUrl of newsFeeds) {
            try {
                const response = await fetch(feedUrl, {
                    timeout: 5000,
                    headers: {
                        'User-Agent': 'BOOOMERANGS-Search/1.0'
                    }
                });
                
                if (response.ok) {
                    const xmlText = await response.text();
                    console.log('üîç [NEWS] –ü–æ–ª—É—á–∏–ª–∏ RSS –¥–∞–Ω–Ω—ã–µ, —Ä–∞–∑–º–µ—Ä:', xmlText.length);
                    
                    // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
                    const titleRegex = /<title><!\[CDATA\[(.*?)\]\]><\/title>/g;
                    const altTitleRegex = /<title>(.*?)<\/title>/g;
                    
                    let matches = [];
                    let match;
                    
                    while ((match = titleRegex.exec(xmlText)) !== null) {
                        matches.push(match[1]);
                    }
                    
                    if (matches.length === 0) {
                        while ((match = altTitleRegex.exec(xmlText)) !== null) {
                            matches.push(match[1]);
                        }
                    }
                    
                    console.log('üîç [NEWS] –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', matches.length);
                    
                    if (matches.length > 1) {
                        const news = [];
                        for (let i = 1; i < Math.min(4, matches.length); i++) {
                            const title = matches[i].trim();
                            if (title && title.length > 10) {
                                news.push({
                                    title: title,
                                    snippet: `–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –æ—Ç ${new Date().toLocaleDateString('ru-RU')}`,
                                    url: feedUrl,
                                    source: 'RSS News'
                                });
                            }
                        }
                        
                        if (news.length > 0) {
                            console.log('üîç [NEWS] –í–æ–∑–≤—Ä–∞—â–∞–µ–º', news.length, '–Ω–æ–≤–æ—Å—Ç–µ–π');
                            return news;
                        }
                    }
                }
            } catch (err) {
                continue;
            }
        }
        
        return [];
        
    } catch (error) {
        console.log('üîç [NEWS] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π:', error.message);
        return [];
    }
}

/**
 * –û–±—â–∏–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
 */
async function searchGeneral(query) {
    try {
        console.log('üîç [GENERAL] –û–±—â–∏–π –ø–æ–∏—Å–∫ –¥–ª—è:', query);
        
        // –ü—Ä–æ–±—É–µ–º Brave Search API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫)
        try {
            const braveUrl = `https://api.search.brave.com/res/v1/web/search?q=${encodeURIComponent(query)}&count=5&offset=0&mkt=ru-RU`;
            
            const response = await fetch(braveUrl, {
                timeout: 8000,
                headers: {
                    'X-Subscription-Token': process.env.BRAVE_SEARCH_API_KEY || 'BSAqOKKN2cjgn83A5K5iQB8uUGDdLdTBwc',
                    'User-Agent': 'BOOOMERANGS-Search/1.0'
                }
            });
            
            if (response.ok) {
                const data = await response.json();
                const results = [];
                
                if (data.web && data.web.results && data.web.results.length > 0) {
                    for (const result of data.web.results.slice(0, 3)) {
                        if (result.title && result.description) {
                            results.push({
                                title: result.title,
                                snippet: result.description,
                                url: result.url,
                                source: 'Brave Search'
                            });
                        }
                    }
                }
                
                if (results.length > 0) {
                    console.log('üîç [GENERAL] –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ Brave Search:', results.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
                    return results;
                }
            }
        } catch (braveError) {
            console.log('üîç [GENERAL] Brave Search –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', braveError.message);
        }
        
        // Fallback: –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥
        try {
            const searchUrl = `https://html.duckduckgo.com/html/?q=${encodeURIComponent(query)}`;
            
            const response = await fetch(searchUrl, {
                timeout: 8000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
            });
            
            if (response.ok) {
                const html = await response.text();
                
                // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                const titleRegex = /<a[^>]+class="result__a"[^>]*>([^<]+)<\/a>/g;
                const linkRegex = /<a[^>]+class="result__a"[^>]+href="([^"]+)"/g;
                const snippetRegex = /<a[^>]+class="result__snippet"[^>]*>([^<]+)<\/a>/g;
                
                const titles = [];
                const links = [];
                const snippets = [];
                
                let match;
                while ((match = titleRegex.exec(html)) !== null) {
                    titles.push(match[1].trim());
                }
                while ((match = linkRegex.exec(html)) !== null) {
                    links.push(match[1]);
                }
                while ((match = snippetRegex.exec(html)) !== null) {
                    snippets.push(match[1].trim());
                }
                
                const results = [];
                for (let i = 0; i < Math.min(3, titles.length); i++) {
                    if (titles[i] && links[i]) {
                        results.push({
                            title: titles[i],
                            snippet: snippets[i] || '–ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –≤–µ–±-–ø–æ–∏—Å–∫',
                            url: links[i],
                            source: 'Web Search'
                        });
                    }
                }
                
                if (results.length > 0) {
                    console.log('üîç [GENERAL] –ù–∞–π–¥–µ–Ω–æ —á–µ—Ä–µ–∑ HTML –ø–∞—Ä—Å–∏–Ω–≥:', results.length, '—Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤');
                    return results;
                }
            }
        } catch (htmlError) {
            console.log('üîç [GENERAL] HTML –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', htmlError.message);
        }
        
        // Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return [{
            title: `–ü–æ–∏—Å–∫: ${query}`,
            snippet: `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É "${query}" –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞–π–¥–µ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö.`,
            url: `https://duckduckgo.com/?q=${encodeURIComponent(query)}`,
            source: 'Search Suggestion'
        }];
        
    } catch (error) {
        console.log('üîç [GENERAL] –û—à–∏–±–∫–∞ –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞:', error.message);
        return [];
    }
}

export {
    searchRealTimeInfo,
    searchPlaces,
    searchWeather,
    searchNews
};