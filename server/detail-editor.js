
/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–µ—Ç–∞–ª–µ–π - –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è –º–µ–ª–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 * –†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */

const sharp = require('sharp');
const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const fs = require('fs');
const path = require('path');

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ç—á–∞/–Ω–∞—à–∏–≤–∫–∏ –Ω–∞ –æ–¥–µ–∂–¥—É
 */
async function addPatchToClothing(imageUrl, patchDescription, position = 'chest') {
  try {
    console.log(`üè∑Ô∏è [DETAIL-EDITOR] –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ç—á: ${patchDescription} –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: ${position}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageUtils = require('./image-utils');
    const imageBuffer = await imageUtils.loadImageFromUrl(imageUrl);
    const validatedBuffer = await imageUtils.ensurePngFormat(imageBuffer);
    
    const image = sharp(validatedBuffer);
    const { width, height } = await image.metadata();
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–∞—Ç—á —á–µ—Ä–µ–∑ Pollinations
    const patchPrompt = `${patchDescription}, patch design, embroidered patch, transparent background, high quality, detailed`;
    const patchImageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(patchPrompt)}?width=200&height=200&nologo=true&enhance=true&seed=${Date.now()}`;
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Ç—á–∞
    const patchResponse = await fetch(patchImageUrl);
    const patchBuffer = await patchResponse.buffer();
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ç—á - –¥–µ–ª–∞–µ–º –Ω—É–∂–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const patchSize = Math.min(width, height) * 0.15; // 15% –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const processedPatch = await sharp(patchBuffer)
      .resize(Math.round(patchSize), Math.round(patchSize))
      .png()
      .toBuffer();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –ø–∞—Ç—á–∞
    let left, top;
    switch (position.toLowerCase()) {
      case 'chest':
      case '–≥—Ä—É–¥—å':
        left = Math.round(width * 0.35);
        top = Math.round(height * 0.25);
        break;
      case 'sleeve':
      case '—Ä—É–∫–∞–≤':
        left = Math.round(width * 0.15);
        top = Math.round(height * 0.35);
        break;
      case 'back':
      case '—Å–ø–∏–Ω–∞':
        left = Math.round(width * 0.4);
        top = Math.round(height * 0.3);
        break;
      case 'shoulder':
      case '–ø–ª–µ—á–æ':
        left = Math.round(width * 0.25);
        top = Math.round(height * 0.2);
        break;
      default:
        left = Math.round(width * 0.35);
        top = Math.round(height * 0.25);
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
    const timestamp = Date.now();
    const outputPath = `./uploads/patch-added-${timestamp}.png`;
    
    await image
      .composite([{
        input: processedPatch,
        left: left,
        top: top,
        blend: 'over'
      }])
      .png()
      .toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/patch-added-${timestamp}.png`,
      message: `–ü–∞—Ç—á "${patchDescription}" –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞ ${position}`,
      type: 'patch_addition',
      patchImageUrl: patchImageUrl
    };
    
  } catch (error) {
    console.error('‚ùå [DETAIL-EDITOR] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—á–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ç—á–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ç—á –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    };
  }
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ (—É–∫—Ä–∞—à–µ–Ω–∏—è, –¥–µ—Ç–∞–ª–∏)
 */
async function addSmallAccessory(imageUrl, accessoryDescription, targetArea = 'auto') {
  try {
    console.log(`üíé [DETAIL-EDITOR] –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä: ${accessoryDescription} –≤ –æ–±–ª–∞—Å—Ç—å: ${targetArea}`);
    
    const imageUtils = require('./image-utils');
    const imageBuffer = await imageUtils.loadImageFromUrl(imageUrl);
    const validatedBuffer = await imageUtils.ensurePngFormat(imageBuffer);
    
    const image = sharp(validatedBuffer);
    const { width, height } = await image.metadata();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
    let accessorySize;
    let position = { left: 0, top: 0 };
    
    if (accessoryDescription.includes('—Å–µ—Ä—å–≥–∏') || accessoryDescription.includes('earrings')) {
      accessorySize = Math.min(width, height) * 0.05;
      position = { left: Math.round(width * 0.2), top: Math.round(height * 0.15) };
    } else if (accessoryDescription.includes('–±—Ä–∞—Å–ª–µ—Ç') || accessoryDescription.includes('bracelet')) {
      accessorySize = Math.min(width, height) * 0.08;
      position = { left: Math.round(width * 0.1), top: Math.round(height * 0.6) };
    } else if (accessoryDescription.includes('–∫–æ–ª—å—Ü–æ') || accessoryDescription.includes('ring')) {
      accessorySize = Math.min(width, height) * 0.03;
      position = { left: Math.round(width * 0.3), top: Math.round(height * 0.7) };
    } else if (accessoryDescription.includes('—Ü–µ–ø–æ—á–∫–∞') || accessoryDescription.includes('necklace')) {
      accessorySize = Math.min(width, height) * 0.12;
      position = { left: Math.round(width * 0.35), top: Math.round(height * 0.3) };
    } else {
      // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–∫—Å–µ—Å—Å—É–∞—Ä
      accessorySize = Math.min(width, height) * 0.07;
      position = { left: Math.round(width * 0.4), top: Math.round(height * 0.4) };
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é —Ñ–∏–≥—É—Ä—É –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞
    let accessoryColor = { r: 255, g: 215, b: 0 }; // –∑–æ–ª–æ—Ç–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (accessoryDescription.includes('—Å–µ—Ä–µ–±—Ä') || accessoryDescription.includes('silver')) {
      accessoryColor = { r: 192, g: 192, b: 192 };
    } else if (accessoryDescription.includes('–∫—Ä–∞—Å–Ω') || accessoryDescription.includes('red')) {
      accessoryColor = { r: 255, g: 100, b: 100 };
    } else if (accessoryDescription.includes('—Å–∏–Ω') || accessoryDescription.includes('blue')) {
      accessoryColor = { r: 100, g: 100, b: 255 };
    }
    
    // –°–æ–∑–¥–∞–µ–º –∞–∫—Å–µ—Å—Å—É–∞—Ä
    const accessory = sharp({
      create: {
        width: Math.round(accessorySize),
        height: Math.round(accessorySize),
        channels: 4,
        background: accessoryColor
      }
    }).png();
    
    const accessoryBuffer = await accessory.toBuffer();
    
    const timestamp = Date.now();
    const outputPath = `./uploads/accessory-added-${timestamp}.png`;
    
    await image
      .composite([{
        input: accessoryBuffer,
        left: position.left,
        top: position.top,
        blend: 'over'
      }])
      .png()
      .toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/accessory-added-${timestamp}.png`,
      message: `–ê–∫—Å–µ—Å—Å—É–∞—Ä "${accessoryDescription}" –¥–æ–±–∞–≤–ª–µ–Ω`,
      type: 'accessory_addition'
    };
    
  } catch (error) {
    console.error('‚ùå [DETAIL-EDITOR] –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä'
    };
  }
}

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã –º–∞—Ç–µ—Ä–∏–∞–ª–∞
 */
async function changeTexture(imageUrl, textureDescription, targetObject = 'clothing') {
  try {
    console.log(`üßµ [DETAIL-EDITOR] –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä—É: ${textureDescription} –¥–ª—è: ${targetObject}`);
    
    const imageUtils = require('./image-utils');
    const imageBuffer = await imageUtils.loadImageFromUrl(imageUrl);
    const validatedBuffer = await imageUtils.ensurePngFormat(imageBuffer);
    
    let processedImage = sharp(validatedBuffer);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç—É—Ä–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
    if (textureDescription.includes('–∫–æ–∂–∞') || textureDescription.includes('leather')) {
      // –≠—Ñ—Ñ–µ–∫—Ç –∫–æ–∂–∏ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–∏—á–Ω–µ–≤—ã–π –æ—Ç—Ç–µ–Ω–æ–∫
      processedImage = processedImage
        .modulate({ saturation: 1.2, brightness: 0.9 })
        .tint({ r: 139, g: 69, b: 19 });
    } else if (textureDescription.includes('–º–µ—Ç–∞–ª–ª') || textureDescription.includes('metal')) {
      // –ú–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç
      processedImage = processedImage
        .modulate({ saturation: 0.5, brightness: 1.1 })
        .tint({ r: 192, g: 192, b: 192 });
    } else if (textureDescription.includes('—Ç–∫–∞–Ω—å') || textureDescription.includes('fabric')) {
      // –¢–∫–∞–Ω–µ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
      processedImage = processedImage
        .modulate({ saturation: 1.1, brightness: 1.0 })
        .blur(0.5);
    } else if (textureDescription.includes('–¥–∂–∏–Ω—Å') || textureDescription.includes('denim')) {
      // –î–∂–∏–Ω—Å–æ–≤—ã–π —ç—Ñ—Ñ–µ–∫—Ç
      processedImage = processedImage
        .modulate({ saturation: 1.3 })
        .tint({ r: 70, g: 130, b: 180 });
    } else {
      // –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
      processedImage = processedImage
        .modulate({ saturation: 1.1, brightness: 1.05 })
        .sharpen(1.0);
    }
    
    const timestamp = Date.now();
    const outputPath = `./uploads/texture-changed-${timestamp}.png`;
    
    await processedImage.png().toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/texture-changed-${timestamp}.png`,
      message: `–¢–µ–∫—Å—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: ${textureDescription}`,
      type: 'texture_change'
    };
    
  } catch (error) {
    console.error('‚ùå [DETAIL-EDITOR] –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—É—Ä—É'
    };
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–ª–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
 */
async function removeSmallDetail(imageUrl, detailDescription) {
  try {
    console.log(`üóëÔ∏è [DETAIL-EDITOR] –£–¥–∞–ª—è–µ–º –¥–µ—Ç–∞–ª—å: ${detailDescription}`);
    
    const imageUtils = require('./image-utils');
    const imageBuffer = await imageUtils.loadImageFromUrl(imageUrl);
    const validatedBuffer = await imageUtils.ensurePngFormat(imageBuffer);
    
    const image = sharp(validatedBuffer);
    const { width, height } = await image.metadata();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –¥–ª—è "—É–¥–∞–ª–µ–Ω–∏—è" –¥–µ—Ç–∞–ª–∏
    let maskArea = { x: 0, y: 0, width: width * 0.1, height: height * 0.1 };
    
    if (detailDescription.includes('–∫–Ω–æ–ø–∫') || detailDescription.includes('button')) {
      maskArea = { 
        x: width * 0.4, 
        y: height * 0.3, 
        width: width * 0.03, 
        height: height * 0.03 
      };
    } else if (detailDescription.includes('–∫–∞—Ä–º–∞–Ω') || detailDescription.includes('pocket')) {
      maskArea = { 
        x: width * 0.2, 
        y: height * 0.5, 
        width: width * 0.15, 
        height: height * 0.1 
      };
    } else if (detailDescription.includes('–ª–æ–≥–æ—Ç–∏–ø') || detailDescription.includes('logo')) {
      maskArea = { 
        x: width * 0.35, 
        y: height * 0.25, 
        width: width * 0.1, 
        height: width * 0.05 
      };
    }
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
    const backgroundColor = await getAverageColor(validatedBuffer, maskArea);
    
    const mask = sharp({
      create: {
        width: Math.round(maskArea.width),
        height: Math.round(maskArea.height),
        channels: 3,
        background: backgroundColor
      }
    }).png();
    
    const maskBuffer = await mask.toBuffer();
    
    const timestamp = Date.now();
    const outputPath = `./uploads/detail-removed-${timestamp}.png`;
    
    await image
      .composite([{
        input: maskBuffer,
        left: Math.round(maskArea.x),
        top: Math.round(maskArea.y),
        blend: 'over'
      }])
      .png()
      .toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/detail-removed-${timestamp}.png`,
      message: `–î–µ—Ç–∞–ª—å "${detailDescription}" —É–¥–∞–ª–µ–Ω–∞`,
      type: 'detail_removal'
    };
    
  } catch (error) {
    console.error('‚ùå [DETAIL-EDITOR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–µ—Ç–∞–ª—å'
    };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ü–≤–µ—Ç–∞ –æ–±–ª–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function getAverageColor(imageBuffer, area) {
  try {
    const sample = await sharp(imageBuffer)
      .extract({ 
        left: Math.round(area.x), 
        top: Math.round(area.y), 
        width: Math.round(area.width), 
        height: Math.round(area.height) 
      })
      .resize(1, 1)
      .raw()
      .toBuffer();
    
    return {
      r: sample[0] || 255,
      g: sample[1] || 255,
      b: sample[2] || 255
    };
  } catch (error) {
    return { r: 255, g: 255, b: 255 }; // –±–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π
 */
function analyzeDetailCommand(command) {
  const lowerCommand = command.toLowerCase();
  
  if (lowerCommand.includes('–¥–æ–±–∞–≤—å –ø–∞—Ç—á') || lowerCommand.includes('–¥–æ–±–∞–≤—å –Ω–∞—à–∏–≤–∫—É')) {
    const patchMatch = command.match(/–¥–æ–±–∞–≤—å\s+(?:–ø–∞—Ç—á|–Ω–∞—à–∏–≤–∫—É)\s+(.+?)(?:\s+–Ω–∞\s+(.+?))?(?:\.|$|,)/i);
    return {
      action: 'add_patch',
      description: patchMatch ? patchMatch[1] : '–ø–∞—Ç—á',
      position: patchMatch && patchMatch[2] ? patchMatch[2] : 'chest'
    };
  }
  
  if (lowerCommand.includes('–¥–æ–±–∞–≤—å –∞–∫—Å–µ—Å—Å—É–∞—Ä') || lowerCommand.includes('–¥–æ–±–∞–≤—å —É–∫—Ä–∞—à–µ–Ω–∏–µ')) {
    const accessoryMatch = command.match(/–¥–æ–±–∞–≤—å\s+(?:–∞–∫—Å–µ—Å—Å—É–∞—Ä|—É–∫—Ä–∞—à–µ–Ω–∏–µ)\s+(.+?)(?:\.|$|,)/i);
    return {
      action: 'add_accessory',
      description: accessoryMatch ? accessoryMatch[1] : '–∞–∫—Å–µ—Å—Å—É–∞—Ä'
    };
  }
  
  if (lowerCommand.includes('–∏–∑–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç—É—Ä—É') || lowerCommand.includes('—Å–¥–µ–ª–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª')) {
    const textureMatch = command.match(/(?:–∏–∑–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç—É—Ä—É|—Å–¥–µ–ª–∞–π –º–∞—Ç–µ—Ä–∏–∞–ª)\s+(.+?)(?:\.|$|,)/i);
    return {
      action: 'change_texture',
      description: textureMatch ? textureMatch[1] : '–Ω–æ–≤–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞'
    };
  }
  
  if (lowerCommand.includes('—É–±–µ—Ä–∏') || lowerCommand.includes('—É–¥–∞–ª–∏ –¥–µ—Ç–∞–ª—å')) {
    const removeMatch = command.match(/(?:—É–±–µ—Ä–∏|—É–¥–∞–ª–∏ –¥–µ—Ç–∞–ª—å)\s+(.+?)(?:\.|$|,)/i);
    return {
      action: 'remove_detail',
      description: removeMatch ? removeMatch[1] : '–¥–µ—Ç–∞–ª—å'
    };
  }
  
  return {
    action: 'unknown',
    description: command
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ç–∞–ª–µ–π
 */
async function processDetailEdit(imageUrl, command) {
  const analysis = analyzeDetailCommand(command);
  
  console.log(`üîß [DETAIL-EDITOR] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: ${analysis.action} - ${analysis.description}`);
  
  switch (analysis.action) {
    case 'add_patch':
      return await addPatchToClothing(imageUrl, analysis.description, analysis.position);
      
    case 'add_accessory':
      return await addSmallAccessory(imageUrl, analysis.description);
      
    case 'change_texture':
      return await changeTexture(imageUrl, analysis.description);
      
    case 'remove_detail':
      return await removeSmallDetail(imageUrl, analysis.description);
      
    default:
      return {
        success: false,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞',
        message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: "–¥–æ–±–∞–≤—å –ø–∞—Ç—á [–æ–ø–∏—Å–∞–Ω–∏–µ]", "–¥–æ–±–∞–≤—å –∞–∫—Å–µ—Å—Å—É–∞—Ä [–æ–ø–∏—Å–∞–Ω–∏–µ]", "–∏–∑–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç—É—Ä—É [–æ–ø–∏—Å–∞–Ω–∏–µ]", "—É–±–µ—Ä–∏ [–¥–µ—Ç–∞–ª—å]"'
      };
  }
}

module.exports = {
  processDetailEdit,
  addPatchToClothing,
  addSmallAccessory,
  changeTexture,
  removeSmallDetail,
  analyzeDetailCommand
};
