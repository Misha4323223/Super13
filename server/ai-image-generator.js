/**
 * –ú–æ–¥—É–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ API –∫–ª—é—á–µ–π
 */

const https = require('https');
const http = require('http');
const crypto = require('crypto');
const fs = require('fs').promises;
const path = require('path');

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const TEMP_DIR = path.join(__dirname, '..', 'temp');
const OUTPUT_DIR = path.join(__dirname, '..', 'output');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
async function ensureDirectories() {
  try {
    await fs.mkdir(TEMP_DIR, { recursive: true });
    await fs.mkdir(OUTPUT_DIR, { recursive: true });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π:', error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
ensureDirectories();

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function generateId() {
  return crypto.randomBytes(8).toString('hex');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–≤–æ–±–æ–¥–Ω—ã–µ API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (realistic, artistic, etc.)
 * @param {object|string} previousImage - –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—ä–µ–∫—Ç –∏–ª–∏ URL)
 * @param {string} sessionId - ID —Å–µ—Å—Å–∏–∏
 * @param {string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {string} quality - –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (standard, hd, ultra)
 * @returns {Promise<{success: boolean, imageUrl: string, error?: string}>}
 */
async function generateImage(prompt, style = 'realistic', previousImage = null, sessionId = null, userId = null, quality = 'ultra') {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  let imageLogger;
  try {
    imageLogger = require('./logger.ts').imageLogger;
  } catch (e) {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    imageLogger = {
      requestReceived: (prompt, sessionId, userId) => console.log(`üé® [IMG] –ó–∞–ø—Ä–æ—Å: ${prompt}`),
      aiEnhancement: (original, enhanced, provider, duration, sessionId) => console.log(`ü§ñ [IMG] AI —É–ª—É—á—à–∏–ª: ${enhanced}`),
      promptTranslation: (original, translated, method, sessionId) => console.log(`üåê [IMG] –ü–µ—Ä–µ–≤–æ–¥: ${translated}`),
      generationStarted: (prompt, generator, sessionId) => console.log(`üîÑ [IMG] –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é: ${generator}`),
      generationCompleted: (imageUrl, generator, duration, sessionId) => console.log(`‚úÖ [IMG] –ì–æ—Ç–æ–≤–æ: ${imageUrl}`),
      generationFailed: (error, generator, sessionId) => console.log(`‚ùå [IMG] –û—à–∏–±–∫–∞: ${error}`),
      editingStarted: (originalUrl, prompt, sessionId) => console.log(`üîÑ [IMG] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: ${prompt}`),
      editingCompleted: (originalUrl, newUrl, duration, sessionId) => console.log(`‚úÖ [IMG] –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${newUrl}`),
      editingFailed: (error, sessionId) => console.log(`‚ùå [IMG] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error}`)
    };
  }
  const startTime = Date.now();
  
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
    if (sessionId && userId) {
      imageLogger.requestReceived(prompt, sessionId, userId);
    }
    
    console.log(`üé® [DEBUG] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ–º–ø—Ç: "${prompt}"`);
    console.log(`üé® [DEBUG] –°—Ç–∏–ª—å: "${style}"`);
    console.log(`üé® [DEBUG] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:`, previousImage);
    
    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    let enhancedPrompt;
    
    if (previousImage) {
      // –≠—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
      if (sessionId) {
        imageLogger.editingStarted(previousImage.url || previousImage, prompt, sessionId);
      }
      
      enhancedPrompt = enhancePromptForEdit(prompt, previousImage, style);
      console.log(`üîÑ [DEBUG] –ü—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "${enhancedPrompt}"`);
      
      if (sessionId) {
        imageLogger.promptTranslation(prompt, enhancedPrompt, 'EDIT_ENHANCEMENT', sessionId);
      }
    } else {
      // –≠—Ç–æ –Ω–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –æ—Ç AI
      const aiStartTime = Date.now();
      
      try {
        enhancedPrompt = await getAIEnhancedPrompt(prompt, style);
        const aiDuration = Date.now() - aiStartTime;
        
        console.log(`ü§ñ [AI] AI —É–ª—É—á—à–∏–ª –ø—Ä–æ–º–ø—Ç: "${enhancedPrompt}"`);
        
        if (sessionId) {
          imageLogger.aiEnhancement(prompt, enhancedPrompt, 'Qwen_Qwen_2_72B', aiDuration, sessionId);
        }
      } catch (error) {
        console.log(`‚ùå [AI] AI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${error.message}), –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é`);
        throw new Error(`–°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: ${error.message}`);
      }
      console.log(`üé® [DEBUG] –ü—Ä–æ–º–ø—Ç –¥–ª—è –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: "${enhancedPrompt}"`);
    }
    
    const imageId = generateId();
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    const generators = [
      () => generateWithPollinations(enhancedPrompt, imageId, quality),
      () => generateWithCraiyon(enhancedPrompt, imageId)
    ];
    
    let imageUrl = null;
    let lastError = null;
    
    for (const [index, generator] of generators.entries()) {
      const generatorName = index === 0 ? 'Pollinations.ai' : 'Craiyon';
      const genStartTime = Date.now();
      
      try {
        if (sessionId) {
          imageLogger.generationStarted(enhancedPrompt, generatorName, sessionId);
        }
        
        imageUrl = await generator();
        const genDuration = Date.now() - genStartTime;
        
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ ${generatorName}`);
        console.log('üîó URL:', imageUrl);
        
        if (sessionId) {
          if (previousImage) {
            imageLogger.editingCompleted(previousImage.url || previousImage, imageUrl, genDuration, sessionId);
          } else {
            imageLogger.generationCompleted(imageUrl, generatorName, genDuration, sessionId);
          }
        }
        break;
      } catch (err) {
        console.log(`‚ö†Ô∏è ${generatorName} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, err.message);
        
        if (sessionId) {
          if (previousImage) {
            imageLogger.editingFailed(err.message, sessionId);
          } else {
            imageLogger.generationFailed(err.message, generatorName, sessionId);
          }
        }
        
        lastError = err;
        continue;
      }
    }
    
    if (!imageUrl) {
      console.error('‚ùå –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
      
      if (sessionId) {
        imageLogger.generationFailed('–í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã', 'ALL_PROVIDERS', sessionId);
      }
      
      return { 
        success: false, 
        error: '–í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' 
      };
    }
    
    return { success: true, imageUrl };
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    return { success: false, error: error.message };
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –æ—Ç AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 * @param {string} prompt - –ò—Å—Ö–æ–¥–Ω—ã–π —Ä—É—Å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç
 */
async function getAIEnhancedPrompt(prompt, style) {
  console.log(`ü§ñ [AI-PROMPT] –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞: "${prompt}"`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
  if (!prompt || prompt.trim().length === 0) {
    throw new Error('–ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç');
  }
  
  // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –¥–µ—Ç–µ–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø–∞–º—è—Ç–∏
  const analysisQuestionPatterns = [
    '–¥–∞–π –∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–∞–Ω–∞–ª–∏–∑', '—á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏',
    '—á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ', '–æ–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏',
    '—á—Ç–æ –≤–∏–¥–∏—à—å', 'analyze this', 'analysis of'
  ];

  const memoryQuestionPatterns = [
    '–ø–æ–º–Ω–∏—à—å —á—Ç–æ', '–ø–æ–º–Ω–∏—à—å —á—Ç–æ-—Ç–æ', '—á—Ç–æ —è –ø—Ä–æ—Å–∏–ª', '—á—Ç–æ –ø—Ä–æ—Å–∏–ª',
    '—á—Ç–æ —è –≥–æ–≤–æ—Ä–∏–ª', '—á—Ç–æ –≥–æ–≤–æ—Ä–∏–ª', '—Ç—ã –ø–æ–º–Ω–∏—à—å', '–≤—Å–ø–æ–º–Ω–∏ —á—Ç–æ',
    '–Ω–µ –≥–æ–≤–æ—Ä–∏–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å', '—è —Å–ø—Ä–æ—Å–∏–ª', '—è –Ω–µ –≥–æ–≤–æ—Ä–∏–ª',
    '–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞—Ç—å —Ç–µ–±—è', '—á—Ç–æ –ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞—Ç—å'
  ];
  
  const lowerPrompt = prompt.toLowerCase();
  
  const isAnalysisRequest = analysisQuestionPatterns.some(pattern => 
    lowerPrompt.includes(pattern)
  );
  
  const isMemoryQuestion = memoryQuestionPatterns.some(pattern => 
    lowerPrompt.includes(pattern)
  );
  
  if (isAnalysisRequest) {
    console.log(`üö´ [AI-PROMPT] –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–∫–ª–æ–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é`);
    throw new Error('–≠—Ç–æ –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
  }
  
  if (isMemoryQuestion) {
    console.log(`üö´ [AI-PROMPT] –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–æ–ø—Ä–æ—Å –æ –ø–∞–º—è—Ç–∏, –æ—Ç–∫–ª–æ–Ω—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
    throw new Error('–≠—Ç–æ –≤–æ–ø—Ä–æ—Å –æ –ø–∞–º—è—Ç–∏, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
  
  try {
    const fetch = require('node-fetch');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
    const isGeneralImage = prompt.includes('—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    const isPrintDesign = prompt.includes('—Å–æ–∑–¥–∞–π –ø—Ä–∏–Ω—Ç');
    const isEmbroideryDesign = prompt.includes('—Å–æ–∑–¥–∞–π –≤—ã—à–∏–≤–∫—É');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    let translationRequest;
    
    if (isEmbroideryDesign) {
      translationRequest = `Translate this embroidery design request from Russian to English and optimize for embroidery: ${prompt.replace('—Å–æ–∑–¥–∞–π –≤—ã—à–∏–≤–∫—É', '').trim()}. Create prompt for simple, clean embroidery design with minimal colors, clear lines, suitable for machine embroidery.`;
    } else if (isPrintDesign) {
      translationRequest = `Translate this t-shirt print request from Russian to English and optimize for printing: ${prompt.replace('—Å–æ–∑–¥–∞–π –ø—Ä–∏–Ω—Ç', '').trim()}. Create prompt for t-shirt print design with maximum 5 colors, sharp clean lines, no shadows or gradients, suitable for screen printing.`;
    } else if (isGeneralImage) {
      translationRequest = `Translate this image request from Russian to English and improve for photorealistic generation: ${prompt.replace('—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '').trim()}. Create detailed descriptive prompt for high-quality photorealistic image.`;
    } else {
      // –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      translationRequest = `Translate this from Russian to English and improve for image generation: ${prompt}`;
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å—Ç–∏–ª—è –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
      if (style === 'embroidery') {
        translationRequest += '. This is for embroidery design, use simple descriptive terms.';
      } else if (style === 'vector') {
        translationRequest += '. This is for t-shirt vector design, use bold graphic terms.';
      } else {
        translationRequest += '. This is for photorealistic image, use detailed descriptive terms.';
      }
    }
    
    const response = await fetch('http://localhost:5001/stream', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        message: translationRequest,
        provider: 'Qwen_Qwen_2_72B'
      }),
      timeout: 10000
    });
    
    if (!response.ok) {
      throw new Error(`AI —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${response.status}`);
    }
    
    const responseText = await response.text();
    
    // –ü–∞—Ä—Å–∏–º SSE –æ—Ç–≤–µ—Ç –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
    const lines = responseText.split('\n');
    let finalText = '';
    
    for (const line of lines) {
      if (line.startsWith('data: ') && line.includes('"text"')) {
        try {
          const data = JSON.parse(line.substring(6));
          if (data.text) {
            finalText = data.text;
          }
        } catch (e) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        }
      }
    }
    
    if (finalText) {
      // –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Ñ—Ä–∞–∑
      let cleanedPrompt = finalText
        .replace(/^translate\s+to\s+english:\s*/i, '')
        .replace(/^translation:\s*/i, '')
        .replace(/^english:\s*/i, '')
        .replace(/^result:\s*/i, '')
        .trim();
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
      cleanedPrompt = applyStyleModifiers(cleanedPrompt, style);
      
      console.log(`‚úÖ [AI-TRANSLATE] –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: "${cleanedPrompt}"`);
      return cleanedPrompt;
    } else {
      throw new Error('AI –Ω–µ –≤–µ—Ä–Ω—É–ª –ø–µ—Ä–µ–≤–æ–¥');
    }
    
  } catch (error) {
    console.log(`‚ùå [AI-TRANSLATE] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (${error.message}), –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥`);
    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥
    return enhancePromptWithAI(prompt, style);
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–µ–≤—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É
 * @param {string} prompt - –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
 * @returns {string} –ü—Ä–æ–º–ø—Ç —Å–æ —Å—Ç–∏–ª–µ–≤—ã–º–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º–∏
 */
function applyStyleModifiers(prompt, style) {
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
  const lowerPrompt = prompt.toLowerCase();
  
  const isEmbroideryDesign = lowerPrompt.includes('embroidery') || 
                            lowerPrompt.includes('–≤—ã—à–∏–≤–∫–∞') || 
                            lowerPrompt.includes('–≤—ã—à–∏–≤–∫—É');
  
  const isTshirtDesign = lowerPrompt.includes('t-shirt') || 
                        lowerPrompt.includes('–ø—Ä–∏–Ω—Ç') || 
                        lowerPrompt.includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || 
                        lowerPrompt.includes('–¥–∏–∑–∞–π–Ω') ||
                        lowerPrompt.includes('–¥–µ–º–æ–Ω') ||
                        lowerPrompt.includes('–∫–∏–±–µ—Ä–ø–∞–Ω–∫') ||
                        lowerPrompt.includes('–Ω–µ–æ–Ω') ||
                        lowerPrompt.includes('booomerangs') ||
                        lowerPrompt.includes('–ª–æ–≥–æ—Ç–∏–ø');
  
  if (isEmbroideryDesign || style === 'embroidery') {
    return `embroidery design pattern, machine embroidery ready, clear defined areas, limited color palette, vector style, clean lines, flat colors, no gradients, simplified shapes, embroidery friendly design, suitable for needlework, ${prompt}`;
  } else if (isTshirtDesign || style === 'vector') {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å—Ç–∏–ª—è
    const lowerPrompt = prompt.toLowerCase();
    
    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–∞–ª–∏—Ç—Ä–∞ —Å—Ç–∏–ª–µ–π BOOOMERANGS
    let selectedStyle = '';
    
    // –°–∞–º—É—Ä–∞–π—Å–∫–∏–π/—è–ø–æ–Ω—Å–∫–∏–π —Å—Ç–∏–ª—å
    if (lowerPrompt.includes('—Å–∞–º—É—Ä–∞–π') || lowerPrompt.includes('samurai') || lowerPrompt.includes('–∫–∞—Ç–∞–Ω–∞') || lowerPrompt.includes('–Ω–∏–Ω–¥–∑—è') || lowerPrompt.includes('ninja') || lowerPrompt.includes('—è–ø–æ–Ω—Å–∫–∏–π') || lowerPrompt.includes('–≥—Ä–∏–±')) {
      selectedStyle = `hyperrealistic professional t-shirt print, exactly 5 colors maximum, photorealistic detailed illustration, no drop shadows no blur effects, solid black background, sharp clean contours, adult mature design, red white gray black silver color scheme, ultra-detailed samurai warrior, realistic armor textures, weapon details, fierce expression, serious aesthetic, screen printing ready, commercial quality`;
    }
    // –ü–æ–¥–≤–æ–¥–Ω—ã–π/–º–æ—Ä—Å–∫–æ–π —Å—Ç–∏–ª—å
    else if (lowerPrompt.includes('–¥–∞–π–≤–µ—Ä') || lowerPrompt.includes('diver') || lowerPrompt.includes('–º–æ—Ä–µ') || lowerPrompt.includes('sea') || lowerPrompt.includes('–ø–æ–¥–≤–æ–¥–Ω—ã–π') || lowerPrompt.includes('underwater') || lowerPrompt.includes('—â—É–ø–∞–ª—å—Ü–∞') || lowerPrompt.includes('tentacle') || lowerPrompt.includes('–æ—Å—å–º–∏–Ω–æ–≥') || lowerPrompt.includes('octopus') || lowerPrompt.includes('—Ä—É—Å–∞–ª–∫–∞') || lowerPrompt.includes('mermaid')) {
      selectedStyle = `hyperrealistic professional t-shirt print, exactly 5 colors maximum, photorealistic detailed illustration, no drop shadows no blur effects, dark oceanic background, sharp clean contours, adult mature design, deep teal purple white black silver color scheme, ultra-detailed sea creatures, realistic scales and textures, fierce oceanic features, serious aesthetic, screen printing ready, commercial quality`;
    }
    // –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π/—É–ª–∏—á–Ω—ã–π —Å—Ç–∏–ª—å
    else if (lowerPrompt.includes('–¥–µ–º–æ–Ω') || lowerPrompt.includes('demon') || lowerPrompt.includes('—Ç–æ–ª—Å—Ç–æ–≤–∫–∞') || lowerPrompt.includes('hoodie') || lowerPrompt.includes('—É–ª–∏—á–Ω—ã–π') || lowerPrompt.includes('street') || lowerPrompt.includes('urban') || lowerPrompt.includes('–Ω–µ–æ–Ω') || lowerPrompt.includes('neon') || lowerPrompt.includes('–ø–∞–Ω–∫') || lowerPrompt.includes('punk')) {
      selectedStyle = `hyperrealistic professional t-shirt print, exactly 5 colors maximum, photorealistic detailed illustration, no drop shadows no blur effects, solid black background, sharp clean contours, adult mature design, cyan purple white black silver color scheme, ultra-detailed street elements, realistic textures, fierce punk features, serious aesthetic, screen printing ready, commercial quality`;
    }
    // –ö–∏–±–µ—Ä–ø–∞–Ω–∫/—Ç–µ—Ö–Ω–æ —Å—Ç–∏–ª—å
    else if (lowerPrompt.includes('–∫–∏–±–µ—Ä–ø–∞–Ω–∫') || lowerPrompt.includes('cyberpunk') || lowerPrompt.includes('—Ç–µ—Ö–Ω–æ') || lowerPrompt.includes('techno') || lowerPrompt.includes('—Ä–æ–±–æ—Ç') || lowerPrompt.includes('robot') || lowerPrompt.includes('–º–∞—à–∏–Ω–∞') || lowerPrompt.includes('machine')) {
      selectedStyle = `hyperrealistic professional t-shirt print, exactly 5 colors maximum, photorealistic detailed illustration, no drop shadows no blur effects, dark futuristic background, sharp clean contours, adult mature design, cyan purple silver black white color scheme, ultra-detailed mechanical elements, realistic tech textures, serious cyberpunk aesthetic, screen printing ready, commercial quality`;
    }
    // –ñ–∏–≤–æ—Ç–Ω—ã–µ/–ø—Ä–∏—Ä–æ–¥–∞
    else if (lowerPrompt.includes('–∫–æ—Ç') || lowerPrompt.includes('cat') || lowerPrompt.includes('–∂–∏–≤–æ—Ç–Ω–æ–µ') || lowerPrompt.includes('animal') || lowerPrompt.includes('–≤–æ–ª–∫') || lowerPrompt.includes('wolf') || lowerPrompt.includes('–∑–º–µ–π') || lowerPrompt.includes('dragon')) {
      selectedStyle = `hyperrealistic professional t-shirt print, exactly 5 colors maximum, photorealistic detailed illustration, no drop shadows no blur effects, solid black background, sharp clean contours, adult mature design, red orange white black gray color scheme, ultra-detailed creature features, realistic fur and scale textures, fierce expression, serious aesthetic, screen printing ready, commercial quality`;
    }
    // –ë–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    else {
      selectedStyle = `hyperrealistic professional t-shirt print, exactly 5 colors maximum, photorealistic detailed illustration, no drop shadows no blur effects, solid black background, sharp clean contours, adult mature design, limited color palette, ultra-detailed features, realistic textures, serious aesthetic, screen printing ready, commercial quality`;
    }
    
    return `${selectedStyle}, ${prompt}`;
  } else {
    return `photorealistic, hyperrealistic, ${prompt}, detailed skin texture, natural proportions, professional portrait photography, studio lighting, authentic materials, lifelike details`;
  }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
 */
const SIMPLE_TRANSLATE = {
  '–∫–æ—Ç –≤ —Å–∞–ø–æ–≥–∞—Ö': 'puss in boots, orange tabby cat character wearing leather boots and hat, fairy tale character',
  '–∫–æ—Ç–∞ –≤ —Å–∞–ø–æ–≥–∞—Ö': 'puss in boots, orange tabby cat character wearing leather boots and hat, fairy tale character',
  '–∫—Ä–∞—Å–Ω–∞—è —Ä–æ–∑–∞': 'beautiful red rose flower with green stem and leaves',
  '–±–µ–ª–∞—è —Ä–æ–∑–∞': 'beautiful white rose flower with green stem and leaves', 
  '—Ä–æ–∑–æ–≤–∞—è —Ä–æ–∑–∞': 'beautiful pink rose flower with green stem and leaves',
  '—Ä–æ–∑–∞': 'beautiful red rose flower with green stem and leaves',
  '—Ä–æ–∑—ã': 'beautiful roses bouquet with green leaves',
  '—Ü–≤–µ—Ç–æ–∫': 'flower with detailed petals and center',
  '—Ü–≤–µ—Ç—ã': 'flowers with colorful petals',
  '–∫–æ—Ç': 'domestic cat with detailed fur and whiskers',
  '–∫–æ—Ç–∞': 'domestic cat with detailed fur and whiskers',
  '—Å–∞–ø–æ–≥–∏': 'boots',
  '—Å–∞–ø–æ–≥–∞—Ö': 'boots',
  '–≤ —Å–∞–ø–æ–≥–∞—Ö': 'wearing boots',
  '–∫–∏–±–µ—Ä': 'cyber',
  '—Ç–µ—Ö–Ω–æ': 'techno',
  '—Ç–µ—Ö–Ω–æ—Å–∞–º—É—Ä–∞–π': 'cyberpunk techno samurai warrior with futuristic armor',
  '—Ç–µ—Ö–Ω–æ —Å–∞–º—É—Ä–∞–π': 'cyberpunk techno samurai warrior with futuristic armor',
  '—Å–∞–º—É—Ä–∞–π': 'japanese samurai warrior with armor and sword',
  '–º—É—Ö–æ–º–æ—Ä': 'red mushroom amanita',
  '–º—É—Ö–æ–º–æ—Ä—ã': 'red mushrooms amanita',
  '–≥—Ä–∏–±—ã': 'mushrooms',
  '–≥—Ä–∏–±': 'mushroom',
  '–ø—Ä–∏–Ω—Ç': 'print design',
  '—Ñ—É—Ç–±–æ–ª–∫–∞': 't-shirt',
  '–¥—Ä–∞–∫–æ–Ω': 'detailed dragon with scales and wings',
  '—Ä–æ–±–æ—Ç': 'robot with mechanical details',
  '—Å–æ–±–∞–∫–∞': 'dog with detailed features',
  '–º–∞—à–∏–Ω–∞': 'car vehicle',
  '–¥–æ–º': 'house building',
  '–ø—Ä–∏—Ä–æ–¥–∞': 'nature landscape',
  '–≥–æ—Ä–æ–¥': 'city urban',
  '–∫–æ—Å–º–æ—Å': 'space cosmic',
  '–ª–µ–≤': 'majestic lion with mane',
  '–æ—Ä–µ–ª': 'eagle bird with spread wings',
  '—Å–µ—Ä–¥—Ü–µ': 'heart shape with decorative elements',
  '–∑–≤–µ–∑–¥–∞': 'star with pointed rays',
  '—Å–æ–ª–Ω—Ü–µ': 'sun with radiating rays',
  '–ª—É–Ω–∞': 'crescent moon',
  '–±–∞–±–æ—á–∫–∞': 'butterfly with detailed wing patterns',
  '–ø—Ç–∏—Ü–∞': 'bird with feathers and wings',
  '–¥–µ—Ä–µ–≤–æ': 'tree with branches and leaves',
  '–ª–∏—Å—Ç—å—è': 'green leaves with vein patterns',
  '—Å–æ–∑–¥–∞–π': 'create',
  '–Ω–∞—Ä–∏—Å—É–π': 'draw',
  '—Å–¥–µ–ª–∞–π': 'make',
  '—É–±–µ—Ä–∏': 'remove',
  '—É–¥–∞–ª–∏': 'remove'
};

/**
 * –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
 * @param {string} prompt - –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
function enhancePromptWithAI(prompt, style) {
  console.log(`üîß [SIMPLE] –ü—Ä–æ—Å—Ç–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: "${prompt}"`);
  
  let englishPrompt = prompt.toLowerCase();
  
  // –°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã, –ø–æ—Ç–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
  const sortedTranslations = Object.entries(SIMPLE_TRANSLATE)
    .sort(([a], [b]) => b.length - a.length);
  
  for (const [russian, english] of sortedTranslations) {
    englishPrompt = englishPrompt.replace(new RegExp(russian, 'g'), english);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –¥–∏–∑–∞–π–Ω –¥–ª—è —Ñ—É—Ç–±–æ–ª–∫–∏, –≤—ã—à–∏–≤–∫–∏ –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const isTshirtDesign = prompt.toLowerCase().includes('–ø—Ä–∏–Ω—Ç') || 
                        prompt.toLowerCase().includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || 
                        prompt.toLowerCase().includes('–¥–∏–∑–∞–π–Ω');
  
  const isEmbroideryDesign = prompt.toLowerCase().includes('–≤—ã—à–∏–≤–∫–∞') || 
                            prompt.toLowerCase().includes('–≤—ã—à–∏–≤–∫—É') || 
                            prompt.toLowerCase().includes('embroidery');
  
  if (isEmbroideryDesign) {
    // –î–ª—è –≤—ã—à–∏–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
    englishPrompt = `embroidery design style, simple geometric shapes, bold outlines, limited color palette, flat design, clean lines, textile art, needlework pattern, ${englishPrompt}`;
  } else if (isTshirtDesign) {
    // –î–ª—è —Ñ—É—Ç–±–æ–ª–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
    englishPrompt = `vector art style, t-shirt design, bold graphics, simple shapes, limited color palette, high contrast, clean lines, print-ready design, ${englishPrompt}`;
  } else {
    // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º
    englishPrompt = `photorealistic, hyperrealistic, ${englishPrompt}, detailed skin texture, natural proportions, professional portrait photography, studio lighting, authentic materials, lifelike details`;
  }
  
  // –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ—Ö–Ω–æ/–∫–∏–±–µ—Ä –¥–∏–∑–∞–π–Ω, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
  if (prompt.toLowerCase().includes('—Ç–µ—Ö–Ω–æ') || prompt.toLowerCase().includes('–∫–∏–±–µ—Ä')) {
    if (isTshirtDesign) {
      // –î–ª—è —Ñ—É—Ç–±–æ–ª–æ—á–Ω–æ–≥–æ —Ç–µ—Ö–Ω–æ-–¥–∏–∑–∞–π–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
      englishPrompt = `cyberpunk vector art, futuristic t-shirt design, tech graphics, ${englishPrompt}`;
    } else {
      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ç–æ—Ä–µ–∞–ª–∏–∑–º
      englishPrompt = `photorealistic cyberpunk style, realistic futuristic armor, real human features, ${englishPrompt}`;
    }
  }
  
  // –£–±–∏—Ä–∞–µ–º —Ä—É—Å—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è
  englishPrompt = englishPrompt.replace(/[–∞-—è—ë]/gi, '').replace(/\s+/g, ' ').trim();
  
  console.log(`‚úÖ [SIMPLE] –†–µ–∑—É–ª—å—Ç–∞—Ç: "${englishPrompt}"`);
  return englishPrompt;
}

/**
 * –ë–∞–∑–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ (fallback)
 * @param {string} prompt - –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
function enhanceRussianPromptBasic(prompt, style) {
  const originalPrompt = prompt.trim();
  
  // –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const translations = {
    '–∫–æ—Ç': 'cat',
    '—Å–æ–±–∞–∫–∞': 'dog',
    '—Å–∞–º—É—Ä–∞–π': 'samurai warrior',
    '–≤–æ–∏–Ω': 'warrior',
    '—á–µ–ª–æ–≤–µ–∫': 'person',
    '–¥–µ–≤—É—à–∫–∞': 'girl',
    '–ø–∞—Ä–µ–Ω—å': 'boy',
    '–¥—Ä–∞–∫–æ–Ω': 'dragon',
    '–ø—Ä–∏–Ω—Ü–µ—Å—Å–∞': 'princess',
    '—Ä—ã—Ü–∞—Ä—å': 'knight',
    '—Ä–æ–±–æ—Ç': 'robot',
    '–º–∞—à–∏–Ω–∞': 'car',
    '–¥–æ–º': 'house',
    '–∑–∞–º–æ–∫': 'castle',
    '–ª–µ—Å': 'forest',
    '–º–æ—Ä–µ': 'ocean',
    '–≥–æ—Ä—ã': 'mountains',
    '—Ü–≤–µ—Ç—ã': 'flowers',
    '–∑–∞–∫–∞—Ç': 'sunset',
    '–ª—É–Ω–∞': 'moon',
    '–∑–≤–µ–∑–¥—ã': 'stars',
    '—Ñ—É—Ç–±–æ–ª–∫–∞': 't-shirt',
    '–ø—Ä–∏–Ω—Ç': 'print design',
    '–¥–∏–∑–∞–π–Ω': 'design',
    '–∫—Ä–∞—Å–∏–≤—ã–π': 'beautiful',
    '–±–æ–ª—å—à–æ–π': 'large',
    '–º–∞–ª–µ–Ω—å–∫–∏–π': 'small',
    '—è—Ä–∫–∏–π': 'bright',
    '—Ç–µ–º–Ω—ã–π': 'dark',
    '–º–∞–≥–∏—á–µ—Å–∫–∏–π': 'magical',
    '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–π': 'fantasy'
  };
  
  // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–µ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
  let translatedPrompt = originalPrompt;
  Object.keys(translations).forEach(ru => {
    const regex = new RegExp(`\\b${ru}\\b`, 'gi');
    translatedPrompt = translatedPrompt.replace(regex, translations[ru]);
  });
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
  const isCharacter = /—Å–∞–º—É—Ä–∞–π|–≤–æ–∏–Ω|—á–µ–ª–æ–≤–µ–∫|–ø–µ—Ä—Å–æ–Ω–∞–∂|–≥–µ—Ä–æ–π|–¥–µ–≤—É—à–∫–∞|–ø–∞—Ä–µ–Ω—å|—Ä—ã—Ü–∞—Ä—å|–ø—Ä–∏–Ω—Ü–µ—Å—Å–∞/i.test(originalPrompt);
  const isTshirtDesign = /—Ñ—É—Ç–±–æ–ª–∫–∞|–ø—Ä–∏–Ω—Ç|–¥–∏–∑–∞–π–Ω|–ø–µ—á–∞—Ç—å/i.test(originalPrompt);
  const isNature = /–ø—Ä–∏—Ä–æ–¥–∞|–ª–µ—Å|–º–æ—Ä–µ|–≥–æ—Ä—ã|–ø–µ–π–∑–∞–∂|—Ü–≤–µ—Ç—ã|–∂–∏–≤–æ—Ç–Ω—ã–µ|–∑–∞–∫–∞—Ç|–ª—É–Ω–∞/i.test(originalPrompt);
  const isAbstract = /–∞–±—Å—Ç—Ä–∞–∫—Ç|–≥–µ–æ–º–µ—Ç—Ä–∏—è|—É–∑–æ—Ä|–ø–∞—Ç—Ç–µ—Ä–Ω/i.test(originalPrompt);
  const isCyberpunk = /—Ç–µ—Ö–Ω–æ|–∫–∏–±–µ—Ä|–Ω–µ–æ–Ω|–∫–∏–±–µ—Ä–ø–∞–Ω–∫|—Ñ—É—Ç—É—Ä–∏—Å—Ç–∏–∫|—Ä–æ–±–æ—Ç/i.test(originalPrompt);
  const isAnimal = /–∫–æ—Ç|—Å–æ–±–∞–∫–∞|–¥—Ä–∞–∫–æ–Ω|–∂–∏–≤–æ—Ç–Ω/i.test(originalPrompt);
  
  let enhancedPrompt = translatedPrompt;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
  if (isTshirtDesign) {
    enhancedPrompt = `vector art style t-shirt design, bold graphics, simple shapes, limited color palette, high contrast, clean lines, print-ready design, ${translatedPrompt}`;
  } else if (isCharacter && isCyberpunk) {
    enhancedPrompt = `photorealistic cyberpunk character, real human features, detailed skin texture, realistic futuristic armor, natural proportions, professional portrait photography, ${translatedPrompt}`;
  } else if (isCharacter) {
    enhancedPrompt = `photorealistic character portrait, real human anatomy, detailed skin texture, natural proportions, professional portrait photography, studio lighting, ${translatedPrompt}`;
  } else if (isAnimal) {
    enhancedPrompt = `photorealistic animal portrait, detailed fur texture, natural lighting, lifelike details, professional photography, ${translatedPrompt}`;
  } else if (isNature) {
    enhancedPrompt = `photorealistic nature photography, high resolution, natural lighting, authentic textures, professional quality, ${translatedPrompt}`;
  } else if (isAbstract) {
    enhancedPrompt = `photorealistic abstract art with realistic textures, natural lighting, authentic materials, ${translatedPrompt}`;
  } else {
    enhancedPrompt = `photorealistic, hyperrealistic details, natural lighting, authentic textures, professional photography quality, ${translatedPrompt}`;
  }
  
  return enhancedPrompt;
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} editRequest - –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * @param {Object|string} previousImage - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {string} –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
 */
function enhancePromptForEdit(editRequest, previousImage, style) {
  console.log(`üîß [EDIT] –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "${editRequest}"`);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  let baseDescription = "subject";
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã previousImage
  if (typeof previousImage === 'string') {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–æ—Å—Ç–æ URL
    const urlMatch = previousImage.match(/prompt\/([^?]+)/);
    if (urlMatch) {
      baseDescription = decodeURIComponent(urlMatch[1]);
    }
  } else if (previousImage && typeof previousImage === 'object') {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –æ–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    if (previousImage.description && previousImage.description !== '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ') {
      baseDescription = previousImage.description;
    } else if (previousImage.url) {
      const urlMatch = previousImage.url.match(/prompt\/([^?]+)/);
      if (urlMatch) {
        baseDescription = decodeURIComponent(urlMatch[1]);
      }
    }
  }
  
  console.log(`üìã [EDIT] –ë–∞–∑–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: "${baseDescription}"`);
  
  const editLower = editRequest.toLowerCase();
  let editedPrompt = baseDescription;
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  if (editLower.includes('–≥–ª–∞–∑–∞') && editLower.includes('–∫—Ä–∞—Å–Ω')) {
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ –≥–ª–∞–∑
    editedPrompt = editedPrompt.replace(/eyes?[^,]*/gi, '').replace(/–≥–ª–∞–∑[–∞-—è]*/gi, '');
    editedPrompt = `${editedPrompt}, with bright red eyes, glowing red eyes, detailed red iris`;
    console.log(`üî¥ [EDIT] –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≥–ª–∞–∑ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π`);
  }
  else if (editLower.includes('—É–±–µ—Ä–∏') || editLower.includes('—É–¥–∞–ª–∏') || editLower.includes('remove')) {
    // –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è
    if (editLower.includes('—Å–∞–ø–æ–≥') || editLower.includes('boot')) {
      editedPrompt = editedPrompt
        .replace(/wearing boots?/gi, '')
        .replace(/with boots?/gi, '')
        .replace(/boots?/gi, '')
        .replace(/—Å–∞–ø–æ–≥[–∏–∞]?/gi, '')
        .replace(/\s+/g, ' ')
        .trim() + ', without boots, barefoot';
    } else if (editLower.includes('—à–ª—è–ø') || editLower.includes('hat')) {
      editedPrompt = editedPrompt
        .replace(/wearing hat/gi, '')
        .replace(/with hat/gi, '')
        .replace(/hat/gi, '')
        .replace(/—à–ª—è–ø[–∞—É—ã–µ–æ–π]?/gi, '')
        .replace(/\s+/g, ' ')
        .trim() + ', without hat';
    } else if (editLower.includes('—Ñ–æ–Ω') || editLower.includes('background')) {
      editedPrompt = editedPrompt.replace(/background[^,]*/gi, '') + ', transparent background, isolated subject';
    }
  }
  else if (editLower.includes('–¥–æ–±–∞–≤—å') || editLower.includes('add')) {
    // –ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    editedPrompt = `${baseDescription}, ${editRequest.replace(/–¥–æ–±–∞–≤—å/gi, 'add').replace(/–¥–æ–±–∞–≤–∏/gi, 'add')}`;
  }
  else if (editLower.includes('–ø–æ–º–µ–Ω—è–π —Ü–≤–µ—Ç') || editLower.includes('–∏–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç') || editLower.includes('—Å–¥–µ–ª–∞–π') && editLower.includes('—Ü–≤–µ—Ç')) {
    // –ö–æ–º–∞–Ω–¥—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
    editedPrompt = `${baseDescription}, ${editRequest}`;
  }
  else {
    // –û–±—â–∏–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
    editedPrompt = `${baseDescription}, ${editRequest}`;
  }
  
  // –û—á–∏—Å—Ç–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞
  editedPrompt = editedPrompt
    .replace(/\s+/g, ' ')
    .replace(/,+/g, ',')
    .replace(/^,|,$/, '')
    .trim();
  
  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!editedPrompt.includes('high quality')) {
    editedPrompt = `high quality ${editedPrompt}, detailed, professional`;
  }
  
  console.log(`‚úÖ [EDIT] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç: "${editedPrompt}"`);
  return editedPrompt;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * @param {string} quality - –£—Ä–æ–≤–µ–Ω—å –∫–∞—á–µ—Å—Ç–≤–∞ (standard, hd, ultra)
 * @returns {Object} –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
function getQualitySettings(quality) {
  const settings = {
    standard: { width: 1024, height: 1024, model: 'flux', enhance: true },
    hd: { width: 2048, height: 2048, model: 'flux', enhance: true, quality: 'high' },
    ultra: { width: 3072, height: 3072, model: 'flux-pro', enhance: true, quality: 'ultra' }
  };
  
  return settings[quality] || settings.hd;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pollinations.ai API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} imageId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} quality - –ö–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateWithPollinations(prompt, imageId, quality = 'ultra') {
  // –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
  if (!prompt || prompt.trim() === '') {
    throw new Error('–ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
  
  const cleanPrompt = prompt.replace(/[^\w\s\-.,!?–∞-—è–ê-–Ø]/g, '').trim();
  console.log(`üé® [Pollinations] –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: "${cleanPrompt}"`);
  
  if (cleanPrompt.length < 3) {
    throw new Error('–ü—Ä–æ–º–ø—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏');
  }
  
  const qualitySettings = getQualitySettings(quality);
  const params = new URLSearchParams({
    width: qualitySettings.width.toString(),
    height: qualitySettings.height.toString(),
    nologo: 'true',
    enhance: qualitySettings.enhance.toString(),
    model: qualitySettings.model,
    seed: Date.now().toString()
  });
  
  if (qualitySettings.quality) {
    params.append('quality', qualitySettings.quality);
  }
  
  const imageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(cleanPrompt)}?${params.toString()}`;
  console.log(`üîó [Pollinations] –°–æ–∑–¥–∞–Ω URL (${quality}): ${qualitySettings.width}x${qualitySettings.height}`);
  
  return imageUrl;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Craiyon (DALL-E Mini)
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} imageId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateWithCraiyon(prompt, imageId) {
  const https = require('https');
  
  const postData = JSON.stringify({
    prompt: prompt,
    version: "35s5hfwn9n78gb06"
  });
  
  const options = {
    hostname: 'backend.craiyon.com',
    port: 443,
    path: '/generate',
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': postData.length,
      'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
    }
  };
  
  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const response = JSON.parse(data);
          if (response.images && response.images.length > 0) {
            const imageData = response.images[0];
            const imageUrl = `data:image/jpeg;base64,${imageData}`;
            resolve(imageUrl);
          } else {
            reject(new Error('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç Craiyon'));
          }
        } catch (error) {
          reject(new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Craiyon: ${error.message}`));
        }
      });
    });
    
    req.on('error', (error) => {
      reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Craiyon: ${error.message}`));
    });
    
    req.write(postData);
    req.end();
    
    setTimeout(() => {
      req.destroy();
      reject(new Error('–¢–∞–π–º–∞—É—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Craiyon'));
    }, 30000);
  });
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é EMG-API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateWithEMG(prompt, style, imageId) {
  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –∫–ª—é—á–∞
  const apiUrl = "https://api.emg-api.com/easyimg";
  
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      prompt,
      style: style === 'realistic' ? 'photorealistic' : style,
      negative_prompt: "ugly, blurry, poor quality, distorted",
      width: 512,
      height: 512,
      steps: 25
    })
  });
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ EMG-API: ${response.status} ${response.statusText}`);
  }
  
  const data = await response.json();
  
  if (!data.url) {
    throw new Error('EMG-API –Ω–µ –≤–µ—Ä–Ω—É–ª URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
  
  // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const imageResponse = await fetch(data.url);
  const buffer = await imageResponse.buffer();
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
  const outputPath = path.join(OUTPUT_DIR, `${imageId}-emg.jpg`);
  await fs.writeFile(outputPath, buffer);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  return `/output/${imageId}-emg.jpg`;
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API
 * @param {string} prompt - –¢–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {string} style - –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<string>} URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function generateWithProxyAPI(prompt, style, imageId) {
  // –ü—Ä–æ–∫—Å–∏—Ä—É—é—â–∏–π API –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π –¥–∏—Ñ—Ñ—É–∑–∏–∏
  const apiUrl = "https://free-api.sd.portals.app/api/v1/txt2img";
  
  const response = await fetch(apiUrl, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      prompt: prompt,
      negative_prompt: "ugly, blurry, poor quality, distorted",
      width: 512,
      height: 512,
      sampler_name: "DPM++ 2M Karras",
      steps: 25,
      cfg_scale: 7,
      seed: -1
    })
  });
  
  if (!response.ok) {
    throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ProxyAPI: ${response.status} ${response.statusText}`);
  }
  
  const data = await response.json();
  
  if (!data.images || !data.images.length) {
    throw new Error('ProxyAPI –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
  }
  
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const base64Image = data.images[0];
  const imageBuffer = Buffer.from(base64Image, 'base64');
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
  const outputPath = path.join(OUTPUT_DIR, `${imageId}-proxy.jpg`);
  await fs.writeFile(outputPath, imageBuffer);
  
  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
  return `/output/${imageId}-proxy.jpg`;
}

module.exports = {
  generateImage
};