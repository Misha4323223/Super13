/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –∑–∞–º–µ–Ω–∞ Vision API
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */

const sharp = require('sharp');

/**
 * –ê–Ω–∞–ª–∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ —Ü–≤–µ—Ç–æ–≤—ã–º –∫–ª–∞—Å—Ç–µ—Ä–∞–º
 */
async function analyzeObjectsByColor(imageBuffer) {
  try {
    const image = sharp(imageBuffer);
    const { width, height } = await image.metadata();
    
    // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const smallImage = await image.resize(200, 200, { fit: 'inside' }).raw().toBuffer();
    const { width: smallWidth, height: smallHeight } = await image.resize(200, 200, { fit: 'inside' }).metadata();
    
    const objects = [];
    const colorRegions = {};
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º
    for (let y = 0; y < smallHeight; y += 20) {
      for (let x = 0; x < smallWidth; x += 20) {
        const segmentColors = [];
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç 20x20
        for (let sy = y; sy < Math.min(y + 20, smallHeight); sy++) {
          for (let sx = x; sx < Math.min(x + 20, smallWidth); sx++) {
            const pixelIndex = (sy * smallWidth + sx) * 3;
            const r = smallImage[pixelIndex];
            const g = smallImage[pixelIndex + 1];
            const b = smallImage[pixelIndex + 2];
            
            segmentColors.push({ r, g, b });
          }
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–≤–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–∞
        const avgColor = segmentColors.reduce((sum, color) => ({
          r: sum.r + color.r,
          g: sum.g + color.g,
          b: sum.b + color.b
        }), { r: 0, g: 0, b: 0 });
        
        avgColor.r = Math.floor(avgColor.r / segmentColors.length);
        avgColor.g = Math.floor(avgColor.g / segmentColors.length);
        avgColor.b = Math.floor(avgColor.b / segmentColors.length);
        
        // –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Å–µ–≥–º–µ–Ω—Ç
        const segment = classifySegment(avgColor, x, y, smallWidth, smallHeight);
        if (segment.type !== 'background') {
          objects.push({
            type: segment.type,
            color: avgColor,
            position: { x: x * (width / smallWidth), y: y * (height / smallHeight) },
            size: { width: 20 * (width / smallWidth), height: 20 * (height / smallHeight) },
            confidence: segment.confidence
          });
        }
      }
    }
    
    return groupNearbyObjects(objects);
    
  } catch (error) {
    console.error('‚ùå [VISION] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –æ–±—ä–µ–∫—Ç–æ–≤:', error);
    return [];
  }
}

/**
 * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞ –ø–æ —Ü–≤–µ—Ç—É –∏ –ø–æ–∑–∏—Ü–∏–∏
 */
function classifySegment(color, x, y, width, height) {
  const brightness = (color.r + color.g + color.b) / 3;
  const saturation = Math.max(color.r, color.g, color.b) - Math.min(color.r, color.g, color.b);
  
  // –ü–æ–∑–∏—Ü–∏—è –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
  const isTop = y < height * 0.3;
  const isBottom = y > height * 0.7;
  const isCenter = x > width * 0.3 && x < width * 0.7 && y > height * 0.3 && y < height * 0.7;
  
  // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ü–≤–µ—Ç—É
  if (brightness > 240) {
    return { type: 'background', confidence: 0.8 };
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –ø–æ —Ü–≤–µ—Ç—É –∏ –ø–æ–∑–∏—Ü–∏–∏
  if (color.r > 150 && color.g < 100 && color.b < 100) {
    // –ö—Ä–∞—Å–Ω–æ–≤–∞—Ç—ã–µ —Ü–≤–µ—Ç–∞
    if (isBottom) {
      return { type: 'footwear', confidence: 0.7 }; // –í–æ–∑–º–æ–∂–Ω–æ –æ–±—É–≤—å
    }
    return { type: 'clothing', confidence: 0.6 };
  }
  
  if (color.g > 100 && color.r < 100 && color.b < 100) {
    // –ó–µ–ª–µ–Ω–æ–≤–∞—Ç—ã–µ —Ü–≤–µ—Ç–∞
    if (isTop) {
      return { type: 'eyes', confidence: 0.8 }; // –í–æ–∑–º–æ–∂–Ω–æ –≥–ª–∞–∑–∞
    }
    return { type: 'accessory', confidence: 0.5 };
  }
  
  if (brightness < 100 && saturation > 50) {
    // –¢–µ–º–Ω—ã–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞
    if (isBottom) {
      return { type: 'footwear', confidence: 0.8 };
    }
    if (isCenter) {
      return { type: 'clothing', confidence: 0.7 };
    }
    return { type: 'fur', confidence: 0.6 };
  }
  
  if (brightness > 180 && saturation < 30) {
    // –°–≤–µ—Ç–ª—ã–µ –Ω–µ–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ
    return { type: 'background', confidence: 0.9 };
  }
  
  // –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–Ω–∞
  if (isCenter) {
    return { type: 'body', confidence: 0.6 };
  }
  
  if (isTop) {
    return { type: 'head', confidence: 0.5 };
  }
  
  return { type: 'unknown', confidence: 0.3 };
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –±–ª–∏–∑–∫–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
function groupNearbyObjects(objects) {
  const groups = [];
  const processed = new Set();
  
  objects.forEach((obj, index) => {
    if (processed.has(index)) return;
    
    const group = {
      type: obj.type,
      objects: [obj],
      bounds: {
        left: obj.position.x,
        top: obj.position.y,
        right: obj.position.x + obj.size.width,
        bottom: obj.position.y + obj.size.height
      },
      confidence: obj.confidence
    };
    
    processed.add(index);
    
    // –ò—â–µ–º –±–ª–∏–∑–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã —Ç–æ–≥–æ –∂–µ —Ç–∏–ø–∞
    objects.forEach((other, otherIndex) => {
      if (processed.has(otherIndex) || other.type !== obj.type) return;
      
      const distance = Math.sqrt(
        Math.pow(obj.position.x - other.position.x, 2) +
        Math.pow(obj.position.y - other.position.y, 2)
      );
      
      if (distance < 100) { // –ë–ª–∏–∑–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã
        group.objects.push(other);
        group.bounds.left = Math.min(group.bounds.left, other.position.x);
        group.bounds.top = Math.min(group.bounds.top, other.position.y);
        group.bounds.right = Math.max(group.bounds.right, other.position.x + other.size.width);
        group.bounds.bottom = Math.max(group.bounds.bottom, other.position.y + other.size.height);
        processed.add(otherIndex);
      }
    });
    
    groups.push(group);
  });
  
  return groups.sort((a, b) => b.confidence - a.confidence);
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function createImageDescription(imageBuffer) {
  try {
    console.log('üîç [VISION] –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ...');
    
    const objects = await analyzeObjectsByColor(imageBuffer);
    const { width, height } = await sharp(imageBuffer).metadata();
    
    console.log('üìä [VISION] –ù–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:', objects.map(o => `${o.type} (${o.confidence.toFixed(2)})`));
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å—É–±—ä–µ–∫—Ç
    let mainSubject = '–æ–±—ä–µ–∫—Ç';
    const bodyParts = objects.filter(o => ['head', 'body', 'fur', 'eyes'].includes(o.type));
    const clothing = objects.filter(o => ['clothing', 'footwear', 'accessory'].includes(o.type));
    
    if (bodyParts.some(o => o.type === 'fur') || bodyParts.some(o => o.type === 'eyes')) {
      mainSubject = '–∫–æ—Ç';
    } else if (bodyParts.length > 0) {
      mainSubject = '–ø–µ—Ä—Å–æ–Ω–∞–∂';
    }
    
    // –û–ø–∏—Å—ã–≤–∞–µ–º –æ–¥–µ–∂–¥—É –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã
    let accessories = [];
    clothing.forEach(item => {
      if (item.type === 'footwear') {
        accessories.push('—Å–∞–ø–æ–≥–∏');
      } else if (item.type === 'clothing') {
        accessories.push('–æ–¥–µ–∂–¥–∞');
      } else if (item.type === 'accessory') {
        accessories.push('–∞–∫—Å–µ—Å—Å—É–∞—Ä—ã');
      }
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—â–∏–π —Å—Ç–∏–ª—å
    const dominantColors = await analyzeImageColors(imageBuffer);
    const style = determineImageStyle(dominantColors);
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    let description = mainSubject;
    
    if (accessories.length > 0) {
      description += ` –≤ ${accessories.join(', ')}`;
    }
    
    description += `, ${style}`;
    
    return {
      description,
      mainSubject,
      accessories,
      objects,
      style
    };
    
  } catch (error) {
    console.error('‚ùå [VISION] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è:', error);
    return {
      description: '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      mainSubject: '–æ–±—ä–µ–∫—Ç',
      accessories: [],
      objects: [],
      style: ''
    };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã (–∏–∑ smart-image-regenerator.js)
 */
async function analyzeImageColors(imageBuffer) {
  try {
    const image = sharp(imageBuffer);
    const { width, height } = await image.metadata();
    
    const { data } = await image.raw().toBuffer({ resolveWithObject: true });
    
    const colorCounts = {};
    const sampleStep = 10;
    
    for (let y = 0; y < height; y += sampleStep) {
      for (let x = 0; x < width; x += sampleStep) {
        const pixelIndex = (y * width + x) * 3;
        const r = data[pixelIndex];
        const g = data[pixelIndex + 1];
        const b = data[pixelIndex + 2];
        
        const colorKey = `${Math.floor(r/20)*20}-${Math.floor(g/20)*20}-${Math.floor(b/20)*20}`;
        colorCounts[colorKey] = (colorCounts[colorKey] || 0) + 1;
      }
    }
    
    return Object.entries(colorCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([color]) => {
        const [r, g, b] = color.split('-').map(Number);
        return { r, g, b };
      });
    
  } catch (error) {
    console.error('‚ùå [VISION] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤:', error);
    return [{ r: 128, g: 128, b: 128 }];
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function determineImageStyle(colors) {
  const mainColor = colors[0];
  
  const isDark = colors.every(c => (c.r + c.g + c.b) / 3 < 120);
  const isBright = colors.some(c => (c.r + c.g + c.b) / 3 > 200);
  const hasWarmColors = colors.some(c => c.r > c.g && c.r > c.b);
  const hasCoolColors = colors.some(c => c.b > c.r && c.b > c.g);
  
  let style = '';
  
  if (isDark) {
    style += '—Ç–µ–º–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞, ';
  } else if (isBright) {
    style += '—è—Ä–∫–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ, ';
  }
  
  if (hasWarmColors && !hasCoolColors) {
    style += '—Ç–µ–ø–ª—ã–µ —Ç–æ–Ω–∞, ';
  } else if (hasCoolColors && !hasWarmColors) {
    style += '—Ö–æ–ª–æ–¥–Ω—ã–µ —Ç–æ–Ω–∞, ';
  }
  
  const avgSaturation = colors.reduce((sum, c) => {
    const max = Math.max(c.r, c.g, c.b);
    const min = Math.min(c.r, c.g, c.b);
    return sum + (max - min) / max;
  }, 0) / colors.length;
  
  if (avgSaturation > 0.5) {
    style += '–Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞';
  } else {
    style += '–ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞';
  }
  
  return style;
}

module.exports = {
  analyzeObjectsByColor,
  createImageDescription,
  analyzeImageColors,
  determineImageStyle
};