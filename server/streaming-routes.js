const { analyzeMessage } = require('./smart-router'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
// –ò–º–ø–æ—Ä—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
const { getConversation } = require('./conversation-memory');

const demoDelay = 1500;

module.exports = async function apiChatStream(req, res) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º sessionId –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞ (–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    const { sessionId } = req.body || {};
    if (!sessionId) {
      res.status(400).json({ error: 'sessionId is required' });
      return;
    }

    res.writeHead(200, {
      'Content-Type': 'text/event-stream',
      'Cache-Control': 'no-cache',
      'Connection': 'keep-alive',
      'Access-Control-Allow-Origin': '*', // CORS-–∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞
      'X-Accel-Buffering': 'no'
    });

    res.flushHeaders();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = req.body.message || req.body.text || '';
    console.log('üîç [STREAMING] –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ù–ê–ß–ê–¢–û');
    console.log('üîç [STREAMING] –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', JSON.stringify(message));
    console.log('üîç [STREAMING] –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:', typeof message);
    console.log('üîç [STREAMING] –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', message.length);
    console.log('üîç [STREAMING] SessionId:', sessionId);

    const messageAnalysis = analyzeMessage(message);
    console.log('üîç [STREAMING] –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞:', JSON.stringify(messageAnalysis, null, 2));
    console.log('üìù [STREAMING] –ö–∞—Ç–µ–≥–æ—Ä–∏—è:', messageAnalysis.category);
    console.log('üìù [STREAMING] –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã:', messageAnalysis.providers);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤—Ä—É—á–Ω—É—é
    const messageLower = message.toLowerCase();
    console.log('üîç [STREAMING] –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ:', messageLower);
    const hasNuzhenVector = messageLower.includes('–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä');
    console.log('üîç [STREAMING] –°–æ–¥–µ—Ä–∂–∏—Ç "–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä":', hasNuzhenVector);

    // –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    let previousImage = null;
    if (messageAnalysis.category === 'image_editing' || messageAnalysis.category === 'image_edit') {
      console.log('üîç [STREAMING] –ò—â–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏:', sessionId);

      try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { getSessionMessages } = require('./chat-history.ts');
        const messages = await getSessionMessages(sessionId);
        console.log('üí¨ [STREAMING] –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î:', messages?.length || 0);

        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
        if (messages && messages.length > 0) {
          for (let i = messages.length - 1; i >= 0; i--) {
            const msg = messages[i];
            if (msg.sender === 'ai' && msg.text && msg.text.includes('![')) {
              console.log('üñºÔ∏è [STREAMING] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º!');

              // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
              const imageMatch = msg.text.match(/!\[([^\]]*)\]\(([^)]+)\)/);
              if (imageMatch) {
                previousImage = {
                  description: imageMatch[1] || '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
                  url: imageMatch[2],
                  fullContent: msg.text
                };
                console.log('‚úÖ [STREAMING] –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', previousImage.url);
                break;
              }
            }
          }
        }

        if (!previousImage) {
          console.log('‚ùå [STREAMING] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ë–î');
        }
      } catch (error) {
        console.error('‚ùå [STREAMING] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ë–î:', error);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const { isVectorizerCommand, handleVectorizerCommand } = require('./vectorizer-chat-integration.cjs');
    const isDirectVectorizerRequest = isVectorizerCommand(message);

    if (isDirectVectorizerRequest) {
      console.log('üéØ [STREAMING] –í–ï–ö–¢–û–†–ò–ó–ê–¶–ò–Ø: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');

      try {
        const success = await handleVectorizerCommand(message, sessionId, res, previousImage);

        if (success) {
          console.log('‚úÖ [STREAMING] –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
          console.log('‚ùå [STREAMING] –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π');
        }

      } catch (error) {
        console.error('‚ùå [STREAMING] –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        res.write(`event: message\n`);
        res.write(`data: ${JSON.stringify({
          role: 'assistant',
          content: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`
        })}\n\n`);
      }

      res.write(`event: done\n`);
      res.write(`data: {}\n\n`);
      res.end();
      return;
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (messageAnalysis.category === 'image_editing') {
      console.log('üé® [STREAMING] –ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');

      if (!previousImage || !previousImage.url) {
        res.write(`event: error\n`);
        res.write(`data: ${JSON.stringify({ error: '–î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' })}\n\n`);
        res.end();
        return;
      }

      try {
        res.write(`event: message\n`);
        res.write(`data: ${JSON.stringify({ 
          role: 'assistant', 
          content: 'üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...' 
        })}\n\n`);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const { editImage } = await import('./hybrid-image-generator.js');
        const result = await editImage(previousImage.url, message);

        if (result && result.success) {
          res.write(`event: image\n`);
          res.write(`data: ${JSON.stringify({ 
            imageUrl: result.imageUrl,
            description: result.description,
            operation: result.operation
          })}\n\n`);

          res.write(`event: message\n`);
          res.write(`data: ${JSON.stringify({ 
            role: 'assistant', 
            content: `‚úÖ ${result.description}` 
          })}\n\n`);
        } else {
          res.write(`event: error\n`);
          res.write(`data: ${JSON.stringify({ error: result?.error || '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' })}\n\n`);
        }
      } catch (editError) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', editError);
        res.write(`event: error\n`);
        res.write(`data: ${JSON.stringify({ error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' })}\n\n`);
      }
      res.end();
      return;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (messageAnalysis.category === 'image_generation' || messageAnalysis.category === 'image_edit') {
      try {
        const userId = `session_${sessionId}`;

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const { generateImage } = await import('./hybrid-image-generator.js');
        const result = await generateImage(
          message, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ–º–ø—Ç
          'realistic', // —Å—Ç–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
          previousImage,
          sessionId,
          userId
        );

        if (result && result.success) {
          const imageUrl = result.imageUrl;
          res.write(`event: image\n`);
          res.write(`data: ${JSON.stringify({ imageUrl })}\n\n`);
        } else {
          res.write(`event: error\n`);
          res.write(`data: ${JSON.stringify({ error: result?.error || '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' })}\n\n`);
        }
      } catch (imageError) {
        console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageError);
        res.write(`event: error\n`);
        res.write(`data: ${JSON.stringify({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' })}\n\n`);
      }
      res.end();
      return; // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∞–±–æ—Ç—É, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    }

    // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –ø–∞–º—è—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const semanticIntegration = require('./semantic-integration-layer.cjs');
    const semanticAnalysis = await semanticIntegration.analyzeWithSemantics(message, {
      userId: 1, // –ò–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ —Å–µ—Å—Å–∏–∏
      sessionId: sessionId,
      category: messageAnalysis.category,
      chatContext: messageAnalysis,
      hasRecentImages: !!previousImage,
      recentImageUrl: previousImage?.url || null, // –ü–µ—Ä–µ–¥–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      userName: 'User'
    });

    // –ó–∞–ø—É—Å–∫–∞–µ–º Python-–ø—Ä–æ—Ü–µ—Å—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞)
    const pythonProcess = startPythonProcess(req.body);

    let isCompleted = false;
    let demoSent = false;

    // –¢–∞–π–º–∞—É—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ Python –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
    const demoTimeout = setTimeout(() => {
      if (!isCompleted && !demoSent) {
        demoSent = true;
        res.write(`event: message\n`);
        res.write(`data: ${JSON.stringify({
          role: 'assistant',
          content: '–î–µ–º–æ-–æ—Ç–≤–µ—Ç: –≤–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...'
        })}\n\n`);
      }
    }, demoDelay);

    pythonProcess.on('data', (chunk) => {
      try {
        const outputText = chunk.toString();
        console.log('–ü–æ–ª—É—á–µ–Ω —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç Python:', outputText);

        // –ò—â–µ–º –≤—Å–µ JSON-–æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        const lines = outputText.split('\n').filter(Boolean);
        for (const line of lines) {
          try {
            const json = JSON.parse(line);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ—Ç–≤–µ—Ç
            if (json.done) {
              isCompleted = true;
              clearTimeout(demoTimeout);
              res.write(`event: done\n`);
              res.write(`data: {}\n\n`);
              if (!res.writableEnded) res.end();
              return;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—É
            res.write(`event: message\n`);
            res.write(`data: ${JSON.stringify(json)}\n\n`);
          } catch (parseErr) {
            console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –∏–∑ —Å—Ç—Ä–æ–∫–∏:', line);
          }
        }
      } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö Python:', err);
      }
    });

    pythonProcess.on('close', (code) => {
      isCompleted = true;
      clearTimeout(demoTimeout);
      if (!res.writableEnded) {
        res.write(`event: done\n`);
        res.write(`data: {}\n\n`);
        res.end();
      }
      console.log(`Python-–ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º ${code}`);
    });

    req.on('close', () => {
      console.log('–ö–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      if (!res.writableEnded) res.end();
      // pythonProcess —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω –≤ –¥–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤ apiChatStream:', error);
    if (!res.headersSent) {
      res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    } else if (!res.writableEnded) {
      res.write(`event: error\n`);
      res.write(`data: ${JSON.stringify({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })}\n\n`);
      res.end();
    }
  }
};


// –ó–∞–≥–ª—É—à–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ Python-–ø—Ä–æ—Ü–µ—Å—Å–∞
function startPythonProcess(body) {
  // –ó–¥–µ—Å—å –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è python process, –Ω–∞–ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ child_process.spawn
  // –ü—Ä–∏–º–µ—Ä:
  // const { spawn } = require('child_process');
  // const py = spawn('python3', ['script.py']);
  // py.stdin.write(JSON.stringify(body));
  // py.stdin.end();
  // return py;

  // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≤–µ—Ä–Ω–µ–º EventEmitter –∑–∞–≥–ª—É—à–∫—É (–∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å)
  const { EventEmitter } = require('events');
  const emitter = new EventEmitter();

  // –ß–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∏–º "–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ"
  setTimeout(() => {
    emitter.emit('close', 0);
  }, 2000);

  // –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º JSON-—Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ setTimeout
  setTimeout(() => {
    emitter.emit('data', Buffer.from(JSON.stringify({ role: 'assistant', content: '–ü—Ä–∏–≤–µ—Ç –æ—Ç Python!' }) + '\n'));
  }, 500);

  return emitter;
}