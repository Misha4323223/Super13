
/**
 * API –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
 */

const express = require('express');
const multer = require('multer');
const CommercialProposalGenerator = require('./commercial-proposal-generator');
const OfferBannerGenerator = require('./offer-banner-generator');

const router = express.Router();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('Only image files are allowed!'), false);
    }
  }
});

/**
 * POST /api/commercial/proposal
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
router.post('/proposal', upload.array('images', 10), async (req, res) => {
  try {
    console.log('üìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è...');

    const {
      clientName,
      clientCompany,
      clientType = 'standard',
      services = [],
      quantity = 1,
      deadline,
      additionalInfo = '',
      newsItems = []
    } = req.body;

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const images = req.files ? req.files.map(file => ({
      filename: file.originalname,
      buffer: file.buffer,
      mimetype: file.mimetype,
      size: file.size
    })) : [];

    const request = {
      clientName,
      clientCompany,
      clientType,
      services: Array.isArray(services) ? services : services.split(','),
      images,
      quantity: parseInt(quantity) || 1,
      deadline: deadline ? new Date(deadline) : null,
      additionalInfo,
      newsItems: Array.isArray(newsItems) ? newsItems : []
    };

    const result = await CommercialProposalGenerator.generateCommercialProposal(request);

    res.json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–ü:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
      details: error.message
    });
  }
});

/**
 * POST /api/commercial/offer
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ñ–µ—Ä–∞
 */
router.post('/offer', async (req, res) => {
  try {
    console.log('üí´ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ñ–µ—Ä–∞...');

    const {
      offerType = 'discount',
      clientType = 'standard',
      services = [],
      discountPercentage = 15,
      validUntil,
      customMessage = '',
      targetAudience = 'general'
    } = req.body;

    const request = {
      offerType,
      clientType,
      services: Array.isArray(services) ? services : services.split(','),
      discountPercentage: parseInt(discountPercentage) || 15,
      validUntil: validUntil ? new Date(validUntil) : null,
      customMessage,
      targetAudience
    };

    const result = await OfferBannerGenerator.generateOffer(request);

    res.json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ñ–µ—Ä–∞:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ñ–µ—Ä–∞',
      details: error.message
    });
  }
});

/**
 * POST /api/commercial/email-campaign
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –∫–∞–º–ø–∞–Ω–∏–∏
 */
router.post('/email-campaign', async (req, res) => {
  try {
    console.log('üìß –ì–µ–Ω–µ—Ä–∞—Ü–∏—è email –∫–∞–º–ø–∞–Ω–∏–∏...');

    const {
      campaignType = 'promotional',
      targetSegment = 'all',
      offers = [],
      newsItems = [],
      personalizations = {}
    } = req.body;

    const request = {
      campaignType,
      targetSegment,
      offers,
      newsItems,
      personalizations
    };

    const result = await OfferBannerGenerator.generateEmailCampaign(request);

    res.json({
      success: true,
      data: result
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email –∫–∞–º–ø–∞–Ω–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email –∫–∞–º–ø–∞–Ω–∏–∏',
      details: error.message
    });
  }
});

/**
 * GET /api/commercial/templates
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤
 */
router.get('/templates', async (req, res) => {
  try {
    const templates = {
      proposals: {
        standard: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ö–ü',
        premium: '–ü—Ä–µ–º–∏—É–º –ö–ü',  
        startup: '–ö–ü –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
        corporate: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–µ –ö–ü'
      },
      offers: {
        discount: '–°–∫–∏–¥–æ—á–Ω—ã–π –æ—Ñ–µ—Ä',
        seasonal: '–°–µ–∑–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
        new_client: '–î–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤',
        volume: '–û–±—ä–µ–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã',
        express: '–°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã'
      },
      emails: {
        promotional: '–†–µ–∫–ª–∞–º–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞',
        newsletter: '–ù–æ–≤–æ—Å—Ç–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞',
        seasonal: '–°–µ–∑–æ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞'
      }
    };

    res.json({
      success: true,
      data: templates
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤'
    });
  }
});

/**
 * POST /api/commercial/quick-proposal
 * –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–ü –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º
 */
router.post('/quick-proposal', async (req, res) => {
  try {
    console.log('‚ö° –ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–ü...');

    const {
      clientName = '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç',
      serviceType = 'print_design',
      urgency = 'normal'
    } = req.body;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ª—É–≥–∏ –ø–æ —Ç–∏–ø—É
    const serviceMap = {
      logo: ['logo_design', 'vectorization'],
      print: ['print_design', 'production'],
      embroidery: ['embroidery_design', 'embroidery_production'],
      full: ['logo_design', 'print_design', 'vectorization', 'production']
    };

    const services = serviceMap[serviceType] || serviceMap.print;

    const request = {
      clientName,
      clientCompany: '',
      clientType: urgency === 'urgent' ? 'premium' : 'standard',
      services,
      images: [],
      quantity: 1,
      deadline: null,
      additionalInfo: '–ë—ã—Å—Ç—Ä–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
      newsItems: []
    };

    const result = await CommercialProposalGenerator.generateCommercialProposal(request);

    res.json({
      success: true,
      data: result,
      type: 'quick_proposal'
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–ü:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ö–ü',
      details: error.message
    });
  }
});

/**
 * GET /api/commercial/pricing
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω
 */
router.get('/pricing', async (req, res) => {
  try {
    const pricing = {
      logo: {
        base: 2500,
        premium: 5000,
        exclusive: 8000,
        description: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–æ—Ç–∏–ø–∞'
      },
      print_design: {
        simple: 1500,
        detailed: 3000,
        complex: 4500,
        description: '–î–∏–∑–∞–π–Ω –¥–ª—è –ø–µ—á–∞—Ç–∏'
      },
      embroidery: {
        per_1000_stitches: 50,
        setup_fee: 500,
        min_order: 10,
        description: '–ú–∞—à–∏–Ω–Ω–∞—è –≤—ã—à–∏–≤–∫–∞'
      },
      vectorization: {
        simple: 800,
        medium: 1500,
        complex: 2500,
        description: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
      },
      production: {
        tshirt_print: 350,
        hoodie_print: 650,
        per_item_embroidery: 180,
        description: '–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∏ –ø–µ—á–∞—Ç—å'
      },
      discounts: {
        volume_10_49: '5%',
        volume_50_99: '10%',
        volume_100_199: '15%',
        volume_200_plus: '20%',
        returning_client: '5%',
        vip_client: '10%',
        partner: '15%'
      }
    };

    res.json({
      success: true,
      data: pricing,
      updated: new Date().toISOString()
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω'
    });
  }
});

module.exports = router;
