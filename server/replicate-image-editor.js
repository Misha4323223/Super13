/**
 * –†–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Replicate API
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç FLUX, Stable Diffusion –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

import Replicate from 'replicate';

const replicate = new Replicate({
  auth: process.env.REPLICATE_API_TOKEN,
});

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ FLUX
 */
async function generateWithFLUX(prompt, options = {}) {
    try {
        console.log('üé® [Replicate] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ FLUX...');
        
        const output = await replicate.run(
            "black-forest-labs/flux-schnell",
            {
                input: {
                    prompt: prompt,
                    num_outputs: 1,
                    aspect_ratio: options.aspect_ratio || "1:1",
                    output_format: "png",
                    output_quality: 90
                }
            }
        );

        return {
            success: true,
            imageUrl: output[0],
            provider: 'Replicate_FLUX',
            model: 'FLUX Schnell'
        };
    } catch (error) {
        console.error('‚ùå [Replicate] –û—à–∏–±–∫–∞ FLUX:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'Replicate_FLUX'
        };
    }
}

/**
 * –ò–Ω–ø–µ–π–Ω—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ Replicate
 */
async function inpaintImage(imageUrl, prompt, maskUrl = null) {
    try {
        console.log('üñåÔ∏è [Replicate] –ò–Ω–ø–µ–π–Ω—Ç–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        
        const output = await replicate.run(
            "stability-ai/stable-diffusion-inpainting",
            {
                input: {
                    image: imageUrl,
                    mask: maskUrl,
                    prompt: prompt,
                    num_inference_steps: 25,
                    guidance_scale: 7.5
                }
            }
        );

        return {
            success: true,
            imageUrl: output[0],
            provider: 'Replicate_Inpaint',
            model: 'Stable Diffusion Inpainting'
        };
    } catch (error) {
        console.error('‚ùå [Replicate] –û—à–∏–±–∫–∞ –∏–Ω–ø–µ–π–Ω—Ç–∏–Ω–≥–∞:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'Replicate_Inpaint'
        };
    }
}

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function enhanceImage(imageUrl) {
    try {
        console.log('‚ú® [Replicate] –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞...');
        
        const output = await replicate.run(
            "nightmareai/real-esrgan",
            {
                input: {
                    image: imageUrl,
                    scale: 2,
                    face_enhance: true
                }
            }
        );

        return {
            success: true,
            imageUrl: output,
            provider: 'Replicate_Enhance',
            model: 'Real-ESRGAN'
        };
    } catch (error) {
        console.error('‚ùå [Replicate] –û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'Replicate_Enhance'
        };
    }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
 */
async function removeBackground(imageUrl) {
    try {
        console.log('üé≠ [Replicate] –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞...');
        
        const output = await replicate.run(
            "cjwbw/rembg",
            {
                input: {
                    image: imageUrl
                }
            }
        );

        return {
            success: true,
            imageUrl: output,
            provider: 'Replicate_RemoveBG',
            model: 'RemBG'
        };
    } catch (error) {
        console.error('‚ùå [Replicate] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'Replicate_RemoveBG'
        };
    }
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */
async function img2img(imageUrl, prompt, strength = 0.7) {
    try {
        console.log('üîÑ [Replicate] –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
        
        const output = await replicate.run(
            "stability-ai/stable-diffusion",
            {
                input: {
                    image: imageUrl,
                    prompt: prompt,
                    num_inference_steps: 25,
                    guidance_scale: 7.5,
                    strength: strength
                }
            }
        );

        return {
            success: true,
            imageUrl: output[0],
            provider: 'Replicate_Img2Img',
            model: 'Stable Diffusion'
        };
    } catch (error) {
        console.error('‚ùå [Replicate] –û—à–∏–±–∫–∞ img2img:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'Replicate_Img2Img'
        };
    }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Replicate API
 */
async function checkReplicateAvailability() {
    try {
        if (!process.env.REPLICATE_API_TOKEN) {
            return {
                available: false,
                reason: 'REPLICATE_API_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            };
        }

        // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç API
        await replicate.models.list();
        
        return {
            available: true,
            reason: 'Replicate API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ'
        };
    } catch (error) {
        return {
            available: false,
            reason: `–û—à–∏–±–∫–∞ API: ${error.message}`
        };
    }
}

export {
    generateWithFLUX,
    inpaintImage,
    enhanceImage,
    removeBackground,
    img2img,
    checkReplicateAvailability
};