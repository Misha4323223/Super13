/**
 * –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ –ø–∏–∫—Å–µ–ª–µ–π
 */

const sharp = require('sharp');
const fetch = require('node-fetch');

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeImageLocally(imageUrl) {
  try {
    console.log('üîç [FREE-VISION] –ù–∞—á–∏–Ω–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', imageUrl);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const response = await fetch(imageUrl);
    if (!response.ok) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${response.status}`);
    }
    
    const imageBuffer = await response.buffer();
    const image = sharp(imageBuffer);
    const metadata = await image.metadata();
    
    console.log('üìä [FREE-VISION] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
      format: metadata.format,
      width: metadata.width,
      height: metadata.height,
      channels: metadata.channels
    });
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
    const colorAnalysis = await analyzeColors(image);
    const shapeAnalysis = await analyzeShapes(image, metadata);
    const contentAnalysis = await analyzeContent(image, metadata);
    const styleAnalysis = determineStyle(colorAnalysis, metadata);
    
    // –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    const description = generateDescription(colorAnalysis, shapeAnalysis, contentAnalysis, styleAnalysis);
    
    const result = {
      description,
      image_type: contentAnalysis.type,
      objects: contentAnalysis.objects,
      colors: colorAnalysis.dominantColors,
      style: styleAnalysis,
      composition: shapeAnalysis,
      success: true
    };
    
    console.log('‚úÖ [FREE-VISION] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', result);
    return result;
    
  } catch (error) {
    console.error('‚ùå [FREE-VISION] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', error);
    return {
      error: error.message,
      success: false
    };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
 */
async function analyzeColors(image) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ü–≤–µ—Ç–æ–≤
    const { dominant } = await image.stats();
    
    // –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏–∫—Å–µ–ª–µ–π
    const smallImage = await image
      .resize(50, 50, { fit: 'fill' })
      .raw()
      .toBuffer({ resolveWithObject: true });
    
    const { data, info } = smallImage;
    const pixelCount = info.width * info.height;
    const colorCounts = {};
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–∏–∫—Å0–µ–ª—å
    for (let i = 0; i < data.length; i += info.channels) {
      const r = data[i];
      const g = data[i + 1];
      const b = data[i + 2];
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞
      const colorKey = `${Math.floor(r / 32) * 32}-${Math.floor(g / 32) * 32}-${Math.floor(b / 32) * 32}`;
      colorCounts[colorKey] = (colorCounts[colorKey] || 0) + 1;
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
    const sortedColors = Object.entries(colorCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 5)
      .map(([color, count]) => {
        const [r, g, b] = color.split('-').map(Number);
        return {
          rgb: { r, g, b },
          name: getColorName(r, g, b),
          percentage: (count / pixelCount * 100).toFixed(1)
        };
      });
    
    return {
      dominantColors: sortedColors.map(c => c.name),
      colorDetails: sortedColors,
      brightness: calculateBrightness(dominant),
      contrast: calculateContrast(sortedColors)
    };
    
  } catch (error) {
    console.error('‚ùå [FREE-VISION] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤:', error);
    return {
      dominantColors: ['–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'],
      colorDetails: [],
      brightness: '—Å—Ä–µ–¥–Ω—è—è',
      contrast: '—Å—Ä–µ–¥–Ω–∏–π'
    };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º –∏ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
 */
async function analyzeShapes(image, metadata) {
  try {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    const orientation = metadata.width > metadata.height ? '–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è' : 
                      metadata.height > metadata.width ? '–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è' : '–∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è';
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—Ä–∞—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    const edges = await image
      .greyscale()
      .resize(100, 100)
      .convolve({
        width: 3,
        height: 3,
        kernel: [-1, -1, -1, -1, 8, -1, -1, -1, -1]
      })
      .raw()
      .toBuffer();
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∞–µ–≤
    let edgeCount = 0;
    for (let i = 0; i < edges.length; i++) {
      if (edges[i] > 50) edgeCount++;
    }
    
    const complexity = edgeCount > 2000 ? '—Å–ª–æ–∂–Ω–∞—è' : 
                      edgeCount > 1000 ? '—Å—Ä–µ–¥–Ω—è—è' : '–ø—Ä–æ—Å—Ç–∞—è';
    
    return {
      orientation,
      complexity,
      aspectRatio: (metadata.width / metadata.height).toFixed(2)
    };
    
  } catch (error) {
    console.error('‚ùå [FREE-VISION] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ä–º:', error);
    return {
      orientation: '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è',
      complexity: '—Å—Ä–µ–¥–Ω—è—è',
      aspectRatio: '1.0'
    };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeContent(image, metadata) {
  try {
    // –ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É –∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω
    const aspectRatio = metadata.width / metadata.height;
    
    let type = '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';
    let objects = [];
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Å—Ç–æ—Ä–æ–Ω –∏ —Ä–∞–∑–º–µ—Ä—É
    if (aspectRatio > 1.5) {
      type = '–ø–µ–π–∑–∞–∂';
      objects = ['–ø—Ä–∏—Ä–æ–¥–∞', '–≥–æ—Ä–∏–∑–æ–Ω—Ç'];
    } else if (aspectRatio < 0.8) {
      type = '–ø–æ—Ä—Ç—Ä–µ—Ç';
      objects = ['—Ñ–∏–≥—É—Ä–∞'];
    } else if (metadata.width > 800 && metadata.height > 600) {
      type = '—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è';
      objects = ['–æ–±—ä–µ–∫—Ç—ã'];
    } else {
      type = '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è';
      objects = ['—ç–ª–µ–º–µ–Ω—Ç—ã'];
    }
    
    return {
      type,
      objects,
      category: determineCategory(type, metadata)
    };
    
  } catch (error) {
    console.error('‚ùå [FREE-VISION] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:', error);
    return {
      type: '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      objects: ['–æ–±—ä–µ–∫—Ç'],
      category: '–æ–±—â–µ–µ'
    };
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function determineStyle(colorAnalysis, metadata) {
  const { brightness, contrast, dominantColors } = colorAnalysis;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –ø–æ —Ü–≤–µ—Ç–æ–≤—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
  if (dominantColors.includes('—á–µ—Ä–Ω—ã–π') && dominantColors.includes('–±–µ–ª—ã–π')) {
    return '—á–µ—Ä–Ω–æ-–±–µ–ª—ã–π —Å—Ç–∏–ª—å';
  } else if (dominantColors.length <= 2) {
    return '–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å';
  } else if (dominantColors.includes('—è—Ä–∫–∏–π') || contrast === '–≤—ã—Å–æ–∫–∏–π') {
    return '—è—Ä–∫–∏–π —Å—Ç–∏–ª—å';
  } else if (brightness === '–Ω–∏–∑–∫–∞—è') {
    return '—Ç–µ–º–Ω—ã–π —Å—Ç–∏–ª—å';
  } else {
    return '–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å';
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function generateDescription(colorAnalysis, shapeAnalysis, contentAnalysis, style) {
  const { dominantColors } = colorAnalysis;
  const { orientation, complexity } = shapeAnalysis;
  const { type, objects } = contentAnalysis;
  
  const colorDesc = dominantColors.slice(0, 2).join(' –∏ ');
  const mainObjects = objects.slice(0, 2).join(' –∏ ');
  
  return `${type} –≤ ${orientation} –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —Å ${colorDesc} —Ü–≤–µ—Ç–∞–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ ${mainObjects}, ${complexity} –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, ${style}`;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–∞ –ø–æ RGB
 */
function getColorName(r, g, b) {
  // –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤
  if (r > 200 && g > 200 && b > 200) return '–±–µ–ª—ã–π';
  if (r < 50 && g < 50 && b < 50) return '—á–µ—Ä–Ω—ã–π';
  if (r > g && r > b) return '–∫—Ä–∞—Å–Ω—ã–π';
  if (g > r && g > b) return '–∑–µ–ª–µ–Ω—ã–π';
  if (b > r && b > g) return '—Å–∏–Ω–∏–π';
  if (r > 150 && g > 150 && b < 100) return '–∂–µ–ª—Ç—ã–π';
  if (r > 150 && g < 100 && b > 150) return '—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π';
  if (r > 150 && g > 100 && b < 100) return '–æ—Ä–∞–Ω–∂–µ–≤—ã–π';
  if (r > 100 && g > 100 && b > 100) return '—Å–µ—Ä—ã–π';
  return '—Å–º–µ—à–∞–Ω–Ω—ã–π';
}

/**
 * –†–∞—Å—á–µ—Ç —è—Ä–∫–æ—Å—Ç–∏
 */
function calculateBrightness(dominant) {
  const avg = (dominant.r + dominant.g + dominant.b) / 3;
  return avg > 180 ? '–≤—ã—Å–æ–∫–∞—è' : avg > 80 ? '—Å—Ä–µ–¥–Ω—è—è' : '–Ω–∏–∑–∫–∞—è';
}

/**
 * –†–∞—Å—á–µ—Ç –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞
 */
function calculateContrast(colors) {
  if (colors.length < 2) return '–Ω–∏–∑–∫–∏–π';
  
  const first = colors[0].rgb;
  const second = colors[1].rgb;
  
  const diff = Math.abs(first.r - second.r) + Math.abs(first.g - second.g) + Math.abs(first.b - second.b);
  
  return diff > 300 ? '–≤—ã—Å–æ–∫–∏–π' : diff > 150 ? '—Å—Ä–µ–¥–Ω–∏–π' : '–Ω–∏–∑–∫–∏–π';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
 */
function determineCategory(type, metadata) {
  if (type === '–ø–æ—Ä—Ç—Ä–µ—Ç') return '–ª—é–¥–∏';
  if (type === '–ø–µ–π–∑–∞–∂') return '–ø—Ä–∏—Ä–æ–¥–∞';
  if (metadata.width === metadata.height) return '–∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ';
  return '–æ–±—â–µ–µ';
}

module.exports = {
  analyzeImageLocally
};