/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
 */

const sharp = require('sharp');

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
 */
async function loadImageFromUrl(imageUrl, retries = 3) {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
      
      console.log(`üîÑ [IMAGE-UTILS] –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${retries}): ${imageUrl}`);
      
      const imageResponse = await fetch(imageUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
          'Accept': 'image/webp,image/apng,image/*,*/*;q=0.8'
        },
        timeout: 15000
      });
      
      if (!imageResponse.ok) {
        if (attempt < retries) {
          console.log(`‚ö†Ô∏è [IMAGE-UTILS] –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞: HTTP ${imageResponse.status}, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫...`);
          await new Promise(resolve => setTimeout(resolve, 2000));
          continue;
        }
        throw new Error(`HTTP ${imageResponse.status}: ${imageResponse.statusText}`);
      }
      
      const contentType = imageResponse.headers.get('content-type');
      console.log(`üìã [IMAGE-UTILS] Content-Type: ${contentType}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ ArrayBuffer –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Buffer
      const arrayBuffer = await imageResponse.arrayBuffer();
      const imageBuffer = Buffer.from(arrayBuffer);
      
      console.log(`‚úÖ [IMAGE-UTILS] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${imageBuffer.length} –±–∞–π—Ç`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const metadata = await sharp(imageBuffer).metadata();
      console.log(`üìä [IMAGE-UTILS] –†–∞–∑–º–µ—Ä: ${metadata.width}x${metadata.height}, —Ñ–æ—Ä–º–∞—Ç: ${metadata.format}`);
      
      return imageBuffer;
      
    } catch (error) {
      if (attempt < retries) {
        console.log(`‚ö†Ô∏è [IMAGE-UTILS] –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –Ω–µ—É–¥–∞—á–Ω–∞: ${error.message}, –ø–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫...`);
        await new Promise(resolve => setTimeout(resolve, 3000));
        continue;
      }
      
      console.error(`‚ùå [IMAGE-UTILS] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${error.message}`);
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function validateImageFormat(buffer) {
  try {
    const metadata = await sharp(buffer).metadata();
    const supportedFormats = ['jpeg', 'jpg', 'png', 'webp', 'gif'];
    
    if (!supportedFormats.includes(metadata.format)) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: ${metadata.format}`);
    }
    
    return {
      valid: true,
      format: metadata.format,
      width: metadata.width,
      height: metadata.height,
      channels: metadata.channels
    };
    
  } catch (error) {
    return {
      valid: false,
      error: error.message
    };
  }
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PNG –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
 */
async function ensurePngFormat(buffer) {
  try {
    const metadata = await sharp(buffer).metadata();
    
    if (metadata.format === 'png') {
      return buffer;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG
    console.log(`üîÑ [IMAGE-UTILS] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ${metadata.format} –≤ PNG`);
    const pngBuffer = await sharp(buffer).png().toBuffer();
    
    return pngBuffer;
    
  } catch (error) {
    console.error(`‚ùå [IMAGE-UTILS] –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:`, error.message);
    throw error;
  }
}

module.exports = {
  loadImageFromUrl,
  validateImageFormat,
  ensurePngFormat
};