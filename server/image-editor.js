/**
 * –ú–æ–¥—É–ª—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Hugging Face –∏ –¥—Ä—É–≥–∏–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã
 */

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
const fs = require('fs');
const path = require('path');

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Remove.bg API
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function removeBackground(imageUrl) {
  try {
    console.log('üñºÔ∏è [EDITOR] –£–¥–∞–ª—è–µ–º —Ñ–æ–Ω —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
    const response = await fetch('https://api.remove.bg/v1.0/removebg', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        image_url: imageUrl,
        size: 'auto'
      })
    });

    if (response.ok) {
      const imageBuffer = await response.buffer();
      const outputPath = `./uploads/no-bg-${Date.now()}.png`;
      fs.writeFileSync(outputPath, imageBuffer);
      
      return {
        success: true,
        imageUrl: outputPath,
        message: '–§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
      };
    } else {
      throw new Error('Remove.bg API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è [EDITOR] Remove.bg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥');
    return await removeBackgroundHuggingFace(imageUrl);
  }
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ Hugging Face
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function removeBackgroundHuggingFace(imageUrl) {
  try {
    console.log('ü§ó [EDITOR] –ò—Å–ø–æ–ª—å–∑—É–µ–º Hugging Face –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞...');
    
    if (!process.env.HUGGINGFACE_API_KEY) {
      return {
        success: false,
        error: 'API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω',
        message: 'Hugging Face API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      };
    }
    
    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞
    const models = [
      'briaai/RMBG-1.4',
      'ZhengPeng7/BiRefNet',
      'schirrmacher/birefnet-general',
      'Xenova/modnet'
    ];
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    // –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for (const model of models) {
      try {
        console.log(`üîÑ [EDITOR] –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: ${model}`);
        
        const response = await fetch(`https://api-inference.huggingface.co/models/${model}`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${process.env.HUGGINGFACE_API_KEY}`,
            'Content-Type': 'application/octet-stream',
            'x-wait-for-model': 'true'
          },
          body: imageBuffer
        });

        if (response.ok) {
          const resultBuffer = await response.buffer();
          const timestamp = Date.now();
          const outputPath = `./uploads/no-bg-hf-${timestamp}.png`;
          fs.writeFileSync(outputPath, resultBuffer);
          
          console.log(`‚úÖ [EDITOR] –£—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –º–æ–¥–µ–ª—å: ${model}`);
          return {
            success: true,
            imageUrl: `/uploads/no-bg-hf-${timestamp}.png`,
            message: '–§–æ–Ω —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω',
            model: model
          };
        } else {
          const errorText = await response.text();
          console.log(`‚ö†Ô∏è [EDITOR] –ú–æ–¥–µ–ª—å ${model} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${response.status} - ${errorText}`);
          continue;
        }
      } catch (modelError) {
        console.log(`‚ö†Ô∏è [EDITOR] –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ ${model}:`, modelError.message);
        continue;
      }
    }
    
    // –ï—Å–ª–∏ –≤—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    return {
      success: false,
      error: '–í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      message: '–°–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ'
    };
    
  } catch (error) {
    console.error('‚ùå [EDITOR] –û–±—â–∞—è –æ—à–∏–±–∫–∞ Hugging Face:', error);
    return {
      success: false,
      error: '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
    };
  }
}

/**
 * –ó–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} newBackground - –û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function replaceBackground(imageUrl, newBackground) {
  try {
    console.log('üé® [EDITOR] –ó–∞–º–µ–Ω—è–µ–º —Ñ–æ–Ω –Ω–∞:', newBackground);
    
    // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ñ–æ–Ω
    const noBgResult = await removeBackground(imageUrl);
    
    if (!noBgResult.success) {
      return noBgResult;
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–æ–Ω
    const backgroundPrompt = `${newBackground}, high quality background, detailed, photorealistic`;
    const imageGenerator = require('./ai-image-generator');
    const bgResult = await imageGenerator.generateImage(backgroundPrompt, 'realistic');
    
    if (bgResult.success) {
      return {
        success: true,
        originalWithoutBg: noBgResult.imageUrl,
        newBackground: bgResult.imageUrl,
        message: `–°–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –±–µ–∑ —Ñ–æ–Ω–∞ –∏ –Ω–æ–≤—ã–π —Ñ–æ–Ω: ${newBackground}`,
        instructions: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è —Å–æ–≤–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
      };
    } else {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–æ–Ω',
        message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–æ–Ω–∞'
      };
    }
  } catch (error) {
    console.error('‚ùå [EDITOR] –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã —Ñ–æ–Ω–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å —Ñ–æ–Ω'
    };
  }
}

/**
 * Inpainting - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è  
 * @param {string} editPrompt - –ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function editImagePart(imageUrl, editPrompt) {
  try {
    console.log('‚úèÔ∏è [EDITOR] –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á–∞—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', editPrompt);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Hugging Face Stable Diffusion Inpainting
    const response = await fetch('https://api-inference.huggingface.co/models/runwayml/stable-diffusion-inpainting', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        inputs: editPrompt,
        parameters: {
          num_inference_steps: 20,
          guidance_scale: 7.5
        }
      })
    });

    if (response.ok) {
      const resultBuffer = await response.buffer();
      const outputPath = `./uploads/edited-${Date.now()}.png`;
      fs.writeFileSync(outputPath, resultBuffer);
      
      return {
        success: true,
        imageUrl: `http://localhost:3000/${outputPath}`,
        message: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${editPrompt}`
      };
    } else {
      throw new Error('Inpainting API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    }
  } catch (error) {
    console.error('‚ùå [EDITOR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return {
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
      message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
    };
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–ø—Ä–æ—Å–∞
 * @param {string} request - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 */
function parseEditRequest(request) {
  const lowerRequest = request.toLowerCase();
  
  if (lowerRequest.includes('—É–¥–∞–ª–∏ —Ñ–æ–Ω') || lowerRequest.includes('—É–±–µ—Ä–∏ —Ñ–æ–Ω') || lowerRequest.includes('–±–µ–∑ —Ñ–æ–Ω–∞')) {
    return {
      type: 'remove_background',
      description: '–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞'
    };
  }
  
  if (lowerRequest.includes('–∑–∞–º–µ–Ω–∏ —Ñ–æ–Ω') || lowerRequest.includes('–ø–æ–º–µ–Ω—è–π —Ñ–æ–Ω') || lowerRequest.includes('–Ω–æ–≤—ã–π —Ñ–æ–Ω')) {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–æ–Ω–∞
    const bgMatch = request.match(/(—Ñ–æ–Ω|background).+?–Ω–∞\s+(.+?)(?:\.|$|,)/i);
    const newBg = bgMatch ? bgMatch[2] : '–ø—Ä–∏—Ä–æ–¥–∞, –ª–µ—Å';
    
    return {
      type: 'replace_background',
      newBackground: newBg,
      description: `–ó–∞–º–µ–Ω–∞ —Ñ–æ–Ω–∞ –Ω–∞: ${newBg}`
    };
  }
  
  if (lowerRequest.includes('–∏–∑–º–µ–Ω–∏') || lowerRequest.includes('–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π') || lowerRequest.includes('–¥–æ–±–∞–≤—å')) {
    return {
      type: 'edit_part',
      editPrompt: request,
      description: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    };
  }
  
  return {
    type: 'unknown',
    description: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
  };
}

module.exports = {
  removeBackground,
  replaceBackground,
  editImagePart,
  parseEditRequest
};