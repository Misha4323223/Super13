/**
 * –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
 * REST API endpoints –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

import express from 'express';
import multer from 'multer';
import path from 'path';
import fs from 'fs/promises';
import { fileURLToPath } from 'url';
import { createRequire } from 'module';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const require = createRequire(import.meta.url);

const router = express.Router();

console.log('üîç –ó–∞–≥—Ä—É–∑–∫–∞ advanced-vectorizer.cjs...');

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
const vectorizerPath = require.resolve('../advanced-vectorizer.cjs');
if (require.cache[vectorizerPath]) {
  delete require.cache[vectorizerPath];
  console.log('üîÑ –û—á–∏—â–µ–Ω –∫—ç—à advanced-vectorizer.cjs –≤ routes');
}

let advancedVectorizer;
try {
  advancedVectorizer = require('../advanced-vectorizer.cjs');
  console.log('  ‚úì advanced-vectorizer.cjs –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
  console.log('  ‚úì –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:', Object.keys(advancedVectorizer));
} catch (error) {
  console.error('‚ùå –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ advanced-vectorizer.cjs:', error.message);
  console.error('  Stack:', error.stack);
  process.exit(1);
}

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
const logVectorizerRequest = (req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] Vectorizer API: ${req.method} ${req.path}`);
  if (req.file) {
    console.log(`  üìÅ File: ${req.file.originalname} (${(req.file.size / 1024).toFixed(1)}KB)`);
  }
  if (req.files && req.files.length > 0) {
    console.log(`  üìÅ Files: ${req.files.length} files`);
  }
  next();
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const handleVectorizerError = (error, req, res, next) => {
  console.error(`‚ùå Vectorizer Error [${req.method} ${req.path}]:`, error);
  
  // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (error.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({
      success: false,
      error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
      message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB'
    });
  }
  
  if (error.message && error.message.includes('Unsupported file type')) {
    return res.status(400).json({
      success: false,
      error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
      message: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPEG, PNG, GIF, WebP, BMP'
    });
  }
  
  res.status(500).json({
    success: false,
    error: '–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
    message: error.message || '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
  });
};

// –ü—Ä–∏–º–µ–Ω—è–µ–º middleware –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
router.use(logVectorizerRequest);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({
  storage: storage,
  limits: {
    fileSize: 10 * 1024 * 1024 // 10MB –ª–∏–º–∏—Ç
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp'];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('Unsupported file type'), false);
    }
  }
});

/**
 * POST /api/vectorizer/analyze
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
router.post('/analyze', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    const detectedType = await advancedVectorizer.detectContentType(req.file.buffer);
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
    const analysis = {
      detectedType: detectedType || 'artwork',
      confidence: 0.8, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      recommendedQuality: detectedType === 'logo' ? 'premium' : 'standard',
      recommendedFormat: 'svg',
      description: `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø: ${detectedType || 'artwork'}`
    };
    
    res.json({
      success: true,
      analysis: analysis
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/convert
 * –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
router.post('/convert', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    const options = {
      quality: req.body.quality || 'standard',
      outputFormat: req.body.format || 'svg',
      optimizeFor: req.body.optimizeFor || 'web',
      autoDetectType: req.body.autoDetectType !== 'false'
    };

    console.log(`üéØ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API:`, {
      filename: req.file.originalname,
      size: req.file.size,
      options
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Adobe –∞–ª–≥–æ—Ä–∏—Ç–º —Ü–≤–µ—Ç–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Adobe Illustrator –∞–ª–≥–æ—Ä–∏—Ç–º');
    const result = await advancedVectorizer.silkscreenVectorize(
      req.file.buffer,
      { maxColors: 6, ...options }
    );
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç API
    if (result.success) {
      result.detectedType = 'silkscreen';
      result.filename = `vectorized_${Date.now().toString(36)}.svg`;
    }

    if (result.success) {
      res.json({
        success: true,
        result: {
          svgContent: result.svgContent,
          detectedType: result.detectedType,
          quality: result.quality,
          filename: result.filename,
          optimizationStats: result.optimization
        }
      });
    } else {
      res.status(500).json({
        success: false,
        error: result.error
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/convert-url
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
 */
router.post('/convert-url', async (req, res) => {
  try {
    const { imageUrl, quality, outputFormat } = req.body;

    if (!imageUrl) {
      return res.status(400).json({
        success: false,
        error: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω'
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π URL
    try {
      new URL(imageUrl);
    } catch (urlError) {
      return res.status(400).json({
        success: false,
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      });
    }

    const options = {
      quality: quality || 'simple',
      outputFormat: outputFormat || 'svg',
      optimizeFor: 'web',
      autoDetectType: true
    };

    console.log(`üåê –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL:`, {
      url: imageUrl.substring(0, 100) + '...',
      options
    });

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Adobe –∞–ª–≥–æ—Ä–∏—Ç–º —Ü–≤–µ—Ç–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    console.log('üé® CONVERT-URL: –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π Adobe Illustrator –∞–ª–≥–æ—Ä–∏—Ç–º');
    const result = await advancedVectorizer.vectorizeFromUrl(imageUrl, { maxColors: 6, ...options });
    
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç API
    if (result.success) {
      result.detectedType = 'silkscreen';
      result.filename = `vectorized_${Date.now().toString(36)}.svg`;
    }

    if (result.success) {
      res.json({
        success: true,
        result: {
          svgContent: result.svgContent,
          detectedType: result.detectedType,
          quality: result.quality,
          filename: result.filename,
          optimizationStats: result.optimization
        }
      });
    } else {
      res.status(500).json({
        success: false,
        error: result.error
      });
    }

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ URL:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/professional
 * –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –æ–ø—Ü–∏–π
 */
router.post('/professional', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    const options = {
      quality: req.body.quality || 'premium',
      formats: req.body.formats ? req.body.formats.split(',') : ['svg'],
      generatePreviews: req.body.generatePreviews === 'true',
      optimizeFor: req.body.optimizeFor || 'web',
      includeMetadata: req.body.includeMetadata !== 'false'
    };

    console.log(`üöÄ –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ API:`, {
      filename: req.file.originalname,
      options
    });

    const result = await advancedVectorizer.professionalVectorize(
      req.file.buffer,
      req.file.originalname,
      options
    );

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/batch
 * –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
router.post('/batch', upload.array('images', 10), async (req, res) => {
  try {
    if (!req.files || req.files.length === 0) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
      });
    }

    const options = {
      quality: req.body.quality || 'standard',
      outputFormat: req.body.format || 'svg'
    };

    console.log(`üì¶ –ü–∞–∫–µ—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${req.files.length} —Ñ–∞–π–ª–æ–≤`);

    const imageBuffers = req.files.map(file => ({
      buffer: file.buffer,
      originalName: file.originalname
    }));

    const result = await advancedVectorizer.batchVectorize(imageBuffers, options);

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/previews
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é —Å —Ä–∞–∑–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–∞—á–µ—Å—Ç–≤–∞
 */
router.post('/previews', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    console.log(`üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –¥–ª—è: ${req.file.originalname}`);

    const result = await advancedVectorizer.generatePreviews(
      req.file.buffer,
      req.file.originalname
    );

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–≤—å—é:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * POST /api/vectorizer/multi-format
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
 */
router.post('/multi-format', upload.single('image'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({
        success: false,
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ'
      });
    }

    const formats = req.body.formats ? req.body.formats.split(',') : ['svg', 'eps', 'pdf'];
    const options = {
      quality: req.body.quality || 'premium',
      formats: formats
    };

    console.log(`üé® –ú–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:`, {
      filename: req.file.originalname,
      formats: formats
    });

    const result = await advancedVectorizer.multiFormatVectorize(
      req.file.buffer,
      req.file.originalname,
      options
    );

    res.json(result);

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

/**
 * GET /api/vectorizer/formats
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
 */
router.get('/formats', (req, res) => {
  res.json({
    success: true,
    formats: advancedVectorizer.OUTPUT_FORMATS,
    qualities: advancedVectorizer.QUALITY_PRESETS,
    contentTypes: advancedVectorizer.CONTENT_TYPES
  });
});

/**
 * GET /api/vectorizer/health
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–¥—É–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
router.get('/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    const outputDir = path.join(__dirname, '..', 'output');
    const tempDir = path.join(__dirname, '..', 'temp');
    
    await fs.access(outputDir).catch(() => fs.mkdir(outputDir, { recursive: true }));
    await fs.access(tempDir).catch(() => fs.mkdir(tempDir, { recursive: true }));

    res.json({
      success: true,
      status: 'healthy',
      module: 'advanced-vectorizer',
      version: '2.0',
      directories: {
        output: outputDir,
        temp: tempDir
      },
      capabilities: [
        'auto-detection',
        'multi-format',
        'quality-levels',
        'batch-processing',
        'optimization',
        'previews'
      ]
    });

  } catch (error) {
    res.status(500).json({
      success: false,
      status: 'unhealthy',
      error: error.message
    });
  }
});

// –ü—Ä–∏–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫–æ –≤—Å–µ–º –º–∞—Ä—à—Ä—É—Ç–∞–º
router.use(handleVectorizerError);

export default router;