/**
 * –†–µ–¥–∞–∫—Ç–æ—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö API
 */

import sharp from 'sharp';
import fetch from 'node-fetch';
import fs from 'fs';
import path from 'path';

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
 */
async function addObjectToImage(baseImageUrl, objectDescription, position = 'center') {
    try {
        console.log(`üé® –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç: ${objectDescription}`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —á–µ—Ä–µ–∑ Pollinations
        const objectPrompt = `${objectDescription}, transparent background, PNG, isolated object, high quality`;
        const objectImageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(objectPrompt)}?width=512&height=512&nologo=true&enhance=true&seed=${Date.now()}`;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const baseResponse = await fetch(baseImageUrl);
        const baseBuffer = await baseResponse.buffer();
        const baseMetadata = await sharp(baseBuffer).metadata();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
        const objectResponse = await fetch(objectImageUrl);
        const objectBuffer = await objectResponse.buffer();
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ - –¥–µ–ª–∞–µ–º —Ñ–æ–Ω –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º
        const processedObject = await sharp(objectBuffer)
            .resize(Math.floor(baseMetadata.width * 0.3), Math.floor(baseMetadata.height * 0.3))
            .png()
            .toBuffer();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        let left, top;
        switch (position) {
            case 'top-left':
                left = 50;
                top = 50;
                break;
            case 'top-right':
                left = baseMetadata.width - 200;
                top = 50;
                break;
            case 'bottom-left':
                left = 50;
                top = baseMetadata.height - 200;
                break;
            case 'bottom-right':
                left = baseMetadata.width - 200;
                top = baseMetadata.height - 200;
                break;
            default: // center
                left = Math.floor((baseMetadata.width - 150) / 2);
                top = Math.floor((baseMetadata.height - 150) / 2);
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
        const result = await sharp(baseBuffer)
            .composite([{
                input: processedObject,
                left: left,
                top: top,
                blend: 'over'
            }])
            .png()
            .toBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const filename = `object_added_${Date.now()}.png`;
        const filepath = path.join(process.cwd(), 'public', 'generated', filename);
        
        fs.writeFileSync(filepath, result);
        
        return {
            success: true,
            imageUrl: `/generated/${filename}`,
            operation: 'add_object',
            description: `–î–æ–±–∞–≤–ª–µ–Ω –æ–±—ä–µ–∫—Ç: ${objectDescription}`,
            objectImageUrl: objectImageUrl
        };
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', error);
        return {
            success: false,
            error: error.message,
            operation: 'add_object'
        };
    }
}

/**
 * –ó–∞–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
 */
async function changeObjectColor(imageUrl, colorChange) {
    try {
        console.log(`üé® –ò–∑–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç: ${colorChange}`);
        
        const response = await fetch(imageUrl);
        const imageBuffer = await response.buffer();
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
        const colorInfo = parseColorChange(colorChange);
        
        let result = sharp(imageBuffer);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
        if (colorInfo.targetColor === 'red') {
            result = result.modulate({ saturation: 1.2 }).tint({ r: 255, g: 100, b: 100 });
        } else if (colorInfo.targetColor === 'blue') {
            result = result.modulate({ saturation: 1.2 }).tint({ r: 100, g: 100, b: 255 });
        } else if (colorInfo.targetColor === 'green') {
            result = result.modulate({ saturation: 1.2 }).tint({ r: 100, g: 255, b: 100 });
        } else if (colorInfo.targetColor === 'warm') {
            result = result.tint({ r: 255, g: 240, b: 200 });
        } else if (colorInfo.targetColor === 'cool') {
            result = result.tint({ r: 200, g: 240, b: 255 });
        } else {
            // –û–±—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
            result = result.modulate({ saturation: 1.1, brightness: 1.05 });
        }
        
        const buffer = await result.png().toBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const filename = `color_changed_${Date.now()}.png`;
        const filepath = path.join(process.cwd(), 'public', 'generated', filename);
        
        fs.writeFileSync(filepath, buffer);
        
        return {
            success: true,
            imageUrl: `/generated/${filename}`,
            operation: 'change_color',
            description: `–ò–∑–º–µ–Ω–µ–Ω —Ü–≤–µ—Ç: ${colorChange}`
        };
        
    } catch (error) {
        return {
            success: false,
            error: error.message,
            operation: 'change_color'
        };
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
async function removeObjectByMask(imageUrl, objectToRemove) {
    try {
        console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç: ${objectToRemove}`);
        
        const response = await fetch(imageUrl);
        const imageBuffer = await response.buffer();
        const metadata = await sharp(imageBuffer).metadata();
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–∞—Å–∫—É –¥–ª—è "—É–¥–∞–ª–µ–Ω–∏—è" (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ–Ω–æ–º)
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –∏–Ω–ø–µ–π–Ω—Ç–∏–Ω–≥–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã AI –∞–Ω–∞–ª–∏–∑, –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
        const maskSize = Math.min(metadata.width, metadata.height) * 0.2;
        
        // –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—É—é –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
        const result = await sharp(imageBuffer)
            .composite([{
                input: Buffer.from(`
                    <svg width="${maskSize}" height="${maskSize}">
                        <defs>
                            <filter id="blur">
                                <feGaussianBlur stdDeviation="10"/>
                            </filter>
                        </defs>
                        <circle cx="${maskSize/2}" cy="${maskSize/2}" r="${maskSize/3}" 
                                fill="rgba(255,255,255,0.8)" filter="url(#blur)"/>
                    </svg>
                `),
                left: Math.floor(metadata.width * 0.4),
                top: Math.floor(metadata.height * 0.4),
                blend: 'multiply'
            }])
            .blur(2)
            .png()
            .toBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const filename = `object_removed_${Date.now()}.png`;
        const filepath = path.join(process.cwd(), 'public', 'generated', filename);
        
        fs.writeFileSync(filepath, result);
        
        return {
            success: true,
            imageUrl: `/generated/${filename}`,
            operation: 'remove_object',
            description: `–£–¥–∞–ª–µ–Ω –æ–±—ä–µ–∫—Ç: ${objectToRemove}`
        };
        
    } catch (error) {
        return {
            success: false,
            error: error.message,
            operation: 'remove_object'
        };
    }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∞—Ä–∏–∞—Ü–∏–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
 */
async function generateVariation(imageUrl, changeDescription) {
    try {
        console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é: ${changeDescription}`);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const variationPrompt = `Image similar to original but with changes: ${changeDescription}, high quality, detailed`;
        const variationUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(variationPrompt)}?width=1024&height=1024&nologo=true&enhance=true&seed=${Date.now()}`;
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
        const originalResponse = await fetch(imageUrl);
        const originalBuffer = await originalResponse.buffer();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏—é
        const variationResponse = await fetch(variationUrl);
        const variationBuffer = await variationResponse.buffer();
        
        // –°–æ–∑–¥–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é (50% –æ—Ä–∏–≥–∏–Ω–∞–ª + 50% –≤–∞—Ä–∏–∞—Ü–∏—è)
        const blended = await sharp(originalBuffer)
            .composite([{
                input: await sharp(variationBuffer)
                    .resize(await sharp(originalBuffer).metadata().then(m => m.width), 
                           await sharp(originalBuffer).metadata().then(m => m.height))
                    .toBuffer(),
                blend: 'screen',
                opacity: 0.5
            }])
            .png()
            .toBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const filename = `variation_${Date.now()}.png`;
        const filepath = path.join(process.cwd(), 'public', 'generated', filename);
        
        fs.writeFileSync(filepath, blended);
        
        return {
            success: true,
            imageUrl: `/generated/${filename}`,
            operation: 'variation',
            description: `–í–∞—Ä–∏–∞—Ü–∏—è: ${changeDescription}`,
            generatedVariationUrl: variationUrl
        };
        
    } catch (error) {
        return {
            success: false,
            error: error.message,
            operation: 'variation'
        };
    }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
 */
function parseColorChange(colorChange) {
    const lower = colorChange.toLowerCase();
    
    let targetColor = 'enhance';
    
    if (lower.includes('–∫—Ä–∞—Å–Ω') || lower.includes('red')) targetColor = 'red';
    if (lower.includes('—Å–∏–Ω') || lower.includes('–≥–æ–ª—É–±') || lower.includes('blue')) targetColor = 'blue';
    if (lower.includes('–∑–µ–ª–µ–Ω') || lower.includes('green')) targetColor = 'green';
    if (lower.includes('—Ç–µ–ø–ª') || lower.includes('warm')) targetColor = 'warm';
    if (lower.includes('—Ö–æ–ª–æ–¥–Ω') || lower.includes('cool')) targetColor = 'cool';
    
    return { targetColor };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
function analyzeObjectEdit(request) {
    const lower = request.toLowerCase();
    
    if (lower.includes('–¥–æ–±–∞–≤') || lower.includes('–ø–æ—Å—Ç–∞–≤—å') || lower.includes('add')) {
        const objectMatch = request.match(/–¥–æ–±–∞–≤[^\s]*\s+([^,.\n]+)/i) || 
                           request.match(/–ø–æ—Å—Ç–∞–≤—å\s+([^,.\n]+)/i) ||
                           request.match(/add\s+([^,.\n]+)/i);
        return {
            operation: 'add_object',
            object: objectMatch ? objectMatch[1].trim() : '–æ–±—ä–µ–∫—Ç'
        };
    }
    
    if (lower.includes('—É–¥–∞–ª–∏') || lower.includes('—É–±–µ—Ä–∏') || lower.includes('remove')) {
        const objectMatch = request.match(/—É–¥–∞–ª–∏\s+([^,.\n]+)/i) || 
                           request.match(/—É–±–µ—Ä–∏\s+([^,.\n]+)/i) ||
                           request.match(/remove\s+([^,.\n]+)/i);
        return {
            operation: 'remove_object',
            object: objectMatch ? objectMatch[1].trim() : '–æ–±—ä–µ–∫—Ç'
        };
    }
    
    if (lower.includes('–∏–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç') || lower.includes('change color') || lower.includes('–ø–æ–∫—Ä–∞—Å—å')) {
        return {
            operation: 'change_color',
            change: request
        };
    }
    
    return {
        operation: 'variation',
        change: request
    };
}

export {
    addObjectToImage,
    changeObjectColor,
    removeObjectByMask,
    generateVariation,
    analyzeObjectEdit
};