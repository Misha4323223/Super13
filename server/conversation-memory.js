/**
 * –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
 */

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
const activeConversations = new Map();

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
 */
class Conversation {
  constructor(userId = 'anonymous') {
    this.userId = userId;
    this.messages = [];
    this.currentProvider = null;
    this.currentModel = null;
    this.category = null;
    this.createdAt = new Date();
    this.lastActivity = new Date();
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
   */
  addMessage(message, sender, provider = null, model = null) {
    this.messages.push({
      content: message,
      sender,
      provider,
      model,
      timestamp: new Date()
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
    if (sender === 'ai' && provider) {
      this.currentProvider = provider;
      this.currentModel = model;
    }
    
    this.lastActivity = new Date();
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 20 —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (this.messages.length > 20) {
      this.messages = this.messages.slice(-20);
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
   */
  getLastImageInfo() {
    console.log('üîç [MEMORY] –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏...');
    console.log('üìä [MEMORY] –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', this.messages.length);
    
    // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ AI —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    for (let i = this.messages.length - 1; i >= 0; i--) {
      const message = this.messages[i];
      console.log(`üìù [MEMORY] –°–æ–æ–±—â–µ–Ω–∏–µ ${i}: ${message.sender} - ${message.content.substring(0, 100)}...`);
      
      if (message.sender === 'ai' && message.content.includes('![')) {
        console.log('üñºÔ∏è [MEMORY] –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º!');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        const imageMatch = message.content.match(/!\[([^\]]*)\]\(([^)]+)\)/);
        if (imageMatch) {
          const imageInfo = {
            description: imageMatch[1] || '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
            url: imageMatch[2],
            fullContent: message.content,
            timestamp: message.timestamp
          };
          
          console.log('‚úÖ [MEMORY] –ò–∑–≤–ª–µ—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏:');
          console.log('  - –û–ø–∏—Å–∞–Ω–∏–µ:', imageInfo.description);
          console.log('  - URL:', imageInfo.url);
          console.log('  - –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞:', imageInfo.timestamp);
          
          return imageInfo;
        }
      }
    }
    
    console.log('‚ùå [MEMORY] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return null;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏–π
   */
  analyzeIntent() {
    if (this.messages.length < 2) return null;
    
    const lastMessages = this.messages.slice(-5); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
    const userMessages = lastMessages.filter(m => m.sender === 'user');
    
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –æ –ø–æ–∏—Å–∫–µ
    const searchPatterns = [
      /–Ω–∞–π–¥–∏.*–º–∞–≥–∞–∑–∏–Ω/i, /–≥–¥–µ.*–∫—É–ø–∏—Ç—å/i, /–º–∞–≥–∞–∑–∏–Ω—ã.*–≤/i, /–∏—â—É.*–º–∞–≥–∞–∑–∏–Ω/i,
      /find.*store/i, /where.*buy/i, /shops.*in/i, /looking.*for.*store/i
    ];
    
    const locationPatterns = [
      /–≤\s+(\w+)/i, /–≥–æ—Ä–æ–¥\s+(\w+)/i, /in\s+(\w+)/i, /city\s+(\w+)/i
    ];
    
    let isSearchQuery = false;
    let location = null;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
    for (const msg of userMessages) {
      if (searchPatterns.some(pattern => pattern.test(msg.content))) {
        isSearchQuery = true;
        break;
      }
    }
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫, –∏—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    if (isSearchQuery) {
      for (const msg of this.messages) {
        for (const pattern of locationPatterns) {
          const match = msg.content.match(pattern);
          if (match) {
            location = match[1];
            break;
          }
        }
        if (location) break;
      }
    }
    
    return {
      isSearchQuery,
      location,
      context: isSearchQuery && location ? `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç –º–∞–≥–∞–∑–∏–Ω—ã –≤ –≥–æ—Ä–æ–¥–µ ${location}. ` : null
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  getContext() {
    if (this.messages.length === 0) return '';
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const recentMessages = this.messages.slice(-5);
    
    let context = '–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n';
    recentMessages.forEach(msg => {
      const role = msg.sender === 'user' ? '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' : 'AI';
      context += `${role}: ${msg.content}\n`;
    });
    
    return context + '\n–¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å: ';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–º –∂–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
   */
  shouldContinueWithProvider() {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –Ω–µ–¥–∞–≤–Ω–æ (–º–µ–Ω—å—à–µ 10 –º–∏–Ω—É—Ç)
    const timeSinceLastActivity = new Date() - this.lastActivity;
    return this.currentProvider && timeSinceLastActivity < 10 * 60 * 1000;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getConversation(userId = 'anonymous') {
  if (!activeConversations.has(userId)) {
    activeConversations.set(userId, new Conversation(userId));
  }
  return activeConversations.get(userId);
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
 */
function addUserMessage(userId, message) {
  const conversation = getConversation(userId);
  conversation.addMessage(message, 'user');
  return conversation;
}

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ AI –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä
 */
function addAiResponse(userId, response, provider, model) {
  const conversation = getConversation(userId);
  conversation.addMessage(response, 'ai', provider, model);
  return conversation;
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
function getMessageContext(userId, newMessage) {
  const conversation = getConversation(userId);
  
  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  conversation.addMessage(newMessage, 'user');
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const intent = conversation.analyzeIntent();
  
  let enhancedContext = conversation.getContext();
  
  // –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ª–æ–∫–∞—Ü–∏–∏
  if (intent && intent.isSearchQuery && intent.location) {
    enhancedContext = `–í–ê–ñ–ù–û: ${intent.context}–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –≥–æ—Ä–æ–¥ –≤ –æ–±—â–µ–º, –∞ –∏–º–µ–Ω–Ω–æ –ò–©–ï–¢ –ú–ê–ì–ê–ó–ò–ù–´ –≤ –≥–æ—Ä–æ–¥–µ ${intent.location}. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤, —Ç–æ—Ä–≥–æ–≤—ã—Ö —Ü–µ–Ω—Ç—Ä–æ–≤ –∏ –º–µ—Å—Ç –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ —ç—Ç–æ–º –≥–æ—Ä–æ–¥–µ. –ù–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –ø—Ä–æ –≥–æ—Ä–æ–¥, –∞ –¥–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≥–¥–µ –º–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –∫—É–ø–∏—Ç—å.\n\n${enhancedContext}`;
  }
  
  return {
    context: enhancedContext,
    shouldContinueWithProvider: conversation.shouldContinueWithProvider(),
    currentProvider: conversation.currentProvider,
    currentModel: conversation.currentModel,
    messageHistory: conversation.messages,
    intent: intent
  };
}

/**
 * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)
 */
function cleanupOldConversations() {
  const now = new Date();
  const maxAge = 60 * 60 * 1000; // 1 —á–∞—Å
  
  for (const [userId, conversation] of activeConversations.entries()) {
    if (now - conversation.lastActivity > maxAge) {
      activeConversations.delete(userId);
      console.log(`üßπ –û—á–∏—â–µ–Ω —Å—Ç–∞—Ä—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    }
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ (—Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
 */
function startNewConversation(userId = 'anonymous') {
  activeConversations.set(userId, new Conversation(userId));
  console.log(`üÜï –ù–∞—á–∞—Ç –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  return activeConversations.get(userId);
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
 */
function getConversationStats() {
  return {
    activeConversations: activeConversations.size,
    conversations: Array.from(activeConversations.entries()).map(([userId, conv]) => ({
      userId,
      messageCount: conv.messages.length,
      currentProvider: conv.currentProvider,
      lastActivity: conv.lastActivity
    }))
  };
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
setInterval(cleanupOldConversations, 30 * 60 * 1000);

module.exports = {
  getConversation,
  addUserMessage,
  addAiResponse,
  getMessageContext,
  startNewConversation,
  getConversationStats,
  cleanupOldConversations
};