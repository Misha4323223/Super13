/**
 * ImageTracerJS –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –¥–ª—è BOOOMERANGS AI
 * –ó–∞–º–µ–Ω—è–µ—Ç advanced-vectorizer –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ imagetracerjs
 */

import express from 'express';
import cors from 'cors';
import multer from 'multer';
import path from 'path';
import fs from 'fs';
import { fileURLToPath } from 'url';
import ImageTracer from 'imagetracerjs';
import { createCanvas, loadImage } from 'canvas';
import fetch from 'node-fetch';
import axios from 'axios';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = process.env.VECTORIZER_PORT || 5006;

// Middleware
app.use(cors());
app.use(express.json());

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.memoryStorage();
const upload = multer({ 
  storage: storage,
  limits: { fileSize: 10 * 1024 * 1024 } // 10MB –ª–∏–º–∏—Ç
});

// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
const outputDir = path.join(process.cwd(), 'output');
if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir, { recursive: true });
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π endpoint –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
app.post('/vectorize', upload.single('image'), async (req, res) => {
  try {
    console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å ImageTracerJS...');
    
    if (!req.file) {
      return res.status(400).json({ 
        error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ',
        success: false 
      });
    }

    const imageBuffer = req.file.buffer;
    const timestamp = Date.now();
    const filename = `vectorized_${timestamp}`;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    const options = {
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞—á–µ—Å—Ç–≤–∞
      ltres: 1,        // –ü–æ—Ä–æ–≥ —è—Ä–∫–æ—Å—Ç–∏ (0-255)
      qtres: 1,        // –ü–æ—Ä–æ–≥ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è (0-255)
      pathomit: 8,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏
      colorsampling: 1, // –°—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ (0-2)
      numberofcolors: 5, // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ (2-256)
      mincolorratio: 0.02, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤
      colorquantcycles: 3, // –¶–∏–∫–ª—ã –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
      scale: 1,        // –ú–∞—Å—à—Ç–∞–±
      simplifytolerance: 0, // –£–ø—Ä–æ—â–µ–Ω–∏–µ (0-–æ—Ç–∫–ª—é—á–µ–Ω–æ)
      roundcoords: 1,  // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
      lcpr: 0,         // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —É–≥–ª–æ–≤
      qcpr: 0,         // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SVG
      desc: false,     // –û–ø–∏—Å–∞–Ω–∏–µ –≤ SVG
      viewbox: false,  // ViewBox –≤ SVG
      blurradius: 0,   // –†–∞–¥–∏—É—Å —Ä–∞–∑–º—ã—Ç–∏—è
      blurdelta: 20    // –î–µ–ª—å—Ç–∞ —Ä–∞–∑–º—ã—Ç–∏—è
    };

    // –°–æ–∑–¥–∞–µ–º Image –æ–±—ä–µ–∫—Ç –¥–ª—è ImageTracer —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º canvas
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º canvas image –∏–∑ —Ñ–∞–π–ª–∞...');
    const image = await loadImage(imageBuffer);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ canvas
    console.log('üé® –ó–∞–ø—É—Å–∫ ImageTracer.imagedataToSVG...');
    const canvas = createCanvas(image.width, image.height);
    const ctx = canvas.getContext('2d');
    ctx.drawImage(image, 0, 0);
    const imageData = ctx.getImageData(0, 0, image.width, image.height);
    
    const svgString = ImageTracer.imagedataToSVG(imageData, options);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG —Ñ–∞–π–ª
    const svgPath = path.join(outputDir, `${filename}.svg`);
    fs.writeFileSync(svgPath, svgString);
    
    console.log(`‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${filename}.svg`);

    // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadata = {
      filename: `${filename}.svg`,
      timestamp: timestamp,
      originalSize: imageBuffer.length,
      svgSize: svgString.length,
      options: options,
      vectorizer: 'ImageTracerJS',
      version: '1.2.6'
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metaPath = path.join(outputDir, `${filename}_meta.json`);
    fs.writeFileSync(metaPath, JSON.stringify(metadata, null, 2));

    res.json({
      success: true,
      message: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      data: {
        svgContent: svgString,
        filename: `${filename}.svg`,
        url: `/output/${filename}.svg`,
        metadata: metadata
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      details: error.message
    });
  }
});

/**
 * Endpoint –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ URL
 */
app.post('/vectorize-url', async (req, res) => {
  try {
    const { imageUrl, options: customOptions } = req.body;
    
    if (!imageUrl) {
      return res.status(400).json({ 
        error: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω',
        success: false 
      });
    }

    console.log(`üåê –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL: ${imageUrl}`);
    
    const timestamp = Date.now();
    const filename = `vectorized_${timestamp}`;
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏
    const options = {
      ltres: 1,
      qtres: 1,
      pathomit: 8,
      colorsampling: 1,
      numberofcolors: 16,
      mincolorratio: 0.02,
      colorquantcycles: 3,
      scale: 1,
      simplifytolerance: 0,
      roundcoords: 1,
      ...customOptions
    };

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
    console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL...');
    let imageBuffer;
    
    try {
      // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å –ø–æ–º–æ—â—å—é node-fetch  
      const response = await fetch(imageUrl, {
        headers: {
          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
          'Accept': 'image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8',
          'Accept-Language': 'en-US,en;q=0.9',
          'Cache-Control': 'no-cache'
        },
        timeout: 20000,
        follow: 5
      });
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const arrayBuffer = await response.arrayBuffer();
      imageBuffer = Buffer.from(arrayBuffer);
      
      console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${imageBuffer.length} –±–∞–π—Ç`);
      
    } catch (fetchError) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ fetch: ${fetchError.message}`);
      
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º axios
      try {
        console.log('üîÑ –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å —á–µ—Ä–µ–∑ axios...');
        
        const response = await axios.get(imageUrl, {
          responseType: 'arraybuffer',
          timeout: 20000,
          headers: {
            'User-Agent': 'BOOOMERANGS-AI-Vectorizer/1.0'
          }
        });
        
        imageBuffer = Buffer.from(response.data);
        console.log(`‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ axios: ${imageBuffer.length} –±–∞–π—Ç`);
        
      } catch (axiosError) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${fetchError.message} | ${axiosError.message}`);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º Image –æ–±—ä–µ–∫—Ç –¥–ª—è ImageTracer —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º canvas
    console.log('üîÑ –°–æ–∑–¥–∞–µ–º canvas image...');
    const image = await loadImage(imageBuffer);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ canvas
    console.log('üé® –ó–∞–ø—É—Å–∫ ImageTracer.imagedataToSVG...');
    const canvas = createCanvas(image.width, image.height);
    const ctx = canvas.getContext('2d');
    ctx.drawImage(image, 0, 0);
    const imageData = ctx.getImageData(0, 0, image.width, image.height);
    
    const svgString = ImageTracer.imagedataToSVG(imageData, options);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const svgPath = path.join(outputDir, `${filename}.svg`);
    fs.writeFileSync(svgPath, svgString);
    
    const metadata = {
      filename: `${filename}.svg`,
      timestamp: timestamp,
      sourceUrl: imageUrl,
      svgSize: svgString.length,
      options: options,
      vectorizer: 'ImageTracerJS',
      version: '1.2.6'
    };

    const metaPath = path.join(outputDir, `${filename}_meta.json`);
    fs.writeFileSync(metaPath, JSON.stringify(metadata, null, 2));

    res.json({
      success: true,
      message: '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ URL –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
      data: {
        svgContent: svgString,
        filename: `${filename}.svg`,
        url: `/output/${filename}.svg`,
        metadata: metadata
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ URL:', error);
    res.status(500).json({
      success: false,
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL',
      details: error.message
    });
  }
});

/**
 * Health check endpoint
 */
app.get('/health', (req, res) => {
  res.json({
    status: 'ok',
    service: 'ImageTracerJS Vectorizer',
    port: PORT,
    uptime: process.uptime(),
    timestamp: new Date().toISOString()
  });
});

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏—è—Ö
 */
app.get('/options', (req, res) => {
  res.json({
    availableOptions: {
      ltres: '–ü–æ—Ä–æ–≥ —è—Ä–∫–æ—Å—Ç–∏ (0-255, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)',
      qtres: '–ü–æ—Ä–æ–≥ –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è (0-255, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)',
      pathomit: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—É—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 8)',
      colorsampling: '–°—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ (0-2, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)',
      numberofcolors: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ (2-256, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 16)',
      mincolorratio: '–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.02)',
      colorquantcycles: '–¶–∏–∫–ª—ã –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3)',
      scale: '–ú–∞—Å—à—Ç–∞–± (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)',
      simplifytolerance: '–£–ø—Ä–æ—â–µ–Ω–∏–µ (0-–æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)',
      roundcoords: '–û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1)',
      lcpr: '–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ —É–≥–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)',
      qcpr: '–°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –∫—Ä–∏–≤—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0)'
    },
    presets: {
      'default': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      'posterized1': '–ü–æ—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (–º–∞–ª–æ —Ü–≤–µ—Ç–æ–≤)',
      'posterized2': '–ü–æ—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (—Å—Ä–µ–¥–Ω–µ —Ü–≤–µ—Ç–æ–≤)',
      'curvy': '–ü–ª–∞–≤–Ω—ã–µ –∫—Ä–∏–≤—ã–µ',
      'sharp': '–ß–µ—Ç–∫–∏–µ —É–≥–ª—ã',
      'detailed': '–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç'
    }
  });
});

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.use('/output', express.static(outputDir));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üöÄ ImageTracerJS Vectorizer –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDir}`);
  console.log(`üîó Health check: http://localhost:${PORT}/health`);
  console.log(`üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏: http://localhost:${PORT}/options`);
});

export default app;