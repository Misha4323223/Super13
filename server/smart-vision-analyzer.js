/**
 * –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –æ–±—ä–µ–∫—Ç–æ–≤
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏—é –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
 */

const fs = require('fs');
const path = require('path');

/**
 * –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
const OBJECT_DATABASE = {
  skeleton: {
    keywords: ['—Å–∫–µ–ª–µ—Ç', '–∫–æ—Å—Ç–∏', '—á–µ—Ä–µ–ø', 'skeleton', 'skull', 'bones'],
    colorPatterns: {
      white: { min: 200, max: 255 },
      lightGray: { min: 150, max: 200 },
      bone: { red: [200, 255], green: [200, 255], blue: [180, 220] }
    },
    shapePatterns: {
      elongated: true,
      geometric: false,
      symmetrical: true,
      complexity: 'medium'
    },
    context: ['—Ö—ç–ª–ª–æ—É–∏–Ω', '–∞–Ω–∞—Ç–æ–º–∏—è', '–º–µ–¥–∏—Ü–∏–Ω–∞', '—É–∂–∞—Å', '–ø—Ä–∞–∑–¥–Ω–∏–∫']
  },
  mushroom: {
    keywords: ['–≥—Ä–∏–±', '–º—É—Ö–æ–º–æ—Ä', 'mushroom', 'toadstool', 'fungus'],
    colorPatterns: {
      red: { min: 180, max: 255 },
      white: { min: 200, max: 255 },
      redCap: { red: [200, 255], green: [0, 100], blue: [0, 100] },
      whiteSpots: { red: [240, 255], green: [240, 255], blue: [240, 255] }
    },
    shapePatterns: {
      round: true,
      organic: true,
      stem: true,
      cap: true
    },
    context: ['–ª–µ—Å', '–ø—Ä–∏—Ä–æ–¥–∞', '—è–¥–æ–≤–∏—Ç—ã–π', '–∫—Ä–∞—Å–Ω—ã–π —Å –±–µ–ª—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏']
  },
  person: {
    keywords: ['—á–µ–ª–æ–≤–µ–∫', '–ª—é–¥–∏', '–ª–∏—Ü–æ', '–ø–æ—Ä—Ç—Ä–µ—Ç', 'person', 'people', 'face'],
    colorPatterns: {
      skin: { red: [120, 255], green: [80, 200], blue: [60, 180] },
      hair: { varied: true },
      clothing: { varied: true }
    },
    shapePatterns: {
      organic: true,
      symmetrical: true,
      complex: true,
      facial: true
    },
    context: ['–ø–æ—Ä—Ç—Ä–µ—Ç', '—Å–µ–ª—Ñ–∏', '—Ñ–æ—Ç–æ', '–ª—é–¥–∏']
  },
  halloween: {
    keywords: ['—Ö—ç–ª–ª–æ—É–∏–Ω', 'halloween', '—Ç—ã–∫–≤–∞', '–∫–æ—Å—Ç—é–º', '–º–∞—Å–∫–∞'],
    colorPatterns: {
      orange: { red: [200, 255], green: [100, 200], blue: [0, 100] },
      black: { max: 80 },
      darkColors: true
    },
    shapePatterns: {
      spooky: true,
      decorative: true,
      festive: true
    },
    context: ['–ø—Ä–∞–∑–¥–Ω–∏–∫', '–∫–æ—Å—Ç—é–º', '—É–∫—Ä–∞—à–µ–Ω–∏—è', '–æ—Å–µ–Ω—å']
  }
};

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
async function analyzeImageContent(imageBuffer, filename) {
  try {
    console.log('üß† –ó–∞–ø—É—Å–∫–∞–µ–º —É–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    const colorAnalysis = analyzeAdvancedColors(imageBuffer);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–æ—Ä–º—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    const shapeAnalysis = analyzeShapePatterns(imageBuffer);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—É—Ä—ã
    const textureAnalysis = analyzeTexturePatterns(imageBuffer);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    const contextAnalysis = analyzeFileContext(filename);
    
    // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    const objectRecognition = recognizeSpecificObjects({
      colors: colorAnalysis,
      shapes: shapeAnalysis,
      textures: textureAnalysis,
      context: contextAnalysis,
      filename
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const description = generatePreciseDescription(objectRecognition, colorAnalysis);
    
    return {
      success: true,
      description,
      recognizedObjects: objectRecognition.objects,
      confidence: objectRecognition.confidence,
      sceneType: objectRecognition.sceneType,
      details: {
        colors: colorAnalysis.summary,
        shapes: shapeAnalysis.summary,
        mood: objectRecognition.mood,
        context: contextAnalysis
      }
    };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —É–º–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤
 */
function analyzeAdvancedColors(imageBuffer) {
  const sampleSize = Math.min(30000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let colorProfile = {
    redValues: [],
    greenValues: [],
    blueValues: [],
    dominantColors: [],
    colorCombinations: [],
    brightness: 0,
    contrast: 0
  };
  
  // –°–æ–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  for (let i = 0; i < sample.length - 2; i += 3) {
    const r = sample[i] || 0;
    const g = sample[i + 1] || 0;
    const b = sample[i + 2] || 0;
    
    colorProfile.redValues.push(r);
    colorProfile.greenValues.push(g);
    colorProfile.blueValues.push(b);
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
  const avgRed = colorProfile.redValues.reduce((a, b) => a + b, 0) / colorProfile.redValues.length;
  const avgGreen = colorProfile.greenValues.reduce((a, b) => a + b, 0) / colorProfile.greenValues.length;
  const avgBlue = colorProfile.blueValues.reduce((a, b) => a + b, 0) / colorProfile.blueValues.length;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  if (avgRed > 180 && avgGreen < 100 && avgBlue < 100) {
    colorProfile.dominantColors.push('—è—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π');
    colorProfile.colorCombinations.push('–∫—Ä–∞—Å–Ω—ã–π_–º—É—Ö–æ–º–æ—Ä');
  }
  
  if (avgRed > 200 && avgGreen > 200 && avgBlue > 200) {
    colorProfile.dominantColors.push('–±–µ–ª—ã–π');
    colorProfile.colorCombinations.push('–±–µ–ª—ã–µ_–ø—è—Ç–Ω–∞');
  }
  
  if (avgRed > 200 && avgGreen > 180 && avgBlue < 120) {
    colorProfile.dominantColors.push('—Ç–µ–ª–µ—Å–Ω—ã–π');
    colorProfile.colorCombinations.push('–∫–æ–∂–∞_—á–µ–ª–æ–≤–µ–∫–∞');
  }
  
  if (avgRed < 100 && avgGreen < 100 && avgBlue < 100) {
    colorProfile.dominantColors.push('—Ç–µ–º–Ω—ã–π');
    colorProfile.colorCombinations.push('—Ç–µ–º–Ω—ã–π_—Ñ–æ–Ω');
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å (–≤–∞–∂–Ω–æ –¥–ª—è —Å–∫–µ–ª–µ—Ç–æ–≤)
  const redRange = Math.max(...colorProfile.redValues) - Math.min(...colorProfile.redValues);
  const greenRange = Math.max(...colorProfile.greenValues) - Math.min(...colorProfile.greenValues);
  const blueRange = Math.max(...colorProfile.blueValues) - Math.min(...colorProfile.blueValues);
  
  colorProfile.contrast = (redRange + greenRange + blueRange) / 3 / 255;
  colorProfile.brightness = (avgRed + avgGreen + avgBlue) / 3;
  
  return {
    profile: colorProfile,
    summary: {
      dominantColors: colorProfile.dominantColors,
      combinations: colorProfile.colorCombinations,
      brightness: colorProfile.brightness > 150 ? '—è—Ä–∫–æ–µ' : colorProfile.brightness > 100 ? '—Å—Ä–µ–¥–Ω–µ–µ' : '—Ç–µ–º–Ω–æ–µ',
      contrast: colorProfile.contrast > 0.7 ? '–≤—ã—Å–æ–∫–∏–π' : colorProfile.contrast > 0.4 ? '—Å—Ä–µ–¥–Ω–∏–π' : '–Ω–∏–∑–∫–∏–π'
    }
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ä–º –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
function analyzeShapePatterns(imageBuffer) {
  const sampleSize = Math.min(15000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let patterns = {
    roundShapes: 0,
    elongatedShapes: 0,
    geometricShapes: 0,
    organicShapes: 0,
    symmetrical: 0,
    complex: 0
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–æ—Ä–º
  for (let i = 10; i < sample.length - 10; i += 5) {
    const segment = sample.slice(i - 10, i + 10);
    
    // –ü–æ–∏—Å–∫ –∫—Ä—É–≥–ª—ã—Ö —Ñ–æ—Ä–º (–≤–∞–∂–Ω–æ –¥–ª—è –≥—Ä–∏–±–æ–≤)
    let roundness = 0;
    for (let j = 0; j < segment.length - 4; j++) {
      const values = segment.slice(j, j + 5);
      const center = values[2];
      const edges = [values[0], values[1], values[3], values[4]];
      
      if (edges.every(v => Math.abs(v - center) < 30)) {
        roundness++;
      }
    }
    
    if (roundness > segment.length * 0.3) {
      patterns.roundShapes++;
      patterns.organicShapes++;
    }
    
    // –ü–æ–∏—Å–∫ —É–¥–ª–∏–Ω–µ–Ω–Ω—ã—Ö —Ñ–æ—Ä–º (–≤–∞–∂–Ω–æ –¥–ª—è —Å–∫–µ–ª–µ—Ç–æ–≤)
    let elongation = 0;
    for (let j = 1; j < segment.length; j++) {
      if (Math.abs(segment[j] - segment[j-1]) < 20) {
        elongation++;
      }
    }
    
    if (elongation > segment.length * 0.6) {
      patterns.elongatedShapes++;
      patterns.geometricShapes++;
    }
    
    // –ü–æ–∏—Å–∫ —Å–∏–º–º–µ—Ç—Ä–∏–∏
    let symmetry = 0;
    const mid = Math.floor(segment.length / 2);
    for (let j = 0; j < mid; j++) {
      if (Math.abs(segment[j] - segment[segment.length - 1 - j]) < 25) {
        symmetry++;
      }
    }
    
    if (symmetry > mid * 0.6) {
      patterns.symmetrical++;
    }
    
    // –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    let complexity = 0;
    for (let j = 1; j < segment.length; j++) {
      if (Math.abs(segment[j] - segment[j-1]) > 40) {
        complexity++;
      }
    }
    
    if (complexity > segment.length * 0.4) {
      patterns.complex++;
    }
  }
  
  return {
    patterns,
    summary: {
      primaryShape: patterns.roundShapes > patterns.elongatedShapes ? '–∫—Ä—É–≥–ª–∞—è' : '—É–¥–ª–∏–Ω–µ–Ω–Ω–∞—è',
      type: patterns.organicShapes > patterns.geometricShapes ? '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è' : '–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è',
      symmetry: patterns.symmetrical > 0 ? '—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è' : '–∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è',
      complexity: patterns.complex > 10 ? '—Å–ª–æ–∂–Ω–∞—è' : '–ø—Ä–æ—Å—Ç–∞—è'
    }
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä
 */
function analyzeTexturePatterns(imageBuffer) {
  const sampleSize = Math.min(8000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let textures = {
    smooth: 0,
    rough: 0,
    spotted: 0,
    lined: 0,
    organic: 0
  };
  
  for (let i = 5; i < sample.length - 5; i += 5) {
    const window = sample.slice(i - 5, i + 5);
    let variation = 0;
    
    for (let j = 1; j < window.length; j++) {
      variation += Math.abs((window[j] || 0) - (window[j-1] || 0));
    }
    
    if (variation < 50) textures.smooth++;
    else if (variation > 150) textures.rough++;
    
    // –ü–æ–∏—Å–∫ –ø—è—Ç–Ω–∏—Å—Ç—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä (–≤–∞–∂–Ω–æ –¥–ª—è –º—É—Ö–æ–º–æ—Ä–æ–≤)
    let spots = 0;
    for (let j = 2; j < window.length - 2; j++) {
      const center = window[j];
      const around = [window[j-2], window[j-1], window[j+1], window[j+2]];
      
      if (around.every(v => Math.abs(v - center) > 40)) {
        spots++;
      }
    }
    
    if (spots > 0) textures.spotted++;
    
    // –ü–æ–∏—Å–∫ –ª–∏–Ω–µ–π–Ω—ã—Ö —Ç–µ–∫—Å—Ç—É—Ä
    let lines = 0;
    for (let j = 1; j < window.length - 1; j++) {
      if (Math.abs(window[j] - window[j-1]) < 15 && Math.abs(window[j+1] - window[j]) < 15) {
        lines++;
      }
    }
    
    if (lines > window.length * 0.5) textures.lined++;
    
    if (variation > 80 && variation < 120) textures.organic++;
  }
  
  return {
    textures,
    summary: {
      primary: textures.spotted > 5 ? '–ø—è—Ç–Ω–∏—Å—Ç–∞—è' : 
               textures.smooth > textures.rough ? '–≥–ª–∞–¥–∫–∞—è' : '—à–µ—Ä–æ—Ö–æ–≤–∞—Ç–∞—è',
      secondary: textures.lined > 5 ? '–ø–æ–ª–æ—Å–∞—Ç–∞—è' : 
                 textures.organic > 5 ? '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è' : '–æ–¥–Ω–æ—Ä–æ–¥–Ω–∞—è'
    }
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
 */
function analyzeFileContext(filename) {
  const name = filename.toLowerCase();
  let context = [];
  
  if (name.includes('skeleton') || name.includes('skull') || name.includes('bone')) {
    context.push('—Å–∫–µ–ª–µ—Ç', '–∫–æ—Å—Ç–∏', '–∞–Ω–∞—Ç–æ–º–∏—è');
  }
  
  if (name.includes('mushroom') || name.includes('fungus') || name.includes('toadstool')) {
    context.push('–≥—Ä–∏–±', '–º—É—Ö–æ–º–æ—Ä', '–ø—Ä–∏—Ä–æ–¥–∞');
  }
  
  if (name.includes('halloween') || name.includes('spooky') || name.includes('scary')) {
    context.push('—Ö—ç–ª–ª–æ—É–∏–Ω', '—É–∂–∞—Å', '–ø—Ä–∞–∑–¥–Ω–∏–∫');
  }
  
  if (name.includes('portrait') || name.includes('person') || name.includes('face')) {
    context.push('–ø–æ—Ä—Ç—Ä–µ—Ç', '—á–µ–ª–æ–≤–µ–∫', '–ª–∏—Ü–æ');
  }
  
  return context;
}

/**
 * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */
function recognizeSpecificObjects(analysisData) {
  const { colors, shapes, textures, context } = analysisData;
  
  let recognizedObjects = [];
  let confidence = 0;
  let sceneType = '–æ–±—â–∞—è —Å—Ü–µ–Ω–∞';
  let mood = '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ';
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–∫–µ–ª–µ—Ç
  if (
    (colors.summary.dominantColors.includes('–±–µ–ª—ã–π') || colors.summary.brightness === '—è—Ä–∫–æ–µ') &&
    shapes.summary.type === '–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è' &&
    shapes.summary.symmetry === '—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è' &&
    (context.includes('—Å–∫–µ–ª–µ—Ç') || context.includes('–∫–æ—Å—Ç–∏') || colors.summary.contrast === '–≤—ã—Å–æ–∫–∏–π')
  ) {
    recognizedObjects.push({
      name: '—Å–∫–µ–ª–µ—Ç',
      type: '–∞–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç',
      confidence: 0.85,
      description: '—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–π —Å–∫–µ–ª–µ—Ç –∏–ª–∏ –∫–æ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞'
    });
    sceneType = '–∞–Ω–∞—Ç–æ–º–∏—è/—Ö—ç–ª–ª–æ—É–∏–Ω';
    mood = '–º—Ä–∞—á–Ω–æ–µ/–ø—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ';
    confidence += 0.85;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –º—É—Ö–æ–º–æ—Ä
  if (
    (colors.summary.dominantColors.includes('—è—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π') || colors.profile.colorCombinations.includes('–∫—Ä–∞—Å–Ω—ã–π_–º—É—Ö–æ–º–æ—Ä')) &&
    (colors.summary.dominantColors.includes('–±–µ–ª—ã–π') || colors.profile.colorCombinations.includes('–±–µ–ª—ã–µ_–ø—è—Ç–Ω–∞')) &&
    shapes.summary.primaryShape === '–∫—Ä—É–≥–ª–∞—è' &&
    shapes.summary.type === '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è' &&
    (textures.summary.primary === '–ø—è—Ç–Ω–∏—Å—Ç–∞—è' || textures.summary.secondary === '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è')
  ) {
    recognizedObjects.push({
      name: '–º—É—Ö–æ–º–æ—Ä',
      type: '–≥—Ä–∏–±',
      confidence: 0.90,
      description: '–∫—Ä–∞—Å–Ω—ã–π –º—É—Ö–æ–º–æ—Ä —Å –±–µ–ª—ã–º–∏ –ø—è—Ç–Ω–∞–º–∏'
    });
    sceneType = '–ø—Ä–∏—Ä–æ–¥–∞/–ª–µ—Å';
    mood = '—Å–∫–∞–∑–æ—á–Ω–æ–µ/–ø—Ä–∏—Ä–æ–¥–Ω–æ–µ';
    confidence += 0.90;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —á–µ–ª–æ–≤–µ–∫–∞
  if (
    colors.profile.colorCombinations.includes('–∫–æ–∂–∞_—á–µ–ª–æ–≤–µ–∫–∞') &&
    shapes.summary.type === '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è' &&
    shapes.summary.complexity === '—Å–ª–æ–∂–Ω–∞—è' &&
    shapes.summary.symmetry === '—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–∞—è'
  ) {
    recognizedObjects.push({
      name: '—á–µ–ª–æ–≤–µ–∫',
      type: '–ø–æ—Ä—Ç—Ä–µ—Ç',
      confidence: 0.75,
      description: '—á–µ–ª–æ–≤–µ–∫ –∏–ª–∏ –ø–æ—Ä—Ç—Ä–µ—Ç'
    });
    sceneType = '–ø–æ—Ä—Ç—Ä–µ—Ç';
    mood = '—á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ';
    confidence += 0.75;
  }
  
  // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ü–µ–Ω–∞ (—Å–∫–µ–ª–µ—Ç + –º—É—Ö–æ–º–æ—Ä)
  if (recognizedObjects.some(obj => obj.name === '—Å–∫–µ–ª–µ—Ç') && 
      recognizedObjects.some(obj => obj.name === '–º—É—Ö–æ–º–æ—Ä')) {
    sceneType = '—Ö—ç–ª–ª–æ—É–∏–Ω/—Ñ—ç–Ω—Ç–µ–∑–∏ —Å—Ü–µ–Ω–∞';
    mood = '—Å–∫–∞–∑–æ—á–Ω–æ-–º—Ä–∞—á–Ω–æ–µ';
    confidence = Math.min(confidence * 1.1, 0.95);
  }
  
  return {
    objects: recognizedObjects,
    confidence: recognizedObjects.length > 0 ? confidence / recognizedObjects.length : 0.3,
    sceneType,
    mood
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
 */
function generatePreciseDescription(objectRecognition, colorAnalysis) {
  let description = '';
  
  if (objectRecognition.objects.length > 0) {
    description += `–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: `;
    
    objectRecognition.objects.forEach((obj, index) => {
      if (index > 0) description += ', ';
      description += `${obj.description} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(obj.confidence * 100)}%)`;
    });
    
    description += '. ';
    
    description += `–¢–∏–ø —Å—Ü–µ–Ω—ã: ${objectRecognition.sceneType}. `;
    description += `–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${objectRecognition.mood}. `;
    
    if (colorAnalysis.summary.dominantColors.length > 0) {
      description += `–ü—Ä–µ–æ–±–ª–∞–¥–∞—é—â–∏–µ —Ü–≤–µ—Ç–∞: ${colorAnalysis.summary.dominantColors.join(', ')}. `;
    }
    
    description += `–û—Å–≤–µ—â–µ–Ω–∏–µ: ${colorAnalysis.summary.brightness}, –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å: ${colorAnalysis.summary.contrast}.`;
    
  } else {
    description = `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –æ–±—ä–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ—á–Ω–æ. `;
    description += `–¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞: ${colorAnalysis.summary.brightness} —Å ${colorAnalysis.summary.contrast} –∫–æ–Ω—Ç—Ä–∞—Å—Ç–æ–º. `;
    description += `–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.`;
  }
  
  return description;
}

module.exports = {
  analyzeImageContent,
  analyzeAdvancedColors,
  analyzeShapePatterns,
  recognizeSpecificObjects
};