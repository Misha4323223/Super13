/**
 * –ü–∞—Ä—Å–µ—Ä –≤–µ–±-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü
 */

const fetch = require('node-fetch');
const https = require('https');

// –ê–≥–µ–Ω—Ç –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è SSL –æ—à–∏–±–æ–∫
const httpsAgent = new https.Agent({
  rejectUnauthorized: false
});

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –ø–∞—Ä—Å–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */
async function parseWebContent(url, title, snippet) {
  try {
    console.log(`üåê [PARSER] –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: ${url}`);
    
    const response = await fetch(url, {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'ru,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
      },
      timeout: 10000,
      agent: url.startsWith('https:') ? httpsAgent : undefined
    });

    if (!response.ok) {
      console.log(`‚ùå [PARSER] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${url}: ${response.status}`);
      return {
        title,
        snippet,
        content: snippet,
        source: url
      };
    }

    const html = await response.text();
    const content = extractTextContent(html);
    
    console.log(`‚úÖ [PARSER] –ò–∑–≤–ª–µ—á–µ–Ω–æ ${content.length} —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ ${url}`);
    
    return {
      title,
      snippet,
      content: content.substring(0, 800), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
      source: url
    };
    
  } catch (error) {
    console.log(`‚ùå [PARSER] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ${url}:`, error.message);
    return {
      title,
      snippet,
      content: snippet,
      source: url
    };
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑ HTML
 */
function extractTextContent(html) {
  try {
    // –£–¥–∞–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –∏ —Å—Ç–∏–ª–∏
    let text = html
      .replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '')
      .replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '')
      .replace(/<nav[^>]*>[\s\S]*?<\/nav>/gi, '')
      .replace(/<header[^>]*>[\s\S]*?<\/header>/gi, '')
      .replace(/<footer[^>]*>[\s\S]*?<\/footer>/gi, '')
      .replace(/<aside[^>]*>[\s\S]*?<\/aside>/gi, '');

    // –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    const mainContentRegex = /<(article|main|div[^>]*class="[^"]*content[^"]*")[^>]*>([\s\S]*?)<\/\1>/gi;
    const mainMatch = mainContentRegex.exec(text);
    
    if (mainMatch && mainMatch[2]) {
      text = mainMatch[2];
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ HTML —Ç–µ–≥–∏
    text = text.replace(/<[^>]*>/g, ' ');
    
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
    text = text
      .replace(/&nbsp;/g, ' ')
      .replace(/&amp;/g, '&')
      .replace(/&lt;/g, '<')
      .replace(/&gt;/g, '>')
      .replace(/&quot;/g, '"')
      .replace(/&#39;/g, "'")
      .replace(/&mdash;/g, '‚Äî')
      .replace(/&ndash;/g, '‚Äì');

    // –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
    text = text
      .replace(/\s+/g, ' ')
      .replace(/\n\s*\n/g, '\n')
      .trim();

    // –ò—â–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ã —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 20);
    
    return sentences.slice(0, 10).join('. ').trim();
    
  } catch (error) {
    console.log('‚ùå [PARSER] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞:', error.message);
    return '';
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
 */
async function enrichSearchResults(searchResults) {
  console.log(`üîç [PARSER] –û–±–æ–≥–∞—â–∞–µ–º ${searchResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞`);
  
  const enrichedResults = [];
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  for (let i = 0; i < Math.min(3, searchResults.length); i++) {
    const result = searchResults[i];
    
    try {
      const parsed = await parseWebContent(result.url, result.title, result.snippet);
      enrichedResults.push(parsed);
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.log(`‚ùå [PARSER] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${i}:`, error.message);
      enrichedResults.push({
        title: result.title,
        snippet: result.snippet,
        content: result.snippet,
        source: result.url
      });
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞
  for (let i = 3; i < searchResults.length; i++) {
    const result = searchResults[i];
    enrichedResults.push({
      title: result.title,
      snippet: result.snippet,
      content: result.snippet,
      source: result.url
    });
  }
  
  console.log(`‚úÖ [PARSER] –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${enrichedResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
  return enrichedResults;
}

module.exports = {
  parseWebContent,
  enrichSearchResults,
  extractTextContent
};