/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –∏ DTF –ø–µ—á–∞—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Sharp.js –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
 */

const sharp = require('sharp');
const fs = require('fs').promises;
const path = require('path');
const fetch = require('node-fetch');

/**
 * –°–∫–∞—á–∏–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
 * @param {string} imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Buffer>} –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function downloadImage(imageUrl) {
    try {
        console.log('üì• [PRINT-OPT] –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imageUrl);
        const response = await fetch(imageUrl);
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const buffer = await response.buffer();
        console.log('‚úÖ [PRINT-OPT] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∫–∞—á–∞–Ω–æ, —Ä–∞–∑–º–µ—Ä:', buffer.length, '–±–∞–π—Ç');
        return buffer;
    } catch (error) {
        console.error('‚ùå [PRINT-OPT] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error.message);
        throw error;
    }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
 * @param {Buffer} imageBuffer - –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function optimizeForScreenPrint(imageBuffer, options = {}) {
    let {
        maxColors = 6,
        minContrast = 0.3,
        outputDir = './output/screen-print'
    } = options;
    
    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ü–≤–µ—Ç–æ–≤
    try {
        const { getOptimalColorCount } = require('./color-analysis-engine');
        const colorAnalysis = await getOptimalColorCount(imageBuffer, 'screen-print');
        
        if (colorAnalysis.colors && colorAnalysis.colors !== maxColors) {
            console.log(`üé® [SCREEN-PRINT] –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤: ${colorAnalysis.colors} (–±—ã–ª–æ: ${maxColors})`);
            maxColors = colorAnalysis.colors;
            options.intelligentAnalysis = colorAnalysis;
        }
    } catch (error) {
        console.log(`‚ö†Ô∏è [SCREEN-PRINT] –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–æ–≤: ${error.message}`);
    }
    
    console.log('üñ®Ô∏è [SCREEN-PRINT] –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await fs.mkdir(outputDir, { recursive: true });
        
        const timestamp = Date.now();
        const baseFilename = `screen-print-${timestamp}`;
        
        // 1. –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç—å –∏ —Ä–µ–∑–∫–æ—Å—Ç—å
        const enhanced = await sharp(imageBuffer)
            .resize(3000, 3000, { 
                fit: 'inside', 
                withoutEnlargement: false,
                kernel: sharp.kernel.lanczos3 
            })
            .sharpen({ sigma: 1.5, m1: 1.0, m2: 2.0 })
            .modulate({ 
                brightness: 1.1, 
                saturation: 1.2, 
                lightness: 0 
            })
            .normalise()
            .toBuffer();
        
        // 2. –°–æ–∑–¥–∞–µ–º –≤—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
        const highContrast = await sharp(enhanced)
            .threshold(128)
            .toBuffer();
        
        // 3. –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π
        const limitedPalette = await sharp(enhanced)
            .png({ 
                palette: true,
                colours: maxColors,
                dither: 0.5
            })
            .toBuffer();
        
        // 4. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—É—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç–æ–≤
        const edges = await sharp(enhanced)
            .greyscale()
            .convolve({
                width: 3,
                height: 3,
                kernel: [-1, -1, -1, -1, 8, -1, -1, -1, -1]
            })
            .threshold(50)
            .toBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤–µ—Ä—Å–∏–∏
        const files = {
            enhanced: path.join(outputDir, `${baseFilename}-enhanced.png`),
            highContrast: path.join(outputDir, `${baseFilename}-high-contrast.png`),
            limitedPalette: path.join(outputDir, `${baseFilename}-limited-palette.png`),
            edges: path.join(outputDir, `${baseFilename}-edges.png`)
        };
        
        await Promise.all([
            fs.writeFile(files.enhanced, enhanced),
            fs.writeFile(files.highContrast, highContrast),
            fs.writeFile(files.limitedPalette, limitedPalette),
            fs.writeFile(files.edges, edges)
        ]);
        
        console.log('‚úÖ [SCREEN-PRINT] –§–∞–π–ª—ã –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
        
        return {
            success: true,
            files: files,
            settings: {
                maxColors,
                resolution: '3000x3000',
                type: 'screen-print'
            },
            intelligentAnalysis: options.intelligentAnalysis || null
        };
        
    } catch (error) {
        console.error('‚ùå [SCREEN-PRINT] –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
        throw error;
    }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è DTF –ø–µ—á–∞—Ç–∏
 * @param {Buffer} imageBuffer - –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function optimizeForDTF(imageBuffer, options = {}) {
    const {
        addWhiteBase = true,
        enhanceColors = true,
        outputDir = './output/dtf-print'
    } = options;
    
    console.log('üé® [DTF] –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è DTF –ø–µ—á–∞—Ç–∏');
    
    try {
        // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await fs.mkdir(outputDir, { recursive: true });
        
        const timestamp = Date.now();
        const baseFilename = `dtf-print-${timestamp}`;
        
        // 1. –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
        let processed = sharp(imageBuffer)
            .resize(3600, 3600, { 
                fit: 'inside', 
                withoutEnlargement: false,
                kernel: sharp.kernel.lanczos3 
            });
        
        if (enhanceColors) {
            processed = processed
                .modulate({ 
                    brightness: 1.05, 
                    saturation: 1.3, 
                    lightness: 0 
                })
                .sharpen({ sigma: 1.2, m1: 0.8, m2: 1.5 });
        }
        
        const mainImage = await processed.png({ quality: 95 }).toBuffer();
        
        // 2. –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é —Å –±–µ–ª–æ–π –ø–æ–¥–ª–æ–∂–∫–æ–π –¥–ª—è —Ç–µ–º–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π
        let whiteBase = null;
        if (addWhiteBase) {
            // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –±–µ–ª–æ–π –ø–æ–¥–ª–æ–∂–∫–∏
            const mask = await sharp(mainImage)
                .greyscale()
                .threshold(240, { greyscale: false })
                .negate()
                .blur(1)
                .toBuffer();
            
            // –°–æ–∑–¥–∞–µ–º –±–µ–ª—É—é –ø–æ–¥–ª–æ–∂–∫—É
            whiteBase = await sharp({
                create: {
                    width: 3600,
                    height: 3600,
                    channels: 3,
                    background: { r: 255, g: 255, b: 255 }
                }
            })
            .composite([{ input: mask, blend: 'multiply' }])
            .png()
            .toBuffer();
        }
        
        // 3. –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º
        const transparent = await sharp(mainImage)
            .png({ palette: false })
            .toBuffer();
        
        // 4. –°–æ–∑–¥–∞–µ–º —É–≤–µ–ª–∏—á–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∫—Ä—É–ø–Ω–æ–π –ø–µ—á–∞—Ç–∏
        const large = await sharp(mainImage)
            .resize(5400, 5400, { 
                fit: 'inside', 
                withoutEnlargement: false,
                kernel: sharp.kernel.lanczos3 
            })
            .png({ quality: 95 })
            .toBuffer();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        const files = {
            main: path.join(outputDir, `${baseFilename}-main.png`),
            transparent: path.join(outputDir, `${baseFilename}-transparent.png`),
            large: path.join(outputDir, `${baseFilename}-large.png`)
        };
        
        const savePromises = [
            fs.writeFile(files.main, mainImage),
            fs.writeFile(files.transparent, transparent),
            fs.writeFile(files.large, large)
        ];
        
        if (whiteBase) {
            files.whiteBase = path.join(outputDir, `${baseFilename}-white-base.png`);
            savePromises.push(fs.writeFile(files.whiteBase, whiteBase));
        }
        
        await Promise.all(savePromises);
        
        console.log('‚úÖ [DTF] –§–∞–π–ª—ã –¥–ª—è DTF –ø–µ—á–∞—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã');
        
        return {
            success: true,
            files: files,
            settings: {
                resolution: '3600x3600',
                largeResolution: '5400x5400',
                whiteBase: addWhiteBase,
                type: 'dtf-print'
            }
        };
        
    } catch (error) {
        console.error('‚ùå [DTF] –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
        throw error;
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
 * @param {Buffer} imageBuffer - –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {Object} options - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function createVectorVersion(imageBuffer, options = {}) {
    const {
        threshold = 128,
        smoothing = 2,
        outputDir = './output/vector'
    } = options;
    
    console.log('üìê [VECTOR] –°–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é');
    
    try {
        await fs.mkdir(outputDir, { recursive: true });
        
        const timestamp = Date.now();
        const baseFilename = `vector-${timestamp}`;
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—É—é —á–µ—Ä–Ω–æ-–±–µ–ª—É—é –≤–µ—Ä—Å–∏—é
        const bw = await sharp(imageBuffer)
            .resize(2048, 2048, { fit: 'inside' })
            .greyscale()
            .blur(smoothing)
            .threshold(threshold)
            .png()
            .toBuffer();
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—É—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é
        const contours = await sharp(imageBuffer)
            .resize(2048, 2048, { fit: 'inside' })
            .greyscale()
            .convolve({
                width: 3,
                height: 3,
                kernel: [-1, -1, -1, -1, 8, -1, -1, -1, -1]
            })
            .threshold(30)
            .png()
            .toBuffer();
        
        const files = {
            blackWhite: path.join(outputDir, `${baseFilename}-bw.png`),
            contours: path.join(outputDir, `${baseFilename}-contours.png`)
        };
        
        await Promise.all([
            fs.writeFile(files.blackWhite, bw),
            fs.writeFile(files.contours, contours)
        ]);
        
        console.log('‚úÖ [VECTOR] –í–µ–∫—Ç–æ—Ä–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —Å–æ–∑–¥–∞–Ω—ã');
        
        return {
            success: true,
            files: files,
            settings: {
                threshold,
                smoothing,
                type: 'vector'
            }
        };
        
    } catch (error) {
        console.error('‚ùå [VECTOR] –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        throw error;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏
 * @param {string} imageUrl - URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} printType - –¢–∏–ø –ø–µ—á–∞—Ç–∏ (screen-print, dtf, both)
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function optimizeImageForPrint(imageUrl, printType = 'both', options = {}) {
    try {
        console.log(`üñ®Ô∏è [PRINT-OPT] –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è: ${printType}`);
        
        // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const imageBuffer = await downloadImage(imageUrl);
        
        const results = {
            success: true,
            optimizations: {},
            printType: printType,
            originalUrl: imageUrl
        };
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if (printType === 'screen-print' || printType === 'both') {
            results.optimizations.screenPrint = await optimizeForScreenPrint(imageBuffer, options.screenPrint);
        }
        
        if (printType === 'dtf' || printType === 'both') {
            results.optimizations.dtf = await optimizeForDTF(imageBuffer, options.dtf);
        }
        
        // –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é
        results.optimizations.vector = await createVectorVersion(imageBuffer, options.vector);
        
        console.log('‚úÖ [PRINT-OPT] –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã');
        return results;
        
    } catch (error) {
        console.error('‚ùå [PRINT-OPT] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
        return {
            success: false,
            error: error.message,
            printType: printType
        };
    }
}

module.exports = {
    optimizeImageForPrint,
    optimizeForScreenPrint,
    optimizeForDTF,
    createVectorVersion
};