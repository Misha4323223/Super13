/**
 * –ü–∞–π–ø–ª–∞–π–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã—à–∏–≤–∫–∏
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≤ –µ–¥–∏–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
 */

const aiImageGenerator = require('./ai-image-generator');
const { convertToEmbroidery, analyzeImageForEmbroidery } = require('./embroidery-converter');
const { analyzeImageForEmbroidery: aiAnalyzeImage, applyAIOptimizations, generateOptimizationReport } = require('./ai-embroidery-optimizer');
const fs = require('fs').promises;
const path = require('path');
const https = require('https');

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã—à–∏–≤–∫–∏
 */
function isEmbroideryGenerationRequest(message) {
  const embroideryGenKeywords = [
    '—Å–æ–∑–¥–∞–π.*–≤—ã—à–∏–≤–∫', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π.*–≤—ã—à–∏–≤–∫', '–Ω–∞—Ä–∏—Å—É–π.*–≤—ã—à–∏–≤–∫',
    '—Å–æ–∑–¥–∞–π.*dst', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π.*dst', '–Ω–∞—Ä–∏—Å—É–π.*dst',
    '–ª–æ–≥–æ—Ç–∏–ø.*–≤—ã—à–∏–≤–∫', '–¥–∏–∑–∞–π–Ω.*–≤—ã—à–∏–≤–∫', '–ø–∞—Ç—Ç–µ—Ä–Ω.*–≤—ã—à–∏–≤–∫',
    'create.*embroidery', 'generate.*embroidery', 'design.*embroidery',
    'embroidery.*design', '–≤—ã—à–∏–≤–∫–∞.*–¥–∏–∑–∞–π–Ω', '–¥–∏–∑–∞–π–Ω.*–¥–ª—è.*–≤—ã—à–∏–≤–∫–∏'
  ];
  
  const lowerMessage = message.toLowerCase();
  return embroideryGenKeywords.some(pattern => {
    const regex = new RegExp(pattern, 'i');
    return regex.test(lowerMessage);
  });
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
 */
function extractDesignDescription(message) {
  // –£–¥–∞–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∫–æ–º–∞–Ω–¥ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
  let description = message
    .replace(/—Å–æ–∑–¥–∞–π.*?(–≤—ã—à–∏–≤–∫[—É–∏]|dst|pes|jef)/gi, '')
    .replace(/—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π.*?(–≤—ã—à–∏–≤–∫[—É–∏]|dst|pes|jef)/gi, '')
    .replace(/–Ω–∞—Ä–∏—Å—É–π.*?(–≤—ã—à–∏–≤–∫[—É–∏]|dst|pes|jef)/gi, '')
    .replace(/–¥–∏–∑–∞–π–Ω.*?(–¥–ª—è.*)?–≤—ã—à–∏–≤–∫[—É–∏]/gi, '')
    .replace(/–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π.*–≤.*dst/gi, '')
    .trim();
  
  // –ï—Å–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (description.length < 10) {
    description = message;
  }
  
  return description;
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è –≤—ã—à–∏–≤–∫–∏
 */
function optimizePromptForEmbroidery(description) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —É–∂–µ –ø—Ä–æ–º–ø—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤—ã—à–∏–≤–∫–∏
  if (description.includes('embroidery style') || description.includes('embroidered')) {
    return description; // –£–∂–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞ –≤—ã—à–∏–≤–∫–∏
  const embroideryOptimizations = [
    'line art',
    'coloring book style',
    'black outline only',
    'white background',
    'very simple shapes',
    'no shading',
    'no details',
    'bold thick lines',
    'embroidery pattern'
  ];
  
  // –£–±–∏—Ä–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ª–æ–∂–Ω—è—é—Ç –¥–∏–∑–∞–π–Ω
  const removeElements = [
    'photorealistic', 'realistic', 'detailed',
    'texture', 'shadows', 'lighting effects',
    'complex details', 'fine details', 'gradients'
  ];
  
  let optimizedPrompt = description;
  
  // –£–¥–∞–ª—è–µ–º –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
  removeElements.forEach(element => {
    const regex = new RegExp(element, 'gi');
    optimizedPrompt = optimizedPrompt.replace(regex, '');
  });
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –≤—ã—à–∏–≤–∫–∏
  optimizedPrompt += ', ' + embroideryOptimizations.join(', ');
  
  return optimizedPrompt.trim();
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π
 */
function determineTargetFormat(message, imageAnalysis = null) {
  const lowerMessage = message.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞
  if (lowerMessage.includes('dst')) return 'dst';
  if (lowerMessage.includes('pes')) return 'pes';
  if (lowerMessage.includes('jef')) return 'jef';
  if (lowerMessage.includes('exp')) return 'exp';
  if (lowerMessage.includes('vp3')) return 'vp3';
  
  // –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
  if (imageAnalysis && imageAnalysis.recommendedFormat) {
    return imageAnalysis.recommendedFormat;
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é DST - —Å–∞–º—ã–π —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
  return 'dst';
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–∞–π–ø–ª–∞–π–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
 */
async function generateAndConvertToEmbroidery(message, options = {}) {
  try {
    console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤—ã—à–∏–≤–∫–∏');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞
    const designDescription = extractDesignDescription(message);
    console.log('üìù –û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞:', designDescription);
    
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≤—ã—à–∏–≤–∫–∏
    const optimizedPrompt = optimizePromptForEmbroidery(designDescription);
    console.log('‚ú® –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç:', optimizedPrompt);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageResult = await aiImageGenerator.generateImage(
      optimizedPrompt, 
      'artistic', // –°—Ç–∏–ª—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤—ã—à–∏–≤–∫–∏
      null, // –ë–µ–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      options.sessionId,
      options.userId
    );
    
    if (!imageResult.success) {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ' + imageResult.error,
        step: 'image_generation'
      };
    }
    
    console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', imageResult.imageUrl);
    
    // –°–∫–∞—á–∏–≤–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    let imageBuffer;
    if (imageResult.imageUrl.startsWith('http')) {
      // –ï—Å–ª–∏ —ç—Ç–æ URL, —Å–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL:', imageResult.imageUrl);
      
      // –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
      let attempts = 0;
      const maxAttempts = 3;
      
      while (attempts < maxAttempts) {
        try {
          imageBuffer = await new Promise((resolve, reject) => {
            const timeout = setTimeout(() => {
              reject(new Error('–¢–∞–π–º–∞—É—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
            }, 60000); // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            
            https.get(imageResult.imageUrl, (response) => {
              clearTimeout(timeout);
              
              if (response.statusCode !== 200) {
                reject(new Error(`–°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–∫–æ–¥: ${response.statusCode})`));
                return;
              }
              
              const chunks = [];
              response.on('data', (chunk) => chunks.push(chunk));
              response.on('end', () => resolve(Buffer.concat(chunks)));
              response.on('error', reject);
            }).on('error', (error) => {
              clearTimeout(timeout);
              reject(error);
            });
          });
          break; // –£—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        } catch (error) {
          attempts++;
          console.log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempts} –Ω–µ —É–¥–∞–ª–∞—Å—å: ${error.message}`);
          
          if (attempts >= maxAttempts) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ ${maxAttempts} –ø–æ–ø—ã—Ç–æ–∫. –°–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`);
          }
          
          // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è)
          await new Promise(resolve => setTimeout(resolve, 5000));
        }
      }
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
      const imagePath = imageResult.imageUrl.replace('/output/', '');
      const fullImagePath = path.join(process.cwd(), 'output', imagePath);
      imageBuffer = await fs.readFile(fullImagePath);
    }
    
    // –ü—Ä–æ–≤–æ–¥–∏–º AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI-–∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    const aiAnalysis = await aiAnalyzeImage(imageBuffer, designDescription);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    let optimizedImageBuffer = imageBuffer;
    if (aiAnalysis) {
      console.log('üé® –ü—Ä–∏–º–µ–Ω—è–µ–º AI-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
      optimizedImageBuffer = await applyAIOptimizations(imageBuffer, aiAnalysis);
    }
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—à–∏–≤–∫–∏ (—Å—Ç–∞—Ä—ã–π –∞–Ω–∞–ª–∏–∑)
    const analysis = await analyzeImageForEmbroidery(optimizedImageBuffer);
    console.log('üîç –ê–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã—à–∏–≤–∫–∏:', analysis);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    const targetFormat = determineTargetFormat(message, analysis);
    console.log('üéØ –¶–µ–ª–µ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç:', targetFormat);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
    const conversionResult = await convertToEmbroidery(
      optimizedImageBuffer,
      `generated_embroidery_${Date.now()}.png`,
      targetFormat,
      options.conversionOptions || {}
    );
    
    if (!conversionResult.success) {
      return {
        success: false,
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏: ' + conversionResult.error,
        step: 'embroidery_conversion',
        generatedImage: imageResult.imageUrl
      };
    }
    
    console.log('üßµ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-–æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const aiOptimizationReport = aiAnalysis ? generateOptimizationReport(aiAnalysis, designDescription) : '';
    
    return {
      success: true,
      step: 'complete',
      originalPrompt: designDescription,
      optimizedPrompt: optimizedPrompt,
      generatedImage: imageResult.imageUrl,
      embroideryFormat: conversionResult.format,
      analysis: conversionResult.analysis,
      colorPalette: conversionResult.colorPalette,
      files: conversionResult.files,
      instructions: conversionResult.instructions,
      aiOptimizationReport: aiOptimizationReport,
      message: `–î–∏–∑–∞–π–Ω "${designDescription}" —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –¥–ª—è –≤—ã—à–∏–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ${conversionResult.format.name}`,
      details: {
        colors: conversionResult.colorPalette.length,
        size: `${conversionResult.analysis.width}x${conversionResult.analysis.height}–º–º`,
        threadsNeeded: conversionResult.colorPalette.map(c => c.threadColor.name).join(', '),
        machineFormat: conversionResult.format.name
      }
    };
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã—à–∏–≤–∫–∏:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –≤—ã—à–∏–≤–∫–∏: ' + error.message,
      step: 'pipeline_error'
    };
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
async function checkImageGeneratorAvailability() {
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const testResult = await aiImageGenerator.generateImage('test', 'artistic');
    return testResult.success;
  } catch (error) {
    console.error('–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
    return false;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –≤—ã—à–∏–≤–∫–∏
 */
function getEmbroideryPromptExamples() {
  return {
    logos: [
      '—Å–æ–∑–¥–∞–π –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏ —Å –±—É–∫–≤–∞–º–∏ ABC –¥–ª—è –≤—ã—à–∏–≤–∫–∏',
      '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ—Å—Ç–æ–π –ª–æ–≥–æ—Ç–∏–ø –∫–æ—Ç–∞ –¥–ª—è –≤—ã—à–∏–≤–∫–∏ dst',
      '–Ω–∞—Ä–∏—Å—É–π –ª–æ–≥–æ—Ç–∏–ø –∫–∞—Ñ–µ —Å —á–∞—à–∫–æ–π –∫–æ—Ñ–µ –¥–ª—è –≤—ã—à–∏–≤–∫–∏'
    ],
    patterns: [
      '—Å–æ–∑–¥–∞–π —Ü–≤–µ—Ç–æ—á–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—ã—à–∏–≤–∫–∏',
      '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π —É–∑–æ—Ä –¥–ª—è –≤—ã—à–∏–≤–∫–∏ pes',
      '–Ω–∞—Ä–∏—Å—É–π –ø—Ä–æ—Å—Ç–æ–π –æ—Ä–Ω–∞–º–µ–Ω—Ç –¥–ª—è –≤—ã—à–∏–≤–∫–∏'
    ],
    characters: [
      '—Å–æ–∑–¥–∞–π –º—É–ª—å—Ç—è—à–Ω–æ–≥–æ –º–µ–¥–≤–µ–¥—è –¥–ª—è –¥–µ—Ç—Å–∫–æ–π –≤—ã—à–∏–≤–∫–∏',
      '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–æ—Å—Ç–æ–≥–æ –∫–æ—Ç–∞ –¥–ª—è –≤—ã—à–∏–≤–∫–∏ jef',
      '–Ω–∞—Ä–∏—Å—É–π —Å–æ–±–∞–∫—É –≤ –º—É–ª—å—Ç—è—à–Ω–æ–º —Å—Ç–∏–ª–µ –¥–ª—è –≤—ã—à–∏–≤–∫–∏'
    ],
    text: [
      '—Å–æ–∑–¥–∞–π –Ω–∞–¥–ø–∏—Å—å "–ú–ê–ú–ê" –∫—Ä–∞—Å–∏–≤—ã–º —à—Ä–∏—Ñ—Ç–æ–º –¥–ª—è –≤—ã—à–∏–≤–∫–∏',
      '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç "LOVE" –¥–ª—è –≤—ã—à–∏–≤–∫–∏ dst',
      '–Ω–∞—Ä–∏—Å—É–π –∏–º—è "–ê–Ω–Ω–∞" –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º –¥–ª—è –≤—ã—à–∏–≤–∫–∏'
    ]
  };
}

module.exports = {
  isEmbroideryGenerationRequest,
  generateAndConvertToEmbroidery,
  checkImageGeneratorAvailability,
  getEmbroideryPromptExamples,
  extractDesignDescription,
  optimizePromptForEmbroidery,
  determineTargetFormat
};