/**
 * –ì–∏–±—Ä–∏–¥–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: SD WebUI -> Pollinations.ai
 */

import { createRequire } from 'module';
const require = createRequire(import.meta.url);

import { sdClient } from './sd-webui-client.js';

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
async function generateImage(prompt, style = 'realistic', previousImage = null, sessionId = null, userId = null) {
    console.log('üé® [HYBRID] –ó–∞–ø—É—Å–∫ –≥–∏–±—Ä–∏–¥–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
    console.log('üìù [HYBRID] –ü—Ä–æ–º–ø—Ç:', prompt);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º SD WebUI
    const sdAvailable = await sdClient.checkAvailability();
    
    if (sdAvailable) {
        console.log('‚úÖ [HYBRID] SD WebUI –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ');
        
        try {
            const result = await sdClient.generateImage(prompt, {
                width: 512,
                height: 512,
                steps: 20,
                cfg_scale: 7
            });
            
            if (result.success) {
                console.log('‚úÖ [HYBRID] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ SD WebUI');
                return {
                    success: true,
                    imageUrl: result.imageUrl,
                    provider: 'Stable_Diffusion_WebUI',
                    operation: 'generate'
                };
            } else {
                console.log('‚ùå [HYBRID] SD WebUI –Ω–µ —Å–º–æ–≥ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', result.error);
            }
        } catch (error) {
            console.log('‚ùå [HYBRID] –û—à–∏–±–∫–∞ SD WebUI:', error.message);
        }
    } else {
        console.log('‚ö†Ô∏è [HYBRID] SD WebUI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É');
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Pollinations.ai –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    console.log('üîÑ [HYBRID] –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ Pollinations.ai');
    
    try {
        // –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Pollinations API
        const enhancedPrompt = `high quality draw ${prompt}, detailed, professional`;
        const imageId = Date.now();
        const imageUrl = `https://image.pollinations.ai/prompt/${encodeURIComponent(enhancedPrompt)}?width=1024&height=1024&nologo=true&enhance=true&seed=${imageId}`;
        
        console.log('‚úÖ [HYBRID] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Pollinations.ai');
        return {
            success: true,
            imageUrl: imageUrl,
            provider: 'Pollinations_AI',
            operation: 'generate'
        };
    } catch (error) {
        console.log('‚ùå [HYBRID] –û—à–∏–±–∫–∞ Pollinations.ai:', error.message);
        return {
            success: false,
            error: '–°–∏—Å—Ç–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            provider: 'none',
            operation: 'generate'
        };
    }
}

/**
 * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
async function editImage(imageUrl, editPrompt, options = {}) {
    console.log('üé® [HYBRID] –ó–∞–ø—É—Å–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');
    console.log('üñºÔ∏è [HYBRID] –ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', imageUrl);
    console.log('üìù [HYBRID] –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', editPrompt);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SD WebUI –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const sdAvailable = await sdClient.checkAvailability();
    
    if (sdAvailable) {
        console.log('‚úÖ [HYBRID] SD WebUI –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
        
        try {
            const result = await sdClient.editImage(imageUrl, editPrompt, {
                denoising_strength: 0.7,
                cfg_scale: 7,
                steps: 20
            });
            
            if (result.success) {
                console.log('‚úÖ [HYBRID] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ SD WebUI');
                return {
                    success: true,
                    imageUrl: result.imageUrl,
                    provider: 'Stable_Diffusion_WebUI',
                    operation: 'edit',
                    description: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${editPrompt}`
                };
            } else {
                console.log('‚ùå [HYBRID] SD WebUI –Ω–µ —Å–º–æ–≥ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å:', result.error);
            }
        } catch (error) {
            console.log('‚ùå [HYBRID] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SD WebUI:', error.message);
        }
    }
    
    // –ü—Ä–æ–±—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤
    console.log('üîÑ [HYBRID] –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤...');
    
    try {
        const { analyzeObjectEdit, addObjectToImage, removeObjectByMask, changeObjectColor, generateVariation } = await import('./object-manipulation-editor.js');
        const editAnalysis = analyzeObjectEdit(editPrompt);
        
        let result;
        
        switch (editAnalysis.operation) {
            case 'add_object':
                result = await addObjectToImage(imageUrl, editAnalysis.object);
                break;
            case 'remove_object':
                result = await removeObjectByMask(imageUrl, editAnalysis.object);
                break;
            case 'change_color':
                result = await changeObjectColor(imageUrl, editAnalysis.change);
                break;
            default:
                result = await generateVariation(imageUrl, editAnalysis.change);
        }
        
        if (result && result.success) {
            console.log('‚úÖ [HYBRID] –û–±—ä–µ–∫—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ');
            return {
                success: true,
                imageUrl: result.imageUrl,
                provider: 'Object_Editor',
                operation: result.operation,
                description: result.description
            };
        }
    } catch (objectError) {
        console.log('‚ö†Ô∏è [HYBRID] –†–µ–¥–∞–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', objectError.message);
    }

    // Fallback –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
    console.log('üîÑ [HYBRID] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä');
    
    try {
        const { processLocalEdit } = await import('./local-image-editor.js');
        const result = await processLocalEdit(imageUrl, editPrompt);
        
        if (result && result.success) {
            console.log('‚úÖ [HYBRID] –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–º —Ä–µ–¥–∞–∫—Ç–æ—Ä–æ–º');
            return {
                success: true,
                imageUrl: result.imageUrl,
                provider: 'Local_Editor',
                operation: result.operation,
                description: result.description
            };
        } else {
            throw new Error(result?.error || '–û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞');
        }
    } catch (error) {
        console.log('‚ùå [HYBRID] –û—à–∏–±–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞:', error.message);
        return {
            success: false,
            error: '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
            provider: 'none',
            operation: 'edit'
        };
    }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
function analyzeEditRequest(request) {
    const lowerRequest = request.toLowerCase();
    
    if (lowerRequest.includes('—É–¥–∞–ª–∏ —Ñ–æ–Ω') || lowerRequest.includes('—É–±–µ—Ä–∏ —Ñ–æ–Ω') || lowerRequest.includes('remove background')) {
        return 'remove_background';
    }
    
    if (lowerRequest.includes('—É–ª—É—á—à–∏') || lowerRequest.includes('–ø–æ–≤—ã—Å–∏ –∫–∞—á–µ—Å—Ç–≤–æ') || lowerRequest.includes('enhance')) {
        return 'enhance';
    }
    
    return 'inpaint';
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º
 */
async function getSystemStatus() {
    const sdStatus = await sdClient.getStatus();
    
    return {
        stableDiffusion: sdStatus,
        pollinations: {
            status: 'available',
            message: 'Pollinations.ai –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞'
        },
        gradioSpaces: {
            status: 'available',
            message: 'Gradio Spaces –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è'
        },
        localEditor: {
            status: 'available',
            message: '–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –≥–æ—Ç–æ–≤ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π'
        }
    };
}

export {
    generateImage,
    editImage,
    getSystemStatus
};