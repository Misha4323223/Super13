/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–∏–∫—Å–µ–ª–µ–π, —Ü–≤–µ—Ç–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ñ–æ—Ä–º –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */

const fs = require('fs');
const path = require('path');

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 */
async function detectObjects(imageBuffer, filename) {
  try {
    console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤...');
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const colorAnalysis = analyzeColors(imageBuffer);
    const edgeAnalysis = detectEdges(imageBuffer);
    const textureAnalysis = analyzeTextures(imageBuffer);
    const shapeAnalysis = detectShapes(imageBuffer);
    const patternAnalysis = findPatterns(imageBuffer);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
    const detectedObjects = identifyObjects({
      colors: colorAnalysis,
      edges: edgeAnalysis,
      textures: textureAnalysis,
      shapes: shapeAnalysis,
      patterns: patternAnalysis,
      filename
    });
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    const description = generateDetailedDescription(detectedObjects, colorAnalysis, filename);
    
    return {
      success: true,
      description,
      detectedObjects: detectedObjects.objects,
      confidence: detectedObjects.confidence,
      service: 'Advanced Object Detection',
      details: {
        dominantColors: colorAnalysis.dominantColors,
        objectCount: detectedObjects.objects.length,
        sceneType: detectedObjects.sceneType,
        lighting: colorAnalysis.lighting,
        composition: shapeAnalysis.composition
      }
    };
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤
 */
function analyzeColors(imageBuffer) {
  const sampleSize = Math.min(20000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let colorProfile = {
    red: 0, green: 0, blue: 0,
    hues: { warm: 0, cool: 0, neutral: 0 },
    brightness: { bright: 0, medium: 0, dark: 0 },
    saturation: { high: 0, medium: 0, low: 0 },
    samples: 0
  };
  
  for (let i = 0; i < sample.length - 2; i += 3) {
    const r = sample[i] || 0;
    const g = sample[i + 1] || 0;
    const b = sample[i + 2] || 0;
    
    colorProfile.red += r;
    colorProfile.green += g;
    colorProfile.blue += b;
    colorProfile.samples++;
    
    // –ê–Ω–∞–ª–∏–∑ —è—Ä–∫–æ—Å—Ç–∏
    const brightness = (r + g + b) / 3;
    if (brightness > 200) colorProfile.brightness.bright++;
    else if (brightness > 100) colorProfile.brightness.medium++;
    else colorProfile.brightness.dark++;
    
    // –ê–Ω–∞–ª–∏–∑ –æ—Ç—Ç–µ–Ω–∫–æ–≤
    if (r > g + 30 && r > b + 30) colorProfile.hues.warm++;
    else if (b > r + 30 && b > g + 30) colorProfile.hues.cool++;
    else colorProfile.hues.neutral++;
    
    // –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç–∏
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const saturation = max === 0 ? 0 : (max - min) / max;
    
    if (saturation > 0.7) colorProfile.saturation.high++;
    else if (saturation > 0.3) colorProfile.saturation.medium++;
    else colorProfile.saturation.low++;
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
  const avgRed = colorProfile.red / colorProfile.samples;
  const avgGreen = colorProfile.green / colorProfile.samples;
  const avgBlue = colorProfile.blue / colorProfile.samples;
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—ä–µ–∫—Ç—ã
  let dominantColors = [];
  let colorObjects = [];
  
  if (avgGreen > avgRed + 40 && avgGreen > avgBlue + 40) {
    dominantColors.push('–∑–µ–ª–µ–Ω—ã–π');
    colorObjects.push('—Ä–∞—Å—Ç–µ–Ω–∏—è', '—Ç—Ä–∞–≤–∞', '–¥–µ—Ä–µ–≤—å—è', '–ª–∏—Å—Ç—å—è', '–ø–∞—Ä–∫', '–ª–µ—Å');
  }
  
  if (avgBlue > avgRed + 40 && avgBlue > avgGreen + 40) {
    dominantColors.push('—Å–∏–Ω–∏–π');
    colorObjects.push('–Ω–µ–±–æ', '–≤–æ–¥–∞', '–º–æ—Ä–µ', '–æ–∑–µ—Ä–æ', '–¥–∂–∏–Ω—Å—ã', '—Å–∏–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã');
  }
  
  if (avgRed > avgGreen + 40 && avgRed > avgBlue + 40) {
    dominantColors.push('–∫—Ä–∞—Å–Ω—ã–π');
    colorObjects.push('—Ü–≤–µ—Ç—ã', '—Ñ—Ä—É–∫—Ç—ã', '–∞–≤—Ç–æ–º–æ–±–∏–ª–∏', '–∑–Ω–∞–∫–∏', '–∑–∞–∫–∞—Ç');
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–µ
  let lighting = '–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ';
  if (colorProfile.brightness.bright > colorProfile.brightness.dark * 2) {
    lighting = '—è—Ä–∫–æ–µ –¥–Ω–µ–≤–Ω–æ–µ';
    colorObjects.push('—Å–æ–ª–Ω–µ—á–Ω—ã–π –¥–µ–Ω—å', '—Ö–æ—Ä–æ—à–µ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ');
  } else if (colorProfile.brightness.dark > colorProfile.brightness.bright * 2) {
    lighting = '—Ç–µ–º–Ω–æ–µ –≤–µ—á–µ—Ä–Ω–µ–µ';
    colorObjects.push('–≤–µ—á–µ—Ä', '—Ç–µ–Ω–∏', '–ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω–æ–µ –æ—Å–≤–µ—â–µ–Ω–∏–µ');
  }
  
  return {
    dominantColors,
    colorObjects,
    lighting,
    averageRGB: { red: avgRed, green: avgGreen, blue: avgBlue },
    profile: colorProfile
  };
}

/**
 * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∫—Ä–∞–µ–≤ –∏ –∫–æ–Ω—Ç—É—Ä–æ–≤
 */
function detectEdges(imageBuffer) {
  const sampleSize = Math.min(15000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let edgeData = {
    sharpEdges: 0,
    softEdges: 0,
    transitions: 0,
    complexity: 0
  };
  
  for (let i = 2; i < sample.length - 2; i++) {
    const current = sample[i] || 0;
    const prev = sample[i - 1] || 0;
    const next = sample[i + 1] || 0;
    
    const gradient = Math.abs(next - prev);
    
    if (gradient > 50) {
      edgeData.sharpEdges++;
      edgeData.complexity += gradient;
    } else if (gradient > 20) {
      edgeData.softEdges++;
    }
    
    if (Math.abs(current - prev) > 30) {
      edgeData.transitions++;
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∞–µ–≤
  let edgeObjects = [];
  
  if (edgeData.sharpEdges > edgeData.softEdges * 2) {
    edgeObjects.push('–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–∑–¥–∞–Ω–∏—è', '–º–µ–±–µ–ª—å', '—Ç–µ—Ö–Ω–∏–∫–∞', '–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã');
  }
  
  if (edgeData.softEdges > edgeData.sharpEdges) {
    edgeObjects.push('–ø—Ä–∏—Ä–æ–¥–∞', '–ª—é–¥–∏', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '–æ–±–ª–∞–∫–∞', '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã');
  }
  
  if (edgeData.complexity / sample.length > 0.8) {
    edgeObjects.push('—Å–ª–æ–∂–Ω–∞—è —Å—Ü–µ–Ω–∞', '–º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤', '–¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
  }
  
  return {
    edgeObjects,
    sharpness: edgeData.sharpEdges / (edgeData.sharpEdges + edgeData.softEdges),
    complexity: edgeData.complexity / sample.length
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç—É—Ä
 */
function analyzeTextures(imageBuffer) {
  const sampleSize = Math.min(10000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let textureData = {
    roughness: 0,
    smoothness: 0,
    uniformity: 0,
    patterns: 0
  };
  
  let variations = [];
  
  for (let i = 5; i < sample.length - 5; i += 5) {
    const window = sample.slice(i - 5, i + 5);
    let localVariation = 0;
    
    for (let j = 1; j < window.length; j++) {
      localVariation += Math.abs((window[j] || 0) - (window[j-1] || 0));
    }
    
    variations.push(localVariation);
    
    if (localVariation > 100) textureData.roughness++;
    else if (localVariation < 30) textureData.smoothness++;
    
    if (localVariation > 80 && localVariation < 120) textureData.patterns++;
  }
  
  // –í—ã—á–∏—Å–ª—è–µ–º –æ–¥–Ω–æ—Ä–æ–¥–Ω–æ—Å—Ç—å
  const avgVariation = variations.reduce((a, b) => a + b, 0) / variations.length;
  textureData.uniformity = 1 - (Math.sqrt(variations.reduce((acc, v) => acc + Math.pow(v - avgVariation, 2), 0) / variations.length) / 255);
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç—É—Ä—ã
  let textureObjects = [];
  
  if (textureData.smoothness > textureData.roughness * 1.5) {
    textureObjects.push('—Å—Ç–µ–∫–ª–æ', '–≤–æ–¥–∞', '–º–µ—Ç–∞–ª–ª', '—ç–∫—Ä–∞–Ω—ã', '–≥–ª–∞–¥–∫–∏–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏');
  }
  
  if (textureData.roughness > textureData.smoothness) {
    textureObjects.push('—Ç–∫–∞–Ω—å', '–∫–æ–∂–∞', '–∫–æ—Ä–∞ –¥–µ—Ä–µ–≤—å–µ–≤', '–∫–∞–º–µ–Ω—å', '—Ç–µ–∫—Å—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã');
  }
  
  if (textureData.uniformity > 0.8) {
    textureObjects.push('–Ω–µ–±–æ', '—Å—Ç–µ–Ω—ã', '–æ–¥–Ω–æ—Ä–æ–¥–Ω—ã–µ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏');
  }
  
  if (textureData.patterns > variations.length * 0.3) {
    textureObjects.push('—É–∑–æ—Ä—ã', '–æ—Ä–Ω–∞–º–µ–Ω—Ç—ã', '—Ç–µ–∫—Å—Ç–∏–ª—å', '–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã');
  }
  
  return {
    textureObjects,
    smoothness: textureData.smoothness / variations.length,
    roughness: textureData.roughness / variations.length,
    uniformity: textureData.uniformity
  };
}

/**
 * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º
 */
function detectShapes(imageBuffer) {
  const sampleSize = Math.min(8000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let shapeData = {
    geometric: 0,
    organic: 0,
    linear: 0,
    circular: 0,
    complexity: 0
  };
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  for (let i = 10; i < sample.length - 10; i += 10) {
    const segment = sample.slice(i - 10, i + 10);
    
    // –ò—â–µ–º –ª–∏–Ω–µ–π–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    let linearScore = 0;
    for (let j = 1; j < segment.length - 1; j++) {
      const diff1 = Math.abs((segment[j] || 0) - (segment[j-1] || 0));
      const diff2 = Math.abs((segment[j+1] || 0) - (segment[j] || 0));
      if (Math.abs(diff1 - diff2) < 10) linearScore++;
    }
    
    if (linearScore > segment.length * 0.6) {
      shapeData.linear++;
      shapeData.geometric++;
    }
    
    // –ò—â–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    let cyclicalScore = 0;
    for (let j = 2; j < segment.length - 2; j++) {
      const val = segment[j] || 0;
      const prev2 = segment[j-2] || 0;
      const next2 = segment[j+2] || 0;
      if (Math.abs(val - prev2) < 15 && Math.abs(val - next2) < 15) cyclicalScore++;
    }
    
    if (cyclicalScore > segment.length * 0.4) {
      shapeData.circular++;
      shapeData.organic++;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    let changes = 0;
    for (let j = 1; j < segment.length; j++) {
      if (Math.abs((segment[j] || 0) - (segment[j-1] || 0)) > 20) changes++;
    }
    shapeData.complexity += changes;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–æ—Ä–º
  let shapeObjects = [];
  let composition = '—Å–º–µ—à–∞–Ω–Ω–∞—è';
  
  if (shapeData.geometric > shapeData.organic * 1.5) {
    shapeObjects.push('–∑–¥–∞–Ω–∏—è', '–º–µ–±–µ–ª—å', '—Ç–µ—Ö–Ω–∏–∫–∞', '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', '–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã');
    composition = '–≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è';
  }
  
  if (shapeData.organic > shapeData.geometric) {
    shapeObjects.push('–ª—é–¥–∏', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '—Ä–∞—Å—Ç–µ–Ω–∏—è', '–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ñ–æ—Ä–º—ã', '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã');
    composition = '–æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∞—è';
  }
  
  if (shapeData.linear > shapeData.circular * 1.5) {
    shapeObjects.push('–¥–æ—Ä–æ–≥–∏', '–ø—Ä–æ–≤–æ–¥–∞', '–ª–∏–Ω–∏–∏', '–≥—Ä–∞–Ω–∏—Ü—ã', '—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã');
  }
  
  if (shapeData.circular > shapeData.linear) {
    shapeObjects.push('–∫–æ–ª–µ—Å–∞', '–º—è—á–∏', '—á–∞—Å—ã', '–∫—Ä—É–≥–ª—ã–µ –æ–±—ä–µ–∫—Ç—ã', '—Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–µ —Ñ–æ—Ä–º—ã');
  }
  
  return {
    shapeObjects,
    composition,
    geometricScore: shapeData.geometric / (shapeData.geometric + shapeData.organic),
    complexity: shapeData.complexity / sampleSize
  };
}

/**
 * –ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
function findPatterns(imageBuffer) {
  const sampleSize = Math.min(5000, imageBuffer.length);
  const sample = imageBuffer.slice(0, sampleSize);
  
  let patternData = {
    repetitive: 0,
    random: 0,
    symmetric: 0,
    gradients: 0
  };
  
  // –ò—â–µ–º –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
  for (let i = 0; i < sample.length - 20; i += 10) {
    const pattern = sample.slice(i, i + 10);
    let matches = 0;
    
    for (let j = i + 10; j < sample.length - 10; j += 10) {
      const candidate = sample.slice(j, j + 10);
      let similarity = 0;
      
      for (let k = 0; k < Math.min(pattern.length, candidate.length); k++) {
        if (Math.abs((pattern[k] || 0) - (candidate[k] || 0)) < 20) similarity++;
      }
      
      if (similarity > pattern.length * 0.7) matches++;
    }
    
    if (matches > 2) patternData.repetitive++;
  }
  
  // –ò—â–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã
  for (let i = 0; i < sample.length - 10; i += 10) {
    const segment = sample.slice(i, i + 10);
    let isGradient = true;
    
    for (let j = 1; j < segment.length; j++) {
      const diff = (segment[j] || 0) - (segment[j-1] || 0);
      if (Math.abs(diff) > 30) {
        isGradient = false;
        break;
      }
    }
    
    if (isGradient) patternData.gradients++;
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
  let patternObjects = [];
  
  if (patternData.repetitive > 0) {
    patternObjects.push('—É–∑–æ—Ä—ã', '—Ç–µ–∫—Å—Ç–∏–ª—å', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã', '–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã');
  }
  
  if (patternData.gradients > sample.length / 100) {
    patternObjects.push('–Ω–µ–±–æ', '–∑–∞–∫–∞—Ç', '–æ—Å–≤–µ—â–µ–Ω–∏–µ', '–ø–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã');
  }
  
  return {
    patternObjects,
    repetitiveness: patternData.repetitive / (sample.length / 100),
    smoothness: patternData.gradients / (sample.length / 100)
  };
}

/**
 * –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
 */
function identifyObjects(analysisData) {
  const { colors, edges, textures, shapes, patterns, filename } = analysisData;
  
  // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  let allObjects = [
    ...colors.colorObjects,
    ...edges.edgeObjects,
    ...textures.textureObjects,
    ...shapes.shapeObjects,
    ...patterns.patternObjects
  ];
  
  // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
  let objectCounts = {};
  allObjects.forEach(obj => {
    objectCounts[obj] = (objectCounts[obj] || 0) + 1;
  });
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç—ã –ø–æ —á–∞—Å—Ç–æ—Ç–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
  let detectedObjects = Object.entries(objectCounts)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 8) // –ë–µ—Ä–µ–º —Ç–æ–ø-8 –æ–±—ä–µ–∫—Ç–æ–≤
    .map(([obj, count]) => ({
      name: obj,
      confidence: Math.min(count / 5, 1) // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    }));
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ü–µ–Ω—ã
  let sceneType = '–æ–±—â–∞—è —Å—Ü–µ–Ω–∞';
  if (detectedObjects.some(obj => obj.name.includes('–∑–¥–∞–Ω–∏—è') || obj.name.includes('–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞'))) {
    sceneType = '–≥–æ—Ä–æ–¥—Å–∫–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞';
  } else if (detectedObjects.some(obj => obj.name.includes('—Ä–∞—Å—Ç–µ–Ω–∏—è') || obj.name.includes('–ø—Ä–∏—Ä–æ–¥–∞'))) {
    sceneType = '–ø—Ä–∏—Ä–æ–¥–Ω—ã–π –ø–µ–π–∑–∞–∂';
  } else if (detectedObjects.some(obj => obj.name.includes('–ª—é–¥–∏'))) {
    sceneType = '–ø–æ—Ä—Ç—Ä–µ—Ç –∏–ª–∏ –ª—é–¥–∏';
  } else if (detectedObjects.some(obj => obj.name.includes('—Ç–µ—Ö–Ω–∏–∫–∞'))) {
    sceneType = '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã';
  }
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const fileName = filename.toLowerCase();
  if (fileName.includes('photo') || fileName.includes('img') || fileName.includes('picture')) {
    sceneType += ' (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è)';
  }
  
  return {
    objects: detectedObjects,
    sceneType,
    confidence: detectedObjects.length > 0 ? 
      detectedObjects.reduce((sum, obj) => sum + obj.confidence, 0) / detectedObjects.length : 0.5
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
 */
function generateDetailedDescription(detectedObjects, colorAnalysis, filename) {
  let description = '';
  
  // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–∏–ø–∞ —Å—Ü–µ–Ω—ã
  description += `${detectedObjects.sceneType} —Å `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  if (colorAnalysis.dominantColors.length > 0) {
    description += `–ø—Ä–µ–æ–±–ª–∞–¥–∞–Ω–∏–µ–º ${colorAnalysis.dominantColors.join(' –∏ ')} —Ü–≤–µ—Ç–æ–≤. `;
  } else {
    description += '—Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π. ';
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
  if (detectedObjects.objects.length > 0) {
    const topObjects = detectedObjects.objects.slice(0, 5);
    const objectNames = topObjects.map(obj => obj.name);
    description += `–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã: ${objectNames.join(', ')}. `;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å–≤–µ—â–µ–Ω–∏–∏
  description += `–û—Å–≤–µ—â–µ–Ω–∏–µ: ${colorAnalysis.lighting}. `;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
  if (detectedObjects.confidence > 0.7) {
    description += '–í—ã—Å–æ–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –∏ —á–µ—Ç–∫–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
  } else if (detectedObjects.confidence > 0.4) {
    description += '–•–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å —Ä–∞–∑–ª–∏—á–∏–º—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏.';
  } else {
    description += '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.';
  }
  
  return description;
}

module.exports = {
  detectObjects,
  analyzeColors,
  detectEdges,
  analyzeTextures,
  detectShapes,
  findPatterns
};