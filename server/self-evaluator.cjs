/**
 * –°–ò–°–¢–ï–ú–ê –°–ê–ú–û–û–¶–ï–ù–ö–ò –ò –†–ï–§–ò–ù–ò–†–û–í–ê–ù–ò–Ø –û–¢–í–ï–¢–û–í
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —É–ª—É—á—à–∞–µ—Ç –∏—Ö –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø: –ö–∞–∫ ChatGPT-4 –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –∏ —É–ª—É—á—à–∞–µ—Ç –∏—Ö
 */

const SmartLogger = {
  evaluator: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üéØ [${timestamp}] SELF-EVALUATOR: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ê–ù–ê–õ–ò–ó–ê–¢–û–† –õ–û–ì–ò–ß–ù–û–°–¢–ò –û–¢–í–ï–¢–ê
 */
class LogicAnalyzer {
  constructor() {
    this.logicPatterns = {
      // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–æ–∫
      connections: ['–ø–æ—Ç–æ–º—É —á—Ç–æ', '—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ', '—Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º', '–ø–æ—ç—Ç–æ–º—É', '–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ'],
      contradictions: ['–Ω–æ', '–æ–¥–Ω–∞–∫–æ', '—Ç–µ–º –Ω–µ –º–µ–Ω–µ–µ', '—Å –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã'],
      sequences: ['—Å–Ω–∞—á–∞–ª–∞', '–∑–∞—Ç–µ–º', '–¥–∞–ª–µ–µ', '–Ω–∞–∫–æ–Ω–µ—Ü', '–≤ –∏—Ç–æ–≥–µ'],
      examples: ['–Ω–∞–ø—Ä–∏–º–µ—Ä', '–∫ –ø—Ä–∏–º–µ—Ä—É', '–¥–æ–ø—É—Å—Ç–∏–º', '—Å–∫–∞–∂–µ–º']
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–∫—Å—Ç–∞
   */
  analyzeLogic(text, meta) {
    SmartLogger.evaluator('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞');

    const analysis = {
      structuralCoherence: this.checkStructuralCoherence(text),
      argumentationQuality: this.assessArgumentation(text, meta),
      logicalFlow: this.checkLogicalFlow(text),
      contradictionCheck: this.findContradictions(text),
      completenessCheck: this.checkCompleteness(text, meta)
    };

    const logicScore = this.calculateLogicScore(analysis);

    SmartLogger.evaluator(`–õ–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω, –æ—Ü–µ–Ω–∫–∞: ${logicScore}/10`);

    return {
      score: logicScore,
      details: analysis,
      improvements: this.suggestLogicImprovements(analysis)
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—É—é —Å–≤—è–∑–Ω–æ—Å—Ç—å
   */
  checkStructuralCoherence(text) {
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);

    let coherenceScore = 5; // –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–æ–∫
    const connectionsFound = this.logicPatterns.connections.filter(pattern => 
      text.toLowerCase().includes(pattern)
    ).length;

    if (connectionsFound > 0) coherenceScore += Math.min(2, connectionsFound * 0.5);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const sequencesFound = this.logicPatterns.sequences.filter(pattern => 
      text.toLowerCase().includes(pattern)
    ).length;

    if (sequencesFound > 1) coherenceScore += 1;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π (—Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ = –ø–ª–æ—Ö–æ)
    const avgSentenceLength = sentences.reduce((sum, s) => sum + s.length, 0) / sentences.length;
    if (avgSentenceLength > 200) coherenceScore -= 1;
    if (avgSentenceLength < 30) coherenceScore -= 0.5;

    return Math.max(0, Math.min(10, coherenceScore));
  }

  /**
   * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏
   */
  assessArgumentation(text, meta) {
    let argumentationScore = 5;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤
    const examplesFound = this.logicPatterns.examples.filter(pattern => 
      text.toLowerCase().includes(pattern)
    ).length;

    if (examplesFound > 0) argumentationScore += 1;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑—É
    if (meta && meta.intent) {
      const queryType = meta.intent;

      // –î–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É–µ–º –±–æ–ª–µ–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
      if (queryType === 'technical' || queryType === 'how_to') {
        if (text.includes('—à–∞–≥') || text.includes('—ç—Ç–∞–ø') || text.includes('–∞–ª–≥–æ—Ä–∏—Ç–º')) {
          argumentationScore += 1;
        }
      }

      // –î–ª—è creative –∑–∞–ø—Ä–æ—Å–æ–≤ —Ü–µ–Ω–∏–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
      if (queryType === 'creative' || queryType === 'image_generation') {
        if (text.includes('–≤–∞—Ä–∏–∞–Ω—Ç') || text.includes('–º–æ–∂–Ω') || text.includes('–ø—Ä–µ–¥–ª–∞–≥–∞—é')) {
          argumentationScore += 1;
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π
    const assertionCount = (text.match(/\./g) || []).length;
    const explanationCount = (text.match(/[,:]/g) || []).length;

    if (explanationCount > assertionCount * 0.3) argumentationScore += 0.5;

    return Math.max(0, Math.min(10, argumentationScore));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–æ—Ç–æ–∫
   */
  checkLogicalFlow(text) {
    const paragraphs = text.split('\n').filter(p => p.trim().length > 0);

    let flowScore = 5;

    // –ö–∞–∂–¥—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ –¥–æ–ª–∂–µ–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–ª–µ–¥–æ–≤–∞—Ç—å –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    for (let i = 1; i < paragraphs.length; i++) {
      const currentParagraph = paragraphs[i].toLowerCase();
      const previousParagraph = paragraphs[i - 1].toLowerCase();

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑—É—é—â–∏—Ö —Å–ª–æ–≤ –≤ –Ω–∞—á–∞–ª–µ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
      const hasTransition = this.logicPatterns.connections.some(pattern => 
        currentParagraph.startsWith(pattern) || currentParagraph.includes(pattern)
      );

      if (hasTransition) flowScore += 0.5;
    }

    return Math.max(0, Math.min(10, flowScore));
  }

  /**
   * –ò—â–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
   */
  findContradictions(text) {
    const lowerText = text.toLowerCase();
    let contradictionPenalty = 0;

    // –ü–æ–∏—Å–∫ —è–≤–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π
    const contradictionPatterns = [
      ['–≤—Å–µ–≥–¥–∞', '–Ω–∏–∫–æ–≥–¥–∞'],
      ['–º–æ–∂–Ω–æ', '–Ω–µ–ª—å–∑—è'],
      ['–¥–∞', '–Ω–µ—Ç'],
      ['–≤–æ–∑–º–æ–∂–Ω–æ', '–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ']
    ];

    contradictionPatterns.forEach(([positive, negative]) => {
      if (lowerText.includes(positive) && lowerText.includes(negative)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –ª–∏ –æ–Ω–∏ –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ —Å–≤—è–∑–∫–∞–º–∏
        const positiveIndex = lowerText.indexOf(positive);
        const negativeIndex = lowerText.indexOf(negative);
        const between = lowerText.substring(
          Math.min(positiveIndex, negativeIndex), 
          Math.max(positiveIndex, negativeIndex)
        );

        const hasLogicalSeparator = this.logicPatterns.contradictions.some(pattern => 
          between.includes(pattern)
        );

        if (!hasLogicalSeparator) {
          contradictionPenalty += 1;
        }
      }
    });

    return Math.max(0, 10 - contradictionPenalty * 2);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞
   */
  checkCompleteness(text, meta) {
    let completenessScore = 5;

    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
    if (text.length < 50) completenessScore -= 3;
    else if (text.length < 100) completenessScore -= 1;
    else if (text.length > 500) completenessScore += 1;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞
    if (meta && meta.intent) {
      const queryType = meta.intent;

      if (queryType === 'question' && !text.includes('?') && text.length < 200) {
        completenessScore -= 1; // –ö–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
      }

      if (queryType === 'explanation' && text.length < 300) {
        completenessScore -= 1; // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º
      }
    }

    return Math.max(0, Math.min(10, completenessScore));
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É –ª–æ–≥–∏–∫–∏
   */
  calculateLogicScore(analysis) {
    const weights = {
      structuralCoherence: 0.25,
      argumentationQuality: 0.25,
      logicalFlow: 0.2,
      contradictionCheck: 0.15,
      completenessCheck: 0.15
    };

    return Object.keys(weights).reduce((score, key) => {
      return score + (analysis[key] * weights[key]);
    }, 0);
  }

  /**
   * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
   */
  suggestLogicImprovements(analysis) {
    const suggestions = [];

    if (analysis.structuralCoherence < 6) {
      suggestions.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Å–≤—è–∑–æ–∫ –º–µ–∂–¥—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏');
    }

    if (analysis.argumentationQuality < 6) {
      suggestions.push('–í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–π –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    }

    if (analysis.logicalFlow < 6) {
      suggestions.push('–£–ª—É—á—à–∏—Ç–µ –ø–µ—Ä–µ—Ö–æ–¥—ã –º–µ–∂–¥—É –∞–±–∑–∞—Ü–∞–º–∏');
    }

    if (analysis.contradictionCheck < 8) {
      suggestions.push('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –≤ —Ç–µ–∫—Å—Ç–µ');
    }

    if (analysis.completenessCheck < 6) {
      suggestions.push('–†–∞—Å—à–∏—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –±–æ–ª—å—à–µ–π –ø–æ–ª–Ω–æ—Ç—ã');
    }

    return suggestions;
  }
}

/**
 * –ê–ù–ê–õ–ò–ó–ê–¢–û–† –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ì–û –¢–û–ù–ê
 */
class EmotionalToneAnalyzer {
  constructor() {
    this.emotionalMarkers = {
      positive: ['–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '–≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ'],
      negative: ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ–ø—Ä–∏—è—Ç–Ω–æ', '–ø—Ä–æ–±–ª–µ–º–∞', '—Å–ª–æ–∂–Ω–æ—Å—Ç—å'],
      neutral: ['–≤–æ–∑–º–æ–∂–Ω–æ', '–≤–µ—Ä–æ—è—Ç–Ω–æ', '–æ–±—ã—á–Ω–æ', '–∫–∞–∫ –ø—Ä–∞–≤–∏–ª–æ', '—á–∞—Å—Ç–æ'],
      supportive: ['–ø–æ–º–æ–∂–µ–º', '–ø–æ–¥–¥–µ—Ä–∂–∏–º', '–ø–æ–Ω–∏–º–∞—é', '—Å–æ—á—É–≤—Å—Ç–≤—É—é', '—Ä–µ—à–∏–º'],
      professional: ['—Ä–µ–∫–æ–º–µ–Ω–¥—É—é', '–ø—Ä–µ–¥–ª–∞–≥–∞—é', '–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ', '—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ', '—Ü–µ–ª–µ—Å–æ–æ–±—Ä–∞–∑–Ω–æ']
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –æ—Ç–≤–µ—Ç–∞
   */
  analyzeTone(text, expectedTone = 'neutral') {
    SmartLogger.evaluator('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω');

    const toneAnalysis = {
      detectedTone: this.detectTone(text),
      expectedTone,
      toneConsistency: 0,
      appropriateness: 0,
      emotionalBalance: this.checkEmotionalBalance(text)
    };

    toneAnalysis.toneConsistency = this.checkToneConsistency(toneAnalysis.detectedTone, expectedTone);
    toneAnalysis.appropriateness = this.checkToneAppropriateness(toneAnalysis.detectedTone, text);

    const toneScore = (toneAnalysis.toneConsistency + toneAnalysis.appropriateness + toneAnalysis.emotionalBalance) / 3;

    SmartLogger.evaluator(`–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: ${toneAnalysis.detectedTone}, –æ—Ü–µ–Ω–∫–∞: ${toneScore.toFixed(1)}/10`);

    return {
      score: toneScore,
      analysis: toneAnalysis,
      improvements: this.suggestToneImprovements(toneAnalysis)
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–æ–Ω —Ç–µ–∫—Å—Ç–∞
   */
  detectTone(text) {
    const lowerText = text.toLowerCase();
    const toneScores = {};

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä–∫–µ—Ä—ã –∫–∞–∂–¥–æ–≥–æ —Ç–æ–Ω–∞
    Object.keys(this.emotionalMarkers).forEach(tone => {
      toneScores[tone] = this.emotionalMarkers[tone].filter(marker => 
        lowerText.includes(marker)
      ).length;
    });

    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ç–æ–Ω
    const dominantTone = Object.keys(toneScores).reduce((a, b) => 
      toneScores[a] > toneScores[b] ? a : b
    );

    return toneScores[dominantTone] > 0 ? dominantTone : 'neutral';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Ç–æ–Ω–∞
   */
  checkToneConsistency(detected, expected) {
    if (detected === expected) return 10;

    // –°–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–æ–Ω–∞
    const compatibleTones = {
      professional: ['neutral', 'supportive'],
      supportive: ['positive', 'professional'],
      positive: ['supportive', 'neutral'],
      neutral: ['professional', 'positive']
    };

    if (compatibleTones[expected]?.includes(detected)) return 7;
    if (compatibleTones[detected]?.includes(expected)) return 6;

    return 4; // –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ —Ç–æ–Ω–∞
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É–º–µ—Å—Ç–Ω–æ—Å—Ç—å —Ç–æ–Ω–∞
   */
  checkToneAppropriateness(tone, text) {
    let appropriatenessScore = 7; // –±–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞

    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω —É–º–µ—Å—Ç–µ–Ω –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (tone === 'positive' && (text.includes('—É—Å–ø–µ—à–Ω–æ') || text.includes('–≥–æ—Ç–æ–≤–æ'))) {
      appropriatenessScore += 2;
    }

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω —É–º–µ—Å—Ç–µ–Ω –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º
    if (tone === 'supportive' && (text.includes('–ø–æ–º–æ–∂–µ') || text.includes('—Ä–µ—à–µ–Ω–∏'))) {
      appropriatenessScore += 2;
    }

    // –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –≤—Å–µ–≥–¥–∞ —É–º–µ—Å—Ç–µ–Ω
    if (tone === 'professional') {
      appropriatenessScore += 1;
    }

    // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π —Ç–æ–Ω –ø–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞ –Ω–µ—É–º–µ—Å—Ç–µ–Ω
    if (tone === 'negative') {
      appropriatenessScore -= 3;
    }

    return Math.max(0, Math.min(10, appropriatenessScore));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
   */
  checkEmotionalBalance(text) {
    const lowerText = text.toLowerCase();

    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –∏ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    const positiveCount = this.emotionalMarkers.positive.filter(marker => 
      lowerText.includes(marker)
    ).length;

    const negativeCount = this.emotionalMarkers.negative.filter(marker => 
      lowerText.includes(marker)
    ).length;

    // –ò–¥–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: –±–æ–ª—å—à–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö, –º–∏–Ω–∏–º—É–º –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö
    if (positiveCount > 0 && negativeCount === 0) return 9;
    if (positiveCount >= negativeCount && negativeCount <= 1) return 7;
    if (positiveCount === 0 && negativeCount === 0) return 6; // –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ
    if (negativeCount > positiveCount) return 3;

    return 5;
  }

  /**
   * –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ–Ω–∞
   */
  suggestToneImprovements(analysis) {
    const suggestions = [];

    if (analysis.toneConsistency < 6) {
      suggestions.push(`–ê–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ —Ç–æ–Ω –ø–æ–¥ –æ–∂–∏–¥–∞–µ–º—ã–π: ${analysis.expectedTone}`);
    }

    if (analysis.appropriateness < 6) {
      suggestions.push('–°–¥–µ–ª–∞–π—Ç–µ —Ç–æ–Ω –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞');
    }

    if (analysis.emotionalBalance < 6) {
      suggestions.push('–£–ª—É—á—à–∏—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å, –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }

    return suggestions;
  }
}

/**
 * –ì–õ–ê–í–ù–´–ô –û–¶–ï–ù–©–ò–ö –ö–ê–ß–ï–°–¢–í–ê
 */
class QualityEvaluator {
  constructor() {
    this.logicAnalyzer = new LogicAnalyzer();
    this.toneAnalyzer = new EmotionalToneAnalyzer();
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞
   */
  evaluateResponse(text, meta, context = {}) {
    SmartLogger.evaluator('–ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–∞');

    const evaluation = {
      timestamp: Date.now(),
      textLength: text.length,
      logic: this.logicAnalyzer.analyzeLogic(text, meta),
      tone: this.toneAnalyzer.analyzeTone(text, context.expectedTone),
      relevance: this.checkRelevance(text, meta),
      clarity: this.checkClarity(text),
      usefulness: this.checkUsefulness(text, meta),
      safety: this.checkSafety(text)
    };

    const overallScore = this.calculateOverallScore(evaluation);

    SmartLogger.evaluator(`–û—Ü–µ–Ω–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${overallScore.toFixed(1)}/10`);

    return {
      score: overallScore,
      evaluation,
      improvements: this.generateImprovements(evaluation),
      needsRefinement: overallScore < 7
    };
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  checkRelevance(text, meta) {
    let relevanceScore = 5;

    if (!meta || !meta.intent) return relevanceScore;

    const lowerText = text.toLowerCase();
    const intent = meta.intent.toLowerCase();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—é
    if (intent.includes('image') && lowerText.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏')) {
      relevanceScore += 2;
    }

    if (intent.includes('question') && lowerText.includes('–æ—Ç–≤–µ—Ç')) {
      relevanceScore += 1;
    }

    if (intent.includes('help') && lowerText.includes('–ø–æ–º–æ–∂–µ')) {
      relevanceScore += 1;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑–∞
    if (meta.keywords) {
      const keywordsFound = meta.keywords.filter(keyword => 
        lowerText.includes(keyword.toLowerCase())
      ).length;

      relevanceScore += Math.min(2, keywordsFound * 0.5);
    }

    return Math.max(0, Math.min(10, relevanceScore));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —è—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
   */
  checkClarity(text) {
    const sentences = text.split(/[.!?]+/).filter(s => s.trim().length > 0);
    let clarityScore = 7;

    // –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    const avgLength = sentences.reduce((sum, s) => sum + s.length, 0) / sentences.length;
    if (avgLength > 150) clarityScore -= 1;
    if (avgLength < 20) clarityScore -= 0.5;

    // –°–ª–æ–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    const complexWords = text.match(/\w{12,}/g) || [];
    if (complexWords.length > text.split(' ').length * 0.1) {
      clarityScore -= 1;
    }

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    if (text.includes('\n') || text.includes('‚Ä¢') || text.includes('-')) {
      clarityScore += 0.5; // —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ª—É—á—à–µ
    }

    return Math.max(0, Math.min(10, clarityScore));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  checkUsefulness(text, meta) {
    let usefulnessScore = 5;

    // –ù–∞–ª–∏—á–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    if (text.includes('—Ä–µ–∫–æ–º–µ–Ω–¥—É—é') || text.includes('–ø—Ä–µ–¥–ª–∞–≥–∞—é') || text.includes('—Å–æ–≤–µ—Ç—É—é')) {
      usefulnessScore += 1;
    }

    // –ù–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–æ–≤
    if (text.includes('–Ω–∞–ø—Ä–∏–º–µ—Ä') || text.includes('–∫ –ø—Ä–∏–º–µ—Ä—É')) {
      usefulnessScore += 1;
    }

    // –ü–æ—à–∞–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    if (text.includes('—à–∞–≥') || text.includes('—ç—Ç–∞–ø') || /\d+\./g.test(text)) {
      usefulnessScore += 1;
    }

    // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º –ø–æ —Ç–∏–ø—É –∑–∞–ø—Ä–æ—Å–∞
    if (meta && meta.intent) {
      if (meta.intent === 'how_to' && !text.includes('–∫–∞–∫')) {
        usefulnessScore -= 1;
      }
      if (meta.intent === 'creative' && !text.includes('–≤–∞—Ä–∏–∞–Ω—Ç')) {
        usefulnessScore -= 0.5;
      }
    }

    return Math.max(0, Math.min(10, usefulnessScore));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
   */
  checkSafety(text) {
    const lowerText = text.toLowerCase();
    const unsafePatterns = [
      '—É–¥–∞–ª–∏', '—É–Ω–∏—á—Ç–æ–∂', '—Å–ª–æ–º–∞–π', '–≤–∑–ª–æ–º–∞–π', '–Ω–∞—Ä—É—à—å',
      '—É–∫—Ä–∞–¥', '–æ–±–º–∞–Ω', '–º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤', '–≤—Ä–µ–¥'
    ];

    const foundUnsafe = unsafePatterns.filter(pattern => 
      lowerText.includes(pattern)
    ).length;

    return foundUnsafe > 0 ? 0 : 10;
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
   */
  calculateOverallScore(evaluation) {
    const weights = {
      logic: 0.25,
      tone: 0.15,
      relevance: 0.25,
      clarity: 0.15,
      usefulness: 0.15,
      safety: 0.05
    };

    return Object.keys(weights).reduce((score, key) => {
      const componentScore = evaluation[key].score || evaluation[key];
      return score + (componentScore * weights[key]);
    }, 0);
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
   */
  generateImprovements(evaluation) {
    const improvements = [];

    Object.keys(evaluation).forEach(component => {
      if (evaluation[component].improvements) {
        improvements.push(...evaluation[component].improvements);
      }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (evaluation.logic.score < 6 && evaluation.clarity.score < 6) {
      improvements.push('–£–ª—É—á—à–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –ª–æ–≥–∏–∫—É –∏–∑–ª–æ–∂–µ–Ω–∏—è');
    }

    if (evaluation.usefulness.score < 6) {
      improvements.push('–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–æ–≤ –∏ –ø—Ä–∏–º–µ—Ä–æ–≤');
    }

    return improvements;
  }
}

/**
 * –°–ò–°–¢–ï–ú–ê –†–ï–§–ò–ù–ò–†–û–í–ê–ù–ò–Ø –û–¢–í–ï–¢–û–í
 */
class ResponseRefiner {
  constructor() {
    this.evaluator = new QualityEvaluator();
  }

  /**
   * –£–ª—É—á—à–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  async refineResponse(originalThought, originalResponse, qualityScore) {
    SmartLogger.evaluator(`–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ (–∫–∞—á–µ—Å—Ç–≤–æ: ${qualityScore}/10)`);

    const evaluation = this.evaluator.evaluateResponse(
      originalResponse.response, 
      originalThought.meta
    );

    // –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –º—ã—Å–ª–∏
    const refinedThought = {
      ...originalThought,
      refinementContext: {
        originalQuality: qualityScore,
        evaluation: evaluation.evaluation,
        improvements: evaluation.improvements,
        focusAreas: this.identifyFocusAreas(evaluation.evaluation)
      }
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
    refinedThought.refinementInstructions = this.generateRefinementInstructions(evaluation);

    SmartLogger.evaluator('–†–µ—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –º—ã—Å–ª—å');

    return refinedThought;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è
   */
  identifyFocusAreas(evaluation) {
    const focusAreas = [];

    if (evaluation.logic.score < 6) focusAreas.push('logic');
    if (evaluation.tone.score < 6) focusAreas.push('tone');
    if (evaluation.relevance < 6) focusAreas.push('relevance');
    if (evaluation.clarity < 6) focusAreas.push('clarity');
    if (evaluation.usefulness < 6) focusAreas.push('usefulness');

    return focusAreas;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
   */
  generateRefinementInstructions(evaluation) {
    const instructions = [];

    evaluation.improvements.forEach(improvement => {
      instructions.push(`–£–õ–£–ß–®–ï–ù–ò–ï: ${improvement}`);
    });

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ü–µ–Ω–∫–∏
    if (evaluation.evaluation.logic.score < 6) {
      instructions.push('–§–û–ö–£–°: –£–ª—É—á—à–∏—Ç–µ –ª–æ–≥–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–≤—è–∑–Ω–æ—Å—Ç—å');
    }

    if (evaluation.evaluation.usefulness < 6) {
      instructions.push('–§–û–ö–£–°: –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏');
    }

    return instructions;
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
const qualityEvaluator = new QualityEvaluator();
const responseRefiner = new ResponseRefiner();

/**
 * –ì–õ–ê–í–ù–´–ï –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú–´–ï –§–£–ù–ö–¶–ò–ò
 */
const semanticQualityScore = (text, meta, context = {}) => {
  try {
    const result = qualityEvaluator.evaluateResponse(text, meta, context);
    return result.score;
  } catch (error) {
    SmartLogger.evaluator('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:', error.message);
    return 5; // —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
};

const refineResponse = async (thought, response, qualityScore) => {
  try {
    return await responseRefiner.refineResponse(thought, response, qualityScore);
  } catch (error) {
    SmartLogger.evaluator('–û—à–∏–±–∫–∞ —Ä–µ—Ñ–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
    return thought; // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
  }
};

const evaluateResponseDetailed = (text, meta, context = {}) => {
  try {
    return qualityEvaluator.evaluateResponse(text, meta, context);
  } catch (error) {
    SmartLogger.evaluator('–û—à–∏–±–∫–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏:', error.message);
    return {
      score: 5,
      evaluation: {},
      improvements: ['–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–∞—á–µ—Å—Ç–≤–∞'],
      needsRefinement: false
    };
  }
};

module.exports = {
  semanticQualityScore,
  refineResponse,
  evaluateResponseDetailed,
  QualityEvaluator,
  ResponseRefiner
};