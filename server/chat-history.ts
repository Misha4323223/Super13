const { db } = require("./db");
const { chatSessions, aiMessages } = require("@shared/schema");
const { eq, desc } = require("drizzle-orm");

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
 */
async function createChatSession(userId: number, title: string) {
  try {
    const [session] = await db
      .insert(chatSessions)
      .values({
        userId,
        title,
      })
      .returning();
    
    return session;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é —á–∞—Ç–∞');
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function getUserChatSessions(userId) {
  try {
    return await db
      .select()
      .from(chatSessions)
      .where(eq(chatSessions.userId, userId))
      .orderBy(desc(chatSessions.updatedAt));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return [];
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç
 */
async function saveMessage(messageData) {
  try {
    const [message] = await db
      .insert(aiMessages)
      .values(messageData)
      .returning();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
    await db
      .update(chatSessions)
      .set({ updatedAt: new Date() })
      .where(eq(chatSessions.id, messageData.sessionId));
    
    return message;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏
 */
async function getSessionMessages(sessionId) {
  // –ü–æ–ª—É—á–∞–µ–º AI —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const aiMessagesData = await db
    .select()
    .from(aiMessages)
    .where(eq(aiMessages.sessionId, sessionId))
    .orderBy(aiMessages.createdAt);
    
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
  const formattedMessages = aiMessagesData.map(msg => ({
    id: msg.id,
    content: msg.content, // –ò—Å–ø–æ–ª—å–∑—É–µ–º content –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    text: msg.content,
    sender: msg.sender, // 'user' –∏–ª–∏ 'ai'
    timestamp: msg.createdAt,
    provider: msg.provider
  }));
    
  return formattedMessages;
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏
 */
async function updateSessionTitle(sessionId, title) {
  const [session] = await db
    .update(chatSessions)
    .set({ 
      title,
      updatedAt: new Date()
    })
    .where(eq(chatSessions.id, sessionId))
    .returning();
  
  return session;
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∏ –≤—Å–µ—Ö –µ—ë —Å–æ–æ–±—â–µ–Ω–∏–π
 */
async function deleteSession(sessionId) {
  console.log(`üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${sessionId} –∏–∑ –ë–î`);
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è
    const existingSessions = await db
      .select()
      .from(chatSessions)
      .where(eq(chatSessions.id, sessionId));
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ —Å–µ—Å—Å–∏–π —Å ID ${sessionId}:`, existingSessions.length);
    
    if (existingSessions.length === 0) {
      console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î`);
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏
    const existingMessages = await db
      .select()
      .from(aiMessages)
      .where(eq(aiMessages.sessionId, sessionId));
    
    console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${existingMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const deletedMessages = await db
      .delete(aiMessages)
      .where(eq(aiMessages.sessionId, sessionId))
      .returning();
    
    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${deletedMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å–µ—Å—Å–∏–∏ ${sessionId}`);
    
    // –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é
    const deletedSession = await db
      .delete(chatSessions)
      .where(eq(chatSessions.id, sessionId))
      .returning();
    
    console.log(`üóëÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:`, deletedSession);
    
    if (deletedSession.length > 0) {
      console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ë–î`);
      return true;
    } else {
      console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é ${sessionId} –∏–∑ –ë–î`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ ${sessionId}:`, error);
    return false;
  }
}

module.exports = {
  createChatSession,
  getUserChatSessions,
  saveMessage,
  getSessionMessages,
  updateSessionTitle,
  deleteSession
};