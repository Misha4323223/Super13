"""
–°—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è BOOOMERANGS
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –º–æ–¥–µ–ª–µ–π G4F
"""
from flask import Flask, request, Response, jsonify
from flask_cors import CORS
import g4f
import json
import time
import random
import traceback

# –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ—Ç–æ–∫–æ–≤–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –ø–æ–¥—Ö–æ–¥ —Å getattr –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
# –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫ AttributeError
def get_provider(name):
    try:
        return getattr(g4f.Provider, name)
    except AttributeError:
        print(f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ g4f")
        return None

providers = {}
# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ - Qwen_Qwen_2_72B –ø–µ—Ä–≤—ã–º
for name in ["Qwen_Qwen_2_72B", "Qwen_Qwen_2_5_Max", "Qwen_Qwen_2_5", "Qwen_Qwen_2_5M", "FreeGpt", "Liaobots", "HuggingChat", "DeepInfra", "You", "Gemini", "Phind", "Anthropic", "Blackbox", "ChatGpt"]:
    provider = get_provider(name)
    if provider:
        providers[name] = provider
        print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {name}")
    else:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {name}")

# –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã Llama –∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
llama_providers = []
gpt_providers = []  # –î–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ GPT
all_provider_names = []
try:
    all_provider_names = [name for name in dir(g4f.Provider) if not name.startswith('_')]
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {len(all_provider_names)}")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤: {str(e)}")
    all_provider_names = []

# –ò—â–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å llama –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
for name in all_provider_names:
    if "llama" in name.lower():
        print(f"–ù–∞–π–¥–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π Llama –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {name}")
        provider = get_provider(name)
        if provider:
            providers[name] = provider
            llama_providers.append(name)
            print(f"ü¶ô –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω Llama –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {name}")

# –ò—â–µ–º GPT –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
gpt_potential_providers = [
    "DeepAI", "AiChats", "Poe", "AIChatOnline", "GigaChat", "GPTalk", 
    "ChatGpt", "Chatgpt4Online", "OpenaiChat", "GPROChat", "FreeChatgpt", 
    "You", "MyShell", "FreeGpt", "Gemini", "Bing", "OpenaiAPI",
    "DeepInfra", "GptGo"
]

for name in gpt_potential_providers:
    if name not in providers and name in all_provider_names:
        provider = get_provider(name)
        if provider:
            providers[name] = provider
            gpt_providers.append(name)
            print(f"üî• –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π GPT –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {name}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å GPT-3.5
priority_gpt_providers = ["DeepInfra", "You", "Gemini", "ChatGpt"]
for name in priority_gpt_providers:
    if name in providers:
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä GPT-3.5 Turbo
        print(f"‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPT-3.5 Turbo —É –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {name}...")

# –ò—â–µ–º Llama 3 —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ
for name in ["HuggingFace", "HuggingSpace", "HuggingChat", "Ollama", "Replicate"]:
    if name not in providers and name in all_provider_names:
        provider = get_provider(name)
        if provider:
            providers[name] = provider
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –º–æ–¥–µ–ª–µ–π Llama: {name}")

# –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å Llama
if "HuggingChat" in providers:
    llama_providers.append("HuggingChat")
if "Ollama" in providers:
    llama_providers.append("Ollama")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Claude —á–µ—Ä–µ–∑ Anthropic
anthropic_available = "Anthropic" in providers
llama_available = len(llama_providers) > 0

if llama_available:
    print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã Llama –¥–æ—Å—Ç—É–ø–Ω—ã: {', '.join(llama_providers)}")
else:
    print("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã Llama –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
if anthropic_available:
    print("‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä Anthropic (Claude) –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!")
else:
    print("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä Anthropic (Claude) –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á")

# –û—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –≤ –≥—Ä—É–ø–ø—ã –ø–æ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
provider_groups = {
    'primary': ['Qwen_Qwen_2_5_Max', 'Qwen_Qwen_3', 'You', 'DeepInfra'],
    'secondary': ['Gemini', 'GeminiPro', 'Phind', 'ChatGpt'],
    'fallback': ['You', 'DeepInfra', 'GPTalk', 'FreeGpt', 'GptGo']
}

# –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è GPT-3.5
gpt_providers_group = ['DeepInfra', 'You', 'ChatGpt', 'GPTalk', 'FreeGpt', 'GptGo']

# –î–æ–±–∞–≤–ª—è–µ–º Claude –≤ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
if anthropic_available:
    provider_groups['primary'].insert(0, 'Anthropic')  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ primary

# –î–æ–±–∞–≤–ª—è–µ–º Llama –≤ –≥—Ä—É–ø–ø—ã, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
if llama_available:
    for llama_provider in llama_providers:
        # –î–æ–±–∞–≤–ª—è–µ–º Llama –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ –Ω–∞—á–∞–ª–æ primary –≥—Ä—É–ø–ø—ã
        provider_groups['primary'].insert(0, llama_provider)
        print(f"ü¶ô –î–æ–±–∞–≤–ª–µ–Ω Llama –ø—Ä–æ–≤–∞–π–¥–µ—Ä {llama_provider} –≤ primary –≥—Ä—É–ø–ø—É")

app = Flask(__name__)
CORS(app)

def get_demo_response(message):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    message_lower = message.lower()

    if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', 'hello', 'hi']):
        return "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å–µ–≥–æ–¥–Ω—è?"
    elif any(word in message_lower for word in ['–∫–∞–∫ –¥–µ–ª–∞', '–∫–∞–∫ —Ç—ã', 'how are you']):
        return "–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ —á—Ç–æ —Å–ø—Ä–æ—Å–∏–ª–∏! –ö–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?"
    elif any(word in message_lower for word in ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω', '–∫–∞—Ä—Ç–∏–Ω', 'image', 'picture']):
        return "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É \"–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\". –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å!"
    elif '–±–æ—Ç' in message_lower:
        return "–î–∞, —è –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç BOOOMERANGS. –Ø –∏—Å–ø–æ–ª—å–∑—É—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI –º–æ–¥–µ–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π."
    elif any(word in message_lower for word in ['booomerangs', '–±—É—É–º–µ—Ä–∞–Ω–≥']):
        return "BOOOMERANGS - —ç—Ç–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π."

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –æ—Ç–≤–µ—Ç    
    random_responses = [
        "BOOOMERANGS –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ AI-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ—Ç–≤–µ—Ç—ã –¥–∞–∂–µ –±–µ–∑ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≤ –∫–∞–∂–¥—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏.",
        "BOOOMERANGS –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ –æ–±—â–∞—Ç—å—Å—è —Å AI, –Ω–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –æ–ø–∏—Å–∞–Ω–∏—é, –∞ —Ç–∞–∫–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Ö –≤ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç SVG.",
        "BOOOMERANGS —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—Å–µ—Ö. –ù–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä—è–º–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö."
    ]

    return random.choice(random_responses)

@app.route('/stream', methods=['POST'])
def stream_chat():
    try:
        data = request.get_json()
        message = data.get('message', '')

        print(f"üß† [PYTHON] –ê–ö–¢–ò–í–ê–¶–ò–Ø –¥—É–º–∞—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è: {message}")

        def generate():
            try:
                # –û–¢–ö–õ–Æ–ß–ê–ï–ú –¥–µ–º–æ-–æ—Ç–≤–µ—Ç—ã
                # –°–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Node.js –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥—É–º–∞—é—â—É—é —Å–∏—Å—Ç–µ–º—É
                yield f"event: message\ndata: {json.dumps({'role': 'assistant', 'content': 'THINKING_SYSTEM_ACTIVATION', 'trigger_thinking': True})}\n\n"
                yield f"event: done\ndata: {{}}\n\n"
                print("üß† [PYTHON] –î—É–º–∞—é—â–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")

            except Exception as e:
                print(f"‚ùå [PYTHON] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥—É–º–∞—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
                yield f"event: error\ndata: {json.dumps({'error': str(e)})}\n\n"

        return Response(generate(), mimetype='text/plain', headers={
            'Cache-Control': 'no-cache',
            'Connection': 'keep-alive',
            'Access-Control-Allow-Origin': '*'
        })

    except Exception as e:
        print(f"‚ùå [PYTHON] –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        return jsonify({'error': str(e)}), 500

# –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
@app.route('/test', methods=['GET'])
def test():
    return jsonify({"status": "ok", "message": "Flask-—Å–µ—Ä–≤–µ—Ä —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç"})

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
@app.route('/test-provider/<provider_name>', methods=['GET'])
def test_provider(provider_name):
    if provider_name not in providers:
        return jsonify({"status": "error", "message": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"})

    provider = providers[provider_name]
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä API-–∫–ª—é—á
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        response = g4f.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": "Say just one word: Test"}],
            provider=provider,
            timeout=5  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç
        )

        return jsonify({
            "status": "ok", 
            "message": f"–ü—Ä–æ–≤–∞–π–¥–µ—Ä {provider_name} –¥–æ—Å—Ç—É–ø–µ–Ω", 
            "requires_api_key": False,
            "response": str(response)[:100]  # –¢–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞
        })
    except Exception as e:
        error_str = str(e)
        requires_api_key = any(key in error_str.lower() for key in ["api_key", "apikey", "key", "token"])

        return jsonify({
            "status": "error",
            "message": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {provider_name}",
            "error": error_str,
            "requires_api_key": requires_api_key
        })

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
if __name__ == '__main__':
    print("–ó–∞–ø—É—Å–∫ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5001...")
    app.run(host='0.0.0.0', port=5001, debug=True, threaded=True)