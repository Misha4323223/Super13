/**
 * –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Canvas API –∏ –±–∞–∑–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

const fs = require('fs');
const path = require('path');
const sharp = require('sharp');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö –≥—Ä–∞–Ω–∏—Ü
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function removeBackgroundSimple(imageUrl) {
  try {
    console.log('üñºÔ∏è [SIMPLE-EDITOR] –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    const image = sharp(imageBuffer);
    const { width, height } = await image.metadata();
    
    console.log(`üìê [SIMPLE-EDITOR] –†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${width}x${height}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —ç—Ñ—Ñ–µ–∫—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –ø–æ –∫—Ä–∞—è–º
    const timestamp = Date.now();
    const outputPath = `./uploads/processed-${timestamp}.png`;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É - –¥–µ–ª–∞–µ–º –∫—Ä–∞—è –±–æ–ª–µ–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º–∏
    await image
      .png()
      .composite([{
        input: Buffer.from([255, 255, 255, 0]), // –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–π –±–µ–ª—ã–π
        raw: { width: 1, height: 1, channels: 4 },
        tile: true,
        blend: 'soft-light'
      }])
      .toFile(outputPath);
    
    console.log('‚úÖ [SIMPLE-EDITOR] –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    
    return {
      success: true,
      imageUrl: `/uploads/processed-${timestamp}.png`,
      message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º)',
      type: 'simple_processing'
    };
    
  } catch (error) {
    console.error('‚ùå [SIMPLE-EDITOR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    };
  }
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} filterType - –¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function applyColorFilter(imageUrl, filterType = 'vintage') {
  try {
    console.log(`üé® [SIMPLE-EDITOR] –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä: ${filterType}`);
    
    const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    const timestamp = Date.now();
    const outputPath = `./uploads/filtered-${timestamp}.png`;
    
    let processedImage = sharp(imageBuffer);
    
    switch (filterType) {
      case 'vintage':
        processedImage = processedImage
          .modulate({ brightness: 1.1, saturation: 0.8 })
          .tint({ r: 255, g: 240, b: 200 });
        break;
        
      case 'blue':
        processedImage = processedImage
          .tint({ r: 200, g: 220, b: 255 });
        break;
        
      case 'warm':
        processedImage = processedImage
          .modulate({ brightness: 1.05, saturation: 1.2 })
          .tint({ r: 255, g: 220, b: 180 });
        break;
        
      case 'cool':
        processedImage = processedImage
          .modulate({ brightness: 0.95, saturation: 1.1 })
          .tint({ r: 180, g: 220, b: 255 });
        break;
        
      default:
        processedImage = processedImage.modulate({ brightness: 1.1 });
    }
    
    await processedImage.png().toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/filtered-${timestamp}.png`,
      message: `–ü—Ä–∏–º–µ–Ω–µ–Ω —Ñ–∏–ª—å—Ç—Ä: ${filterType}`,
      type: 'color_filter'
    };
    
  } catch (error) {
    console.error('‚ùå [SIMPLE-EDITOR] –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'
    };
  }
}

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {number} scale - –ú–∞—Å—à—Ç–∞–± (0.5 = 50%, 2.0 = 200%)
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function resizeImage(imageUrl, scale = 0.8) {
  try {
    console.log(`üìè [SIMPLE-EDITOR] –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å –º–∞—Å—à—Ç–∞–±–æ–º: ${scale}`);
    
    const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    const image = sharp(imageBuffer);
    const { width, height } = await image.metadata();
    
    const newWidth = Math.round(width * scale);
    const newHeight = Math.round(height * scale);
    
    const timestamp = Date.now();
    const outputPath = `./uploads/resized-${timestamp}.png`;
    
    await image
      .resize(newWidth, newHeight)
      .png()
      .toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/resized-${timestamp}.png`,
      message: `–†–∞–∑–º–µ—Ä –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newWidth}x${newHeight}`,
      type: 'resize'
    };
    
  } catch (error) {
    console.error('‚ùå [SIMPLE-EDITOR] –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
    };
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º—ã—Ç–æ–≥–æ —Ñ–æ–Ω–∞
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function createBlurredBackground(imageUrl) {
  try {
    console.log('üå´Ô∏è [SIMPLE-EDITOR] –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω...');
    
    const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = await imageResponse.buffer();
    
    const timestamp = Date.now();
    const outputPath = `./uploads/blurred-${timestamp}.png`;
    
    await sharp(imageBuffer)
      .blur(10)
      .modulate({ brightness: 1.2, saturation: 0.7 })
      .png()
      .toFile(outputPath);
    
    return {
      success: true,
      imageUrl: `/uploads/blurred-${timestamp}.png`,
      message: '–°–æ–∑–¥–∞–Ω —Ä–∞–∑–º—ã—Ç—ã–π —ç—Ñ—Ñ–µ–∫—Ç —Ñ–æ–Ω–∞',
      type: 'blur_background'
    };
    
  } catch (error) {
    console.error('‚ùå [SIMPLE-EDITOR] –û—à–∏–±–∫–∞ —Ä–∞–∑–º—ã—Ç–∏—è:', error);
    return {
      success: false,
      error: '–û—à–∏–±–∫–∞ —Ä–∞–∑–º—ã—Ç–∏—è',
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω'
    };
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {string} request - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 */
function parseEditRequest(request) {
  const lowerRequest = request.toLowerCase();
  
  if (lowerRequest.includes('—É–¥–∞–ª–∏ —Ñ–æ–Ω') || lowerRequest.includes('—É–±–µ—Ä–∏ —Ñ–æ–Ω')) {
    return {
      type: 'remove_background',
      description: '–ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞'
    };
  }
  
  if (lowerRequest.includes('—Ä–∞–∑–º—ã—Ç') || lowerRequest.includes('blur')) {
    return {
      type: 'blur_background',
      description: '–†–∞–∑–º—ã—Ç–∏–µ —Ñ–æ–Ω–∞'
    };
  }
  
  if (lowerRequest.includes('—Ñ–∏–ª—å—Ç—Ä') || lowerRequest.includes('—Ü–≤–µ—Ç') || lowerRequest.includes('–æ—Ç—Ç–µ–Ω–æ–∫')) {
    let filterType = 'vintage';
    if (lowerRequest.includes('—Å–∏–Ω–∏–π') || lowerRequest.includes('–≥–æ–ª—É–±–æ–π')) filterType = 'blue';
    if (lowerRequest.includes('—Ç–µ–ø–ª—ã–π') || lowerRequest.includes('–∂–µ–ª—Ç—ã–π')) filterType = 'warm';
    if (lowerRequest.includes('—Ö–æ–ª–æ–¥–Ω—ã–π')) filterType = 'cool';
    
    return {
      type: 'color_filter',
      filterType: filterType,
      description: `–¶–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä: ${filterType}`
    };
  }
  
  if (lowerRequest.includes('—Ä–∞–∑–º–µ—Ä') || lowerRequest.includes('–º–∞—Å—à—Ç–∞–±')) {
    let scale = 0.8;
    if (lowerRequest.includes('—É–≤–µ–ª–∏—á—å') || lowerRequest.includes('–±–æ–ª—å—à–µ')) scale = 1.3;
    if (lowerRequest.includes('—É–º–µ–Ω—å—à–∏') || lowerRequest.includes('–º–µ–Ω—å—à–µ')) scale = 0.6;
    
    return {
      type: 'resize',
      scale: scale,
      description: `–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (${scale}x)`
    };
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä
  return {
    type: 'color_filter',
    filterType: 'vintage',
    description: '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤–∏–Ω—Ç–∞–∂–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞'
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} imageUrl - URL –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 * @param {string} editRequest - –ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function processImage(imageUrl, editRequest) {
  const request = parseEditRequest(editRequest);
  
  console.log(`üîß [SIMPLE-EDITOR] –û–±—Ä–∞–±–æ—Ç–∫–∞: ${request.description}`);
  
  switch (request.type) {
    case 'remove_background':
      return await removeBackgroundSimple(imageUrl);
      
    case 'blur_background':
      return await createBlurredBackground(imageUrl);
      
    case 'color_filter':
      return await applyColorFilter(imageUrl, request.filterType);
      
    case 'resize':
      return await resizeImage(imageUrl, request.scale);
      
    default:
      return {
        success: false,
        error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è',
        message: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ: "—É–¥–∞–ª–∏ —Ñ–æ–Ω", "—Ä–∞–∑–º—ã—Ç–∏–µ", "—Å–∏–Ω–∏–π —Ñ–∏–ª—å—Ç—Ä", "—É–º–µ–Ω—å—à–∏ —Ä–∞–∑–º–µ—Ä"'
      };
  }
}

module.exports = {
  processImage,
  removeBackgroundSimple,
  applyColorFilter,
  resizeImage,
  createBlurredBackground,
  parseEditRequest
};