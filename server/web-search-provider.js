/**
 * Web Search Provider - –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö API –∏ —Å–µ—Ä–≤–∏—Å–æ–≤
 */

// –ò–º–ø–æ—Ä—Ç fetch –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
const fetch = require('node-fetch');

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
 * @param {string} query - –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {boolean} –ù—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫
 */
function needsWebSearch(query) {
    const lowerQuery = query.toLowerCase();
    console.log(`üîç [SEARCH CHECK] –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å: "${lowerQuery}"`);

    // –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    const patterns = [
        // –ü–æ–≥–æ–¥–∞
        /–ø–æ–≥–æ–¥–∞|—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞|–¥–æ–∂–¥—å|—Å–Ω–µ–≥|–≤–µ—Ç–µ—Ä|–ø—Ä–æ–≥–Ω–æ–∑|–≥—Ä–∞–¥—É—Å/,

        // –ù–æ–≤–æ—Å—Ç–∏
        /–Ω–æ–≤–æ—Å—Ç|—Å–æ–±—ã—Ç–∏|–ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç|—Å–ª—É—á–∏–ª–æ—Å—å|–ø—Ä–æ–∏–∑–æ—à–ª–æ|–≥–ª–∞–≤–Ω—ã–µ|—Å–≤–æ–¥–∫–∞/,

        // –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        /—Å–µ–π—á–∞—Å|—Å–µ–≥–æ–¥–Ω—è|–≤—á–µ—Ä–∞|–∑–∞–≤—Ç—Ä–∞|—Ç–µ–∫—É—â–∏–π|–∞–∫—Ç—É–∞–ª—å–Ω—ã–π|–ø–æ—Å–ª–µ–¥–Ω–∏–π|—Å–≤–µ–∂–∏–π/,

        // –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        /–≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã|—á–∞—Å—ã —Ä–∞–±–æ—Ç—ã|—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ|—Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏|–æ—Ç–∫—Ä—ã—Ç|–∑–∞–∫—Ä—ã—Ç/,

        // –§–∏–Ω–∞–Ω—Å—ã
        /–∫—É—Ä—Å|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|–∫–æ—Ç–∏—Ä–æ–≤–∫–∏|–∞–∫—Ü–∏–∏|–¥–æ–ª–ª–∞—Ä|–µ–≤—Ä–æ|—Ä—É–±–ª—å/,

        // –ü–æ–∏—Å–∫ –º–µ—Å—Ç
        /–≥–¥–µ –Ω–∞–π—Ç–∏|–≥–¥–µ –∫—É–ø–∏—Ç—å|–∞–¥—Ä–µ—Å|–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è/,

        // –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
        /—Å—Ç–∞—Ç—É—Å|–¥–æ—Å—Ç—É–ø–µ–Ω|—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∞–π—Ç|–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç/
    ];

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    const matchedPatterns = patterns.filter(pattern => pattern.test(lowerQuery));
    console.log(`üîç [SEARCH CHECK] –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${matchedPatterns.length}`);

    const needsSearch = matchedPatterns.length > 0;
    console.log(`üîç [SEARCH CHECK] –ù—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫: ${needsSearch}`);

    return needsSearch;
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ Python DuckDuckGo –º–æ–¥—É–ª—å (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function searchDuckDuckGo(query) {
    try {
        console.log('üîç [SEARCH] === –ù–ê–ß–ò–ù–ê–ï–ú PYTHON DUCKDUCKGO –ü–û–ò–°–ö ===');
        console.log('üîç [SEARCH] –ó–∞–ø—Ä–æ—Å:', query);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Python —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞
        const { spawn } = require('child_process');

        return new Promise((resolve, reject) => {
            const pythonScript = `
import sys
import json
try:
    from duckduckgo_search import DDGS

    query = "${query.replace(/"/g, '\\"')}"
    results = []

    with DDGS() as ddgs:
        search_results = list(ddgs.text(query, max_results=10))
        for result in search_results:
            results.append({
                'title': result.get('title', ''),
                'snippet': result.get('body', ''),
                'url': result.get('href', ''),
                'source': 'DuckDuckGo'
            })

    print(json.dumps({
        'success': True,
        'results': results,
        'total': len(results)
    }))

except Exception as e:
    print(json.dumps({
        'success': False,
        'error': str(e),
        'results': []
    }))
`;

            const python = spawn('python3', ['-c', pythonScript]);
            let output = '';
            let errorOutput = '';

            python.stdout.on('data', (data) => {
                output += data.toString();
            });

            python.stderr.on('data', (data) => {
                errorOutput += data.toString();
            });

            python.on('close', (code) => {
                console.log('üîç [SEARCH] Python –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º:', code);
                console.log('üîç [SEARCH] –í—ã–≤–æ–¥:', output);
                if (errorOutput) console.log('üîç [SEARCH] –û—à–∏–±–∫–∏:', errorOutput);

                try {
                    const result = JSON.parse(output.trim());
                    console.log('üîç [SEARCH] –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', result.results?.length || 0);
                    resolve(result);
                } catch (parseError) {
                    console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:', parseError);
                    resolve({
                        success: false,
                        error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞',
                        results: []
                    });
                }
            });

            python.on('error', (error) => {
                console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ Python:', error);
                resolve({
                    success: false,
                    error: error.message,
                    results: []
                });
            });
        });

    } catch (error) {
        console.error('üîç [SEARCH] –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        return {
            success: false,
            error: error.message,
            results: []
        };
    }
}

/**
 * –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π API Wikipedia
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function searchWikipedia(query) {
    try {
        // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–µ–π
        const searchUrl = `https://ru.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(query)}`;

        const response = await fetch(searchUrl, {
            headers: {
                'User-Agent': 'BOOOMERANGS-Search/1.0'
            },
            timeout: 5000
        });

        if (!response.ok) {
            throw new Error(`Wikipedia API error: ${response.status}`);
        }

        const data = await response.json();

        if (data.extract) {
            return {
                success: true,
                results: [{
                    title: data.title,
                    snippet: data.extract,
                    url: data.content_urls?.desktop?.page,
                    source: 'Wikipedia'
                }],
                provider: 'Wikipedia'
            };
        }

        return {
            success: false,
            error: 'No results found',
            provider: 'Wikipedia'
        };

    } catch (error) {
        console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ Wikipedia:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'Wikipedia'
        };
    }
}

/**
 * –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–æ–≤–æ—Å—Ç–Ω–æ–π API
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
 */
async function searchNews(query) {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π RSS –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
        const rssFeeds = [
            'https://lenta.ru/rss',
            'https://www.rbc.ru/rss/news'
        ];

        // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ RSS (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
        for (const feedUrl of rssFeeds) {
            try {
                const response = await fetch(feedUrl, {
                    timeout: 5000,
                    headers: {
                        'User-Agent': 'BOOOMERANGS-Search/1.0'
                    }
                });

                if (response.ok) {
                    const xmlText = await response.text();
                    console.log(`üîç [NEWS] –ü–æ–ª—É—á–∏–ª–∏ RSS –¥–∞–Ω–Ω—ã–µ, —Ä–∞–∑–º–µ—Ä: ${xmlText.length} —Å–∏–º–≤–æ–ª–æ–≤`);

                    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ RSS
                    const titleRegex = /<title><!\[CDATA\[(.*?)\]\]><\/title>/g;
                    const altTitleRegex = /<title>(.*?)<\/title>/g;

                    let matches = [];
                    let match;

                    // –ü—Ä–æ–±—É–µ–º CDATA —Ñ–æ—Ä–º–∞—Ç
                    while ((match = titleRegex.exec(xmlText)) !== null) {
                        matches.push(match[1]);
                    }

                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    if (matches.length === 0) {
                        while ((match = altTitleRegex.exec(xmlText)) !== null) {
                            matches.push(match[1]);
                        }
                    }

                    console.log(`üîç [NEWS] –ù–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤: ${matches.length}`);

                    if (matches.length > 1) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞)
                        const news = [];
                        for (let i = 1; i < Math.min(4, matches.length); i++) {
                            const title = matches[i].trim();
                            if (title && title.length > 10) {
                                news.push({
                                    title: title,
                                    snippet: `–ù–æ–≤–æ—Å—Ç—å –æ—Ç ${new Date().toLocaleDateString('ru-RU')}`,
                                    url: feedUrl,
                                    source: 'RSS Feed'
                                });
                            }
                        }

                        if (news.length > 0) {
                            console.log(`üîç [NEWS] –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${news.length} –Ω–æ–≤–æ—Å—Ç–µ–π`);
                            return {
                                success: true,
                                results: news,
                                provider: 'News'
                            };
                        }
                    }
                }
            } catch (err) {
                continue;
            }
        }

        return {
            success: false,
            error: 'No news sources available',
            provider: 'News'
        };

    } catch (error) {
        console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ News:', error.message);
        return {
            success: false,
            error: error.message,
            provider: 'News'
        };
    }
}

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ (–∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function performAdvancedSearch(query, options = {}) {
    console.log(`üîç [ADVANCED SEARCH] –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: "${query}"`);
    return await performWebSearch(query, options);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞
 * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 */
async function performWebSearch(query, options = {}) {
    console.log(`üîç [SEARCH] –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è: "${query}"`);

    const searchProviders = [];

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
    if (query.toLowerCase().includes('–Ω–æ–≤–æ—Å—Ç–∏') || query.toLowerCase().includes('—Å–æ–±—ã—Ç–∏')) {
        searchProviders.push(() => searchNews(query));
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ—â–Ω—É—é –±–µ—Å–ø–ª–∞—Ç–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–æ–∏—Å–∫–∞
    const { searchRealTimeInfo } = await import('./free-web-search.js');
    searchProviders.push(
        () => searchRealTimeInfo(query),
        () => searchWikipedia(query)
    );

    const allResults = [];

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    const searchPromises = searchProviders.map(async (searchFunc) => {
        try {
            const result = await searchFunc();
            if (result.success && result.results.length > 0) {
                allResults.push(...result.results);
            }
            return result;
        } catch (error) {
            console.error('üîç [SEARCH] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–æ–≤–∏–∫–∞:', error);
            return { success: false, error: error.message };
        }
    });

    await Promise.allSettled(searchPromises);

    if (allResults.length === 0) {
        return {
            success: false,
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ',
            results: []
        };
    }

    console.log(`üîç [SEARCH] –ù–∞–π–¥–µ–Ω–æ ${allResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

    return {
        success: true,
        results: allResults.slice(0, 5), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        searchQuery: query
    };
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è AI
 * @param {Object} searchResults - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è AI
 */
function formatSearchResultsForAI(searchResults) {
    if (!searchResults.success || searchResults.results.length === 0) {
        return '';
    }

    let formatted = '\nüì° –ò–ù–§–û–†–ú–ê–¶–ò–Ø –ò–ó –ò–ù–¢–ï–†–ù–ï–¢–ê:\n';

    searchResults.results.forEach((result, index) => {
        formatted += `\n${index + 1}. **${result.title}** (${result.source})\n`;
        formatted += `   ${result.snippet}\n`;
        if (result.url) {
            formatted += `   üîó ${result.url}\n`;
        }
    });

    formatted += '\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n';

    return formatted;
}

module.exports = {
    needsWebSearch,
    performWebSearch,
    performAdvancedSearch,
    formatSearchResultsForAI,
    searchDuckDuckGo,
    searchWikipedia,
    searchNews
};