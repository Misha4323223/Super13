/**
 * –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å –ø–∏–∫—Å–µ–ª—è–º–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */

const sharp = require('sharp');
const https = require('https');
const http = require('http');
const fs = require('fs');
const path = require('path');
const { URL } = require('url');

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL
 */
function fetchImage(imageUrl) {
  return new Promise((resolve, reject) => {
    const url = new URL(imageUrl);
    const client = url.protocol === 'https:' ? https : http;

    client.get(imageUrl, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP ${response.statusCode}`));
        return;
      }

      const chunks = [];
      response.on('data', (chunk) => chunks.push(chunk));
      response.on('end', () => resolve(Buffer.concat(chunks)));
    }).on('error', reject);
  });
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function editImageReally(imageUrl, editRequest, analysisData) {
  try {
    console.log('üé® [REAL-EDITOR] –ù–∞—á–∏–Ω–∞—é —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    console.log('üìù [REAL-EDITOR] –ó–∞–ø—Ä–æ—Å:', editRequest);
    console.log('üîó [REAL-EDITOR] –ò–°–•–û–î–ù–û–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ URL:', imageUrl);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const imageBuffer = await fetchImage(imageUrl);
    console.log('üì¶ [REAL-EDITOR] –†–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞:', imageBuffer.length, '–±–∞–π—Ç');
    const image = sharp(imageBuffer);
    const metadata = await image.metadata();

    console.log('üìä [REAL-EDITOR] –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:', {
      width: metadata.width,
      height: metadata.height,
      format: metadata.format
    });

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editType = determineEditType(editRequest);
    console.log('üîç [REAL-EDITOR] –¢–∏–ø —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', editType);

    let editedImage;

    switch (editType.action) {
      case 'remove_object':
        editedImage = await removeObject(image, editType.target, analysisData);
        break;
      case 'change_color':
        editedImage = await changeObjectColor(image, editType.target, editType.newColor);
        break;
      case 'remove_background':
        editedImage = await removeBackground(image, analysisData);
        break;
      case 'blur_area':
        editedImage = await blurArea(image, editType.target);
        break;
      default:
        editedImage = await enhanceImage(image);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const outputPath = await saveEditedImage(editedImage, metadata.format);

    console.log('‚úÖ [REAL-EDITOR] –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

    // –ö–æ–ø–∏—Ä—É–µ–º –≤ public –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±—Ä–∞—É–∑–µ—Ä–æ–º
    const publicPath = path.join(process.cwd(), 'public', path.basename(outputPath));
    console.log('üìÇ [REAL-EDITOR] –°–æ—Ö—Ä–∞–Ω—è—é —Ñ–∞–π–ª:');
    console.log('  - uploads –ø—É—Ç—å:', outputPath);
    console.log('  - public –ø—É—Ç—å:', publicPath);

    await editedImage.toFile(publicPath);

    const finalUrl = `/public/${path.basename(outputPath)}`;
    console.log('üîó [REAL-EDITOR] –§–∏–Ω–∞–ª—å–Ω—ã–π URL:', finalUrl);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
    const fs = require('fs');
    const uploadExists = fs.existsSync(outputPath);
    const publicExists = fs.existsSync(publicPath);
    console.log('üìã [REAL-EDITOR] –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤:');
    console.log('  - uploads —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', uploadExists);
    console.log('  - public —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', publicExists);

    return {
      success: true,
      imagePath: outputPath,
      imageUrl: finalUrl,
      editType: editType.action,
      description: generateEditDescription(editType, editRequest)
    };

  } catch (error) {
    console.error('‚ùå [REAL-EDITOR] –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    return {
      success: false,
      error: error.message
    };
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É
 */
function determineEditType(editRequest) {
  const request = editRequest.toLowerCase();

  if (request.includes('—É–±–µ—Ä–∏') || request.includes('—É–¥–∞–ª–∏') || request.includes('–±–µ–∑')) {
    const target = extractTarget(request);
    return { action: 'remove_object', target };
  }

  if (request.includes('–∏–∑–º–µ–Ω–∏ —Ü–≤–µ—Ç') || request.includes('–ø–µ—Ä–µ–∫—Ä–∞—Å—å')) {
    const target = extractTarget(request);
    const newColor = extractColor(request);
    return { action: 'change_color', target, newColor };
  }

  if (request.includes('—Ñ–æ–Ω') && (request.includes('—É–±–µ—Ä–∏') || request.includes('—É–¥–∞–ª–∏'))) {
    return { action: 'remove_background' };
  }

  if (request.includes('—Ä–∞–∑–º–æ–π') || request.includes('blur')) {
    const target = extractTarget(request);
    return { action: 'blur_area', target };
  }

  return { action: 'enhance', target: null };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function extractTarget(request) {
  const targets = [
    '—Å–∞–ø–æ–≥', '—Å–∞–ø–æ–≥–∏', '–±–æ—Ç–∏–Ω–∫–∏', '–æ–±—É–≤—å',
    '—à–ª—è–ø', '—à–∞–ø–∫', '–∫–µ–ø–∫',
    '–æ—á–∫–∏', '—Å–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–µ –æ—á–∫–∏',
    '—Ä—É–±–∞—à–∫', '—Ñ—É—Ç–±–æ–ª–∫', '–ø–ª–∞—Ç—å–µ', '–æ–¥–µ–∂–¥',
    '—Ñ–æ–Ω', '–∑–∞–¥–Ω–∏–π –ø–ª–∞–Ω',
    '–≤–æ–ª–æ—Å', '–±–æ—Ä–æ–¥', '—É—Å—ã',
    '—É–∫—Ä–∞—à–µ–Ω–∏—è', '—Å–µ—Ä—å–≥–∏', '–∫–æ–ª—å–µ'
  ];

  for (const target of targets) {
    if (request.includes(target)) {
      return target;
    }
  }

  return '–æ–±—ä–µ–∫—Ç';
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞
 */
function extractColor(request) {
  const colors = {
    '–∫—Ä–∞—Å–Ω': [255, 0, 0],
    '—Å–∏–Ω': [0, 0, 255],
    '–∑–µ–ª–µ–Ω': [0, 255, 0],
    '–∂–µ–ª—Ç': [255, 255, 0],
    '—á–µ—Ä–Ω': [0, 0, 0],
    '–±–µ–ª': [255, 255, 255],
    '—Å–µ—Ä—ã–π': [128, 128, 128],
    '–∫–æ—Ä–∏—á–Ω–µ–≤': [139, 69, 19],
    '—Ñ–∏–æ–ª–µ—Ç–æ–≤': [128, 0, 128],
    '–æ—Ä–∞–Ω–∂–µ–≤': [255, 165, 0]
  };

  for (const [colorName, rgb] of Object.entries(colors)) {
    if (request.includes(colorName)) {
      return rgb;
    }
  }

  return [255, 255, 255]; // –±–µ–ª—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function removeObject(image, target, analysisData) {
  try {
    console.log('üóëÔ∏è [REAL-EDITOR] –£–¥–∞–ª—è—é –æ–±—ä–µ–∫—Ç:', target);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const { data, info } = await image.raw().toBuffer({ resolveWithObject: true });
    const { width, height, channels } = info;

    // –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
    const mask = await createObjectMask(data, width, height, channels, target, analysisData);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º inpainting (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏)
    const inpaintedData = await inpaintArea(data, mask, width, height, channels);

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return sharp(inpaintedData, { raw: { width, height, channels } });

  } catch (error) {
    console.error('‚ùå [REAL-EDITOR] –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞:', error);
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ä–∞–∑–º—ã—Ç–∏–µ–º –ø—Ä–æ–±–ª–µ–º–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    return await blurObjectArea(image, target);
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å–∫–∏ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
 */
async function createObjectMask(data, width, height, channels, target, analysisData) {
  const mask = new Uint8Array(width * height);

  // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–≤–µ—Ç–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  if (target.includes('—Å–∞–ø–æ–≥') || target.includes('–æ–±—É–≤—å')) {
    // –ò—â–µ–º —Ç–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const startY = Math.floor(height * 0.6); // –Ω–∏–∂–Ω–∏–µ 40%

    for (let y = startY; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const index = (y * width + x) * channels;
        const r = data[index];
        const g = data[index + 1];
        const b = data[index + 2];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ (–æ–±—É–≤—å –æ–±—ã—á–Ω–æ —Ç–µ–º–Ω–∞—è)
        const brightness = (r + g + b) / 3;
        if (brightness < 100) {
          mask[y * width + x] = 255; // –æ—Ç–º–µ—á–∞–µ–º –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        }
      }
    }
  } else if (target.includes('—à–ª—è–ø') || target.includes('—à–∞–ø–∫')) {
    // –ò—â–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const endY = Math.floor(height * 0.4); // –≤–µ—Ä—Ö–Ω–∏–µ 40%

    for (let y = 0; y < endY; y++) {
      for (let x = 0; x < width; x++) {
        const index = (y * width + x) * channels;
        const r = data[index];
        const g = data[index + 1];
        const b = data[index + 2];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∏–∫—Å–µ–ª–∏, –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –æ—Ç —Ç–æ–Ω–∞ –∫–æ–∂–∏
        if (!isSkinTone(r, g, b)) {
          mask[y * width + x] = 255;
        }
      }
    }
  } else {
    // –û–±—â–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    const avgColor = calculateAverageColor(data, width, height, channels);

    for (let y = 0; y < height; y++) {
      for (let x = 0; x < width; x++) {
        const index = (y * width + x) * channels;
        const r = data[index];
        const g = data[index + 1];
        const b = data[index + 2];

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∏–∫—Å–µ–ª–∏, —Å–∏–ª—å–Ω–æ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ
        const colorDiff = Math.abs(r - avgColor.r) + Math.abs(g - avgColor.g) + Math.abs(b - avgColor.b);
        if (colorDiff > 150) {
          mask[y * width + x] = 255;
        }
      }
    }
  }

  return mask;
}

/**
 * –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–æ–π inpainting)
 */
async function inpaintArea(data, mask, width, height, channels) {
  const result = new Uint8Array(data.length);
  data.forEach((value, index) => result[index] = value);

  // –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è - –∑–∞–º–µ–Ω—è–µ–º –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ —Å—Ä–µ–¥–Ω–∏–º —Ü–≤–µ—Ç–æ–º —Å–æ—Å–µ–¥–µ–π
  for (let y = 1; y < height - 1; y++) {
    for (let x = 1; x < width - 1; x++) {
      const maskIndex = y * width + x;

      if (mask[maskIndex] === 255) { // –ø–∏–∫—Å–µ–ª—å –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å
        const dataIndex = maskIndex * channels;

        // –ë–µ—Ä–µ–º —Å—Ä–µ–¥–Ω–∏–π —Ü–≤–µ—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö –Ω–µ–∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π
        let totalR = 0, totalG = 0, totalB = 0, count = 0;

        for (let dy = -1; dy <= 1; dy++) {
          for (let dx = -1; dx <= 1; dx++) {
            const ny = y + dy;
            const nx = x + dx;
            const neighborMaskIndex = ny * width + nx;

            if (mask[neighborMaskIndex] === 0) { // –Ω–µ–∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ—Å–µ–¥
              const neighborDataIndex = neighborMaskIndex * channels;
              totalR += data[neighborDataIndex];
              totalG += data[neighborDataIndex + 1];
              totalB += data[neighborDataIndex + 2];
              count++;
            }
          }
        }

        if (count > 0) {
          result[dataIndex] = Math.round(totalR / count);
          result[dataIndex + 1] = Math.round(totalG / count);
          result[dataIndex + 2] = Math.round(totalB / count);
        }
      }
    }
  }

  return result;
}

/**
 * –†–∞–∑–º—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ (fallback –º–µ—Ç–æ–¥)
 */
async function blurObjectArea(image, target) {
  console.log('üå´Ô∏è [REAL-EDITOR] –ü—Ä–∏–º–µ–Ω—è—é —Ä–∞–∑–º—ã—Ç–∏–µ –∫ –æ–±–ª–∞—Å—Ç–∏:', target);

  // –ü—Ä–æ—Å—Ç–æ–µ —Ä–∞–∑–º—ã—Ç–∏–µ –≤—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–∫ fallback
  return image.blur(3);
}

/**
 * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞
 */
async function changeObjectColor(image, target, newColor) {
  console.log('üé® [REAL-EDITOR] –ò–∑–º–µ–Ω—è—é —Ü–≤–µ—Ç –æ–±—ä–µ–∫—Ç–∞:', target, '–Ω–∞', newColor);

  const { data, info } = await image.raw().toBuffer({ resolveWithObject: true });
  const { width, height, channels } = info;

  // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ —Ü–≤–µ—Ç–∞
  const result = new Uint8Array(data.length);
  data.forEach((value, index) => result[index] = value);

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π —Å–¥–≤–∏–≥
  return sharp(result, { raw: { width, height, channels } })
    .modulate({ hue: 45 }); // –ø–æ–≤–æ—Ä–æ—Ç –æ—Ç—Ç–µ–Ω–∫–∞
}

/**
 * –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞
 */
async function removeBackground(image, analysisData) {
  console.log('üñºÔ∏è [REAL-EDITOR] –£–¥–∞–ª—è—é —Ñ–æ–Ω');

  // –ü—Ä–æ—Å—Ç–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  return image
    .removeAlpha()
    .threshold(128)
    .flatten({ background: { r: 255, g: 255, b: 255 } });
}

/**
 * –†–∞–∑–º—ã—Ç–∏–µ –æ–±–ª–∞—Å—Ç–∏
 */
async function blurArea(image, target) {
  console.log('üå´Ô∏è [REAL-EDITOR] –†–∞–∑–º—ã–≤–∞—é –æ–±–ª–∞—Å—Ç—å:', target);

  return image.blur(5);
}

/**
 * –£–ª—É—á—à–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function enhanceImage(image) {
  console.log('‚ú® [REAL-EDITOR] –£–ª—É—á—à–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');

  return image
    .sharpen()
    .normalize()
    .modulate({ brightness: 1.1, saturation: 1.1 });
}

/**
 * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function saveEditedImage(image, format) {
  const outputDir = path.join(process.cwd(), 'uploads');

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
  }

  const filename = `edited_${Date.now()}.${format === 'jpeg' ? 'jpg' : format}`;
  const outputPath = path.join(outputDir, filename);

  await image.toFile(outputPath);

  return outputPath;
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function generateEditDescription(editType, originalRequest) {
  switch (editType.action) {
    case 'remove_object':
      return `–£–¥–∞–ª–µ–Ω –æ–±—ä–µ–∫—Ç "${editType.target}" —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`;
    case 'change_color':
      return `–ò–∑–º–µ–Ω–µ–Ω —Ü–≤–µ—Ç –æ–±—ä–µ–∫—Ç–∞ "${editType.target}"`;
    case 'remove_background':
      return '–£–¥–∞–ª–µ–Ω —Ñ–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
    case 'blur_area':
      return `–†–∞–∑–º—ã—Ç–∞ –æ–±–ª–∞—Å—Ç—å "${editType.target}"`;
    default:
      return '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–æ';
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function isSkinTone(r, g, b) {
  // –ü—Ä–æ—Å—Ç–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞ –∫–æ–∂–∏
  return r > 95 && g > 40 && b > 20 && 
         Math.max(r, g, b) - Math.min(r, g, b) > 15 &&
         Math.abs(r - g) > 15 && r > g && r > b;
}

function calculateAverageColor(data, width, height, channels) {
  let totalR = 0, totalG = 0, totalB = 0;
  const pixelCount = width * height;

  for (let i = 0; i < data.length; i += channels) {
    totalR += data[i];
    totalG += data[i + 1];
    totalB += data[i + 2];
  }

  return {
    r: Math.round(totalR / pixelCount),
    g: Math.round(totalG / pixelCount),
    b: Math.round(totalB / pixelCount)
  };
}

module.exports = {
  editImageReally,
  changeColorToRed,
  changeColorToBlue, 
  changeColorToGreen,
  removeObjectFromImage,
  modifyImageAppearance,
  generalImageEdit
  // –≠–∫—Å–ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
};