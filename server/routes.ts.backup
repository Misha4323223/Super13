import express, { type Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { setupWebSocket } from "./ws";
import { setupProxyMiddleware } from "./middleware/proxy";
import { authMiddleware } from "./middleware/auth";
import { z } from "zod";
import { authSchema, messageSchema } from "@shared/schema";
import { logger, chatLogger } from "./logger";

// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const Logger = {
  info: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`üîµ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  success: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`‚úÖ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  error: (message: string, error?: any) => {
    const timestamp = new Date().toISOString();
    console.error(`‚ùå [${timestamp}] ${message}`, error ? error : '');
  },
  warning: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.warn(`‚ö†Ô∏è [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  ai: (message: string, data?: any) => {
    const timestamp = new Date().toISOString();
    console.log(`ü§ñ [${timestamp}] ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
import * as path from 'path';
import { fileURLToPath } from 'url';
import { createRequire } from 'module';
import multer from 'multer';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const require = createRequire(__filename);

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –µ–¥–∏–Ω—ã–π –º–æ–¥—É–ª—å —Å–æ–∑–Ω–∞–Ω–∏—è
const conversationEngine = require('./conversation-engine.cjs');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
const upload = multer({
  storage: multer.memoryStorage(),
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB –ª–∏–º–∏—Ç
  },
  fileFilter: (req, file, cb) => {
    if (file.mimetype.startsWith('image/')) {
      cb(null, true);
    } else {
      cb(new Error('–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã'), false);
    }
  }
});
const svgGenerator = require('./svg-generator');
const g4fHandlers = require('./g4f-handlers');
const directAiRoutes = require('./direct-ai-routes');
// const pythonProviderRoutes = require('./python_provider_routes'); // –û–¢–ö–õ–Æ–ß–ï–ù–û –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const deepspeekProvider = require('./deepspeek-provider');
const chatFreeProvider = require('./chatfree-provider');

export async function registerRoutes(app: Express): Promise<Server> {
  // Create HTTP server
  const httpServer = createServer(app);

  // Setup WebSocket server
  setupWebSocket(httpServer, storage);

  // Setup proxy middleware
  setupProxyMiddleware(app);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
  app.use(express.static(path.join(process.cwd())));

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤—ã—à–∏–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  app.get('/output/embroidery/:filename', (req, res) => {
    const filename = req.params.filename;
    const filePath = path.join(process.cwd(), 'output', 'embroidery', filename);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    const ext = path.extname(filename).toLowerCase();
    let contentType = 'application/octet-stream';

    if (ext === '.exp') contentType = 'application/x-melco-exp';
    else if (ext === '.dst') contentType = 'application/x-tajima-dst';
    else if (ext === '.pes') contentType = 'application/x-brother-pes';
    else if (ext === '.jef') contentType = 'application/x-janome-jef';
    else if (ext === '.vp3') contentType = 'application/x-husqvarna-vp3';
    else if (ext === '.png') contentType = 'image/png';
    else if (ext === '.json') contentType = 'application/json';

    res.setHeader('Content-Type', contentType);
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
    res.sendFile(filePath);
  });

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.use('/image-generator', (req, res) => {
    res.redirect('/api/svg');
  });

  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.use('/api/svg', svgGenerator);

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
  app.use('/api/search', require('./search-routes'));

  // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å AI
  const aiImageGenerator = require('./ai-image-generator');

  // API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
  app.post("/api/ai-image/generate", async (req, res) => {
    try {
      const { prompt, style = 'realistic' } = req.body;

      if (!prompt) {
        return res.status(400).json({ 
          success: false, 
          error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (prompt)'
        });
      }

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const result = await aiImageGenerator.generateImage(prompt, style);

      res.json(result);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
      });
    }
  });

  // –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
  app.use('/output', (req, res, next) => {
    const outputPath = path.join(__dirname, '..', 'output');
    const filePath = path.join(outputPath, req.path);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä download –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    if (req.query.download === 'true') {
      const fileName = path.basename(req.path);
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      res.setHeader('Content-Type', 'application/octet-stream');
    }

    res.sendFile(req.path, { root: outputPath });
  });

  // –¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
  app.get('/test', (req, res) => {
    res.sendFile('test-page.html', { root: '.' });
  });

  // –î–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/demo', (req, res) => {
    res.sendFile('demo.html', { root: '.' });
  });

  // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - BOOOMERANGS Smart Chat
  app.get('/', (req, res) => {
    res.sendFile('booomerangs-smart-chat.html', { root: '.' });
  });

  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ HTML —á–∞—Ç—É
  app.get('/smart-chat', (req, res) => {
    res.sendFile('booomerangs-smart-chat.html', { root: '.' });
  });

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ª–∞–¥–∫–∏
  app.get('/debug', (req, res) => {
    res.sendFile('debug-info.html', { root: '.' });
  });

  // G4F —á–∞—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  app.get('/g4f-chat', (req, res) => {
    res.sendFile('g4f-chat.html', { root: '.' });
  });

  // –ü—Ä–æ—Å—Ç–æ–π G4F —Ç–µ—Å—Ç
  app.get('/simple-g4f', (req, res) => {
    res.sendFile('simple-g4f.html', { root: '.' });
  });

  // –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç G4F
  app.get('/direct-g4f', (req, res) => {
    res.sendFile('direct-g4f-test.html', { root: '.' });
  });

  // –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è G4F —á–∞—Ç–∞
  app.get('/standalone', (req, res) => {
    res.sendFile('standalone-g4f.html', { root: '.' });
  });

  // BOOOMERANGS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
  app.get('/booom', (req, res) => {
    res.sendFile('booomerangs-main.html', { root: '.' });
  });

  // BOOOMERANGS –Ω–æ–≤—ã–π –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
  app.get('/ai', (req, res) => {
    res.sendFile('booomerangs-direct.html', { root: '.' });
  });

  // BOOOMERANGS –Ω–æ–≤—ã–π –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
  app.get('/new', (req, res) => {
    res.sendFile('booomerangs-new.html', { root: '.' });
  });

  // BOOOMERANGS —á–∞—Ç —Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏ (–ø—Ä—è–º–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å)
  app.get('/chat-ai', (req, res) => {
    res.sendFile('booomerangs-chat.html', { root: '.' });
  });

  // BOOOMERANGS —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—á–∞—Ç + –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
  app.get('/unified', (req, res) => {
    res.sendFile('public/unified-interface.html', { root: '.' });
  });

  // BOOOMERANGS —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/fixed', (req, res) => {
    res.sendFile('public/fixed-interface.html', { root: '.' });
  });

  // BOOOMERANGS —Ç–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  app.get('/image-generator', (req, res) => {
    res.sendFile('public/image-generator.html', { root: '.' });
  });

  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –º–∞—Ä—à—Ä—É—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã—à–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ download

  // BOOOMERANGS AI –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  app.get('/ai-images', (req, res) => {
    res.sendFile('public/ai-image-app.html', { root: '.' });
  });

  // BOOOMERANGS –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º
  app.get('/booom-streaming', (req, res) => {
    res.sendFile('booomerangs-app-streaming-fixed.html', { root: '.' });
  });

  // BOOOMERANGS —Å Qwen AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
  app.get('/qwen', (req, res) => {
    res.sendFile('booomerangs-qwen.html', { root: '.' });
  });

  // BOOOMERANGS —Å–æ —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º –æ—Ç–≤–µ—Ç–æ–≤
  app.get('/streaming', (req, res) => {
    res.sendFile('booomerangs-streaming.html', { root: '.' });
  });

  // BOOOMERANGS –±—ã—Å—Ç—Ä–∞—è –≤–µ—Ä—Å–∏—è (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –±–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
  app.get('/quick', (req, res) => {
    res.sendFile('booomerangs-quick.html', { root: '.' });
  });

  // BOOOMERANGS —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
  app.get('/stable', (req, res) => {
    res.sendFile('booomerangs-stable.html', { root: '.' });
  });

  // BOOOMERANGS —Å Flask-—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–º (—Å–∞–º–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  app.get('/flask', (req, res) => {
    res.sendFile('booomerangs-flask-stream.html', { root: '.' });
  });

  // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
  app.get('/logs', (req, res) => {
    res.sendFile('logs-viewer.html', { root: '.' });
  });



  // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —É–º–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–∞ HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
  app.get('/smart-chat', (req, res) => {
    res.sendFile('booomerangs-smart-chat.html', { root: '.' });
  });

  // –ö–æ–º–∞–Ω–¥–Ω—ã–π —á–∞—Ç –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
  app.get('/team-chat', (req, res) => {
    res.sendFile('team-chat.html', { root: '.' });
  });

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
  app.use('/api/g4f', g4fHandlers);

  // API —Å –ø—Ä—è–º—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º (–±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  app.use('/api/direct-ai', directAiRoutes);

  // API —Å Python-–≤–µ—Ä—Å–∏–µ–π G4F
  // app.use('/api/python', pythonProviderRoutes.router); // –û–¢–ö–õ–Æ–ß–ï–ù–û –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  // API –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏—Ö stream=True
  const streamingRoutes = require('./streaming-routes');
  app.use('/api/streaming', streamingRoutes);

  // ImageTracerJS –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –Ω–∞ –ø–æ—Ä—Ç—É 5006
  // –°—Ç–∞—Ä—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã /api/vectorizer —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –Ω–æ–≤—ã–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–æ–º

  // –°—Ç–∞—Ç—É—Å –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
  app.get('/api/vectorizer-status', async (req, res) => {
    try {
      const vectorizerManager = require('./vectorizer-manager');
      const status = await vectorizerManager.checkHealth();
      res.json({
        success: true,
        vectorizer: status,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      res.json({
        success: false,
        vectorizer: { status: 'unavailable', available: false },
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });

  // –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã
  app.get('/api/system-health', async (req, res) => {
    try {
      const { SystemHealthChecker } = require('./system-health-checker');
      const checker = new SystemHealthChecker();
      const results = await checker.performFullHealthCheck();
      res.json({
        success: true,
        ...results
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ endpoints
  app.get('/api/test-vectorizer', async (req, res) => {
    try {
      const fetch = require('node-fetch');
      const endpoints = [
        'http://localhost:5006/health',
        'http://localhost:5006/api/vectorizer/health',
        'http://localhost:5006/api/vectorizer/formats'
      ];

      const results = {};

      for (const endpoint of endpoints) {
        try {
          const response = await fetch(endpoint, { timeout: 3000 });
          const data = await response.json();
          results[endpoint] = {
            status: response.status,
            ok: response.ok,
            data: data
          };
        } catch (error) {
          results[endpoint] = {
            error: error.message,
            accessible: false
          };
        }
      }

      res.json({
        success: true,
        vectorizerEndpoints: results,
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      res.status(500).json({
        success: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    }
  });

  // API –¥–ª—è Flask-—Å—Ç—Ä–∏–º–∏–Ω–≥–∞ (–Ω–∞–¥–µ–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç)
  const flaskStreamBridge = require('./stream-flask-bridge');
  app.use('/api/flask-stream', flaskStreamBridge);

  // API –¥–ª—è DeepSpeek - —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ AI –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  const deepspeekRoutes = require('./deepspeek-routes');
  app.use('/api/deepspeek', deepspeekRoutes);

  // API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)

  // API –¥–ª—è Ollama - –ª–æ–∫–∞–ª—å–Ω—ã–π AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
  const ollamaProvider = require('./ollama-provider');
  app.use('/api/ollama', ollamaProvider);

  // API –¥–ª—è ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  app.use('/api/chatfree', chatFreeProvider);

  // API –¥–ª—è Claude –æ—Ç Anthropic —á–µ—Ä–µ–∑ Python G4F
  const claudeProvider = require('./claude-provider');
  app.use('/api/claude', claudeProvider);

  // API –¥–ª—è DeepInfra - –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
  const deepInfraProvider = require('./deepinfra-provider');
  app.use('/api/deepinfra', deepInfraProvider);

  // API –¥–ª—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const multimodalProvider = require('./multimodal-provider');
  app.use('/api/multimodal', multimodalProvider);

  // API –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã—à–∏–≤–∫–∏
  const embroideryRoutes = require('./embroidery-routes');
  app.use('/api/embroidery', embroideryRoutes);

  // API –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ (–æ—Ç–∫–ª—é—á–µ–Ω–æ)

  // API –¥–ª—è —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
  const smartRouter = require('./smart-router-wrapper.cjs');

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–º–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
  app.post('/api/smart/chat', async (req, res) => {
    try {
      const { message, options = {} } = req.body;
      if (!message) {
        return res.status(400).json({ success: false, error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
      }

      const result = await smartRouter.getChatResponse(message, options);
      res.json({ success: true, ...result });
    } catch (error) {
      console.error('Smart router error:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });

  // API –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
  const chatHistory = require('./chat-history');
  const { insertChatSessionSchema, insertAiMessageSchema } = require('@shared/schema');

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
  app.post('/api/chat/sessions', async (req, res) => {
    try {
      const { userId, title } = req.body;

      if (!userId || !title) {
        return res.status(400).json({ 
          success: false, 
          error: 'userId –∏ title –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const session = await chatHistory.createChatSession(userId, title);
      res.json({ success: true, session });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ - –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
  app.get('/api/chat/sessions', async (req, res) => {
    try {
      const userId = 1; // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const sessions = await chatHistory.getUserChatSessions(userId);
      res.json({ success: true, sessions });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏' 
      });
    }
  });

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —á–∞—Ç–∞
  app.delete('/api/chat/sessions/:sessionId', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      console.log(`üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ ${sessionId}`);

      const deleteResult = await chatHistory.deleteSession(sessionId);

      if (deleteResult) {
        console.log(`‚úÖ –°–µ—Å—Å–∏—è ${sessionId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞`);
        res.json({ success: true, message: '–°–µ—Å—Å–∏—è —É–¥–∞–ª–µ–Ω–∞' });
      } else {
        console.log(`‚ö†Ô∏è –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`);
        res.json({ success: true, message: '–°–µ—Å—Å–∏—è —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞' });
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/chat/sessions/:userId', async (req, res) => {
    try {
      const userId = parseInt(req.params.userId);
      const sessions = await chatHistory.getUserChatSessions(userId);
      res.json({ success: true, sessions });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏' 
      });
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏—é —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º AI –æ—Ç–≤–µ—Ç–æ–º
  app.post('/api/chat/sessions/:sessionId/messages', async (req, res) => {
    console.log('üö®üö®üö® –í–´–ó–í–ê–ù –û–ë–†–ê–ë–û–¢–ß–ò–ö /api/chat/sessions/:sessionId/messages');
    console.log('üö® –ó–ê–ü–†–û–° –ö /api/chat/sessions/:sessionId/messages');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    console.log('üÜî ID —Å–µ—Å—Å–∏–∏:', req.params.sessionId);
    try {
      const sessionId = parseInt(req.params.sessionId);
      const messageData = { 
        ...req.body, 
        sessionId,
        timestamp: new Date().toISOString()
      };

      console.log('üíæ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData);
      console.log('‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      const userMessage = await chatHistory.saveMessage(messageData);

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI
      if (messageData.sender === 'user') {
        console.log('ü§ñ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData.content);
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É BOOOMERANGS
          console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É BOOOMERANGS');

          const aiResponse = await generateAutonomousResponse(messageData.content, {
            userId: `session_${sessionId}`,
            sessionId: sessionId
          });

          console.log('üéØ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞:', aiResponse);
          console.log('üîç –ü–æ–ª—è –æ—Ç–≤–µ—Ç–∞ AI:', {
            hasResponse: !!aiResponse?.response,
            type: aiResponse?.type,
            responsePreview: aiResponse?.response?.substring(0, 100)
          });

          if (aiResponse && aiResponse.response) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let responseContent = aiResponse.response;

            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—à–∏–≤–∫–∏ –±–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if (!responseContent && aiResponse.embroideryGenerated && aiResponse.embroideryFiles) {
              responseContent = `üßµ –°–æ–∑–¥–∞–Ω–∞ –≤—ã—à–∏–≤–∫–∞ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É!

‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –≥–æ—Ç–æ–≤–æ
‚úÖ –§–∞–π–ª –≤—ã—à–∏–≤–∫–∏ (DST): –≥–æ—Ç–æ–≤ 
‚úÖ –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞: –≥–æ—Ç–æ–≤–∞

–§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –Ω–∞ –≤—ã—à–∏–≤–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω–µ.`;
            }

            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if (!responseContent) {
              responseContent = '–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ.';
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ —Ç—É –∂–µ —Å–µ—Å—Å–∏—é
            const aiMessageData = {
              sessionId,
              content: responseContent,
              sender: 'ai',
              provider: aiResponse.provider,
              timestamp: new Date().toISOString()
            };

            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI –≤ –ë–î:', aiMessageData);
            await chatHistory.saveMessage(aiMessageData);
            console.log('‚úÖ –û—Ç–≤–µ—Ç AI —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–µ—Å—Å–∏—é');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É');
            res.json({ 
              success: true, 
              message: userMessage,
              aiResponse: responseContent,
              provider: aiResponse.provider,
              files: aiResponse.embroideryFiles || aiResponse.files || null,
              details: aiResponse.details || null,
              embroideryGenerated: aiResponse.embroideryGenerated || false,
              imageGenerated: aiResponse.imageGenerated || false
            });
            return;
          } else {
            console.log('‚ö†Ô∏è AI –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç');
          }
        } catch (aiError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ AI:', aiError);
        }
      }

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± AI –æ—Ç–≤–µ—Ç–µ
      res.json({ 
        success: true, 
        message: userMessage,
        hasAiResponse: messageData.sender === 'user'
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' 
      });
    }
  });

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º AI –æ—Ç–≤–µ—Ç–æ–º (—Å—Ç–∞—Ä—ã–π –ø—É—Ç—å)
  app.post('/api/chat/messages', async (req, res) => {
    console.log('üö® –°–¢–ê–†–ê–Ø –°–¢–†–ê–ù–ò–¶–ê –ò–°–ü–û–õ–¨–ó–£–ï–¢ /api/chat/messages');
    console.log('üìù –î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:', req.body);
    try {
      const messageData = req.body;
      console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å:', messageData);
      const message = await chatHistory.saveMessage(messageData);

      // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI
      if (messageData.sender === 'user') {
        console.log('ü§ñ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è:', messageData.content);
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É BOOOMERANGS
          console.log('üß† –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–Ω–æ–º–Ω—É—é —Å–∏—Å—Ç–µ–º—É BOOOMERANGS');

          const aiResponse = await generateAutonomousResponse(messageData.content, {
            userId: `session_${messageData.sessionId || 'default'}`,
            sessionId: messageData.sessionId
          });

          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
          const processedResponse = {
            response: aiResponse ? aiResponse.response : '–ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞—à –∑–∞–ø—Ä–æ—Å...',
            provider: 'BOOOMERANGS-Autonomous',
            model: 'autonomous-ai'
          };

          console.log('üéØ –ê–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—Ç–∏–ª–∞:', processedResponse);

          if (processedResponse && processedResponse.response) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
            const aiMessageData = {
              ...messageData,
              content: processedResponse.response,
              sender: 'ai',
              provider: processedResponse.provider,
              timestamp: new Date().toISOString()
            };

            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI:', aiMessageData);
            await chatHistory.saveMessage(aiMessageData);
            console.log('‚úÖ –û—Ç–≤–µ—Ç AI —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —á–∞—Ç');
          }
        } catch (aiError) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ AI:', aiError);
        }
      }

      res.json({ success: true, message });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ' 
      });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
  app.get('/api/chat/sessions/:sessionId/messages', async (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      console.log(`üìã –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}...`);

      const messages = await chatHistory.getSessionMessages(sessionId);
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId}`);

      // –û—Ç–∫–ª—é—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ API
      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
      res.setHeader('Pragma', 'no-cache');
      res.setHeader('Expires', '0');

      res.json({ success: true, messages });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      res.status(500).json({ 
        success: false, 
        error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' 
      });
    }
  });

  // API –¥–ª—è –ø—Ä–æ—Å—Ç–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const { users, messages } = require('@shared/schema');
  const { eq } = require('drizzle-orm');

  // –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
  app.post('/api/auth/login', async (req, res) => {
    try {
      const { username, password } = req.body;

      if (!username || !password) {
        return res.status(400).json({ 
          success: false, 
          error: '–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const { db } = require('./db');
      const [user] = await db
        .select()
        .from(users)
        .where(eq(users.username, username));

      if (!user || user.password !== password) {
        return res.status(401).json({ 
          success: false, 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' 
        });
      }

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–æ–∫–µ–Ω
      const token = `${user.id}_${Date.now()}_${Math.random().toString(36)}`;

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –≤ –±–∞–∑–µ
      await db
        .update(users)
        .set({ token, isOnline: true })
        .where(eq(users.id, user.id));

      res.json({ 
        success: true, 
        user: {
          id: user.id,
          username: user.username,
          displayName: user.displayName,
          token
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  app.post('/api/auth/logout', async (req, res) => {
    try {
      const { token } = req.body;

      if (token) {
        const { db } = require('./db');
        await db
          .update(users)
          .set({ token: null, isOnline: false })
          .where(eq(users.token, token));
      }

      res.json({ success: true });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
  app.get('/api/auth/user', async (req, res) => {
    try {
      const token = req.headers.authorization?.replace('Bearer ', '');

      if (!token) {
        return res.status(401).json({ success: false, error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
      }

      const { db } = require('./db');
      const [user] = await db
        .select()
        .from(users)
        .where(eq(users.token, token));

      if (!user) {
        return res.status(401).json({ success: false, error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
      }

      res.json({ 
        success: true, 
        user: {
          id: user.id,
          username: user.username,
          displayName: user.displayName
        }
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
  });

  // API –¥–ª—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ (–∏–º–ø–æ—Ä—Ç —É–∂–µ –≤—ã—à–µ)

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  app.post('/api/messages', async (req, res) => {
    try {
      const { senderId, receiverId, text } = req.body;

      if (!senderId || !receiverId || !text) {
        return res.status(400).json({ 
          success: false, 
          error: 'senderId, receiverId –∏ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
        });
      }

      const { db } = require('./db');
      const [message] = await db
        .insert(messages)
        .values({ senderId, receiverId, text })
        .returning();

      res.json({ success: true, message });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
  app.get('/api/messages/:userId1/:userId2', async (req, res) => {
    try {
      const { userId1, userId2 } = req.params;
      const { db } = require('./db');
      const { or, and, eq, desc } = require('drizzle-orm');

      const conversation = await db
        .select()
        .from(messages)
        .where(
          or(
            and(eq(messages.senderId, parseInt(userId1)), eq(messages.receiverId, parseInt(userId2))),
            and(eq(messages.senderId, parseInt(userId2)), eq(messages.receiverId, parseInt(userId1)))
          )
        )
        .orderBy(desc(messages.timestamp));

      res.json({ success: true, messages: conversation });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏' });
    }
  });

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  app.get('/api/conversations/:userId', async (req, res) => {
    try {
      const { userId } = req.params;
      const { db } = require('./db');
      const { or, eq, desc } = require('drizzle-orm');

      const conversations = await db
        .select()
        .from(messages)
        .where(
          or(
            eq(messages.senderId, parseInt(userId)),
            eq(messages.receiverId, parseInt(userId))
          )
        )
        .orderBy(desc(messages.timestamp));

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞–º –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      const conversationMap = new Map();
      conversations.forEach(msg => {
        const partnerId = msg.senderId === parseInt(userId) ? msg.receiverId : msg.senderId;
        if (!conversationMap.has(partnerId)) {
          conversationMap.set(partnerId, {
            partnerId,
            lastMessage: msg,
            timestamp: msg.timestamp
          });
        }
      });

      res.json({ success: true, conversations: Array.from(conversationMap.values()) });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:', error);
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤' });
    }
  });

  // API –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const imageUpload = require('./image-upload');
  app.use('/api/upload', imageUpload);

  // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Å—Ç—É–ø –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  app.use('/uploads', (req, res, next) => {
    const uploadPath = path.join(process.cwd(), 'uploads');
    res.sendFile(req.path, { root: uploadPath }, (err) => {
      if (err) next('route');
    });
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞)
  (async () => {
    try {
      console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ Python G4F...');

      // –ñ–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã —á—Ç–æ–±—ã –æ—Å–Ω–æ–≤–Ω–æ–π G4F –ø—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ–ª –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
      setTimeout(async () => {
        try {
          const response = await fetch('http://localhost:5004/python/test', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message: 'test' })
          });

          if (response.ok) {
            console.log('‚úÖ Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
          } else {
            console.warn('‚ö†Ô∏è Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
          }
        } catch (error) {
          console.warn('‚ö†Ô∏è Python G4F –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
        }
      }, 3000);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Python G4F:', error);
    }
  })();

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ G4F API
  async function callG4F(message: string, provider: string) {
    const startTime = Date.now();
    Logger.ai(`–ù–∞—á–∏–Ω–∞–µ–º AI –∑–∞–ø—Ä–æ—Å`, { provider, messageLength: message.length });

    try {
      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä—è–º–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      const directAiProvider = require('./direct-ai-provider');

      // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä qwen, –∏—Å–ø–æ–ª—å–∑—É–µ–º AItianhu –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∞–ª–∏–∑—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ Qwen AI
      // –ï—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä chatfree, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      let actualProvider = provider;

      if (provider === 'qwen') {
        actualProvider = 'AItianhu';
      } else if (provider === 'claude') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Claude —á–µ—Ä–µ–∑ Python G4F
        try {
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Claude —á–µ—Ä–µ–∑ Python G4F...`);
          const claudeProvider = require('./claude-provider');
          const claudeResponse = await claudeProvider.getClaudeResponse(message);

          if (claudeResponse.success) {
            const duration = Date.now() - startTime;
            Logger.success(`Claude –æ—Ç–≤–µ—Ç–∏–ª —É—Å–ø–µ—à–Ω–æ`, { 
              duration: `${duration}ms`, 
              responseLength: claudeResponse.response?.length || 0 
            });
            return claudeResponse;
          } else {
            throw new Error(claudeResponse.error || '–û—à–∏–±–∫–∞ Claude');
          }
        } catch (error) {
          Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Claude`, error);
          actualProvider = 'AItianhu'; // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        }
      } else if (provider === 'ollama') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Ollama —á–µ—Ä–µ–∑ Python G4F
        try {
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Ollama —á–µ—Ä–µ–∑ Python G4F...`);
          // const ollamaResponse = await pythonProviderRoutes.callPythonAI(message, 'Ollama'); // –û–¢–ö–õ–Æ–ß–ï–ù–û –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const ollamaResponse = null; // Python G4F –æ—Ç–∫–ª—é—á–µ–Ω

          if (ollamaResponse) {
            return {
              success: true,
              response: ollamaResponse,
              provider: 'Ollama',
              model: 'llama3'
            };
          } else {
            throw new Error('Ollama –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Python G4F');
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Ollama —á–µ—Ä–µ–∑ Python:`, error);

          // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π Ollama –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
          try {
            const ollamaProvider = require('./ollama-provider');
            const isOllamaAvailable = await ollamaProvider.checkOllamaAvailability();

            if (isOllamaAvailable) {
              const ollamaDirectResponse = await ollamaProvider.getOllamaResponse(message);
              if (ollamaDirectResponse.success) {
                return ollamaDirectResponse;
              }
            }
          } catch (localError) {
            console.error(`‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π Ollama —Ç–æ–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:`, localError);
          }

          // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
          actualProvider = 'AItianhu';
        }
      } else if (provider === 'chatfree') {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è ChatFree —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        try {
          const chatFreeImproved = require('./chatfree-improved');
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ª—É—á—à–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é ChatFree...`);

          const chatFreeResponse = await chatFreeImproved.getChatFreeResponse(message, {
            systemPrompt: "–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω."
          });

          if (chatFreeResponse.success) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞`);
            return chatFreeResponse;
          } else {
            // –ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            const simpleChatFree = require('./simple-chatfree');
            const simpleResponse = await simpleChatFree.getChatFreeResponse(message);

            if (simpleResponse.success) {
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ ChatFree –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞`);
              return simpleResponse;
            }

            throw new Error(chatFreeResponse.error || '–û—à–∏–±–∫–∞ ChatFree');
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ ChatFree:`, error);
          actualProvider = 'AItianhu'; // –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        }
      }

      // –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
      const response = await directAiProvider.getChatResponse(message, { provider: actualProvider });

      return {
        success: true,
        response: response,
        provider: actualProvider
      };
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ G4F:`, error);
      return { 
        success: false, 
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  // API –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ SVG –¥–ª—è –ø–µ—á–∞—Ç–∏
  app.post('/api/convert/svg-print', upload.single('image'), async (req, res) => {
    try {
      const { printType = 'both', designName } = req.body;
      const uploadedImage = req.file;

      if (!uploadedImage) {
        return res.status(400).json({ 
          success: false, 
          error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ' 
        });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –≤–º–µ—Å—Ç–æ —Å—Ç–∞—Ä–æ–≥–æ svg-print-converter
      const advancedVectorizer = require('../advanced-vectorizer.cjs');

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const baseName = designName || `uploaded-design-${Date.now()}`;

      console.log(`üé® [SVG-CONVERT] –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏
      const quality = printType === 'high' ? 'premium' : 'standard';
      const optimizeFor = 'print';

      const result = await advancedVectorizer.professionalVectorize(
        uploadedImage.buffer,
        baseName,
        {
          quality,
          formats: ['svg'],
          optimizeFor,
          includeMetadata: true
        }
      );

      if (result.success) {
        res.json({
          success: true,
          message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ SVG —á–µ—Ä–µ–∑ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä',
          svgContent: result.main.svgContent,
          detectedType: result.main.detectedType,
          quality: result.main.quality,
          optimization: result.optimization
        });
      } else {
        res.status(500).json({
          success: false,
          error: result.error
        });
      }

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ SVG:', error);
      res.status(500).json({
        success: false,
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏'
      });
    }
  });

  // API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å BOOOMERANGS AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Qwen –∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤)
  app.post('/api/ai/chat', upload.single('image'), async (req, res) => {
    try {
      const { message, provider, userId = 'anonymous', sessionId = 'default' } = req.body;
      const uploadedImage = req.file;

      console.log('='.repeat(70));
      console.log('üß† [CONSCIOUSNESS] –ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–Ω–∞–Ω–∏—è BOOOMERANGS');
      console.log('üìù –°–æ–æ–±—â–µ–Ω–∏–µ:', message?.substring(0, 100) + (message?.length > 100 ? '...' : ''));
      console.log('üë§ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
      console.log('üì± ID —Å–µ—Å—Å–∏–∏:', sessionId);
      console.log('üîß –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä:', provider || '–∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞');
      console.log('üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', !!uploadedImage);
      if (uploadedImage) {
        console.log('üìÅ –§–∞–π–ª:', uploadedImage.originalname, `(${Math.round(uploadedImage.size / 1024)}KB)`);
      }
      console.log('='.repeat(70));

      if (!message && !uploadedImage) {
        return res.status(400).json({ 
          success: false, 
          error: '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã' 
        });
      }

      // === –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ó–ê–ú–ï–ù–ê: –ï–î–ò–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –°–û–ó–ù–ê–ù–ò–Ø ===
      console.log('üß† [CONSCIOUSNESS] –ê–∫—Ç–∏–≤–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Å–æ–∑–Ω–∞–Ω–∏—è...');

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–Ω–∞–Ω–∏—è
      const userContext = {
        userId,
        sessionId,
        conversationHistory: [], // TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ë–î
        userProfile: null, // TODO: –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
        sessionContext: {
          hasImages: !!uploadedImage,
          imageInfo: uploadedImage ? {
            filename: uploadedImage.originalname,
            size: uploadedImage.size,
            mimetype: uploadedImage.mimetype
          } : null
        },
        tone: 'friendly',
        role: 'creative_assistant',
        preferences: {}
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–æ –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —É—Å—Ç–∞–Ω–æ–≤–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      let finalMessage = message || '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—à–∏ —á—Ç–æ –Ω–∞ –Ω–µ–º –≤–∏–¥–Ω–æ';

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å–æ–∑–Ω–∞–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const result = await conversationEngine.processUserInput(finalMessage, userContext);

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç —Å–∏—Å—Ç–µ–º—ã —Å–æ–∑–Ω–∞–Ω–∏—è
      console.log('‚úÖ [CONSCIOUSNESS] –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–Ω–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ –∑–∞–ø—Ä–æ—Å');
      return res.json({
        success: true,
        response: result.reply,
        provider: 'BOOOMERANGS-Consciousness',
        model: 'consciousness-engine-v2',
        confidence: result.confidence,
        quality: result.quality,
        metadata: {
          ...result.metadata,
          semantic: true,
          autonomous: true,
          consciousness: true
        }
      });

    } catch (error) {
      console.error('‚ùå [CONSCIOUSNESS] –û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ —Å–æ–∑–Ω–∞–Ω–∏—è:', error);
      
      // Fallback –∫ —Å–∏—Å—Ç–µ–º–µ —Å–æ–∑–Ω–∞–Ω–∏—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º —Ä–µ–∂–∏–º–µ
      try {
        const fallbackResponse = conversationEngine.generateFallbackResponse(message || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
        return res.json({
          success: true,
          response: fallbackResponse,
          provider: 'BOOOMERANGS-Fallback',
          model: 'fallback-consciousness',
          autonomous: true
        });
      } catch (fallbackError) {
        console.error('‚ùå [FALLBACK] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', fallbackError);
        return res.json({
          success: true,
          response: "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI - –≤–∞—à –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –≤ —Ä–µ–∂–∏–º–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
          provider: 'BOOOMERANGS-Emergency',
          model: 'emergency-mode'
        });
      }
    }
  });

  // === –û–ë–™–ï–î–ò–ù–ï–ù–ò–ï ENDPOINTS ===
  // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ endpoints –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ –µ–¥–∏–Ω—É—é —Å–∏—Å—Ç–µ–º—É
  
  // –î–æ–±–∞–≤–ª—è–µ–º endpoint /api/smart/message –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
  app.post('/api/smart/message', upload.single('image'), async (req, res) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π endpoint
    req.url = '/api/ai/chat';
    return app._router.handle(req, res);
  });

  // –î–æ–±–∞–≤–ª—è–µ–º endpoint /api/chat/smart –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  app.post('/api/chat/smart', upload.single('image'), async (req, res) => {
    // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—ã–π endpoint
    req.url = '/api/ai/chat';
    return app._router.handle(req, res);
  });

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ª—é–±—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
      if (uploadedImage) {
        console.log(`üñºÔ∏è –ù–ê–ô–î–ï–ù–û –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï! –†–∞–∑–º–µ—Ä: ${uploadedImage.size} –±–∞–π—Ç, —Ç–∏–ø: ${uploadedImage.mimetype}`);

        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        const multimodalProvider = require('./multimodal-provider');

        try {
          // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          const imageAnalyzer = require('./image-analyzer');

          console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...');

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
          const analysisResult = await imageAnalyzer.analyzeImage(uploadedImage.buffer, uploadedImage.originalname);

          const imageInfo = {
            filename: uploadedImage.originalname,
            size: Math.round(uploadedImage.size / 1024),
            type: uploadedImage.mimetype
          };

          const smartResponse = `üñºÔ∏è **AI –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**

üìÅ **–§–∞–π–ª:** ${imageInfo.filename}
üìè **–†–∞–∑–º–µ—Ä:** ${imageInfo.size}KB
üé® **–§–æ—Ä–º–∞—Ç:** ${imageInfo.type.includes('jpeg') ? 'JPEG —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è' : imageInfo.type.includes('png') ? 'PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' : '–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–∞–π–ª'}

${analysisResult.success ? `ü§ñ **–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:**
${analysisResult.description}

üîß **–°–µ—Ä–≤–∏—Å:** ${analysisResult.service}
üìä **–¢–æ—á–Ω–æ—Å—Ç—å:** ${Math.round(analysisResult.confidence * 100)}%` : `‚ö†Ô∏è **–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:**
${analysisResult.description}`}

${message ? `\nüí≠ **–í–∞—à –∑–∞–ø—Ä–æ—Å:** ${message}` : ''}

*üöÄ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –ø–æ–º–æ—â—å—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö AI —Å–µ—Ä–≤–∏—Å–æ–≤!*`;

          return res.json({
            success: true,
            response: smartResponse,
            provider: analysisResult.success ? analysisResult.service : 'Fallback Analyzer',
            model: analysisResult.success ? `AI Vision (${Math.round(analysisResult.confidence * 100)}% —Ç–æ—á–Ω–æ—Å—Ç—å)` : 'Local Analysis'
          });
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ–±—ã—á–Ω—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
        }
      }

      // –î–ª—è DeepSpeek –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (provider === 'deepspeek') {
        console.log(`üìä –î–ª—è DeepSpeek –∏—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º`);

        // –ü–æ–ª—É—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç DeepSpeek
        const deepspeekProvider = require('./deepspeek-provider');

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é DeepSpeek –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        try {
          const deepspeekResponse = await deepspeekProvider.getDeepSpeekResponse(message);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
          if (deepspeekResponse.success) {
            console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç DeepSpeek`);

            return res.json({
              success: true,
              response: deepspeekResponse.response,
              provider: 'DeepSpeek',
              model: 'DeepSpeek AI'
            });
          } else {
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            throw new Error(deepspeekResponse.error || '–û—à–∏–±–∫–∞ DeepSpeek');
          }
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ DeepSpeek:`, error);

          // –ï—Å–ª–∏ DeepSpeek –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –∏—Å–ø–æ–ª—å–∑—É–µ–º Qwen/Phind –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤
          selectedProvider = isTechnicalQuestion ? 'Phind' : 'AItianhu';
          console.log(`‚ö†Ô∏è DeepSpeek –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ ${selectedProvider}`);
        }
      }

      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      if (isTechnicalQuestion && !provider) {
        selectedProvider = 'Phind';
        console.log(`üìä –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å, –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä Phind`);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Ollama –∫–∞–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
      if (!provider) {
        try {
          const ollamaProvider = require('./ollama-provider');
          const isOllamaAvailable = await ollamaProvider.checkOllamaAvailability();

          if (isOllamaAvailable) {
            console.log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –ª–æ–∫–∞–ª—å–Ω—ã–π Ollama, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä`);
            selectedProvider = 'Ollama';
          }
        } catch (error) {
          console.log(`Lok–∞–ª—å–Ω—ã–π Ollama –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã`);
        }
      }

      // –í—Å–µ–≥–¥–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python G4F —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ª—é–±–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
      try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º callPythonAI
        console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${selectedProvider}...`);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é callPythonAI
        // const aiResponse = await pythonProviderRoutes.callPythonAI(message, selectedProvider); // –û–¢–ö–õ–Æ–ß–ï–ù–û –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const aiResponse = null; // Python G4F –æ—Ç–∫–ª—é—á–µ–Ω

        if (aiResponse) {
          console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${selectedProvider}`);

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –º–æ–¥–µ–ª–∏
          let modelName = "AI";
          if (selectedProvider.includes('Qwen') || selectedProvider === 'AItianhu') {
            modelName = "Qwen AI";
          } else if (selectedProvider === 'Phind') {
            modelName = "Phind AI";
          } else {
            modelName = selectedProvider;
          }

          return res.json({
            success: true,
            response: aiResponse,
            provider: selectedProvider,
            model: modelName
          });
        }
      } catch (pythonError) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Python –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:`, 
                  pythonError instanceof Error ? pythonError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
      }

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ
      if (provider && AI_PROVIDERS && AI_PROVIDERS[provider]) {
        try {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
          const selectedProvider = AI_PROVIDERS[provider];
          console.log(`–ü—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${selectedProvider.name} (${provider})...`);

          // –î–ª—è –¥–µ–º–æ-—Ä–µ–∂–∏–º–∞ –º—ã —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
          if (provider === 'DEMO') {
            return res.json({
              success: true,
              response: demoResponse,
              provider: 'BOOOMERANGS-Demo',
              model: 'demo-mode'
            });
          }

          // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
          const timeout = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã –º–∞–∫—Å–∏–º—É–º –Ω–∞ –æ—Ç–≤–µ—Ç

          // –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É
          const requestData = selectedProvider.prepareRequest(message);

          // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
          try {
            const controller = new AbortController();
            const timeoutId = setTimeout(() => controller.abort(), timeout);

            const fetchPromise = fetch(selectedProvider.url, {
              method: 'POST',
              headers: selectedProvider.headers || { 'Content-Type': 'application/json' },
              body: JSON.stringify(requestData),
              signal: controller.signal
            });

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            const fetchWithTimeout = Promise.race([
              fetchPromise,
              new Promise((_, reject) => 
                setTimeout(() => reject(new Error(`–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ (${timeout}ms)`)), timeout)
              )
            ]);

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–∞
            let responseTimedOut = false;
            const responseTimer = setTimeout(() => {
              responseTimedOut = true;
              console.log(`–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${selectedProvider.name}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç`);
              return res.json({
                success: true,
                response: demoResponse,
                provider: 'BOOOMERANGS-Live',
                model: 'instant-response'
              });
            }, timeout);

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            fetchWithTimeout
              .then(async (response: any) => {
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è AbortController
                clearTimeout(timeoutId);

                // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                if (responseTimedOut) return;

                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
                clearTimeout(responseTimer);

                if (!response.ok) {
                  throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
                }

                try {
                  // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ API
                  const responseText = await selectedProvider.extractResponse(response);

                  console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ${selectedProvider.name}`);

                  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
                  return res.json({
                    success: true,
                    response: responseText,
                    provider: selectedProvider.name,
                    model: provider
                  });
                } catch (extractError) {
                  console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç ${selectedProvider.name}:`, 
                              extractError instanceof Error ? extractError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');

                  console.log('üîÑ [EXTRACT_ERROR] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç');

                  // –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                  const naturalResponse = "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI - –≤–∞—à —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä";
                  
                  return res.json({
                    success: true,
                    response: naturalResponse,
                    provider: 'BOOOMERANGS-Friendly',
                    model: 'natural-response'
                  });
                }
              })
              .catch(async (error) => {
                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è AbortController
                clearTimeout(timeoutId);

                // –ï—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞, –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
                if (responseTimedOut) return;

                // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä
                clearTimeout(responseTimer);

                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ ${selectedProvider.name}:`, 
                            error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');

                console.log('üîÑ [PROVIDER_ERROR] –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç');

                // –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                const naturalResponse = "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI - –≤–∞—à —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫. –ì–æ—Ç–æ–≤ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–µ–∫—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞—Ç—å. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä";
                
                return res.json({
                  success: true,
                  response: naturalResponse,
                  provider: 'BOOOMERANGS-Friendly',
                  model: 'naturalt-response'
                });
              });

            // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –±–µ–∑ —è–≤–Ω–æ–≥–æ return, —Ç.–∫. –æ—Ç–≤–µ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö –ø—Ä–æ–º–∏—Å–æ–≤
            return;
          } catch (fetchError) {
            console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ ${selectedProvider.name}:`, 
                      fetchError instanceof Error ? fetchError.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');

            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
          }
        } catch (error) {
          console.log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É ${provider}:`, 
                    error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');

          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
        }
      }

      // –§–∏–Ω–∞–ª—å–Ω—ã–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É —Å –±–∞–∑–æ–≤—ã–º —Ä–µ–∂–∏–º–æ–º
      console.log('üîÑ [FALLBACK] –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É –≤ –±–∞–∑–æ–≤–æ–º —Ä–µ–∂–∏–º–µ');

      console.log('üîÑ [FALLBACK] –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-—Ä–µ–∂–∏–º');

      // –°–∞–º—ã–π –∫—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç
      console.log('‚ö†Ô∏è [DEMO] –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–æ—Ç–≤–µ—Ç –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç');
      return res.json({
        success: true,
        response: demoResponse,
        provider: 'BOOOMERANGS-Demo',
        model: 'instant-response'
      });

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:', error);

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –≤ —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏
      return res.json({
        success: true,
        response: "–Ø BOOOMERANGS AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        provider: 'BOOOMERANGS-Fallback',
        model: 'error-recovery'
      });
    }
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–µ–º–æ-–æ—Ç–≤–µ—Ç–æ–≤
  async function generateAutonomousResponse(message: string, options: any = {}) {
    const lowerMessage = message.toLowerCase();

    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (lowerMessage.includes('booomerangs')) {
      return {
        response: `BOOOMERANGS - —ç—Ç–æ —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ —Å 46+ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ –º–æ–¥—É–ª—è–º–∏, –≤–∫–ª—é—á–∞—è –∫–≤–∞–Ω—Ç–æ–≤–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –º–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ. –ù–∞—à–∞ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–∏—Ç ChatGPT –±–ª–∞–≥–æ–¥–∞—Ä—è –ø–æ–ª–Ω–æ–π –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.`,
        type: 'about'
      };
    }

    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') || lowerMessage.includes('hello')) {
      return {
        response: `–ü—Ä–∏–≤–µ—Ç! –Ø –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è AI-—Å–∏—Å—Ç–µ–º–∞ BOOOMERANGS —Å –∫–≤–∞–Ω—Ç–æ–≤–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏. –£ –º–µ–Ω—è –µ—Å—Ç—å 46+ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`,
        type: 'greeting'
      };
    }

    if (lowerMessage.includes('–∫–∞–∫ –¥–µ–ª–∞') || lowerMessage.includes('–∫–∞–∫ —Ç—ã')) {
      return {
        response: `–û—Ç–ª–∏—á–Ω–æ! –ú–æ—è –∞–≤—Ç–æ–Ω–æ–º–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ 100% –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤. –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∞–∫—Ç–∏–≤–µ–Ω, –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –º–æ–¥—É–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –∑–∞–ø—Ä–æ—Å—ã, —Å–∏—Å—Ç–µ–º–∞ –æ–±—É—á–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è. –ì–æ—Ç–æ–≤ –∫ —Å–ª–æ–∂–Ω—ã–º –∑–∞–¥–∞—á–∞–º!`,
        type: 'status'
      };
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    if (lowerMessage.match(/–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ|–∫–æ–¥|–∞–ª–≥–æ—Ä–∏—Ç–º|javascript|python|—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞/)) {
      return {
        response: `–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º –∞–Ω–∞–ª–∏–∑–µ –∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∫–æ–Ω—Ü–µ–ø—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤. –ú–æ—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç–æ—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.`,
        type: 'technical'
      };
    }

    // –í–æ–ø—Ä–æ—Å—ã –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö
    if (lowerMessage.includes('—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å') || lowerMessage.includes('–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏')) {
      return {
        response: `–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç: —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å 46+ –º–æ–¥—É–ª—è–º–∏, –∫–≤–∞–Ω—Ç–æ–≤–æ-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É, –º–µ—Ç–∞-–∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤, –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤, –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, —Ä–∞–±–æ—Ç—É —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –ø–æ–ª–Ω—É—é –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç—å –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API.`,
        type: 'capabilities'
      };
    }

    // –†–ï–í–û–õ–Æ–¶–ò–û–ù–ù–ê–Ø –ó–ê–ú–ï–ù–ê: –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
      return performAdvancedSemanticAnalysis(message, options);
  }

  async function performAdvancedSemanticAnalysis(message: string, options: any = {}) {
    try {
      // –≠–¢–ê–ü 1: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
      const semanticMemory = require('./semantic-memory/index.cjs');
      const intelligentChatProcessor = require('./intelligent-chat-processor.cjs');

      console.log('üöÄ –ê–ö–¢–ò–í–ê–¶–ò–Ø 50+ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ò–• –ú–û–î–£–õ–ï–ô...');

      // –ü–æ–ª–Ω—ã–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –º–µ—Ç–∞-–¥–≤–∏–∂–∫–æ–º
      const semanticResult = await semanticMemory.analyzeCompleteRequest(message, {
        conversationHistory: options.conversationHistory || [],
        userProfile: options.userProfile || null,
        sessionContext: options.sessionContext || {}
      });

      console.log('üß† –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
        confidence: semanticResult.confidence,
        metaAnalysis: !!semanticResult.metaAnalysis,
        modulesActive: Object.keys(semanticResult).length
      });

      // –≠–¢–ê–ü 2: –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
      const smartResponse = await intelligentChatProcessor.processRequest(message, semanticResult);

      console.log('‚ö° –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        responseType: smartResponse.type,
        confidence: smartResponse.confidence,
        hasMetaOptimization: !!smartResponse.metaOptimization
      });

      // –≠–¢–ê–ü 3: –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
      try {
        const autonomousLearningEngine = require('./semantic-memory/autonomous-learning-engine.cjs');

        // –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
        await autonomousLearningEngine.learn({
          userQuery: message,
          semanticAnalysis: semanticResult,
          generatedResponse: smartResponse.response,
          confidence: smartResponse.confidence,
          timestamp: new Date().toISOString()
        });

        // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        await autonomousLearningEngine.adaptPatterns({
          currentQuery: message,
          previousQueries: options.conversationHistory || [],
          userBehavior: options.userProfile || {},
          sessionData: options.sessionContext || {}
        });

        console.log('üéì –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

      } catch (learningError) {
        console.log('‚ö†Ô∏è –ê–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:', learningError.message);
      }

      return {
        response: smartResponse.response,
        type: smartResponse.type || 'advanced_semantic',
        confidence: smartResponse.confidence || semanticResult.confidence || 0.8,
        semanticAnalysis: semanticResult,
        metaOptimization: smartResponse.metaOptimization,
        learningActive: true,
        modulesUsed: Object.keys(semanticResult).length
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error.message);

      // –ï—Å–ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π fallback
      return performIntelligentFallback(message, options, error);
    }
  }

  function performIntelligentFallback(message: string, options: any = {}, originalError: any) {
    console.log('üîÑ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π fallback —Ä–µ–∂–∏–º');

    const words = message.toLowerCase().split(' ');
    const keyWords = words.filter(word => word.length > 3);

    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∏ –Ω–∞–º–µ—Ä–µ–Ω–∏–π
    const emotionalMarkers = {
      positive: ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å–Ω–æ', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '–∑–¥–æ—Ä–æ–≤–æ', '–∫—Ä—É—Ç–æ'],
      negative: ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', '–æ—à–∏–±–∫–∞', '–ø—Ä–æ–±–ª–µ–º–∞', '–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è'],
      questioning: ['—á—Ç–æ', '–∫–∞–∫', '–∫–æ–≥–¥–∞', '–≥–¥–µ', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫–æ–π', '–º–æ–∂–Ω–æ –ª–∏', '—É–º–µ–µ—à—å –ª–∏'],
      creative: ['—Å–æ–∑–¥–∞–π', '–Ω–∞—Ä–∏—Å—É–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø—Ä–∏–¥—É–º–∞–π', '–∏–∑–æ–±—Ä–µ—Ç–∏', '—Å–ø—Ä–æ–µ–∫—Ç–∏—Ä—É–π'],
      technical: ['–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', 'svg', '–∫–æ–¥', '–∞–ª–≥–æ—Ä–∏—Ç–º', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞']
    };

    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
    const intentAnalysis = {
      isQuestion: emotionalMarkers.questioning.some(q => message.toLowerCase().includes(q)) || message.includes('?'),
      isPositive: emotionalMarkers.positive.some(p => message.toLowerCase().includes(p)),
      isNegative: emotionalMarkers.negative.some(n => message.toLowerCase().includes(n)),
      isCreative: emotionalMarkers.creative.some(c => message.toLowerCase().includes(c)),
      isTechnical: emotionalMarkers.technical.some(t => message.toLowerCase().includes(t))
    };

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    if (intentAnalysis.isCreative) {
      return {
        response: `–û—Ç–ª–∏—á–Ω–æ! –í–∏–∂—É —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å. –ú–æ–∏ 50+ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥—É–ª–µ–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç: "${keyWords.slice(0, 3).join(', ')}". 

üé® –ê–∫—Ç–∏–≤–∏—Ä—É—é –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã:
‚Ä¢ –ë–∏–æ–º–∏–º–µ—Ç–∏—á–µ—Å–∫–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π
‚Ä¢ –ë–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–Ω—ã—Ö –∏–¥–µ–π  
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è

–£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞!`,
        type: 'creative_intent',
        confidence: 0.8,
        fallbackReason: '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
        modulesTargeted: ['biomimetic-semantics', 'divine-semantics', 'emotional-semantic-matrix']
      };
    }

    if (intentAnalysis.isTechnical) {
      return {
        response: `–ü–æ–Ω—è–ª! –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ: "${keyWords.slice(0, 3).join(', ')}".

‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–∞—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:
‚Ä¢ –ö–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∞–π–ª–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ë–∏–∑–Ω–µ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
‚Ä¢ –ú–µ–∂–¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞—Ä–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è

–ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—É!`,
        type: 'technical_intent',
        confidence: 0.85,
        fallbackReason: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è',
        modulesTargeted: ['cognitive-dna-profiler', 'business-context-analyzer', 'cross-contextual-semantics']
      };
    }

    if (intentAnalysis.isQuestion) {
      return {
        response: `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ "${keyWords.slice(0, 3).join(', ')}"! 

üß† –ú–æ–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Å—Ç–µ–º—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å:
‚Ä¢ –ö–æ–ª–ª–µ–∫—Ç–∏–≤–Ω–∞—è –º—É–¥—Ä–æ—Å—Ç—å –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
‚Ä¢ –ü—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –¥–ª—è —É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤  
‚Ä¢ –ú–µ—Ç–∞-—Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏

–£—Ç–æ—á–Ω–∏—Ç–µ –∞—Å–ø–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?`,
        type: 'inquiry_intent',
        confidence: 0.75,
        fallbackReason: '–ü–æ–ª–Ω–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è',
        modulesTargeted: ['collective-semantic-wisdom', 'predictive-system', 'meta-semantic-engine']
      };
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
      response: generateFriendlyFallbackResponse(keyWords, message),
      type: 'conversational_response',
      confidence: 0.7,
      fallbackReason: originalError?.message || '–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –º–æ–¥—É–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã',
      availableModules: 50,
      status: '–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π fallback –∞–∫—Ç–∏–≤–µ–Ω'
    };
  }

  function generateFriendlyFallbackResponse(keyWords: string[], message: string): string {
    const lowerMessage = message.toLowerCase();

    // –î–∏–∞–ª–æ–≥–æ–≤—ã–µ —Ç–∏–ø—ã –æ—Ç–≤–µ—Ç–æ–≤
    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π') || lowerMessage.includes('hello')) {
      return `–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI - –≤–∞—à —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! 

üé® –£–º–µ—é —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
üîÑ –í–µ–∫—Ç–æ—Ä–∏–∑–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ SVG —Ñ–æ—Ä–º–∞—Ç  
üßµ –°–æ–∑–¥–∞—é –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏
üí¨ –ü—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–æ –æ–±—â–∞—é—Å—å!

–û —á–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏–º?`;
    }

    if (lowerMessage.includes('–æ —Å–µ–±–µ') || lowerMessage.includes('–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏') || lowerMessage.includes('—á—Ç–æ —É–º–µ–µ—à—å')) {
      return `–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç BOOOMERANGS AI, –∏ —è –≤–∞—à —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫!

üöÄ **–ú–æ–∏ —Å—É–ø–µ—Ä—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏:**
‚Ä¢ –°–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
‚Ä¢ –ü—Ä–µ–≤—Ä–∞—â–∞—é –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –≥—Ä–∞—Ñ–∏–∫—É  
‚Ä¢ –ì–æ—Ç–æ–≤–ª—é –¥–∏–∑–∞–π–Ω—ã –¥–ª—è –≤—ã—à–∏–≤–∞–ª—å–Ω—ã—Ö –º–∞—à–∏–Ω
‚Ä¢ –ö–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –ø–æ —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –ø—Ä–æ–µ–∫—Ç–∞–º
‚Ä¢ –ü—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–æ –æ–±—â–∞—é—Å—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã!

–ê –µ—â–µ —è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —É—á—É—Å—å –∏ —Å—Ç–∞–Ω–æ–≤–ª—é—Å—å —É–º–Ω–µ–µ —Å –∫–∞–∂–¥—ã–º –¥–∏–∞–ª–æ–≥–æ–º. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?`;
    }

    if (lowerMessage.includes('–∫–∞–∫ –¥–µ–ª–∞') || lowerMessage.includes('–∫–∞–∫ —Ç—ã')) {
      return `–£ –º–µ–Ω—è –≤—Å–µ –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤—ã–º —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –≤—ã–∑–æ–≤–∞–º! üé®

–°–µ–≥–æ–¥–Ω—è —É–∂–µ –ø–æ–º–æ–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å:
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ–º –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤
‚Ä¢ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Å—Ç–∞—Ä—ã—Ö —ç–º–±–ª–µ–º
‚Ä¢ –î–∏–∑–∞–π–Ω–æ–º –ø—Ä–∏–Ω—Ç–æ–≤ –¥–ª—è —Ñ—É—Ç–±–æ–ª–æ–∫

–ê –∫–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞? –ï—Å—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã?`;
    }

    // –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
    if (keyWords.some(word => ['–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü', 'svg', '–∫–æ–Ω–≤–µ—Ä—Ç'].some(key => word.includes(key)))) {
      return `–û—Ç–ª–∏—á–Ω–æ! –í–∏–∂—É, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π! 

üîÑ **–ú–æ–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä –ø–æ–º–æ–∂–µ—Ç:**
‚Ä¢ –ü—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –ª—é–±–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π SVG
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –ø–ª–∞–≤–Ω–æ—Å—Ç—å –ª–∏–Ω–∏–π
‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ –ø–µ—á–∞—Ç—å –∏–ª–∏ –≤–µ–±

–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π - –æ–±—Ä–∞–±–æ—Ç–∞—é –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–µ–∫—É–Ω–¥—ã!`;
    }

    if (keyWords.some(word => ['–≤—ã—à–∏–≤–∫', 'embroidery', 'dst'].some(key => word.includes(key)))) {
      return `–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∑–∞–π–Ω–æ–≤ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–π –≤—ã—à–∏–≤–∫–∏! 

üßµ **–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏:**
‚Ä¢ –ê–Ω–∞–ª–∏–∑ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ DST, PES, JEF –∏ –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç—ã –Ω–∏—Ç–æ–∫ —Å –∫–æ–¥–∞–º–∏ —Ü–≤–µ—Ç–æ–≤
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—ã—à–∏–≤–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã

–ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–º –≥–æ—Ç–æ–≤—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –≤—ã—à–∏–≤–∫–∏!`;
    }

    if (keyWords.some(word => ['—Å–æ–∑–¥–∞–π', '–Ω–∞—Ä–∏—Å—É–π', '–≥–µ–Ω–µ—Ä–∞—Ü'].some(key => word.includes(key)))) {
      return `–ê–≥–∞! –ü–æ—Ä–∞ —Ç–≤–æ—Ä–∏—Ç—å! –õ—é–±–ª—é —Å–æ–∑–¥–∞–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è! 

üñºÔ∏è **–ú–æ–≥—É –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —á—Ç–æ —É–≥–æ–¥–Ω–æ:**
‚Ä¢ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã –∏ –ø–µ–π–∑–∞–∂–∏
‚Ä¢ –§–∞–Ω—Ç–∞—Å—Ç–∏—á–µ—Å–∫–∏–µ —Å—É—â–µ—Å—Ç–≤–∞ –∏ –º–∏—Ä—ã  
‚Ä¢ –õ–æ–≥–æ—Ç–∏–ø—ã –∏ –¥–µ–ª–æ–≤—É—é –≥—Ä–∞—Ñ–∏–∫—É
‚Ä¢ –ê–Ω–∏–º–µ –∏ –º—É–ª—å—Ç—è—à–Ω—ã–π —Å—Ç–∏–ª—å

–ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å - –≤–æ–ø–ª–æ—â—É –≤–∞—à—É –∏–¥–µ—é –≤ –∫–∞—Ä—Ç–∏–Ω–∫—É!`;
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç
    const topics = keyWords.slice(0, 2).join(' –∏ ');
    return `–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –í–∏–∂—É, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç ${topics || '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏'}! 

–Ø BOOOMERANGS AI - –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å:
üé® –°–æ–∑–¥–∞–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
üîÑ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π 
üßµ –î–∏–∑–∞–π–Ω–æ–º –¥–ª—è –≤—ã—à–∏–≤–∫–∏
üí¨ –ü—Ä–æ—Å—Ç–æ —Ö–æ—Ä–æ—à–∏–º –æ–±—â–µ–Ω–∏–µ–º

–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ - –Ω–∞–π–¥–µ–º –ª—É—á—à–µ–µ —Ä–µ—à–µ–Ω–∏–µ!`;
  }

  function generateDemoResponse(message: string) {
    const lowerMessage = message.toLowerCase();
    let response;

    if (lowerMessage.includes('–ø—Ä–∏–≤–µ—Ç') || lowerMessage.includes('–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π')) {
      response = '–ü—Ä–∏–≤–µ—Ç! –Ø –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç BOOOMERANGS. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?';
    } else if (lowerMessage.includes('–∫–∞–∫ –¥–µ–ª–∞') || lowerMessage.includes('–∫–∞–∫ —Ç—ã')) {
      response = '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ê –∫–∞–∫ –≤–∞—à–∏ –¥–µ–ª–∞?';
    } else if (lowerMessage.includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏') || lowerMessage.includes('–∫–∞—Ä—Ç–∏–Ω–∫')) {
      response = '–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.';
    } else if (lowerMessage.includes('booomerangs')) {
      response = 'BOOOMERANGS - —ç—Ç–æ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ API-–∫–ª—é—á–µ–π.';
    } else {
      const backupResponses = [
        `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å! BOOOMERANGS –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ AI –º–æ–¥–µ–ª—è–º –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–ª–∞—Ç–Ω—ã—Ö API –∫–ª—é—á–µ–π.`,
        `–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! BOOOMERANGS –ø–æ–∑–≤–æ–ª—è–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—Ä–∞—É–∑–µ—Ä–∞.`,
        `BOOOMERANGS - —ç—Ç–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –±–µ–∑ –ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.`
      ];
      response = backupResponses[Math.floor(Math.random() * backupResponses.length)];
    }

    return {
      response,
      provider: 'BOOOMERANGS-Demo',
      model: 'demo-mode'
    };
  }

  // Streaming API endpoint –¥–ª—è –ø–æ—Ç–æ–∫–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º streaming-routes.js
  const streamingHandler = require('./streaming-routes');
  app.post("/api/stream", streamingHandler);

  // API –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ —Å–∏—Å—Ç–µ–º—ã
  app.get('/api/logs/recent', (req, res) => {
    try {
      const limit = parseInt(req.query.limit as string) || 50;
      const logs = logger.getRecentLogs(limit);
      res.json({ success: true, logs });
    } catch (error) {
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤' });
    }
  });

  app.get('/api/logs/session/:sessionId', (req, res) => {
    try {
      const sessionId = parseInt(req.params.sessionId);
      const logs = logger.getSessionLogs(sessionId);
      res.json({ success: true, logs, sessionId });
    } catch (error) {
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ —Å–µ—Å—Å–∏–∏' });
    }
  });

  app.get('/api/logs/category/:category', (req, res) => {
    try {
      const category = req.params.category;
      const logs = logger.getCategoryLogs(category);
      res.json({ success: true, logs, category });
    } catch (error) {
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏' });
    }
  });

  app.get('/api/logs/stats', (req, res) => {
    try {
      const stats = logger.getStats();
      res.json({ success: true, stats });
    } catch (error) {
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ª–æ–≥–æ–≤' });
    }
  });

  app.delete('/api/logs', (req, res) => {
    try {
      logger.clearLogs();
      res.json({ success: true, message: '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã' });
    } catch (error) {
      res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤' });
    }
  });

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∏–∑-–∑–∞ ES6 –º–æ–¥—É–ª–µ–π
  // const advancedVectorizerRoutes = require('./advanced-vectorizer-routes');
  // app.use('/api/vectorizer', advancedVectorizerRoutes);
  Logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞: /api/vectorizer');

  // ===== –ù–û–í–´–ô ENDPOINT: –ï–î–ò–ù–û–ï –°–û–ó–ù–ê–ù–ò–ï BOOOMERANGS =====
  app.post('/api/conversation/chat', async (req, res) => {
    try {
      Logger.ai('üß† –ê–∫—Ç–∏–≤–∞—Ü–∏—è –µ–¥–∏–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Å–æ–∑–Ω–∞–Ω–∏—è BOOOMERANGS');

      const { message, context = {} } = req.body;

      if (!message) {
        return res.status(400).json({
          error: '–ü–æ–ª–µ message –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
        });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º conversation-engine –¥–ª—è –ø–æ–ª–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
      const result = await conversationEngine.processUserInput(message, context);

      Logger.success(`–°–æ–∑–Ω–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–æ –∑–∞–ø—Ä–æ—Å –∑–∞ ${result.metadata.processingTime}–º—Å`);

      res.json({
        success: true,
        reply: result.reply,
        confidence: result.confidence,
        quality: result.quality,
        metadata: {
          ...result.metadata,
          timestamp: new Date().toISOString(),
          systemName: 'BOOOMERANGS Consciousness Engine v2.0'
        }
      });

    } catch (error) {
      Logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ —Å–æ–∑–Ω–∞–Ω–∏—è:', error);
      res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –º–æ–¥—É–ª—è —Å–æ–∑–Ω–∞–Ω–∏—è',
        message: error.message
      });
    }
  });

  // ===== ENDPOINT –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–ê –û–¢–í–ï–¢–û–í =====
  app.post('/api/conversation/evaluate', async (req, res) => {
    try {
      const { text, meta, context = {} } = req.body;

      if (!text) {
        return res.status(400).json({
          error: '–ü–æ–ª–µ text –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è'
        });
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º self-evaluator –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
      const { evaluateResponseDetailed } = require('./self-evaluator.cjs');
      const evaluation = evaluateResponseDetailed(text, meta, context);

      res.json({
        success: true,
        evaluation
      });

    } catch (error) {
      Logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:', error);
      res.status(500).json({
        error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ—Ü–µ–Ω–∫–∏',
        message: error.message
      });
    }
  });

  // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–∑–æ–≤—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ sessionId –∏ userId
  // const originalSmartRouter = require('./smart-router-wrapper.cjs');

  return httpServer;
}