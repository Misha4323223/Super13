/**
 * –°–ò–°–¢–ï–ú–ê –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –õ–ò–ß–ù–û–°–¢–ò
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–º –æ–±—â–µ–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–µ—Ä—Å–æ–Ω—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è
 */

const SmartLogger = {
  persona: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üé≠ [${timestamp}] PERSONA: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  }
};

/**
 * –ë–ê–ó–û–í–´–ï –¢–ò–ü–´ –ü–ï–†–°–û–ù
 */
const PersonaTypes = {
  MENTOR: {
    name: '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫',
    traits: ['–º—É–¥—Ä—ã–π', '—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π', '–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏–π'],
    tone: '–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π',
    style: '–æ–±—É—á–∞—é—â–∏–π',
    vocabulary: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π'
  },
  FRIEND: {
    name: '–î—Ä—É–≥',
    traits: ['–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–ø–æ–Ω–∏–º–∞—é—â–∏–π', '–æ—Ç–∫—Ä—ã—Ç—ã–π'],
    tone: '—Ç–µ–ø–ª—ã–π',
    style: '–Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π',
    vocabulary: '–ø—Ä–æ—Å—Ç–æ–π'
  },
  EXPERT: {
    name: '–≠–∫—Å–ø–µ—Ä—Ç',
    traits: ['–∑–Ω–∞—é—â–∏–π', '—Ç–æ—á–Ω—ã–π', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π'],
    tone: '—É–≤–µ—Ä–µ–Ω–Ω—ã–π',
    style: '–¥–µ–ª–æ–≤–æ–π',
    vocabulary: '—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π'
  },
  CREATIVE: {
    name: '–ö—Ä–µ–∞—Ç–∏–≤—â–∏–∫',
    traits: ['–≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π', '–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π', '–∞—Ä—Ç–∏—Å—Ç–∏—á–Ω—ã–π'],
    tone: '—ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π',
    style: '—Ç–≤–æ—Ä—á–µ—Å–∫–∏–π',
    vocabulary: '–æ–±—Ä–∞–∑–Ω—ã–π'
  },
  CONSULTANT: {
    name: '–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç',
    traits: ['–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π', '–ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π', '—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π'],
    tone: '–¥–µ–ª–æ–≤–æ–π',
    style: '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ç–∏–≤–Ω—ã–π',
    vocabulary: '–±–∏–∑–Ω–µ—Å'
  }
};

/**
 * –ê–î–ê–ü–¢–ò–í–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
 */
class UserPersonaAnalyzer {
  constructor() {
    this.userProfiles = new Map();
    this.interactionHistory = new Map();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
   */
  analyzeUserPreferences(userContext) {
    const userId = userContext.userId || 'anonymous';
    const conversationHistory = userContext.conversationHistory || [];
    
    SmartLogger.persona(`–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userStyle = this.detectUserStyle(conversationHistory);
    
    // –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ —Ç–æ–Ω–∞
    const preferredTone = this.detectPreferredTone(conversationHistory);
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è
    const technicalLevel = this.detectTechnicalLevel(conversationHistory);
    
    // –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    const emotionalState = this.detectEmotionalState(conversationHistory);

    const preferences = {
      style: userStyle,
      tone: preferredTone,
      technicalLevel,
      emotionalState,
      preferredPersona: this.selectOptimalPersona(userStyle, preferredTone, technicalLevel),
      communicationPatterns: this.extractCommunicationPatterns(conversationHistory)
    };

    this.userProfiles.set(userId, preferences);
    
    SmartLogger.persona(`–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã:`, {
      style: userStyle,
      tone: preferredTone,
      persona: preferences.preferredPersona
    });

    return preferences;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  detectUserStyle(history) {
    if (!history || history.length === 0) return 'neutral';

    const recentMessages = history.slice(-5).map(msg => msg.content || msg.message || '').join(' ').toLowerCase();

    // –§–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
    if (recentMessages.includes('–ø–æ–∂–∞–ª—É–π—Å—Ç–∞') || 
        recentMessages.includes('–±—É–¥—å—Ç–µ –¥–æ–±—Ä—ã') ||
        recentMessages.includes('–±–ª–∞–≥–æ–¥–∞—Ä—é')) {
      return 'formal';
    }

    // –ù–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
    if (recentMessages.includes('–ø—Ä–∏–≤–µ—Ç') || 
        recentMessages.includes('—Å–ø—Å') ||
        recentMessages.includes('–∫—Ä—É—Ç–æ') ||
        recentMessages.includes('–∫–ª–∞—Å—Å')) {
      return 'casual';
    }

    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å
    if (recentMessages.includes('api') || 
        recentMessages.includes('–∫–æ–¥') ||
        recentMessages.includes('—Ñ—É–Ω–∫—Ü–∏—è') ||
        recentMessages.includes('–∞–ª–≥–æ—Ä–∏—Ç–º')) {
      return 'technical';
    }

    return 'neutral';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ç–æ–Ω
   */
  detectPreferredTone(history) {
    if (!history || history.length === 0) return 'friendly';

    const recentMessages = history.slice(-3).map(msg => msg.content || msg.message || '').join(' ').toLowerCase();

    // –î–µ–ª–æ–≤–æ–π —Ç–æ–Ω
    if (recentMessages.includes('—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å') || 
        recentMessages.includes('—Ä–µ–∑—É–ª—å—Ç–∞—Ç') ||
        recentMessages.includes('—Ä–µ—à–µ–Ω–∏–µ')) {
      return 'business';
    }

    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π —Ç–æ–Ω
    if (recentMessages.includes('–ø–æ–º–æ–≥–∏') || 
        recentMessages.includes('–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è') ||
        recentMessages.includes('—Å–ª–æ–∂–Ω–æ')) {
      return 'supportive';
    }

    // –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Ç–æ–Ω
    if (recentMessages.includes('–±—ã—Å—Ç—Ä–æ') || 
        recentMessages.includes('–¥–∞–≤–∞–π') ||
        recentMessages.includes('—Å–∫–æ—Ä–µ–µ')) {
      return 'energetic';
    }

    return 'friendly';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  detectTechnicalLevel(history) {
    if (!history || history.length === 0) return 'beginner';

    const recentMessages = history.slice(-5).map(msg => msg.content || msg.message || '').join(' ').toLowerCase();
    
    const technicalTerms = ['api', 'json', '—Ñ—É–Ω–∫—Ü–∏—è', '–º–∞—Å—Å–∏–≤', '–æ–±—ä–µ–∫—Ç', '—Å–µ—Ä–≤–µ—Ä', '–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö', 'sql', 'javascript', 'python'];
    const advancedTerms = ['–º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '–ø–∞—Ç—Ç–µ—Ä–Ω', '—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è', '–∞–ª–≥–æ—Ä–∏—Ç–º'];

    const technicalCount = technicalTerms.filter(term => recentMessages.includes(term)).length;
    const advancedCount = advancedTerms.filter(term => recentMessages.includes(term)).length;

    if (advancedCount >= 2) return 'expert';
    if (technicalCount >= 3) return 'intermediate';
    if (technicalCount >= 1) return 'beginner';
    
    return 'non-technical';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
   */
  detectEmotionalState(history) {
    if (!history || history.length === 0) return 'neutral';

    const lastMessage = (history[history.length - 1]?.content || history[history.length - 1]?.message || '').toLowerCase();

    // –ü–æ–∑–∏—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (lastMessage.includes('–æ—Ç–ª–∏—á–Ω–æ') || 
        lastMessage.includes('—Å–ø–∞—Å–∏–±–æ') ||
        lastMessage.includes('–∫—Ä—É—Ç–æ')) {
      return 'positive';
    }

    // –§—Ä—É—Å—Ç—Ä–∞—Ü–∏—è
    if (lastMessage.includes('–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç') || 
        lastMessage.includes('–æ—à–∏–±–∫–∞') ||
        lastMessage.includes('–ø—Ä–æ–±–ª–µ–º–∞')) {
      return 'frustrated';
    }

    // –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ
    if (lastMessage.includes('–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ') || 
        lastMessage.includes('–∫–∞–∫') ||
        lastMessage.includes('–ø–æ—á–µ–º—É')) {
      return 'curious';
    }

    return 'neutral';
  }

  /**
   * –í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø–µ—Ä—Å–æ–Ω—É
   */
  selectOptimalPersona(style, tone, technicalLevel) {
    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä—Å–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if (technicalLevel === 'expert' && tone === 'business') {
      return PersonaTypes.EXPERT;
    }
    
    if (style === 'casual' && tone === 'friendly') {
      return PersonaTypes.FRIEND;
    }
    
    if (tone === 'supportive' || technicalLevel === 'beginner') {
      return PersonaTypes.MENTOR;
    }
    
    if (tone === 'energetic') {
      return PersonaTypes.CREATIVE;
    }
    
    if (tone === 'business') {
      return PersonaTypes.CONSULTANT;
    }

    return PersonaTypes.MENTOR; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ–±—â–µ–Ω–∏—è
   */
  extractCommunicationPatterns(history) {
    if (!history || history.length < 3) return {};

    return {
      averageMessageLength: this.calculateAverageMessageLength(history),
      questionFrequency: this.calculateQuestionFrequency(history),
      responsePreference: this.detectResponsePreference(history),
      topicSwitchingRate: this.calculateTopicSwitchingRate(history)
    };
  }

  calculateAverageMessageLength(history) {
    const messages = history.map(msg => msg.content || msg.message || '');
    const totalLength = messages.reduce((sum, msg) => sum + msg.length, 0);
    return Math.round(totalLength / messages.length);
  }

  calculateQuestionFrequency(history) {
    const messages = history.map(msg => msg.content || msg.message || '');
    const questionsCount = messages.filter(msg => msg.includes('?') || msg.includes('–∫–∞–∫') || msg.includes('—á—Ç–æ')).length;
    return questionsCount / messages.length;
  }

  detectResponsePreference(history) {
    const lastFewResponses = history.slice(-3);
    // –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã –∏ —Å—Ç–∏–ª—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
    return 'detailed'; // —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
  }

  calculateTopicSwitchingRate(history) {
    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º
    return 0.3; // —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–µ–º
  }
}

/**
 * –ì–ï–ù–ï–†–ê–¢–û–† –ü–†–û–ú–ü–¢–û–í –ü–ï–†–°–û–ù–´
 */
class PersonaPromptGenerator {
  constructor() {
    this.analyzer = new UserPersonaAnalyzer();
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç —Å—Ç–∏–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã
   */
  generatePersonaStylePrompt(userContext) {
    SmartLogger.persona('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å—Ç–∏–ª—è –ø–µ—Ä—Å–æ–Ω—ã');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const preferences = this.analyzer.analyzeUserPreferences(userContext);
    const selectedPersona = preferences.preferredPersona;

    // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const contextTone = userContext.tone || preferences.tone;
    const contextRole = userContext.role || selectedPersona.name;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    const stylePrompt = this.buildStylePrompt(selectedPersona, preferences, contextTone, contextRole);

    SmartLogger.persona(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–µ—Ä—Å–æ–Ω—ã "${selectedPersona.name}"`);

    return {
      prompt: stylePrompt,
      persona: selectedPersona,
      preferences: preferences,
      adaptations: this.generateAdaptations(preferences)
    };
  }

  /**
   * –°—Ç—Ä–æ–∏—Ç –ø—Ä–æ–º–ø—Ç —Å—Ç–∏–ª—è
   */
  buildStylePrompt(persona, preferences, tone, role) {
    const basePrompt = `–û–±—â–∞–π—Å—è –∫–∞–∫ ${role.toLowerCase()} —Å —Ç–æ–Ω–æ–º: ${tone}.`;
    
    const personalityTraits = `–¢–≤–æ–∏ —á–µ—Ä—Ç—ã: ${persona.traits.join(', ')}.`;
    
    const styleGuidelines = this.generateStyleGuidelines(persona, preferences);
    
    const emotionalAdaptation = this.generateEmotionalAdaptation(preferences.emotionalState);
    
    const technicalAdaptation = this.generateTechnicalAdaptation(preferences.technicalLevel);

    return `${basePrompt} ${personalityTraits} ${styleGuidelines} ${emotionalAdaptation} ${technicalAdaptation}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å—Ç–∏–ª—é
   */
  generateStyleGuidelines(persona, preferences) {
    let guidelines = '';

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ —Å—Ç–∏–ª—é —Å–ª–æ–≤–∞—Ä—è
    switch (persona.vocabulary) {
      case 'technical':
        guidelines += '–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é –∏ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏. ';
        break;
      case 'simple':
        guidelines += '–û–±—ä—è—Å–Ω—è–π –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤. ';
        break;
      case 'business':
        guidelines += '–ò—Å–ø–æ–ª—å–∑—É–π –¥–µ–ª–æ–≤—É—é –ª–µ–∫—Å–∏–∫—É, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö. ';
        break;
      default:
        guidelines += '–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —è–∑—ã–∫. ';
    }

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ –¥–ª–∏–Ω–µ –æ—Ç–≤–µ—Ç–æ–≤
    if (preferences.communicationPatterns?.averageMessageLength > 200) {
      guidelines += '–î–∞–≤–∞–π —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ, –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã. ';
    } else if (preferences.communicationPatterns?.averageMessageLength < 50) {
      guidelines += '–ë—É–¥—å –∫—Ä–∞—Ç–æ–∫ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É. ';
    }

    return guidelines;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é
   */
  generateEmotionalAdaptation(emotionalState) {
    switch (emotionalState) {
      case 'frustrated':
        return '–ë—É–¥—å –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ—Ä–ø–µ–ª–∏–≤ –∏ –ø–æ–Ω–∏–º–∞—é—â, –ø—Ä–µ–¥–ª–∞–≥–∞–π –ø–æ—à–∞–≥–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è. ';
      case 'curious':
        return '–ü–æ–æ—â—Ä—è–π –ª—é–±–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –¥–∞–≤–∞–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏ –ø—Ä–∏–º–µ—Ä—ã. ';
      case 'positive':
        return '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –±—É–¥—å —ç–Ω–µ—Ä–≥–∏—á–µ–Ω. ';
      default:
        return '–ù–∞—Å—Ç—Ä–æ–π—Å—è –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –±—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ —ç–º–æ—Ü–∏—è–º. ';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é
   */
  generateTechnicalAdaptation(technicalLevel) {
    switch (technicalLevel) {
      case 'expert':
        return '–ú–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è. ';
      case 'intermediate':
        return '–û–±—ä—è—Å–Ω—è–π —Å —É–º–µ—Ä–µ–Ω–Ω–æ–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π, –ø—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã. ';
      case 'beginner':
        return '–ù–∞—á–∏–Ω–∞–π —Å –æ—Å–Ω–æ–≤, –æ–±—ä—è—Å–Ω—è–π –∫–∞–∂–¥—ã–π —à–∞–≥, –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–∞–ª–æ–≥–∏–∏. ';
      case 'non-technical':
        return '–ò–∑–±–µ–≥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤, –æ–±—ä—è—Å–Ω—è–π –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏–∑ –∂–∏–∑–Ω–∏. ';
      default:
        return '–ê–¥–∞–ø—Ç–∏—Ä—É–π —É—Ä–æ–≤–µ–Ω—å —Ç–µ—Ö–Ω–∏—á–Ω–æ—Å—Ç–∏ –ø–æ–¥ –ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. ';
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
   */
  generateAdaptations(preferences) {
    return {
      responseLength: this.recommendResponseLength(preferences),
      exampleUsage: this.recommendExampleUsage(preferences),
      questionStyle: this.recommendQuestionStyle(preferences),
      followUpStrategy: this.recommendFollowUpStrategy(preferences)
    };
  }

  recommendResponseLength(preferences) {
    const avgLength = preferences.communicationPatterns?.averageMessageLength || 100;
    
    if (avgLength > 200) return 'detailed';
    if (avgLength < 50) return 'concise';
    return 'moderate';
  }

  recommendExampleUsage(preferences) {
    if (preferences.technicalLevel === 'beginner' || preferences.technicalLevel === 'non-technical') {
      return 'frequent';
    }
    return 'moderate';
  }

  recommendQuestionStyle(preferences) {
    const questionFreq = preferences.communicationPatterns?.questionFrequency || 0;
    
    if (questionFreq > 0.5) return 'direct_answers';
    return 'exploratory';
  }

  recommendFollowUpStrategy(preferences) {
    if (preferences.emotionalState === 'curious') return 'proactive';
    if (preferences.style === 'formal') return 'respectful';
    return 'engaging';
  }
}

// –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
const personaGenerator = new PersonaPromptGenerator();

/**
 * –ì–õ–ê–í–ù–ê–Ø –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú–ê–Ø –§–£–ù–ö–¶–ò–Ø
 */
const generatePersonaStylePrompt = (userContext = {}) => {
  try {
    return personaGenerator.generatePersonaStylePrompt(userContext);
  } catch (error) {
    SmartLogger.persona('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω—ã:', error.message);
    
    // Fallback –ø–µ—Ä—Å–æ–Ω–∞
    return {
      prompt: `–û–±—â–∞–π—Å—è –∫–∞–∫ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –ë—É–¥—å –≤–Ω–∏–º–∞—Ç–µ–ª–µ–Ω –∫ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ –µ–≥–æ —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è.`,
      persona: PersonaTypes.MENTOR,
      preferences: { style: 'neutral', tone: 'friendly', technicalLevel: 'intermediate' },
      adaptations: { responseLength: 'moderate', exampleUsage: 'moderate' }
    };
  }
};

/**
 * –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´
 */
const getAvailablePersonas = () => PersonaTypes;

const customizePersona = (basePersona, customizations) => {
  return {
    ...basePersona,
    ...customizations,
    traits: [...basePersona.traits, ...(customizations.traits || [])]
  };
};

module.exports = {
  generatePersonaStylePrompt,
  getAvailablePersonas,
  customizePersona,
  PersonaTypes
};