/**
 * –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤–æ–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
 */

const sharp = require('sharp');

/**
 * –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function analyzeImageColors(imageBuffer) {
  try {
    const image = sharp(imageBuffer);
    const { width, height } = await image.metadata();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∏–∫—Å–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data } = await image.raw().toBuffer({ resolveWithObject: true });
    
    const colorCounts = {};
    const sampleStep = 10; // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 10-–π –ø–∏–∫—Å–µ–ª—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    
    for (let y = 0; y < height; y += sampleStep) {
      for (let x = 0; x < width; x += sampleStep) {
        const pixelIndex = (y * width + x) * 3;
        const r = data[pixelIndex];
        const g = data[pixelIndex + 1];
        const b = data[pixelIndex + 2];
        
        // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ—Ö–æ–∂–∏–µ —Ü–≤–µ—Ç–∞
        const colorKey = `${Math.floor(r/20)*20}-${Math.floor(g/20)*20}-${Math.floor(b/20)*20}`;
        colorCounts[colorKey] = (colorCounts[colorKey] || 0) + 1;
      }
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â–∏–µ —Ü–≤–µ—Ç–∞
    const sortedColors = Object.entries(colorCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([color]) => {
        const [r, g, b] = color.split('-').map(Number);
        return { r, g, b };
      });
    
    return sortedColors;
    
  } catch (error) {
    console.error('‚ùå [REGENERATOR] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤:', error);
    return [{ r: 128, g: 128, b: 128 }];
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ü–≤–µ—Ç–∞–º
 */
function determineImageStyle(colors) {
  const mainColor = colors[0];
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É
  const isDark = colors.every(c => (c.r + c.g + c.b) / 3 < 120);
  const isBright = colors.some(c => (c.r + c.g + c.b) / 3 > 200);
  const hasWarmColors = colors.some(c => c.r > c.g && c.r > c.b);
  const hasCoolColors = colors.some(c => c.b > c.r && c.b > c.g);
  
  let style = '';
  
  if (isDark) {
    style += 'dark atmosphere, moody lighting, ';
  } else if (isBright) {
    style += 'bright, well-lit, cheerful, ';
  }
  
  if (hasWarmColors && !hasCoolColors) {
    style += 'warm color palette, ';
  } else if (hasCoolColors && !hasWarmColors) {
    style += 'cool color palette, ';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å
  const avgSaturation = colors.reduce((sum, c) => {
    const max = Math.max(c.r, c.g, c.b);
    const min = Math.min(c.r, c.g, c.b);
    return sum + (max - min) / max;
  }, 0) / colors.length;
  
  if (avgSaturation > 0.5) {
    style += 'vibrant colors, ';
  } else {
    style += 'muted colors, ';
  }
  
  return style;
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function extractKeywordsFromUrl(imageUrl) {
  try {
    // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL
    const decodedUrl = decodeURIComponent(imageUrl);
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –∏–∑ URL Pollinations
    const promptMatch = decodedUrl.match(/prompt\/(.+?)(?:\?|$)/);
    if (!promptMatch) return [];
    
    const prompt = promptMatch[1];
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–ª–æ–≤–∞
    const words = prompt.split(/[^\w\u0400-\u04FF]+/) // –ª–∞—Ç–∏–Ω–∏—Ü–∞ –∏ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞
      .filter(word => word.length > 2)
      .filter(word => !['high', 'quality', 'detailed', 'professional', 'draw', 'create'].includes(word.toLowerCase()));
    
    return words;
    
  } catch (error) {
    console.error('‚ùå [REGENERATOR] –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:', error);
    return [];
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
 */
function createModifiedDescription(originalKeywords, objectToRemove, imageStyle) {
  // –£–¥–∞–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞
  const removePatterns = [
    objectToRemove,
    objectToRemove.slice(0, -1), // —É–±–∏—Ä–∞–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ
    objectToRemove + '–æ–º',
    objectToRemove + '–∞–º–∏',
    objectToRemove + '–∏'
  ];
  
  let filteredKeywords = originalKeywords.filter(keyword => {
    const lowerKeyword = keyword.toLowerCase();
    return !removePatterns.some(pattern => 
      lowerKeyword.includes(pattern.toLowerCase()) || 
      pattern.toLowerCase().includes(lowerKeyword)
    );
  });
  
  // –ï—Å–ª–∏ —É–¥–∞–ª–∏–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ, –æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ
  if (filteredKeywords.length < 2 && originalKeywords.length > 0) {
    filteredKeywords = originalKeywords.slice(0, 2);
  }
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  let newDescription = filteredKeywords.join(' ');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  newDescription += `, ${imageStyle}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
  newDescription += ' high quality, detailed, professional';
  
  return newDescription;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
 */
function createModifiedDescriptionFromAnalysis(analysis, objectToRemove) {
  // –£–¥–∞–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤
  const filteredAccessories = analysis.accessories.filter(accessory => {
    const lowerAccessory = accessory.toLowerCase();
    const lowerRemove = objectToRemove.toLowerCase();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å–ª–æ–≤–∞
    return !lowerAccessory.includes(lowerRemove) && 
           !lowerRemove.includes(lowerAccessory) &&
           !areRelatedWords(lowerAccessory, lowerRemove);
  });
  
  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
  let newDescription = analysis.mainSubject;
  
  if (filteredAccessories.length > 0) {
    newDescription += ` –≤ ${filteredAccessories.join(', ')}`;
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å
  newDescription += `, ${analysis.style}`;
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
  newDescription += ', high quality, detailed, professional';
  
  console.log(`üîÑ [REGENERATOR] –£–¥–∞–ª—è–µ–º "${objectToRemove}" –∏–∑ "${analysis.accessories.join(', ')}"`);
  console.log(`‚úÖ [REGENERATOR] –û—Å—Ç–∞—é—Ç—Å—è: "${filteredAccessories.join(', ')}"`);
  
  return newDescription;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
 */
function areRelatedWords(word1, word2) {
  const related = {
    '—Å–∞–ø–æ–≥–∏': ['–æ–±—É–≤—å', '–±–æ—Ç–∏–Ω–∫–∏', '—Ç—É—Ñ–ª–∏'],
    '—à–ª—è–ø–∞': ['–≥–æ–ª–æ–≤–Ω–æ–π —É–±–æ—Ä', '–∫–µ–ø–∫–∞', '—à–∞–ø–∫–∞'],
    '–∫—É—Ä—Ç–∫–∞': ['–ø–∏–¥–∂–∞–∫', '–∂–∞–∫–µ—Ç', '–æ–¥–µ–∂–¥–∞'],
    '–æ—á–∫–∏': ['–ª–∏–Ω–∑—ã', '–æ–ø—Ä–∞–≤–∞']
  };
  
  for (const [key, synonyms] of Object.entries(related)) {
    if ((word1.includes(key) || key.includes(word1)) && 
        (synonyms.some(s => word2.includes(s) || s.includes(word2)))) {
      return true;
    }
    if ((word2.includes(key) || key.includes(word2)) && 
        (synonyms.some(s => word1.includes(s) || s.includes(word1)))) {
      return true;
    }
  }
  
  return false;
}

/**
 * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é Python —Å–∫—Ä–∏–ø—Ç–∞
 */
async function analyzeImageWithPython(imageUrl) {
  try {
    const { analyzeImageAdvanced } = require('./advanced-free-vision.cjs');
    
    console.log('üîç [ADVANCED-ANALYZER] –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    const analysis = await analyzeImageAdvanced(imageUrl);
    
    if (analysis.success) {
      // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫ –æ–∂–∏–¥–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
      const adaptedAnalysis = {
        description: analysis.description || '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
        mainSubject: analysis.image_type || '–æ–±—ä–µ–∫—Ç',
        accessories: [...(analysis.accessories || []), ...(analysis.clothing || []), ...(analysis.objects || [])],
        style: analysis.style || '–Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
        colors: analysis.colors || [],
        people: analysis.people || [],
        animals: analysis.animals || [],
        lighting: analysis.lighting || '–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ',
        details: analysis.details || {},
        editingContext: analysis.editingContext || {},
        fullAnalysis: analysis
      };
      
      console.log('‚úÖ [FREE-ANALYZER] –ê–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω');
      return adaptedAnalysis;
    } else {
      console.error('‚ùå [FREE-ANALYZER] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞:', analysis.error);
      return getFallbackAnalysis(imageUrl);
    }
    
  } catch (error) {
    console.error('‚ùå [FREE-ANALYZER] –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
    return getFallbackAnalysis(imageUrl);
  }
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
 */
function extractAccessories(description) {
  const accessories = [];
  const lowerDesc = description.toLowerCase();
  
  if (lowerDesc.includes('—Å–∞–ø–æ–≥')) accessories.push('—Å–∞–ø–æ–≥–∏');
  if (lowerDesc.includes('—à–ª—è–ø')) accessories.push('—à–ª—è–ø–∞');
  if (lowerDesc.includes('–æ—á–∫')) accessories.push('–æ—á–∫–∏');
  if (lowerDesc.includes('–æ–¥–µ–∂–¥')) accessories.push('–æ–¥–µ–∂–¥–∞');
  
  return accessories;
}

/**
 * Fallback –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
 */
function getFallbackAnalysis(imageUrl) {
  const keywords = extractKeywordsFromUrl(imageUrl);
  return {
    description: keywords.join(' ') || '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
    mainSubject: keywords.length > 0 ? keywords[0] : '–æ–±—ä–µ–∫—Ç',
    accessories: keywords.filter(k => ['—Å–∞–ø–æ–≥–∏', '—à–ª—è–ø–∞', '–æ—á–∫–∏'].includes(k.toLowerCase())),
    style: '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
    colors: ['—Å–º–µ—à–∞–Ω–Ω—ã–µ —Ç–æ–Ω–∞']
  };
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–º–Ω–æ–π —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 */
async function regenerateImageWithoutObject(imageUrl, objectToRemove) {
  try {
    console.log(`üîÑ [REGENERATOR] –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
    console.log(`üéØ [REGENERATOR] –£–±–∏—Ä–∞–µ–º –æ–±—ä–µ–∫—Ç: ${objectToRemove}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const analysis = await analyzeImageWithPython(imageUrl);
    
    console.log(`üé® [REGENERATOR] –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, analysis);
    console.log(`üìù [REGENERATOR] –û–ø–∏—Å–∞–Ω–∏–µ: ${analysis.description}`);
    console.log(`üéØ [REGENERATOR] –ì–ª–∞–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç: ${analysis.mainSubject}`);
    console.log(`üëï [REGENERATOR] –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã: ${analysis.accessories.join(', ')}`);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const { editImageReally } = require('./real-image-editor.cjs');
    const realEditResult = await editImageReally(imageUrl, `—É–±–µ—Ä–∏ ${objectToRemove}`, analysis);
    
    if (realEditResult.success) {
      console.log('‚úÖ [REGENERATOR] –†–µ–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
      console.log('üîó [REGENERATOR] URL —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', realEditResult.imageUrl);
      console.log('üìÅ [REGENERATOR] –ü—É—Ç—å —Ñ–∞–π–ª–∞:', realEditResult.imagePath);
      console.log('üìä [REGENERATOR] –ü–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', realEditResult);
      
      return {
        success: true,
        imageUrl: realEditResult.imageUrl,
        message: `–£–¥–∞–ª–µ–Ω "${objectToRemove}" —Å –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`,
        originalDescription: analysis.description,
        editType: 'real_edit',
        removedObject: objectToRemove
      };
    }
    
    // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    console.log('üîÑ [REGENERATOR] –ü–µ—Ä–µ–∫–ª—é—á–∞—é—Å—å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    const newDescription = createModifiedDescriptionFromAnalysis(analysis, objectToRemove);
    console.log(`üìù [REGENERATOR] –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: ${newDescription}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const aiImageGenerator = require('./ai-image-generator');
    const result = await aiImageGenerator.generateImage(newDescription, 'realistic');
    
    if (result.success) {
      return {
        success: true,
        imageUrl: result.imageUrl,
        message: `–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ "${objectToRemove}", —Å–æ—Ö—Ä–∞–Ω–∏–≤ ${analysis.mainSubject} –∏ —Å—Ç–∏–ª—å`,
        originalDescription: analysis.description,
        newDescription: newDescription,
        editType: 'regeneration',
        removedObject: objectToRemove
      };
    } else {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    }
    
  } catch (error) {
    console.error('‚ùå [REGENERATOR] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    return {
      success: false,
      error: error.message,
      message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ'
    };
  }
}

module.exports = {
  regenerateImageWithoutObject,
  analyzeImageColors,
  determineImageStyle,
  extractKeywordsFromUrl
};