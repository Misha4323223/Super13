/**
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –∫ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
 */

const express = require('express');
const path = require('path');
const fs = require('fs').promises;
const router = express.Router();

// –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
const SmartLogger = {
  route: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`üéØ [${timestamp}] SMART ROUTER: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  provider: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`ü§ñ [${timestamp}] PROVIDER: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  success: (message, data) => {
    const timestamp = new Date().toISOString();
    console.log(`‚úÖ [${timestamp}] SUCCESS: ${message}`, data ? JSON.stringify(data, null, 2) : '');
  },
  error: (message, error) => {
    const timestamp = new Date().toISOString();
    console.error(`‚ùå [${timestamp}] ERROR: ${message}`, error);
  }
};

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
const chatFreeProvider = require('./chatfree-provider');

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ImageTracerJS –Ω–∞ –ø–æ—Ä—Ç—É 5006
const advancedVectorizer = {
  vectorizeImage: () => Promise.resolve({ success: false, error: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ImageTracerJS API –Ω–∞ –ø–æ—Ä—Ç—É 5006' })
};

const vectorizerManager = require('./vectorizer-manager');
const printOptimizer = require('./print-optimizer');
const deepspeekProvider = require('./deepspeek-provider');
const claudeProvider = require('./claude-provider');
const deepInfraProvider = require('./deepinfra-provider');
const pythonProviderRoutes = require('./python_provider_routes');
const embroideryHandler = require('./embroidery-chat-handler');
const aiEmbroideryPipeline = require('./ai-embroidery-pipeline');
const webSearchProvider = require('./web-search-provider');
const chatMemory = require('./chat-memory');
const intelligentProcessor = require('./intelligent-chat-processor.cjs');
const semanticIntegration = require('./semantic-integration-layer.cjs');
const conversationEngine = require('./conversation-engine.cjs');
const { globalSemanticCache } = require('./semantic-cache.cjs');
const { globalQueueManager } = require('./semantic-queue.cjs');
const { globalHealthChecker } = require('./semantic-healthcheck.cjs');
const { globalPerformanceOptimizer } = require('./semantic-performance-optimizer.cjs');

// –§–ê–ó–ê 1: –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const naturalLanguageGenerator = require('./semantic-memory/natural-language-generator.cjs');
const autonomousLearningEngine = require('./semantic-memory/autonomous-learning-engine.cjs');
const predictiveSystem = require('./semantic-memory/predictive-system.cjs');
// const svgPrintConverter = require('./svg-print-converter'); // –ó–∞–º–µ–Ω–µ–Ω –Ω–∞ advancedVectorizer

/**
 * AI —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */
async function getAIResponseWithSearch(userQuery, options = {}) {
  try {
    SmartLogger.route(`ü§ñ –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç AI —Å –ø–∞–º—è—Ç—å—é –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º`);

    // ===== –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ï–î–ò–ù–´–ú –ú–û–î–£–õ–ï–ú –°–û–ó–ù–ê–ù–ò–Ø =====
    SmartLogger.route(`üß† –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° CONVERSATION-ENGINE (–∏–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    let healthStatus;
    try {
      healthStatus = globalHealthChecker.checkSystemHealth();
      SmartLogger.route(`üíä –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: ${healthStatus.status} (${healthStatus.summary?.healthy || 'N/A'}/${healthStatus.summary?.total || 'N/A'})`);
    } catch (healthError) {
      SmartLogger.route(`‚ö†Ô∏è Healthcheck –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${healthError.message}`);
      healthStatus = { status: 'unknown', summary: { healthy: 0, total: 0 } };
    }

    try {
      // –ò–°–ü–û–õ–¨–ó–£–ï–ú –ï–î–ò–ù–´–ô –ú–û–î–£–õ–¨ –°–û–ó–ù–ê–ù–ò–Ø –í–ú–ï–°–¢–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–Ø
      SmartLogger.route(`üöÄ –î–ï–õ–ï–ì–ò–†–£–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ï–î–ò–ù–û–ú–£ –ú–û–î–£–õ–Æ –°–û–ó–ù–ê–ù–ò–Ø`);
      
      const consciousnessResult = await conversationEngine.processUserInput(userQuery, {
        userId: options.userId,
        sessionId: options.sessionId,
        conversationHistory: options.messages || [],
        userProfile: options.userProfile,
        sessionContext: options.sessionContext || {},
        messageCount: options.messageCount || 0
      });

      if (consciousnessResult && consciousnessResult.reply) {
        SmartLogger.route(`‚úÖ –ï–î–ò–ù–´–ô –ú–û–î–£–õ–¨ –°–û–ó–ù–ê–ù–ò–Ø –û–ë–†–ê–ë–û–¢–ê–õ –ó–ê–ü–†–û–°`);
        SmartLogger.route(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –º–æ–¥—É–ª–µ–π: ${consciousnessResult.metadata?.modulesUsed?.length || 0}`);
        SmartLogger.route(`üéØ –ò—Ç–µ—Ä–∞—Ü–∏–π: ${consciousnessResult.metadata?.iterationCount || 0}`);
        SmartLogger.route(`üíØ –ö–∞—á–µ—Å—Ç–≤–æ: ${consciousnessResult.quality || 'N/A'}/10`);

        return {
          success: true,
          response: consciousnessResult.reply,
          provider: 'BOOOMERANGS-Consciousness',
          semantic: true,
          autonomous: true,
          consciousness: true,

          // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–∑–Ω–∞–Ω–∏—è
          generation: {
            type: 'consciousness',
            quality: consciousnessResult.quality,
            confidence: consciousnessResult.confidence,
            iterationCount: consciousnessResult.metadata?.iterationCount || 0
          },

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          performance: {
            processingTime: consciousnessResult.metadata?.processingTime || 0,
            activeModules: consciousnessResult.metadata?.modulesUsed?.length || 0,
            cacheHit: false,
            systemHealth: healthStatus.status,
            autonomousGeneration: true,
            learningEnabled: consciousnessResult.metadata?.learningUpdated || false,
            predictionsEnabled: consciousnessResult.metadata?.predictionsGenerated || false,
            semanticDepth: consciousnessResult.metadata?.semanticDepth || 1,
            fallbackMode: false
          }
        };
      } else {
        SmartLogger.route(`‚ö†Ô∏è –ï–¥–∏–Ω—ã–π –º–æ–¥—É–ª—å —Å–æ–∑–Ω–∞–Ω–∏—è –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –ª–æ–≥–∏–∫—É`);
      }

    } catch (consciousnessError) {
      SmartLogger.route(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –µ–¥–∏–Ω–æ–≥–æ –º–æ–¥—É–ª—è —Å–æ–∑–Ω–∞–Ω–∏—è: ${consciousnessError.message}`);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
    }

    // ===== –†–ï–ó–ï–†–í–ù–ê–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø =====
    SmartLogger.route(`üîÑ –†–ï–ó–ï–†–í–ù–ê–Ø –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø`);
    
    try {
      // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
      const semanticAnalysis = await globalQueueManager.addTask('fallback-semantic-analysis', async () => {
        return await semanticIntegration.analyzeWithSemantics(userQuery, {
          ...options,
          fullAnalysis: true,
          activateAllModules: true
        });
      }, { priority: 8 });

      // –§–ê–ó–ê 1: –ê–í–¢–û–ù–û–ú–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–û–í (–†–ï–ó–ï–†–í–ù–ê–Ø)
      SmartLogger.route(`üöÄ –†–ï–ó–ï–†–í–ù–ê–Ø –ê–í–¢–û–ù–û–ú–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø`);

      // 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞
      const nlgResponse = await naturalLanguageGenerator.generateResponse(
        userQuery, // –ü–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        { 
          messages: options.messages || [], 
          userProfile: options.userProfile,
          sessionId: options.sessionId,
          userId: options.userId,
          messageCount: options.messageCount || 0,
          semanticContext: semanticAnalysis.semanticResult
        }
      );

      if (nlgResponse && nlgResponse.response) {
        SmartLogger.route(`üìù –†–µ–∑–µ—Ä–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–ª –æ—Ç–≤–µ—Ç –¥–ª–∏–Ω–æ–π ${nlgResponse.response.length} —Å–∏–º–≤–æ–ª–æ–≤`);

        // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Ç–≤–µ—Ç
        const extractedResponse = nlgResponse.response || nlgResponse.message || nlgResponse.text || 
          "–ü—Ä–∏–≤–µ—Ç! –Ø BOOOMERANGS AI, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω?";

        SmartLogger.route(`üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –æ—Ç–≤–µ—Ç: "${extractedResponse.substring(0, 100)}..."`);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –†–ï–ó–ï–†–í–ù–´–ô –æ—Ç–≤–µ—Ç
        return {
          success: true,
          response: extractedResponse,
          provider: 'FALLBACK_SEMANTIC_SYSTEM',
          semantic: true,
          autonomous: false, // –†–µ–∑–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞

          // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          generation: {
            type: nlgResponse.metadata?.responseType || 'fallback',
            structure: nlgResponse.metadata?.structure,
            processingSteps: nlgResponse.metadata?.processingSteps || []
          },

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          performance: {
            processingTime: semanticAnalysis.processingTime || 0,
            activeModules: semanticAnalysis.semanticResult?.active_modules?.length || 0,
            cacheHit: false,
            systemHealth: healthStatus.status,
            autonomousGeneration: false,
            learningEnabled: false, // –û—Ç–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
            predictionsEnabled: false, // –û—Ç–∫–ª—é—á–µ–Ω–æ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ
            fallbackMode: true
          }
        };
      } else {
        SmartLogger.route(`‚ö†Ô∏è –†–µ–∑–µ—Ä–≤–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç`);
      }

    } catch (semanticError) {
      SmartLogger.route(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: ${semanticError.message}`);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ª–æ–≥–∏–∫–∏
    }
    // ===== –ö–û–ù–ï–¶ –°–ï–ú–ê–ù–¢–ò–ß–ï–°–ö–û–ô –ò–ù–¢–ï–ì–†–ê–¶–ò–ò =====

    // ===== –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =====
    SmartLogger.route(`üîç –ü–†–û–í–ï–†–ö–ê –°–ü–ï–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ù–´–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–µ–º–∞–Ω—Ç–∏–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞
    try {
      const websiteAnalyzer = require('./accurate-website-analyzer.cjs');
      const detection = websiteAnalyzer.detectWebsiteAnalysisIntent(userQuery);

      if (detection.isWebsiteAnalysis && detection.confidence >= 60) {
        SmartLogger.route(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–∞ (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${detection.confidence}%)`);

        const analysisResult = await websiteAnalyzer.analyzeWebsite(userQuery, options);

        if (analysisResult.success) {
          SmartLogger.route(`‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–∞–π—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ`);
          return {
            success: true,
            response: analysisResult.response,
            provider: 'WebsiteAnalyzer',
            category: 'website_analysis',
            url: analysisResult.url,
            websiteData: analysisResult.businessAnalysis
          };
        }
      }
    } catch (websiteError) {
      SmartLogger.route(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–π—Ç–æ–≤: ${websiteError.message}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏
    const sessionId = options.sessionId;
    let sessionContext = { context: chatMemory.AI_CAPABILITIES, messageCount: 0 };

    if (sessionId) {
      sessionContext = await chatMemory.getSessionContext(sessionId, 5);
      SmartLogger.route(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–µ—Å—Å–∏–∏ ${sessionId}: ${sessionContext.messageCount} —Å–æ–æ–±—â–µ–Ω–∏–π`);
    }

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const requestAnalysis = chatMemory.analyzeRequestWithContext(userQuery, sessionContext);
    SmartLogger.route(`üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:`, requestAnalysis);

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ SVG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é  
    const queryLowerForSvg = userQuery.toLowerCase();
    const svgKeywords = ['—Å–æ—Ö—Ä–∞–Ω–∏ –≤ svg', '—Å–æ—Ö—Ä–∞–Ω–∏ svg', '—ç–∫—Å–ø–æ—Ä—Ç –≤ svg', '–∫–æ–Ω–≤–µ—Ä—Ç –≤ svg', '—Å–¥–µ–ª–∞–π svg', '—Å–æ—Ö—Ä–∞–Ω–∏ –≤ —Å–≤–≥', '—Å–æ—Ö—Ä–∞–Ω–∏ —Å–≤–≥'];
    const isSvgRequest = svgKeywords.some(keyword => queryLowerForSvg.includes(keyword));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±–∞–∑–æ–≤—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–µ—á–∞—Ç–∏
    const basicPrintKeywords = [
      '–æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è –ø–µ—á–∞—Ç–∏', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—á–∞—Ç–∏',
      '–¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏', '–¥–ª—è dtf', '–¥–ª—è —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç–Ω–æ–π –ø–µ—á–∞—Ç–∏', '–¥–ª—è —Å—É–±–ª–∏–º–∞—Ü–∏–∏',
      '–ø–µ—á–∞—Ç—å –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫–µ', '–ø–µ—á–∞—Ç—å –Ω–∞ —Ç–∫–∞–Ω–∏', '–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –ø–µ—á–∞—Ç–∏'
    ];
    const isPrintOptRequest = basicPrintKeywords.some(keyword => queryLowerForSvg.includes(keyword));

    // –ö–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—É—Å–∫–∞—é—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    const advancedPrintKeywords = [
      '–ø–æ–¥–≥–æ—Ç–æ–≤—å –¥–ª—è –ø–µ—á–∞—Ç–∏'  // –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª
    ];
    const isAdvancedPrintRequest = advancedPrintKeywords.some(keyword => queryLowerForSvg.includes(keyword));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É (–±–∞–∑–æ–≤–∞—è + –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è)
    const fullProcessKeywords = [
      '—Å–æ–∑–¥–∞–π –¥–ª—è –ø–µ—á–∞—Ç–∏', '–ø–æ–ª–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', '–≤—Å—ë –¥–ª—è –ø–µ—á–∞—Ç–∏',
      '–∫–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', '–ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª'
    ];
    const isFullProcessRequest = fullProcessKeywords.some(keyword => queryLowerForSvg.includes(keyword));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    const vectorKeywords = [
      '–≤–µ–∫—Ç–æ—Ä–∏–∑—É–π', '—Å–¥–µ–ª–∞–π –≤–µ–∫—Ç–æ—Ä', '—Å–æ–∑–¥–∞–π –∫–æ–Ω—Ç—É—Ä—ã', '–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è',
      '—Ç—Ä–∞—Ñ–∞—Ä–µ—Ç', '–∫–æ–Ω—Ç—É—Ä—ã –¥–ª—è –ø–µ—á–∞—Ç–∏', '—á–µ—Ä–Ω–æ-–±–µ–ª—ã–π –≤–∞—Ä–∏–∞–Ω—Ç',
      '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ',
      '–ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞', '–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ', 'svg', '—Å–≤–≥',
      '–≤ –≤–µ–∫—Ç–æ—Ä—ã', '–≤ –≤–µ–∫—Ç–æ—Ä', '–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ svg', '–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ svg',
      '—Å–¥–µ–ª–∞–π svg', '–ø–µ—Ä–µ–≤–µ–¥–∏ –≤ svg', '–≤–µ–∫—Ç–æ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç', 'trace', '—Ç—Ä–µ–π—Å'
    ];

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 5006
    const directVectorizerKeywords = ['–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä 5006', '–≤–µ–∫—Ç–æ—Ä 5006'];
    const isDirectVectorizerRequest = directVectorizerKeywords.some(keyword => queryLowerForSvg.includes(keyword));

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä—É –Ω–∞ –ø–æ—Ä—Ç—É 5006
    if (isDirectVectorizerRequest) {
      let imageUrl = null;

      // –í—Å–µ–≥–¥–∞ –∏—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏
      if (options.sessionId) {
        try {
          const sessionContext = await chatMemory.getSessionContext(options.sessionId, 10);
          const lastImageMatch = sessionContext.context.match(/https:\/\/image\.pollinations\.ai\/prompt\/[^\s\)]+/);
          if (lastImageMatch) {
            imageUrl = lastImageMatch[0];
            SmartLogger.route(`üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–µ—Å—Å–∏–∏: ${imageUrl.substring(0, 100)}...`);
          }
        } catch (error) {
          SmartLogger.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏:`, error);
        }
      }

      if (imageUrl) {
        SmartLogger.route(`üéØ –ü–†–Ø–ú–û–ô –ó–ê–ü–†–û–° –ö –í–ï–ö–¢–û–†–ò–ó–ê–¢–û–†–£ 5006`);

        try {
          const fetch = require('node-fetch');

          SmartLogger.route(`üåê –û—Ç–ø—Ä–∞–≤–ª—è–µ–º URL –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä: ${imageUrl.substring(0, 100)}...`);

          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º JSON –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ /convert-url
          const requestData = {
            imageUrl: imageUrl,
            quality: 'simple',
            outputFormat: 'svg'
          };

        const response = await fetch('http://localhost:5006/vectorize-url', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(requestData),
          timeout: 30000
        });

        if (response.ok) {
          const result = await response.json();

          if (result.success) {
            // –£–±–∏—Ä–∞–µ–º –ø—Ä–µ–≤—å—é SVG, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫—É
            let svgPreview = '';
            const svgContent = result.data?.svgContent || result.result?.svgContent;
            if (svgContent) {
              console.log('Smart-router: SVG –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞:', svgContent.length);
            }

            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è ImageTracerJS
            const filename = result.data?.filename || result.result?.filename;
            const fileUrl = result.data?.url || `/output/${filename}`;

            const svgResponse = `‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —á–µ—Ä–µ–∑ ImageTracerJS!

üìÑ –§–æ—Ä–º–∞—Ç: SVG (12 —Ü–≤–µ—Ç–æ–≤ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)  
üé® –ö–∞—á–µ—Å—Ç–≤–æ: ImageTracerJS v1.2.6
üìÅ –§–∞–π–ª: ${filename}${svgPreview}
üîó [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${fileUrl})
üì• [–°–∫–∞—á–∞—Ç—å SVG —Ñ–∞–π–ª](${fileUrl}?download=true)`;

            return {
              success: true,
              response: svgResponse,
              provider: 'ImageTracerJS-5006',
              model: 'imagetracer-vectorizer',
              category: 'vectorization',
              vectorUrl: fileUrl,
              svgContent: svgContent
            };
          } else {
            throw new Error(result.error || '–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
          }
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        SmartLogger.error(`–û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä—É 5006:`, error);
        return {
          success: false,
          response: `‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5006: ${error.message}`,
          provider: 'Vectorizer-5006',
          error: error.message
        };
      }
    } else {
        // –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–µ—Å—Å–∏–∏
        return {
          success: false,
          response: `‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n\n–°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É "–Ω—É–∂–µ–Ω –≤–µ–∫—Ç–æ—Ä".`,
          provider: 'Vectorizer-5006',
          error: 'No image found in session history'
        };
      }
    }

    // –ù–æ–≤—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
    const advancedVectorKeywords = [
      '—Å—É–ø–µ—Ä –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–ø—Ä–æ—Ñ–∏ –∫–∞—á–µ—Å—Ç–≤–æ', '—É–ª—å—Ç—Ä–∞ svg', '–ø—Ä–µ–º–∏—É–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–º–Ω–æ–≥–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–ø—Ä–µ–≤—å—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏', '–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ–±–∞', '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ eps',
      '–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ pdf', '–ø–∞–∫–µ—Ç–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–ø–æ—Ç—Ä–µ–π—Å', '–¥–µ—Ç–∞–ª—å–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      '–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '—Ç–æ—á–Ω–∞—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è', '–∞–≤—Ç–æ—Ç—Ä–µ–π—Å', '–∞–≤—Ç–æ–≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'
    ];

    const isVectorRequest = vectorKeywords.some(keyword => queryLowerForSvg.includes(keyword));
    const isAdvancedVectorRequest = advancedVectorKeywords.some(keyword => queryLowerForSvg.includes(keyword));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –Ω–∞ —Ü–≤–µ—Ç–æ–≤—É—é —Å–µ–ø–∞—Ä–∞—Ü–∏—é
    const colorSeparationKeywords = [
      '—Å–µ–ø–∞—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤', '—Ü–≤–µ—Ç–æ–≤–∞—è —Å–µ–ø–∞—Ä–∞—Ü–∏—è', '—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤',
      '—Å–µ–ø–∞—Ä–∏—Ä—É–π —Ü–≤–µ—Ç–∞', '—Ä–∞–∑–¥–µ–ª–∏ –Ω–∞ —Ü–≤–µ—Ç–∞', '—Å–µ–ø–∞—Ä–∞—Ü–∏—è',
      '–ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ü–≤–µ—Ç–æ–≤—É—é —Å–µ–ø–∞—Ä–∞—Ü–∏—é', '–ø–æ–≤—Ç–æ—Ä–∏ —Å–µ–ø–∞—Ä–∞—Ü–∏—é',
      '—Å–¥–µ–ª–∞–π —Å–µ–ø–∞—Ä–∞—Ü–∏—é', '–≤—ã–ø–æ–ª–Ω–∏ —Å–µ–ø–∞—Ä–∞—Ü–∏—é', '–∑–∞–ø—É—Å—Ç–∏ —Å–µ–ø–∞—Ä–∞—Ü–∏—é'
    ];

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const exactColorSeparationMatch = queryLowerForSvg === '—Å–µ–ø–∞—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–æ–≤';
    const isColorSeparationRequest = colorSeparationKeywords.some(keyword => queryLowerForSvg.includes(keyword)) || exactColorSeparationMatch;

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    console.log(`üîç –ü–û–õ–ù–ê–Ø –û–¢–õ–ê–î–ö–ê:`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å: "${userQuery}"`);
    console.log(`   –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä: "${queryLowerForSvg}"`);
    console.log(`   –°–æ–¥–µ—Ä–∂–∏—Ç "—Å–µ–ø–∞—Ä–∞—Ü–∏—è": ${queryLowerForSvg.includes('—Å–µ–ø–∞—Ä–∞—Ü–∏—è')}`);
    console.log(`   –°–æ–¥–µ—Ä–∂–∏—Ç "—Ü–≤–µ—Ç–æ–≤": ${queryLowerForSvg.includes('—Ü–≤–µ—Ç–æ–≤')}`);
    console.log(`   –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${exactColorSeparationMatch}`);
    console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏: ${isColorSeparationRequest}`);

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if (isColorSeparationRequest) {
      SmartLogger.route(`üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ü–≤–µ—Ç–æ–≤—É—é —Å–µ–ø–∞—Ä–∞—Ü–∏—é: "${userQuery}"`);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (isAdvancedVectorRequest) {
      SmartLogger.route(`üöÄ –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: "${userQuery}"`);

      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏
      let lastImageUrl = null;

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL
      const { db } = require('./db');
      const { aiMessages } = require('../shared/schema');
      const { eq } = require('drizzle-orm');

      const messages = await db
        .select()
        .from(aiMessages)
        .where(eq(aiMessages.sessionId, sessionId))
        .orderBy(aiMessages.createdAt);

      if (messages && messages.length > 0) {
        for (let i = messages.length - 1; i >= 0; i--) {
          const msg = messages[i];
          if (msg.content && msg.sender === 'ai' && (msg.content.includes('![') || msg.content.includes('https://image.pollinations.ai'))) {
            const imageMatch1 = msg.content.match(/!\[.*?\]\((https:\/\/image\.pollinations\.ai[^)]+)\)/);
            const imageMatch2 = msg.content.match(/(https:\/\/image\.pollinations\.ai[^\s\)]+)/);
            const imageMatch = imageMatch1 || imageMatch2;

            if (imageMatch) {
              lastImageUrl = imageMatch[1];
              break;
            }
          }
        }
      }

      if (lastImageUrl) {
        try {
          const advancedVectorizer = require('../advanced-vectorizer.cjs');

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
          SmartLogger.route('üé® –†–µ–∂–∏–º: –®–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è (–º–∞–∫—Å–∏–º—É–º 5 —Ü–≤–µ—Ç–æ–≤, –¥–æ 20–ú–ë)');

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          const fetch = require('node-fetch');
          const response = await fetch(lastImageUrl);
          const imageBuffer = await response.buffer();

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏
          let result;
          try {
            SmartLogger.route('üé® –ó–∞–ø—É—Å–∫ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏');

            result = await advancedVectorizer.silkscreenVectorize(
              imageBuffer,
              {
                outputFormat: 'svg',
                maxFileSize: 20 * 1024 * 1024 // 20–ú–ë –º–∞–∫—Å–∏–º—É–º
              }
            );

            if (!result.success) {
              throw new Error(result.error || '–û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
            }
          } catch (vectorError) {
            SmartLogger.route('–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback');
            // Fallback –∫ –±–∞–∑–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            result = await advancedVectorizer.vectorizeImage(
              imageBuffer,
              'user_image',
              { outputFormat: 'svg' }
            );
          }

          if (result.success) {
            let responseText = `‚úÖ **–í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n`;
            responseText += `üìÑ **–§–æ—Ä–º–∞—Ç:** SVG (–º–∞–∫—Å–∏–º—É–º 5 —Ü–≤–µ—Ç–æ–≤)\n`;
            responseText += `üìè **–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:** ${(result.fileSize / 1024).toFixed(1)}KB\n`;
            if (result.optimized) {
              responseText += `üóúÔ∏è **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω:** –¥–æ 20–ú–ë\n`;
            }
            responseText += `üé® **–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–µ—á–∞—Ç–∏**\n\n`;

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ
            responseText += `üìä **–î–µ—Ç–∞–ª–∏:**\n`;
            responseText += `‚Ä¢ –†–µ–∂–∏–º: –®–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è\n`;
            responseText += `‚Ä¢ –¶–≤–µ—Ç–∞: –ú–∞–∫—Å–∏–º—É–º 5\n`;
            responseText += `‚Ä¢ –õ–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞: 20–ú–ë\n\n`;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º SVG —Ñ–∞–π–ª –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
            const crypto = require('crypto');
            const imageId = crypto.randomBytes(8).toString('hex');
            const filename = `vectorized_${imageId}.svg`;
            const outputPath = path.join(__dirname, '..', 'output', 'vectorizer', filename);

            try {
              await fs.writeFile(outputPath, result.svgContent, 'utf8');

              responseText += `üìÅ **–§–∞–π–ª –≥–æ—Ç–æ–≤:**\n`;
              responseText += `üîó [–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å SVG](/output/vectorizer/${filename})\n`;
              responseText += `üì• [–°–∫–∞—á–∞—Ç—å SVG](/output/vectorizer/${filename}?download=true)\n\n`;
            } catch (writeError) {
              console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', writeError);
              responseText += `‚ö†Ô∏è –§–∞–π–ª —Å–æ–∑–¥–∞–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º\n\n`;
            }

            responseText += `‚úÖ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`;

            return {
              success: true,
              response: responseText,
              provider: 'advanced-vectorizer'
            };
          } else {
            return {
              success: false,
              response: `‚ùå –û—à–∏–±–∫–∞ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${result.error}`,
              provider: 'advanced-vectorizer'
            };
          }

        } catch (error) {
          SmartLogger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
          return {
            success: false,
            response: `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${error.message}`,
            provider: 'advanced-vectorizer'
          };
        }
      } else {
        return {
          success: false,
          response: '‚ùå –î–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ',
          provider: 'advanced-vectorizer'
        };
      }
    }

    if (isSvgRequest) {
      SmartLogger.route(`üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ SVG –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ`);

      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏
      let lastImageUrl = null;

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL
      const { db } = require('./db');
      const { aiMessages } = require('../shared/schema');
      const { eq } = require('drizzle-orm');

      const messages = await db
        .select()
        .from(aiMessages)
        .where(eq(aiMessages.sessionId, sessionId))
        .orderBy(aiMessages.createdAt);

      SmartLogger.route(`üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:`, {
        sessionId,
        messagesCount: messages?.length || 0
      });

      if (messages && messages.length > 0) {
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö AI
        for (let i = messages.length - 1; i >= 0; i--) {
          const msg = messages[i];
          SmartLogger.route(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ${i}:`, {
            sender: msg.sender,
            hasContent: !!msg.content,
            contentLength: msg.content?.length || 0,
            hasImage: msg.content?.includes('![') || false,
            hasPollinations: msg.content?.includes('https://image.pollinations.ai') || false
          });

          if (msg.content && msg.sender === 'ai' && (msg.content.includes('![') || msg.content.includes('https://image.pollinations.ai'))) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const imageMatch1 = msg.content.match(/!\[.*?\]\((https:\/\/image\.pollinations\.ai[^)]+)\)/);
            const imageMatch2 = msg.content.match(/(https:\/\/image\.pollinations\.ai[^\s\)]+)/);

            const imageMatch = imageMatch1 || imageMatch2;

            if (imageMatch) {
              lastImageUrl = imageMatch[1];
              SmartLogger.route(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${lastImageUrl.substring(0, 80)}...`);
              break;
            }
          }
        }
      }

      SmartLogger.route(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:`, {
        found: !!lastImageUrl,
        url: lastImageUrl ? lastImageUrl.substring(0, 50) + '...' : null
      });

      if (lastImageUrl) {
        try {
          SmartLogger.route(`üé® –°–æ–∑–¥–∞–µ–º SVG —Ñ–∞–π–ª—ã –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);
          const printType = svgPrintConverter.detectPrintTypeFromRequest(userQuery);
          const svgResult = await svgPrintConverter.convertImageToPrintSVG(
            lastImageUrl, 
            `converted-${Date.now()}`, 
            printType,
            userQuery
          );

          if (svgResult.success) {
            let response = `–ì–æ—Ç–æ–≤–æ! –Ø –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ SVG —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—á–∞—Ç–∏:\n\nüìÑ **–§–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã:**`;

            svgResult.result.files.forEach(file => {
              if (file.type === 'screenprint') {
                response += `\n‚Ä¢ [SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏](${file.url}) - ${(file.size / 1024).toFixed(1)} –ö–ë`;
              } else if (file.type === 'dtf') {
                response += `\n‚Ä¢ [SVG –¥–ª—è DTF –ø–µ—á–∞—Ç–∏](${file.url}) - ${(file.size / 1024).toFixed(1)} –ö–ë`;
              } else if (file.type === 'colorscheme') {
                response += `\n‚Ä¢ [–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞](${file.url}) - –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤`;
              }
            });

            if (svgResult.result.recommendations.screenprint) {
              response += `\n\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏:** ${svgResult.result.recommendations.screenprint.notes}`;
            }
            if (svgResult.result.recommendations.dtf) {
              response += `\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è DTF:** ${svgResult.result.recommendations.dtf.notes}`;
            }

            if (svgResult.result.aiAnalysis && svgResult.result.aiAnalysis.recommendations) {
              response += `\n\nü§ñ **–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI:** ${svgResult.result.aiAnalysis.recommendations}`;
            }

            return {
              success: true,
              response: response,
              provider: 'SVG_Print_Converter',
              searchUsed: false,
              svgGenerated: true,
              svgFiles: svgResult.result.files
            };
          } else {
            return {
              success: true,
              response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SVG —Ñ–∞–π–ª–æ–≤: ${svgResult.error}`,
              provider: 'SVG_Print_Converter',
              searchUsed: false,
              svgGenerated: false
            };
          }
        } catch (error) {
          SmartLogger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SVG —Ñ–∞–π–ª–æ–≤:', error);
          return {
            success: true,
            response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
            provider: 'SVG_Print_Converter',
            searchUsed: false,
            svgGenerated: false
          };
        }
      } else {
        return {
          success: true,
          response: `–Ø –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –Ω–∞—à–µ–π –±–µ—Å–µ–¥–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ SVG. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ SVG —Ñ–æ—Ä–º–∞—Ç–µ.`,
          provider: 'SVG_Print_Converter',
          searchUsed: false,
          svgGenerated: false
        };
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏
    if (isPrintOptRequest || isVectorRequest || isFullProcessRequest || isAdvancedPrintRequest || isColorSeparationRequest) {
      SmartLogger.route(`üñ®Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–ª—è –ø–µ—á–∞—Ç–∏`);

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π —Å–µ–ø–∞—Ä–∞—Ü–∏–∏
      if (isColorSeparationRequest) {
        SmartLogger.route(`üé® –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ü–≤–µ—Ç–æ–≤—É—é —Å–µ–ø–∞—Ä–∞—Ü–∏—é!`);
      }

      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏
      let lastImageUrl = null;

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL
      const { db } = require('./db');
      const { aiMessages } = require('../shared/schema');
      const { eq } = require('drizzle-orm');

      const messages = await db
        .select()
        .from(aiMessages)
        .where(eq(aiMessages.sessionId, sessionId))
        .orderBy(aiMessages.createdAt);

      SmartLogger.route(`üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:`, {
        sessionId,
        messagesCount: messages?.length || 0
      });

      if (messages && messages.length > 0) {
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö AI
        for (let i = messages.length - 1; i >= 0; i--) {
          const msg = messages[i];

          if (msg.content && msg.sender === 'ai' && (msg.content.includes('![') || msg.content.includes('https://image.pollinations.ai'))) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const imageMatch1 = msg.content.match(/!\[.*?\]\((https:\/\/image\.pollinations\.ai[^)]+)\)/);
            const imageMatch2 = msg.content.match(/(https:\/\/image\.pollinations\.ai[^\s\)]+)/);

            const imageMatch = imageMatch1 || imageMatch2;

            if (imageMatch) {
              lastImageUrl = imageMatch[1];
              SmartLogger.route(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${lastImageUrl.substring(0, 80)}...`);
              break;
            }
          }
        }
      }

      if (lastImageUrl) {
        try {
          SmartLogger.route(`üñ®Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏`);

          // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
          let printType = 'both'; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏—è –∏ DTF
          let useAdvanced = false;

          if (queryLowerForSvg.includes('—à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏') || queryLowerForSvg.includes('—Ç—Ä–∞—Ñ–∞—Ä–µ—Ç')) {
            printType = 'screen-print';
          } else if (queryLowerForSvg.includes('dtf') || queryLowerForSvg.includes('—Å—É–±–ª–∏–º–∞—Ü–∏')) {
            printType = 'dtf';
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
          if (queryLowerForSvg.includes('–≤–µ–∫—Ç–æ—Ä') || queryLowerForSvg.includes('—Å–µ–ø–∞—Ä–∞—Ü–∏') || 
              queryLowerForSvg.includes('–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å') || queryLowerForSvg.includes('–∫–∞—á–µ—Å—Ç–≤') ||
              isFullProcessRequest || isAdvancedPrintRequest || isColorSeparationRequest) {
            useAdvanced = true;
          }

          let optimization;

          if (useAdvanced) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            const { processImageAdvanced } = require('./advanced-vector-processor');

            const advancedOptions = {
              createVector: isFullProcessRequest || isAdvancedPrintRequest || queryLowerForSvg.includes('–≤–µ–∫—Ç–æ—Ä') || queryLowerForSvg.includes('svg'),
              colorSeparation: isFullProcessRequest || isAdvancedPrintRequest || isColorSeparationRequest || queryLowerForSvg.includes('—Å–µ–ø–∞—Ä–∞—Ü–∏') || queryLowerForSvg.includes('—Ü–≤–µ—Ç'),
              targetColors: 4
            };

            const advancedResult = await processImageAdvanced(lastImageUrl, advancedOptions);

            // –¢–∞–∫–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
            optimization = await printOptimizer.optimizeImageForPrint(lastImageUrl, printType);
            optimization.advanced = advancedResult;
          } else {
            optimization = await printOptimizer.optimizeImageForPrint(lastImageUrl, printType);
          }

          if (optimization.success) {
            let response;
            if (isFullProcessRequest || isAdvancedPrintRequest) {
              response = '–ì–æ—Ç–æ–≤–æ! –í—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n\nüìÅ **–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ (–±–∞–∑–æ–≤–∞—è + –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞):**';
            } else {
              response = '–ì–æ—Ç–æ–≤–æ! –Ø –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—á–∞—Ç–∏:\n\nüìÅ **–°–æ–∑–¥–∞–Ω—ã —Ñ–∞–π–ª—ã —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏:**';
            }

            if (optimization.optimizations.screenPrint) {
              response += `\n\nüñ®Ô∏è **–î–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏:**`;

              // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ
              if (optimization.optimizations.screenPrint.intelligentAnalysis) {
                const analysis = optimization.optimizations.screenPrint.intelligentAnalysis;
                response += `\nüìä *–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: ${analysis.complexity} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ${analysis.colors} —Ü–≤–µ—Ç–æ–≤*`;
                response += `\nüí° *${analysis.reason}*`;
              }

              const screenFiles = optimization.optimizations.screenPrint.files;
              if (screenFiles.enhanced) {
                const filename = screenFiles.enhanced.split('/').pop();
                response += `\n‚Ä¢ [–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (3000x3000)](/output/screen-print/${filename})`;
              }
              if (screenFiles.highContrast) {
                const filename = screenFiles.highContrast.split('/').pop();
                response += `\n‚Ä¢ [–í—ã—Å–æ–∫–æ–∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è](/output/screen-print/${filename})`;
              }
              if (screenFiles.limitedPalette) {
                const filename = screenFiles.limitedPalette.split('/').pop();
                response += `\n‚Ä¢ [–í–µ—Ä—Å–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞–ª–∏—Ç—Ä–æ–π](/output/screen-print/${filename})`;
              }
              if (screenFiles.edges) {
                const filename = screenFiles.edges.split('/').pop();
                response += `\n‚Ä¢ [–ö–æ–Ω—Ç—É—Ä—ã –¥–ª—è —Ç—Ä–∞—Ñ–∞—Ä–µ—Ç–æ–≤](/output/screen-print/${filename})`;
              }
            }

            if (optimization.optimizations.dtf) {
              response += `\n\nüé® **–î–ª—è DTF –ø–µ—á–∞—Ç–∏ (—Ü–≤–µ—Ç–Ω—ã–µ):**`;
              const dtfFiles = optimization.optimizations.dtf.files;
              if (dtfFiles.main) {
                const filename = dtfFiles.main.split('/').pop();
                response += `\n‚Ä¢ [–û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è (3600x3600)](/output/dtf-print/${filename})`;
              }
              if (dtfFiles.large) {
                const filename = dtfFiles.large.split('/').pop();
                response += `\n‚Ä¢ [–£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è (5400x5400)](/output/dtf-print/${filename})`;
              }
              if (dtfFiles.transparent) {
                const filename = dtfFiles.transparent.split('/').pop();
                response += `\n‚Ä¢ [–í–µ—Ä—Å–∏—è —Å –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–º —Ñ–æ–Ω–æ–º](/output/dtf-print/${filename})`;
              }
              if (dtfFiles.whiteBase) {
                const filename = dtfFiles.whiteBase.split('/').pop();
                response += `\n‚Ä¢ [–ë–µ–ª–∞—è –ø–æ–¥–ª–æ–∂–∫–∞ –¥–ª—è —Ç–µ–º–Ω—ã—Ö —Ç–∫–∞–Ω–µ–π](/output/dtf-print/${filename})`;
              }
            }

            if (optimization.optimizations.vector) {
              response += `\n\nüìê **–í–µ–∫—Ç–æ—Ä–Ω—ã–µ –≤–µ—Ä—Å–∏–∏:**`;
              const vectorFiles = optimization.optimizations.vector.files;
              if (vectorFiles.blackWhite) {
                const filename = vectorFiles.blackWhite.split('/').pop();
                response += `\n‚Ä¢ [–ß–µ—Ä–Ω–æ-–±–µ–ª–∞—è –≤–µ—Ä—Å–∏—è (2048x2048)](/output/vector/${filename})`;
              }
              if (vectorFiles.contours) {
                const filename = vectorFiles.contours.split('/').pop();
                response += `\n‚Ä¢ [–ö–æ–Ω—Ç—É—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è](/output/vector/${filename})`;
              }
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (optimization.advanced && optimization.advanced.success) {
              response += `\n\nüéØ **–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞:**`;

              // –í–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã
              const vectorFiles = optimization.advanced.files.filter(f => f.type === 'vector');
              if (vectorFiles.length > 0) {
                response += `\n\nüìê **–í–µ–∫—Ç–æ—Ä–Ω—ã–µ —Ñ–∞–π–ª—ã:**`;
                vectorFiles.forEach(file => {
                  response += `\n‚Ä¢ [SVG –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –≤–µ—Ä—Å–∏—è](${file.url})`;
                  if (file.colors && file.colors.length > 0) {
                    response += ` (${file.colors.length} —Ü–≤–µ—Ç–æ–≤)`;
                  }
                });
              }

              // –¶–≤–µ—Ç–æ–≤—ã–µ —Å–µ–ø–∞—Ä–∞—Ü–∏–∏
              const separationFiles = optimization.advanced.files.filter(f => f.type === 'color-separation');
              if (separationFiles.length > 0) {
                response += `\n\nüé® **–¶–≤–µ—Ç–æ–≤—ã–µ —Å–µ–ø–∞—Ä–∞—Ü–∏–∏:**`;
                separationFiles.forEach(sepFile => {
                  if (sepFile.separations) {
                    sepFile.separations.forEach((sep, index) => {
                      response += `\n‚Ä¢ [–°–µ–ø–∞—Ä–∞—Ü–∏—è —Ü–≤–µ—Ç–∞ ${index + 1}](${sep.url}) - ${sep.color}`;
                    });
                  }
                  if (sepFile.composite) {
                    response += `\n‚Ä¢ [–ö–æ–º–ø–æ–∑–∏—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è](${sepFile.composite.url})`;
                  }
                });
              }
              // –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤
              if (optimization.advanced.analysis) {
                const analysis = optimization.advanced.analysis;
                response += `\n\nüìä **–ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–æ–≤:**`;
                response += `\n‚Ä¢ –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π —Ü–≤–µ—Ç: ${analysis.dominant}`;
                if (analysis.distribution && analysis.distribution.length > 0) {
                  response += `\n‚Ä¢ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:`;
                  analysis.distribution.slice(0, 3).forEach(color => {
                    response += `\n  - ${color.hex} (${color.percentage}%)`;
                  });
                }
              }
            }

            response += `\n\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é –ø–æ —Å—Å—ã–ª–∫–∞–º –≤—ã—à–µ. DTF —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –ø–æ–ª–Ω—É—é —Ü–≤–µ—Ç–æ–≤—É—é –≥–∞–º–º—É –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–µ—á–∞—Ç–∏.`;

            return {
              success: true,
              response: response,
              provider: 'Print_Optimizer',
              searchUsed: false,
              printOptimized: true
            };
          } else {
            return {
              success: true,
              response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${optimization.error}`,
              provider: 'Print_Optimizer',
              searchUsed: false,
              printOptimized: false
            };
          }
        } catch (error) {
          SmartLogger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
          return {
            success: true,
            response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
            provider: 'Print_Optimizer',
            searchUsed: false,
            printOptimized: false
          };
        }
      } else {
        return {
          success: true,
          response: `–Ø –Ω–µ –Ω–∞—à–µ–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –Ω–∞—à–µ–π –±–µ—Å–µ–¥–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –¥–ª—è –ø–µ—á–∞—Ç–∏.`,
          provider: 'Print_Optimizer',
          searchUsed: false,
          printOptimized: false
        };
      }
    }

    const pythonProvider = require('./python_provider_routes');

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –ê–ù–ê–õ–ò–ó –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    const imageAnalysisKeywords = ['–∞–Ω–∞–ª–∏–∑', '–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '–¥–∞–π –∞–Ω–∞–ª–∏–∑', '–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π', '—á—Ç–æ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏', '—á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ', '–æ–ø–∏—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏', '—á—Ç–æ –≤–∏–¥–∏—à—å'];
    const isImageAnalysisRequest = imageAnalysisKeywords.some(keyword => queryLowerForSvg.includes(keyword));

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∏—Å–∫–ª—é—á–∞—è –∞–Ω–∞–ª–∏–∑)
    const imageKeywords = ['–Ω–∞—Ä–∏—Å—É–π', '—Å–æ–∑–¥–∞–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–ø—Ä–∏–Ω—Ç', '–¥–∏–∑–∞–π–Ω', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–ª–æ–≥–æ—Ç–∏–ø', '–±–∞–Ω–Ω–µ—Ä', '—Ñ—É—Ç–±–æ–ª–∫–∞', '—Ä–∏—Å—É–Ω–æ–∫', '–≤—ã—à–∏–≤–∫–∞', '–≤—ã—à–∏–≤–∫—É', 'embroidery'];
    const isImageRequest = !isImageAnalysisRequest && imageKeywords.some(keyword => queryLowerForSvg.includes(keyword));

    // –û–ë–†–ê–ë–û–¢–ö–ê –ê–ù–ê–õ–ò–ó–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if (isImageAnalysisRequest) {
      SmartLogger.route(`üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);

      // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Å–µ—Å—Å–∏–∏
      let lastImageUrl = null;

      // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ SQL
      const { db } = require('./db');
      const { aiMessages } = require('../shared/schema');
      const { eq } = require('drizzle-orm');

      const messages = await db
        .select()
        .from(aiMessages)
        .where(eq(aiMessages.sessionId, sessionId))
        .orderBy(aiMessages.createdAt);

      SmartLogger.route(`üîç –ò—â–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:`, {
        sessionId,
        messagesCount: messages?.length || 0
      });

      if (messages && messages.length > 0) {
        // –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö AI
        for (let i = messages.length - 1; i >= 0; i--) {
          const msg = messages[i];

          if (msg.content && msg.sender === 'ai' && (msg.content.includes('![') || msg.content.includes('https://image.pollinations.ai'))) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            const imageMatch1 = msg.content.match(/!\[.*?\]\((https:\/\/image\.pollinations\.ai[^)]+)\)/);
            const imageMatch2 = msg.content.match(/(https:\/\/image\.pollinations\.ai[^\s\)]+)/);

            const imageMatch = imageMatch1 || imageMatch2;

            if (imageMatch) {
              lastImageUrl = imageMatch[1];
              SmartLogger.route(`üñºÔ∏è –ù–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${lastImageUrl.substring(0, 80)}...`);
              break;
            }
          }
        }
      }

      if (lastImageUrl) {
        try {
          SmartLogger.route(`üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
          const advancedImageAnalyzer = require('./advanced-image-analyzer');

          // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
          const fetch = require('node-fetch');
          const response = await fetch(lastImageUrl);
          const imageBuffer = await response.buffer();

          // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
          const analysisResults = await Promise.all([
            advancedImageAnalyzer.analyzeWithExpertVision(imageBuffer, 'analysis_image'),
            advancedImageAnalyzer.analyzeImageMood(imageBuffer, 'analysis_image'),
            advancedImageAnalyzer.analyzeContentType(imageBuffer, 'analysis_image')
          ]);

          // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç
          let analysisResponse = `üîç **–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n`;

          // –≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
          if (analysisResults[0].success) {
            analysisResponse += `**üéØ –≠–∫—Å–ø–µ—Ä—Ç–Ω–∞—è –æ—Ü–µ–Ω–∫–∞:**\n${analysisResults[0].description}\n\n`;
          }

          // –ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
          if (analysisResults[1].success) {
            analysisResponse += `**üòä –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑:**\n${analysisResults[1].description}\n\n`;
          }

          // –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
          if (analysisResults[2].success) {
            analysisResponse += `**üé≠ –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞:**\n${analysisResults[2].description}\n\n`;
          }

          analysisResponse += `**üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n`;
          analysisResponse += `‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(imageBuffer.length / 1024).toFixed(1)} –ö–ë\n`;
          analysisResponse += `‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: Pollinations.ai\n`;
          analysisResponse += `‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä\n\n`;

          analysisResponse += `‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.** –ú–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n`;
          analysisResponse += `‚Ä¢ –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n`;
          analysisResponse += `‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–µ—á–∞—Ç–∏\n`;
          analysisResponse += `‚Ä¢ –¶–≤–µ—Ç–æ–≤—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏`;

          return {
            success: true,
            response: analysisResponse,
            provider: 'Advanced_Image_Analyzer',
            searchUsed: false,
            imageAnalyzed: true
          };

        } catch (error) {
          SmartLogger.error('–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
          return {
            success: true,
            response: `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${error.message}`,
            provider: 'Image_Analyzer',
            searchUsed: false,
            imageAnalyzed: false
          };
        }
      } else {
        return {
          success: true,
          response: `‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–Ω–∞—á–∞–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ.`,
          provider: 'Image_Analyzer',
          searchUsed: false,
          imageAnalyzed: false
        };
      }
    }

    if (isImageRequest) {
      SmartLogger.route(`üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—à–∏–≤–∫—É
      const isEmbroideryRequest = userQuery.toLowerCase().includes('–≤—ã—à–∏–≤–∫–∞') || 
                                 userQuery.toLowerCase().includes('–≤—ã—à–∏–≤–∫—É') || 
                                 userQuery.toLowerCase().includes('embroidery');

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const aiImageGenerator = require('./ai-image-generator');

      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        let imageStyle = 'realistic';
        if (isEmbroideryRequest) {
          imageStyle = 'embroidery';
        } else if (userQuery.toLowerCase().includes('–ø—Ä–∏–Ω—Ç') || userQuery.toLowerCase().includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || userQuery.toLowerCase().includes('–¥–∏–∑–∞–π–Ω')) {
          imageStyle = 'vector';
        }

        const imageResult = await aiImageGenerator.generateImage(userQuery, imageStyle);

        if (imageResult.success && imageResult.imageUrl) {
          let response = `–Ø —Å–æ–∑–¥–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:

![–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${imageResult.imageUrl})

–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`;

          // –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—à–∏–≤–∫—É, –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —Ñ–∞–π–ª—ã –≤—ã—à–∏–≤–∫–∏
          if (isEmbroideryRequest) {
            try {
              const embroideryHandler = require('./embroidery-chat-handler');
              const embroideryResult = await embroideryHandler.processEmbroideryGeneration(imageResult.imageUrl, userQuery);

              if (embroideryResult.success && embroideryResult.files && embroideryResult.files.length > 0) {
                response += `\n\nüìÑ **–§–∞–π–ª—ã –¥–ª—è –≤—ã—à–∏–≤–∫–∏ —Å–æ–∑–¥–∞–Ω—ã:**`;

                // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–ø—É
                const embroideryFiles = embroideryResult.files.filter(f => f.type === 'embroidery');
                const preparedImage = embroideryResult.files.find(f => f.type === 'prepared_image');
                const colorScheme = embroideryResult.files.find(f => f.type === 'color_scheme');

                embroideryFiles.forEach(file => {
                  const sizeKB = (file.size / 1024).toFixed(1);
                  response += `\n‚Ä¢ [${file.format.toUpperCase()} —Ñ–∞–π–ª](${file.url}) - ${sizeKB} –ö–ë`;
                });

                if (preparedImage) {
                  const sizeKB = (preparedImage.size / 1024).toFixed(1);
                  response += `\n‚Ä¢ [–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${preparedImage.url}) - ${sizeKB} –ö–ë`;
                }

                if (colorScheme) {
                  const sizeKB = (colorScheme.size / 1024).toFixed(1);
                  response += `\n‚Ä¢ [–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞](${colorScheme.url}) - ${sizeKB} –ö–ë`;
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é –≤—ã—à–∏–≤–∫–∏ –Ω–∞ —Ç–∫–∞–Ω–∏
                if (embroideryResult.previewUrl) {
                  response += `\n\nüßµ **–ü—Ä–µ–≤—å—é –Ω–∞ —Ç–∫–∞–Ω–∏:** [–ö–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤—ã—à–∏–≤–∫–∞](${embroideryResult.previewUrl})`;
                }

                if (embroideryResult.recommendations) {
                  response += `\n\nüßµ **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –≤—ã—à–∏–≤–∫–∏:** ${embroideryResult.recommendations}`;
                }
              }
            } catch (embError) {
              SmartLogger.error('–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª—ã –≤—ã—à–∏–≤–∫–∏:', embError);
              response += `\n\n–î–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª—ã –≤—ã—à–∏–≤–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –≤—ã—à–∏–≤–∫—É".`;
            }
          } else {
            response += ` –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å.`;
          }

          return {
            success: true,
            response: response,
            provider: 'AI_Image_Generator',
            searchUsed: false,
            imageGenerated: true,
            imageUrl: imageResult.imageUrl
          };
        } else {
          return {
            success: true,
            response: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.`,
            provider: 'AI_Image_Generator',
            searchUsed: false,
            imageGenerated: false
          };
        }
      } catch (error) {
        SmartLogger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return {
          success: true,
          response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
          provider: 'AI_Image_Generator',
          searchUsed: false,
          imageGenerated: false
        };
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–∏/–¥–∞—Ç—ã –Ω–∞–ø—Ä—è–º—É—é
    const timeQueries = ['–≤—Ä–µ–º—è', '—Å–µ–π—á–∞—Å –≤—Ä–µ–º—è', '–∫–∞–∫–æ–µ –≤—Ä–µ–º—è', '–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å', '—Å–µ–≥–æ–¥–Ω—è —á–∏—Å–ª–æ', '–∫–∞–∫–æ–µ —á–∏—Å–ª–æ', '–∫–∞–∫–∞—è –¥–∞—Ç–∞'];
    const isTimeQuery = timeQueries.some(q => queryLowerForSvg.includes(q));

    if (isTimeQuery) {
      const now = new Date();
      const timeStr = now.toLocaleString('ru-RU', { 
        timeZone: 'Europe/Moscow',
        year: 'numeric',
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        weekday: 'long'
      });

      return {
        success: true,
        response: `–°–µ–π—á–∞—Å: ${timeStr} (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)`,
        provider: 'TimeProvider',
        searchUsed: false
      };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ BOOOMERANGS
    const automationResult = await handleAutomationRequest(userQuery);
    if (automationResult) {
      SmartLogger.route(`ü§ñ –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏`);
      return automationResult;
    }

    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞–ø—Ä—è–º—É—é
    const searchKeywords = [
      '–Ω–∞–π–¥–∏', '–ø–æ–∏—â–∏', '–Ω–∞–π—Ç–∏', '–ø–æ–∏—Å–∫', '–Ω–æ–≤–æ—Å—Ç–∏', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ', 
      '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ', '—Å–≤–µ–∂–∏–µ', '—á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç', '—á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å',
      '–∫—É—Ä—Å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–æ–≥–æ–¥–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ'
    ];

    const needsSearchDirect = searchKeywords.some(keyword => 
      userQuery.toLowerCase().includes(keyword)
    );

    SmartLogger.route(`üîç –ü–†–û–í–ï–†–ö–ê –ü–û–ò–°–ö–ê: "${userQuery}"`);
    SmartLogger.route(`üîç –ù–∞–π–¥–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: ${needsSearchDirect}`);

    if (needsSearchDirect) {
      SmartLogger.route(`üîç –ê–ö–¢–ò–í–ò–†–û–í–ê–ù –ü–†–Ø–ú–û–ô –ü–û–ò–°–ö!`);

      try {
        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Python
        SmartLogger.route(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º Python –ø–æ–∏—Å–∫ –¥–ª—è: "${userQuery}"`);

        const { spawn } = require('child_process');

        const searchResult = await new Promise((resolve) => {
          const pythonScript = `
import sys
import json
try:
    from duckduckgo_search import DDGS

    query = "${userQuery.replace(/"/g, '\\"')}"
    results = []

    with DDGS() as ddgs:
        search_results = list(ddgs.text(query, max_results=10))
        for result in search_results:
            results.append({
                'title': result.get('title', ''),
                'snippet': result.get('body', ''),
                'url': result.get('href', ''),
                'source': 'DuckDuckGo'
            })

    print(json.dumps({
        'success': True,
        'results': results,
        'total': len(results)
    }))

except Exception as e:
    print(json.dumps({
        'success': False,
        'error': str(e),
        'results': []
    }))
`;

          const python = spawn('python3', ['-c', pythonScript]);
          let output = '';

          python.stdout.on('data', (data) => {
            output += data.toString();
          });

          python.on('close', (code) => {
            SmartLogger.route(`üîç Python –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –∫–æ–¥–æ–º: ${code}`);
            try {
              const result = JSON.parse(output.trim());
              SmartLogger.route(`üîç –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${result.results?.length || 0}`);
              resolve(result);
            } catch (parseError) {
              SmartLogger.error(`üîç –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${parseError}`);
              resolve({ success: false, error: '–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞', results: [] });
            }
          });

          python.on('error', (error) => {
            SmartLogger.error(`üîç –û—à–∏–±–∫–∞ Python: ${error}`);
            resolve({ success: false, error: error.message, results: [] });
          });
        });

        if (searchResult && searchResult.success && searchResult.results && searchResult.results.length > 0) {
          SmartLogger.route(`üîç –ü–û–ò–°–ö –£–°–ü–ï–®–ï–ù! –ù–∞–π–¥–µ–Ω–æ ${searchResult.results.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);

          try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            const { enrichSearchResults } = require('./web-content-parser');
            SmartLogger.route(`üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü...`);

            const enrichedResults = await enrichSearchResults(searchResult.results);

            SmartLogger.route(`üîç –°–û–î–ï–†–ñ–ò–ú–û–ï –ó–ê–ì–†–£–ñ–ï–ù–û! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${enrichedResults.length} —Å—Ç—Ä–∞–Ω–∏—Ü`);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
            const advancedSearchProvider = require('./advanced-search-provider');
            const searchAnalysis = await advancedSearchProvider.analyzeSearchResults(enrichedResults, userQuery);

            let formattedResponse;
            if (searchAnalysis && searchAnalysis.aiAnswer) {
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º AI-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
              formattedResponse = `üîç **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

${searchAnalysis.aiAnswer}

üìä **–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:** ${enrichedResults.length}`;
            } else {
              // Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
              formattedResponse = `üîç **–ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

${enrichedResults.slice(0, 3).map((r, i) => 
`**${i + 1}. ${r.title}**

${r.content}

*–ò—Å—Ç–æ—á–Ω–∏–∫: ${new URL(r.source).hostname}*

---

`).join('')}üìä **–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤:** ${enrichedResults.length}`;
            }

            return {
              success: true,
              response: formattedResponse,
              provider: 'Search_Content',
              searchUsed: true,
              searchType: 'content_parsed',
              resultsCount: enrichedResults.length
            };

          } catch (parseError) {
            SmartLogger.route(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: ${parseError.message}, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`);

            // Fallback –∫ –æ–±—ã—á–Ω–æ–º—É –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—é
            const formattedResponse = `üîç **–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**

${searchResult.results.slice(0, 5).map((r, i) => 
`**${i + 1}. ${r.title}**  
${r.snippet}  
üîó [–ò—Å—Ç–æ—á–Ω–∏–∫](${r.url})

`).join('')}üìä **–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ:** ${searchResult.results.length}`;

            return {
              success: true,
              response: formattedResponse,
              provider: 'Search_DuckDuckGo',
              searchUsed: true,
              searchType: 'duckduckgo',
              resultsCount: searchResult.results.length
            };
          }
        } else {
          SmartLogger.route(`üîç –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
        }
      } catch (error) {
        SmartLogger.error(`üîç –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
      }
    }

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è:

–ó–∞–ø—Ä–æ—Å: "${userQuery}"

–ö–û–ù–¢–ï–ö–°–¢ –°–ï–°–°–ò–ò:
${sessionContext.context}

–°–¢–†–û–ì–û –°–õ–ï–î–£–ô –≠–¢–ò–ú –ü–†–ê–í–ò–õ–ê–ú:
1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ù–ê–†–ò–°–û–í–ê–¢–¨, –°–û–ó–î–ê–¢–¨ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï, –°–ì–ï–ù–ï–†–ò–†–û–í–ê–¢–¨ –ö–ê–†–¢–ò–ù–ö–£, –ü–†–ò–ù–¢ –∏–ª–∏ –î–ò–ó–ê–ô–ù - –æ—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û: "–ì–ï–ù–ï–†–ê–¶–ò–Ø_–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø"
2. –ò–Ω–∞—á–µ –¥–∞–π –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç

–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –Ω–∞—Ä–∏—Å—É–π, —Å–æ–∑–¥–∞–π, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π, –ø—Ä–∏–Ω—Ç, –¥–∏–∑–∞–π–Ω, –∫–∞—Ä—Ç–∏–Ω–∫–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ª–æ–≥–æ—Ç–∏–ø, –±–∞–Ω–Ω–µ—Ä`;

    const initialResult = await pythonProvider.callPythonAI(prompt, 'Qwen_Qwen_2_72B');

    let responseText = '';
    if (typeof initialResult === 'string') {
      responseText = initialResult;
    } else if (initialResult && initialResult.response) {
      responseText = initialResult.response;
    }

    SmartLogger.route(`ü§ñ AI –æ—Ç–≤–µ—Ç–∏–ª: "${responseText.substring(0, 50)}..."`);

    // –ï—Å–ª–∏ AI –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω—É–∂–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (responseText.includes('–ì–ï–ù–ï–†–ê–¶–ò–Ø_–ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø')) {
      SmartLogger.route(`üé® AI –∑–∞–ø—Ä–æ—Å–∏–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`);

      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const aiImageGenerator = require('./ai-image-generator');

      try {
        const imageResult = await aiImageGenerator.generateImage(userQuery, 'realistic');

        if (imageResult.success && imageResult.imageUrl) {
          return {
            success: true,
            response: `–Ø —Å–æ–∑–¥–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:

![–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${imageResult.imageUrl})

–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å.`,
            provider: 'AI_Image_Generator',
            searchUsed: false,
            imageGenerated: true,
            imageUrl: imageResult.imageUrl
          };
        } else {
          return {
            success: true,
            response: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.`,
            provider: 'AI_Image_Generator',
            searchUsed: false,
            imageGenerated: false
          };
        }
      } catch (error) {
        SmartLogger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        return {
          success: true,
          response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
          provider: 'AI_Image_Generator',
          searchUsed: false,
          imageGenerated: false
        };
      }
    }



    // –ï—Å–ª–∏ AI –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫
    if (responseText.includes('–ù–£–ñ–ï–ù_–ü–û–ò–°–ö')) {
      SmartLogger.route(`üîç AI –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–∏—Å–∫`);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–∏—Å–∫–∞
      const advancedSearchKeywords = [
        '–Ω–∞–π–¥–∏ –ø–æ–¥—Ä–æ–±–Ω–æ', '–ø–æ–ª–Ω—ã–π –ø–æ–∏—Å–∫', '–≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', 
        '–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫', '–Ω–∞—É—á–Ω—ã–µ —Å—Ç–∞—Ç—å–∏', '–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏',
        '–ø–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏', '—Å–≤–µ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        '–∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', '–¥–µ—Ç–∞–ª—å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ'
      ];

      const needsAdvancedSearch = advancedSearchKeywords.some(keyword => 
        userQuery.toLowerCase().includes(keyword)
      );

      let searchResults;

      if (needsAdvancedSearch) {
        SmartLogger.route(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫`);
        const { performAdvancedSearch } = require('./advanced-search-provider');

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        let searchType = 'comprehensive';
        if (userQuery.toLowerCase().includes('–Ω–æ–≤–æ—Å—Ç–∏')) searchType = 'news';
        if (userQuery.toLowerCase().includes('–∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–π') || userQuery.toLowerCase().includes('–Ω–∞—É—á–Ω—ã')) searchType = 'academic';
        if (userQuery.toLowerCase().includes('–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏') || userQuery.toLowerCase().includes('–∫–∞—Ä—Ç–∏–Ω–∫')) searchType = 'images';

        searchResults = await performAdvancedSearch(userQuery, {
          searchType,
          maxResults: 15,
          includeAnalysis: true
        });
      } else {
        SmartLogger.route(`üîç –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –≤–µ–±-–ø–æ–∏—Å–∫`);
        searchResults = await webSearchProvider.performWebSearch(userQuery);
      }

      if (searchResults.success && searchResults.results && searchResults.results.length > 0) {
        let searchContext;

        if (needsAdvancedSearch && searchResults.analysis) {
          // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞–Ω–∞–ª–∏–∑–æ–º
          searchContext = `–†–ï–ó–£–õ–¨–¢–ê–¢–´ –†–ê–°–®–ò–†–ï–ù–ù–û–ì–û –ü–û–ò–°–ö–ê:
–ù–∞–π–¥–µ–Ω–æ ${searchResults.totalResults} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ ${searchResults.analysis.sources.length} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.

–ö–†–ê–¢–ö–ò–ô –ê–ù–ê–õ–ò–ó: ${searchResults.analysis.summary}

–ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–´:
${searchResults.analysis.keyFacts.join('\n')}

–¢–û–ü –†–ï–ó–£–õ–¨–¢–ê–¢–´:
${searchResults.analysis.topResults.map(r => `‚Ä¢ ${r.title}: ${r.snippet} (${r.url})`).join('\n')}

–£–†–û–í–ï–ù–¨ –î–û–°–¢–û–í–ï–†–ù–û–°–¢–ò: ${searchResults.analysis.confidence}%`;
        } else {
          searchContext = webSearchProvider.formatSearchResultsForAI(searchResults);
        }

        SmartLogger.route(`üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.results.length}`);
        SmartLogger.route(`üîç –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${searchContext.substring(0, 200)}...`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–∏—Å–∫–∞
        const searchPrompt = `–î–∞–π –ö–†–ê–¢–ö–ò–ô –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–û–ü–†–û–°: "${userQuery}"

${searchContext}

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ú–∞–∫—Å–∏–º—É–º 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
- –¢–æ–ª—å–∫–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å —ç–º–æ–¥–∑–∏
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ —Ü–∏—Ñ—Ä—ã
- –ë–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π

–§–û–†–ú–ê–¢:
üéØ [–ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç]
üìç [–ö–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏]
‚ö° [–í—ã–≤–æ–¥/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏]

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É:`;

        SmartLogger.route(`üîç –û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –ø—Ä–æ–º–ø—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–∏—Å–∫–∞`);
        const finalResult = await pythonProvider.callPythonAI(searchPrompt, 'Qwen_Qwen_2_72B');

        let finalText = '';
        if (typeof finalResult === 'string') {
          finalText = finalResult;
        } else if (finalResult && finalResult.response) {
          finalText = finalResult.response;
        }

        if (finalText && finalText.length > 20) {
          return {
            success: true,
            response: finalText,
            provider: 'Qwen_Qwen_2_72B',
            searchUsed: true,
            searchType: needsAdvancedSearch ? 'advanced' : 'basic'
          };
        }
      }

      return { success: false, reason: 'search_failed' };
    } else {
      // AI –¥–∞–ª –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç - –Ω–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const isGeneralImageRequest = queryLowerForSvg.includes('—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
      const isPrintRequest = queryLowerForSvg.includes('—Å–æ–∑–¥–∞–π –ø—Ä–∏–Ω—Ç');
      const isEmbroideryGeneration = queryLowerForSvg.includes('—Å–æ–∑–¥–∞–π –≤—ã—à–∏–≤–∫—É');

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const additionalImageKeywords = ['–Ω–∞—Ä–∏—Å—É–π', '—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π', '–∫–∞—Ä—Ç–∏–Ω–∫–∞', '–ª–æ–≥–æ—Ç–∏–ø', '–±–∞–Ω–Ω–µ—Ä'];
      const embroideryKeywords = ['dst', 'pes', 'jef', 'exp', 'vp3'];

      // –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –±–∏–∑–Ω–µ—Å-—Ñ—É–Ω–∫—Ü–∏–∏
      const isTrendAnalysis = queryLowerForSvg.includes('—Ç—Ä–µ–Ω–¥') || queryLowerForSvg.includes('–∞–Ω–∞–ª–∏–∑') || queryLowerForSvg.includes('–ø–æ–ø—É–ª—è—Ä–Ω');
      const isBusinessFunction = queryLowerForSvg.includes('—Ä–∞—Å—Å—á–∏—Ç') || queryLowerForSvg.includes('–∫–∞–ª—å–∫—É–ª') || queryLowerForSvg.includes('–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');

      const hasEmbroideryFormats = embroideryKeywords.some(keyword => queryLowerForSvg.includes(keyword));
      const needsEmbroideryConversion = isEmbroideryGeneration || hasEmbroideryFormats;

      const isImageRequest = !isTrendAnalysis && !isBusinessFunction && (
        isGeneralImageRequest || 
        isPrintRequest || 
        isEmbroideryGeneration ||
        additionalImageKeywords.some(keyword => queryLowerForSvg.includes(keyword))
      );

      if (isImageRequest) {
        SmartLogger.route(`üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏
        if (needsEmbroideryConversion) {
          SmartLogger.route(`üßµ –ó–∞–ø—Ä–æ—Å –≤–∫–ª—é—á–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –≤—ã—à–∏–≤–∫–∏`);

          try {
            const aiEmbroideryPipeline = require('./ai-embroidery-pipeline');
            const embroideryResult = await aiEmbroideryPipeline.generateAndConvertToEmbroidery(userQuery, options);

            if (embroideryResult.success) {
              // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ —Ñ–∞–π–ª–∞–º–∏ –≤—ã—à–∏–≤–∫–∏
              let response = `–ì–æ—Ç–æ–≤–æ! –Ø —Å–æ–∑–¥–∞–ª –¥–∏–∑–∞–π–Ω –¥–ª—è –≤—ã—à–∏–≤–∫–∏ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É.

![–î–∏–∑–∞–π–Ω –¥–ª—è –≤—ã—à–∏–≤–∫–∏](${embroideryResult.generatedImage})

üßµ **–§–∞–π–ª—ã –¥–ª—è –≤—ã—à–∏–≤–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã:**`;

              if (embroideryResult.files && embroideryResult.files.length > 0) {
                embroideryResult.files.forEach(file => {
                  response += `\n‚Ä¢ [${file.filename}](${file.url}) - ${file.format} (${(file.size / 1024).toFixed(1)} –ö–ë)`;
                });
              }

              response += `\n\nüìä **–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:**
‚Ä¢ –§–æ—Ä–º–∞—Ç: ${embroideryResult.embroideryFormat.name}
‚Ä¢ –†–∞–∑–º–µ—Ä: ${embroideryResult.details.size}
‚Ä¢ –¶–≤–µ—Ç–æ–≤: ${embroideryResult.details.colors}
‚Ä¢ –ù–∏—Ç–∏: ${embroideryResult.details.threadsNeeded}

${embroideryResult.instructions.join('\n')}`;

              if (embroideryResult.aiOptimizationReport) {
                response += `\n\nü§ñ **AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n${embroideryResult.aiOptimizationReport}`;
              }

              return {
                success: true,
                response: response,
                provider: 'AI_Embroidery_Pipeline',
                searchUsed: false,
                imageGenerated: true,
                embroideryGenerated: true,
                imageUrl: embroideryResult.generatedImage,
                embroideryFiles: embroideryResult.files
              };
            } else {
              // –ï—Å–ª–∏ –ø–∞–π–ø–ª–∞–π–Ω –≤—ã—à–∏–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –¥–µ–ª–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
              SmartLogger.route(`‚ö†Ô∏è –ü–∞–π–ø–ª–∞–π–Ω –≤—ã—à–∏–≤–∫–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
            }
          } catch (error) {
            SmartLogger.error('–û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤—ã—à–∏–≤–∫–∏:', error);
            SmartLogger.route(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤—ã—à–∏–≤–∫–∏, —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`);
          }
        }

        // –û–±—ã—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const aiImageGenerator = require('./ai-image-generator');

        try {
          const imageResult = await aiImageGenerator.generateImage(userQuery, 'realistic');

          if (imageResult.success && imageResult.imageUrl) {
            let response = `–Ø —Å–æ–∑–¥–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É! –í–æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç:

![–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${imageResult.imageUrl})

–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.`;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å SVG —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏
            const lowerQuery = userQuery.toLowerCase();
            const hasPrint = lowerQuery.includes('–ø—Ä–∏–Ω—Ç');
            const hasShirt = lowerQuery.includes('—Ñ—É—Ç–±–æ–ª–∫–∞');
            const hasPrinting = lowerQuery.includes('–ø–µ—á–∞—Ç—å');
            const svgCheck = svgPrintConverter.isPrintConversionRequest(userQuery);

            const needsPrintFiles = svgCheck || hasPrint || hasShirt || hasPrinting;

            SmartLogger.route(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ SVG —Ñ–∞–π–ª–æ–≤:`, {
              userQuery: userQuery.substring(0, 50),
              hasPrint,
              hasShirt, 
              hasPrinting,
              svgCheck,
              needsPrintFiles
            });

            let svgFiles = [];
            if (needsPrintFiles) {
              try {
                SmartLogger.route(`üé® –°–æ–∑–¥–∞–µ–º SVG —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏`);
                const printType = svgPrintConverter.detectPrintTypeFromRequest(userQuery);
                const svgResult = await svgPrintConverter.convertImageToPrintSVG(
                  imageResult.imageUrl, 
                  `design-${Date.now()}`, 
                  printType,
                  userQuery
                );

                if (svgResult.success) {
                  svgFiles = svgResult.result.files;
                  response += `\n\nüìÑ **–§–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏ —Å–æ–∑–¥–∞–Ω—ã:**`;

                  svgResult.result.files.forEach(file => {
                    if (file.type === 'screenprint') {
                      response += `\n‚Ä¢ [SVG –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏](${file.url}) - ${(file.size / 1024).toFixed(1)} –ö–ë`;
                    } else if (file.type === 'dtf') {
                      response += `\n‚Ä¢ [SVG –¥–ª—è DTF –ø–µ—á–∞—Ç–∏](${file.url}) - ${(file.size / 1024).toFixed(1)} –ö–ë`;
                    } else if (file.type === 'colorscheme') {
                      response += `\n‚Ä¢ [–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞](${file.url}) - –ø–∞–ª–∏—Ç—Ä–∞ —Ü–≤–µ—Ç–æ–≤`;
                    }
                  });

                  if (svgResult.result.recommendations.screenprint) {
                    response += `\n\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —à–µ–ª–∫–æ–≥—Ä–∞—Ñ–∏–∏:** ${svgResult.result.recommendations.screenprint.notes}`;
                  }
                  if (svgResult.result.recommendations.dtf) {
                    response += `\n**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è DTF:** ${svgResult.result.recommendations.dtf.notes}`;
                  }

                  // –î–æ–±–∞–≤–ª—è–µ–º AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
                  if (svgResult.result.aiAnalysis && svgResult.result.aiAnalysis.recommendations) {
                    response += `\n\nü§ñ **–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ AI:** ${svgResult.result.aiAnalysis.recommendations}`;
                  }

                  SmartLogger.success(`SVG —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã: ${svgFiles.length} —Ñ–∞–π–ª–æ–≤`);
                } else {
                  SmartLogger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SVG —Ñ–∞–π–ª–æ–≤:', svgResult.error);
                }
              } catch (error) {
                SmartLogger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SVG —Ñ–∞–π–ª–æ–≤:', error);
              }
            }

            if (isEmbroideryRequest) {
              response += `\n\nüßµ –ß—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –≤—ã—à–∏–≤–∞–ª—å–Ω–æ–π –º–∞—à–∏–Ω—ã (DST, PES, JEF), –∑–∞–≥—Ä—É–∑–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ—Å–∏—Ç–µ "–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ DST".`;
            } else if (!needsPrintFiles) {
              response += ` –ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –ø—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–∞–≤–∏—Ç—å.`;
            }

            return {
              success: true,
              response: response,
              provider: 'AI_Image_Generator',
              searchUsed: false,
              imageGenerated: true,
              imageUrl: imageResult.imageUrl,
              svgFiles: svgFiles
            };
          } else {
            return {
              success: true,
              response: `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ.`,
              provider: 'AI_Image_Generator',
              searchUsed: false,
              imageGenerated: false
            };
          }
        } catch (error) {
          SmartLogger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
          return {
            success: true,
            response: `–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.`,
            provider: 'AI_Image_Generator',
            searchUsed: false,
            imageGenerated: false
          };
        }
      }

      // –ï—Å–ª–∏ –Ω–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –¥–∞–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const enhancedPrompt = chatMemory.createEnhancedPrompt(userQuery, sessionContext);

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
      const enhancedResult = await pythonProvider.callPythonAI(enhancedPrompt, 'Qwen_Qwen_2_72B');

      let enhancedText = '';
      if (typeof enhancedResult === 'string') {
        enhancedText = enhancedResult;
      } else if (enhancedResult && enhancedResult.response) {
        enhancedText = enhancedResult.response;
      }

      return {
        success: true,
        response: enhancedText || responseText,
        provider: 'Qwen_Qwen_2_72B',
        searchUsed: false
      };
    }

  } catch (error) {
    SmartLogger.error(`–û—à–∏–±–∫–∞ AI —Å –ø–æ–∏—Å–∫–æ–º: ${error.message}`);
    return { success: false, reason: 'error' };
  }
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤–µ–±-–ø–æ–∏—Å–∫–∞ –∏ AI (—Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è)
 */
async function getSmartResponse(userQuery) {
  try {
    SmartLogger.route(`üöÄ –í–´–ó–í–ê–ù–ê –£–ü–†–û–©–ï–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –¥–ª—è: "${userQuery}"`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫
    const searchNeeded = webSearchProvider.needsWebSearch(userQuery);
    SmartLogger.route(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏: ${searchNeeded}`);

    if (!searchNeeded) {
      SmartLogger.route(`‚ùå –ü–æ–∏—Å–∫ –Ω–µ –Ω—É–∂–µ–Ω, –≤—ã—Ö–æ–¥–∏–º`);
      return { success: false, reason: 'no_search_needed' };
    }

    SmartLogger.route(`‚úÖ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ + AI –¥–ª—è: "${userQuery}"`);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
    const searchResults = await webSearchProvider.performWebSearch(userQuery);

    if (searchResults.success && searchResults.results && searchResults.results.length > 0) {
      const searchContext = webSearchProvider.formatSearchResultsForAI(searchResults);

      // –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è AI
      const prompt = `–í–æ–ø—Ä–æ—Å: ${userQuery}

–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
${searchContext}

–û—Ç–≤–µ—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.`;

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI
      const pythonProvider = require('./python_provider_routes');
      const result = await pythonProvider.callPythonAI(prompt, 'Qwen_Qwen_2_72B');

      SmartLogger.route(`üìä –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: ${typeof result}`);
      SmartLogger.route(`üìä –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:`, result);

      // –ï—Å–ª–∏ result - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞ (–ø—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
      let responseText = '';
      if (typeof result === 'string') {
        responseText = result;
      } else if (result && result.response) {
        responseText = result.response;
      }

      SmartLogger.route(`üìù –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: "${responseText.substring(0, 100)}..."`);

      if (responseText && responseText.length > 20) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        const hasWeatherData = responseText.includes('¬∞C') || 
                              responseText.includes('–≥—Ä–∞–¥—É—Å') || 
                              responseText.includes('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞') ||
                              responseText.includes('–¥–æ–∂–¥—å') ||
                              responseText.includes('–≤–ª–∞–∂–Ω–æ—Å—Ç—å');

        const isRefusal = responseText.toLowerCase().includes('–Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å');

        SmartLogger.route(`üîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞: hasWeatherData=${hasWeatherData}, isRefusal=${isRefusal}`);

        if (hasWeatherData && !isRefusal) {
          SmartLogger.success(`‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∏–ª–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ!`);
          return {
            success: true,
            response: responseText,
            provider: 'Qwen_Qwen_2_72B',
            searchUsed: true
          };
        }

        SmartLogger.route(`‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: hasWeatherData=${hasWeatherData}, isRefusal=${isRefusal}`);
      } else {
        SmartLogger.route(`‚ùå AI –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π`);
      }
    }

    return { success: false, reason: 'search_failed' };

  } catch (error) {
    SmartLogger.error(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: ${error.message}`);
    return { success: false, reason: 'error' };
  }
}

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
const PROVIDER_SPECIALTIES = {
  technical: {
    // –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ–¥, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
    providers: ["Phind", "DeepSpeek", "DeepInfra_CodeLlama", "DeepInfra_Mistral"],
    keywords: [
      "–∫–æ–¥", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "javascript", "python", "java", "c++", "c#", 
      "coding", "programming", "code", "–∞–ª–≥–æ—Ä–∏—Ç–º", "algorithm", "—Ñ—É–Ω–∫—Ü–∏—è", "function",
      "api", "—Å–µ—Ä–≤–µ—Ä", "server", "backend", "frontend", "—Ñ—Ä–æ–Ω—Ç–µ–Ω–¥", "–±—ç–∫–µ–Ω–¥",
      "database", "–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", "sql", "nosql", "mongodb", "json", "html", "css",
      "git", "github", "docker", "kubernetes", "devops", "react", "angular", "vue",
      "node", "npm", "yarn", "webpack", "babel", "typescript", "rust", "golang"
    ]
  },
  creative: {
    // –¢–≤–æ—Ä—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã, –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –∏—Å—Ç–æ—Ä–∏–∏
    providers: ["GeminiPro", "Claude", "Liaobots"],
    keywords: [
      "—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–∫—Ä–µ–∞—Ç–∏–≤", "–ø—Ä–∏–¥—É–º–∞–π", "—Å–æ—á–∏–Ω–∏", "–Ω–∞–ø–∏—à–∏", "—Å–æ–∑–¥–∞–π", "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è",
      "—Å—Ç–∏—Ö", "–ø–æ—ç–º–∞", "—Ä–∞—Å—Å–∫–∞–∑", "–∏—Å—Ç–æ—Ä–∏—è", "—Å–∫–∞–∑–∫–∞", "—Ä–æ–º–∞–Ω", "–Ω–æ–≤–µ–ª–ª–∞", "–ø–µ—Å–Ω—è",
      "creative", "poem", "story", "tale", "fiction", "writing", "screenplay", "script",
      "—Å–ª–æ–≥–∞–Ω", "–ª–æ–∑—É–Ω–≥", "—Ä–µ–∫–ª–∞–º–∞", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Ä–∏—Ñ–º–∞", "–º–µ—Ç–∞—Ñ–æ—Ä–∞", "–∞–ª–ª–µ–≥–æ—Ä–∏—è"
    ]
  },
  analytical: {
    // –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≥–ª—É–±–æ–∫–∏—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
    providers: ["Qwen_Qwen_2_72B", "Claude", "DeepInfra_Mixtral", "GeminiPro", "Qwen_Qwen_2_5_Max"],
    keywords: [
      "–∞–Ω–∞–ª–∏–∑", "–æ–±—ä—è—Å–Ω–∏", "–ø–æ—á–µ–º—É", "—Å—Ä–∞–≤–Ω–∏", "–ª–æ–≥–∏–∫–∞", "—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è", "—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–µ",
      "–¥–æ–∫–∞–∂–∏", "–æ–ø—Ä–æ–≤–µ—Ä–≥–Ω–∏", "–¥–∏–ª–µ–º–º–∞", "–∞—Ä–≥—É–º–µ–Ω—Ç", "—Ç–æ—á–∫–∞ –∑—Ä–µ–Ω–∏—è", "–∫—Ä–∏—Ç–∏–∫–∞",
      "analyze", "explain", "compare", "contrast", "philosophy", "ethics", "morality",
      "pros and cons", "advantages", "disadvantages", "thesis", "hypothesis", 
      "–Ω–∞—É—á–Ω—ã–π –º–µ—Ç–æ–¥", "research", "study", "investigation", "exploration"
    ]
  },
  factual: {
    // –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —Ç—Ä–µ–±—É—é—â–∏–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    providers: ["Qwen_Qwen_2_72B", "You", "Phind", "Qwen_Qwen_2_5_Max", "PerplexityApi"],
    keywords: [
      "—Ñ–∞–∫—Ç", "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–¥–∞–Ω–Ω—ã–µ", "–∏—Å—Ç–æ—Ä–∏—è", "—Å–æ–±—ã—Ç–∏–µ", "–¥–∞—Ç–∞",
      "–∫—Ç–æ", "—á—Ç–æ", "–≥–¥–µ", "–∫–æ–≥–¥–∞", "fact", "information", "statistics", "data",
      "history", "event", "date", "who", "what", "where", "when", "how many", "how much",
      "–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", "definition", "—Ç–µ—Ä–º–∏–Ω", "term", "concept", "–ø–æ–Ω—è—Ç–∏–µ"
    ]
  },
  current: {
    // –í–æ–ø—Ä–æ—Å—ã –æ —Ç–µ–∫—É—â–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –Ω–æ–≤–æ—Å—Ç—è—Ö
    providers: ["Qwen_Qwen_2_72B", "You", "PerplexityApi", "Qwen_Qwen_2_5_Max"],
    keywords: [
      "–Ω–æ–≤–æ—Å—Ç–∏", "–∞–∫—Ç—É–∞–ª—å–Ω—ã–π", "–ø–æ—Å–ª–µ–¥–Ω–∏–π", "—Ç–µ–∫—É—â–∏–π", "—Å–æ–±—ã—Ç–∏–µ", "—Å–µ–≥–æ–¥–Ω—è", "–≤—á–µ—Ä–∞",
      "–Ω–æ–≤–æ—Å—Ç—å", "news", "recent", "current", "latest", "today", "yesterday", "update",
      "—Ç—Ä–µ–Ω–¥", "trend", "breaking", "headline", "–∑–∞–≥–æ–ª–æ–≤–æ–∫", "–º–µ—Å—è—Ü", "–Ω–µ–¥–µ–ª—è", "–≥–æ–¥"
    ]
  },
  mathematical: {
    // –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    providers: ["Qwen_Qwen_2_72B", "Claude", "DeepInfra_Mixtral", "Qwen_Qwen_2_5_Max"],
    keywords: [
      "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "–≤—ã—á–∏—Å–ª–µ–Ω–∏—è", "—Ä–∞—Å—á–µ—Ç", "—Ñ–æ—Ä–º—É–ª–∞", "—É—Ä–∞–≤–Ω–µ–Ω–∏–µ", "–∏–Ω—Ç–µ–≥—Ä–∞–ª", 
      "–ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è", "—Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—è", "–≥–µ–æ–º–µ—Ç—Ä–∏—è", "–∞–ª–≥–µ–±—Ä–∞", "math", "calculation",
      "compute", "formula", "equation", "integral", "derivative", "trigonometry",
      "geometry", "algebra", "statistics", "calculus", "probability", "theorem"
    ]
  },
  image_generation: {
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –ø—Ä–∏–Ω—Ç–æ–≤, –¥–∏–∑–∞–π–Ω–∞
    providers: ["image_generator"],
    keywords: [
      "—Å–æ–∑–¥–∞–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–Ω–∞—Ä–∏—Å—É–π", "—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫–∞—Ä—Ç–∏–Ω–∫—É", "—Å–æ–∑–¥–∞–π –ø—Ä–∏–Ω—Ç", "–¥–∏–∑–∞–π–Ω –¥–ª—è —Ñ—É—Ç–±–æ–ª–∫–∏",
      "create image", "generate picture", "draw", "design", "artwork", "illustration",
      "–ø—Ä–∏–Ω—Ç –¥–ª—è —Ñ—É—Ç–±–æ–ª–∫–∏", "–ø—Ä–∏–Ω—Ç –Ω–∞ —Ñ—É—Ç–±–æ–ª–∫—É", "–ª–æ–≥–æ—Ç–∏–ø", "–∏–∫–æ–Ω–∫–∞", "–≥—Ä–∞—Ñ–∏–∫–∞", "–ø–æ—Å—Ç–µ—Ä", "–±–∞–Ω–Ω–µ—Ä", "—Å—Ç–∏–∫–µ—Ä",
      "print", "logo", "icon", "graphic", "poster", "banner", "sticker", "t-shirt design",
      "—Ñ—É—Ç–±–æ–ª–∫–∞", "–æ–¥–µ–∂–¥–∞", "streetwear", "–º–µ—Ä—á", "merchandise", "clothing",
      "visualize", "sketch", "art", "creative", "visual", "picture", "image",
      "—Ä–∏—Å—É–Ω–æ–∫", "–∫–∞—Ä—Ç–∏–Ω–∫–∞", "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "–∫–æ–Ω—Ü–µ–ø—Ç", "–º–∞–∫–µ—Ç"
    ]
  },
  image_consultation: {
    // –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º - —Å–æ–≤–µ—Ç—ã, –≤–∞—Ä–∏–∞–Ω—Ç—ã, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    providers: ["Qwen_Qwen_2_72B", "Claude", "Qwen_Qwen_2_5_Max"],
    keywords: [
      "–ø—Ä–µ–¥–ª–æ–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ø–æ–∫–∞–∂–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–≤–µ—Ç–æ–≤", "—Ü–≤–µ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è", 
      "–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å", "–¥–∞–π —Å–æ–≤–µ—Ç", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã",
      "suggest variants", "color options", "recommendations", "alternatives", "advice",
      "—á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å", "–∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–µ", "—É–ª—É—á—à–µ–Ω–∏—è", "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
      "–∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", "–ø–æ—Å–æ–≤–µ—Ç—É–π", "—á—Ç–æ –¥—É–º–∞–µ—à—å"
    ]
  },
  image_editing: {
    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Replicate AI
    providers: ["replicate_editor"],
    keywords: [
      "—É–±–µ—Ä–∏", "—É–¥–∞–ª–∏", "–∏–∑–º–µ–Ω–∏", "–∑–∞–º–µ–Ω–∏", "–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π", "—É–ª—É—á—à–∏", "–ø–æ–º–µ–Ω—è–π",
      "remove", "delete", "edit", "modify", "change", "replace", "enhance", "improve",
      "—Ñ–æ–Ω", "background", "—Å—Ç–∏–ª—å", "style", "–∫–∞—á–µ—Å—Ç–≤–æ", "quality", "–æ–±—ä–µ–∫—Ç", "object",
      "—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", "editing", "–æ–±—Ä–∞–±–æ—Ç–∫–∞", "processing", "–∫–æ—Ä—Ä–µ–∫—Ü–∏—è", "correction"
    ]
  },
  shopping: {
    // –ü–æ–∏—Å–∫ –º–∞–≥–∞–∑–∏–Ω–æ–≤, –ø–æ–∫—É–ø–∫–∏, —Ç–æ—Ä–≥–æ–≤—ã–µ —Ü–µ–Ω—Ç—Ä—ã, —É—Å–ª—É–≥–∏
    providers: ["Qwen_Qwen_2_72B", "You", "PerplexityApi", "Qwen_Qwen_2_5_Max", "Phind"],
    keywords: [
      "–º–∞–≥–∞–∑–∏–Ω", "–º–∞–≥–∞–∑–∏–Ω—ã", "–∫—É–ø–∏—Ç—å", "–≥–¥–µ –∫—É–ø–∏—Ç—å", "—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä", "—Ç—Ü", "–º–æ–ª", "—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç",
      "shop", "store", "shopping", "buy", "purchase", "mall", "supermarket", "market",
      "–∞–ø—Ç–µ–∫–∞", "pharmacy", "—Ä–µ—Å—Ç–æ—Ä–∞–Ω", "–∫–∞—Ñ–µ", "restaurant", "cafe", "–±–∞—Ä", "bar",
      "–±–∞–Ω–∫", "bank", "–æ—Ç–¥–µ–ª–µ–Ω–∏–µ", "–æ—Ñ–∏—Å", "—Å–∞–ª–æ–Ω", "—Ü–µ–Ω—Ç—Ä", "—Å–µ—Ä–≤–∏—Å", "service",
      "–Ω–∞–π–¥–∏", "–≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è", "–∞–¥—Ä–µ—Å", "–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", "—Ä—è–¥–æ–º", "–±–ª–∏–∑–∫–æ",
      "find", "locate", "address", "location", "near", "nearby", "close", "around"
    ]
  },
  business: {
    // –ë–∏–∑–Ω–µ—Å-–≤–æ–ø—Ä–æ—Å—ã, —ç–∫–æ–Ω–æ–º–∏–∫–∞, —Ñ–∏–Ω–∞–Ω—Å—ã
    providers: ["Qwen_Qwen_2_72B", "Claude", "GeminiPro", "Qwen_Qwen_2_5_Max"],
    keywords: [
      "–±–∏–∑–Ω–µ—Å", "—ç–∫–æ–Ω–æ–º–∏–∫–∞", "—Ñ–∏–Ω–∞–Ω—Å—ã", "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "—Å—Ç–∞—Ä—Ç–∞–ø", "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏", "–ø—Ä–æ–¥–∞–∂–∏",
      "business", "economy", "finance", "marketing", "startup", "investment", "sales",
      "management", "strategy", "market", "customer", "client", "product", "service",
      "revenue", "profit", "loss", "bankruptcy", "accounting", "tax", "taxation"
    ]
  },
  translation: {
    // –ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞, —è–∑—ã–∫–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    providers: ["Qwen_Qwen_2_72B", "Claude", "Qwen_Qwen_2_5_Max", "GeminiPro"],
    keywords: [
      "–ø–µ—Ä–µ–≤–æ–¥", "–ø–µ—Ä–µ–≤–µ–¥–∏", "–ø–µ—Ä–µ–≤–µ—Å—Ç–∏", "—è–∑—ã–∫", "translation", "translate", "language",
      "—Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞", "—Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞", "from english to", "from russian to",
      "–≥—Ä–∞–º–º–∞—Ç–∏–∫–∞", "grammar", "spelling", "–ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ", "—Å–∏–Ω–æ–Ω–∏–º", "synonym",
      "–∞–Ω—Ç–æ–Ω–∏–º", "antonym", "–∏–¥–∏–æ–º–∞", "idiom", "—Ñ—Ä–∞–∑–µ–æ–ª–æ–≥–∏–∑–º", "phraseology"
    ]
  },
  multimodal: {
    // –ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    providers: ["Claude", "GeminiPro", "You"],
    keywords: [
      "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "–∫–∞—Ä—Ç–∏–Ω–∫–∞", "—Ñ–æ—Ç–æ", "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è", "—Å–∫—Ä–∏–Ω—à–æ—Ç", "image", "picture",
      "photo", "screenshot", "–æ–ø–∏—à–∏", "describe", "—á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ", "what is shown",
      "—á—Ç–æ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ", "what's in the picture", "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    ]
  }
};

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const DEFAULT_PROVIDERS = ["FreeGpt", "Liaobots", "HuggingChat", "DeepInfra", "You"];

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –µ–≥–æ —Ç–µ–º–∞—Ç–∏–∫—É
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Object} –ö–∞—Ç–µ–≥–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
 */
function analyzeMessage(message) {
  // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const lowerMessage = message.toLowerCase();

  // –ú–∞—Å—Å–∏–≤ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const detectedCategories = [];

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –±–æ–ª–µ–µ –≥–∏–±–∫–∏–º —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ–º
  const imageGenerationPatterns = [
    /—Å–æ–∑–¥–∞–π.*–ø—Ä–∏–Ω—Ç/i,
    /–Ω–∞—Ä–∏—Å—É–π/i,
    /—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π.*–∫–∞—Ä—Ç–∏–Ω–∫/i,
    /–¥–∏–∑–∞–π–Ω.*—Ñ—É—Ç–±–æ–ª–∫/i,
    /–ø—Ä–∏–Ω—Ç.*—Ñ—É—Ç–±–æ–ª–∫/i,
    /—Å–æ–∑–¥–∞–π.*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/i,
    /–ª–æ–≥–æ—Ç–∏–ø/i,
    /—Ä–∏—Å—É–Ω–æ–∫/i,
    /–º–∞–∫–µ—Ç/i,
    /–∫–æ–Ω—Ü–µ–ø—Ç/i
  ];

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const imageEditingPatterns = [
    /—É–±–µ—Ä–∏.*—Å.*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/i,
    /—É–¥–∞–ª–∏.*—Å.*–∫–∞—Ä—Ç–∏–Ω–∫–∏/i,
    /–∑–∞–º–µ–Ω–∏.*—Ñ–æ–Ω/i,
    /–ø–æ–º–µ–Ω—è–π.*—Ñ–æ–Ω/i,
    /–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π.*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/i,
    /—É–ª—É—á—à–∏.*–∫–∞—á–µ—Å—Ç–≤–æ/i,
    /–∏–∑–º–µ–Ω–∏.*—Å—Ç–∏–ª—å/i,
    /remove.*from.*image/i,
    /edit.*image/i,
    /change.*background/i,
    /enhance.*image/i
  ];

  let isImageGeneration = false;
  for (const pattern of imageGenerationPatterns) {
    if (pattern.test(message)) {
      isImageGeneration = true;
      break;
    }
  }

  let isImageEditing = false;
  for (const pattern of imageEditingPatterns) {
    if (pattern.test(message)) {
      isImageEditing = true;
      break;
    }
  }

  if (isImageEditing) {
    detectedCategories.push({
      category: 'image_editing',
      matchCount: 15, // –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      providers: PROVIDER_SPECIALTIES.image_editing.providers
    });
  } else if (isImageGeneration) {
    detectedCategories.push({
      category: 'image_generation',
      matchCount: 10, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      providers: PROVIDER_SPECIALTIES.image_generation.providers
    });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const imageEditPatterns = [
    // –ö–æ–º–∞–Ω–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    /–¥–æ–±–∞–≤—å.*–∫.*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏/i,
    /–∏–∑–º–µ–Ω–∏.*–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏/i,
    /—Å–¥–µ–ª–∞–π.*—è—Ä—á–µ/i,
    /—Å–¥–µ–ª–∞–π.*—Ç–µ–º–Ω–µ–µ/i,
    /–¥–æ–±–∞–≤—å.*–ª–æ–≥–æ—Ç–∏–ø/i,
    /–¥–æ–±–∞–≤—å.*—Ç–µ–∫—Å—Ç/i,
    /–ø–æ–º–µ–Ω—è–π.*—Ü–≤–µ—Ç/i,
    /—É–±–µ—Ä–∏.*—Ñ–æ–Ω/i,
    // –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    /—É–±–µ—Ä–∏(?!.*—Ñ–æ–Ω)/i,  // —É–±–µ—Ä–∏ (–Ω–æ –Ω–µ —Ñ–æ–Ω)
    /—É–¥–∞–ª–∏/i,
    /—É–±—Ä–∞—Ç—å/i,
    /—É–¥–∞–ª–∏—Ç—å/i,
    /remove/i,
    /delete/i,
    /–¥–æ–±–∞–≤—å.*—Ñ–æ–Ω/i,
    /—Å–¥–µ–ª–∞–π.*–±–æ–ª—å—à–µ/i,
    /—Å–¥–µ–ª–∞–π.*–º–µ–Ω—å—à–µ/i,
    /–¥–æ–±–∞–≤—å.*–∫.*—ç—Ç–æ–º—É/i,
    /–∏–∑–º–µ–Ω–∏.*–Ω–∞/i,
    /–ø–µ—Ä–µ–¥–µ–ª–∞–π/i,
    /—É–ª—É—á—à–∏/i,
    /–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–π/i,
    /–¥–æ–±–∞–≤—å.*—Å–∑–∞–¥–∏/i,
    /–¥–æ–±–∞–≤—å.*—Å–ø–µ—Ä–µ–¥–∏/i,
    /–¥–æ–±–∞–≤—å.*—Ä—è–¥–æ–º/i,
    /–¥–æ–±–∞–≤—å.*–Ω–∞.*—Ñ–æ–Ω/i,
    /–¥–æ–±–∞–≤—å.*–Ω–µ–≥–æ/i,
    /–¥–æ–±–∞–≤—å.*–Ω–µ—ë/i,
    /–¥–æ–±–∞–≤—å.*–Ω–∏—Ö/i,
    /–¥–æ–±–∞–≤—å.*–≥—Ä–∏–±—ã/i,
    /–¥–æ–±–∞–≤—å.*—Ü–≤–µ—Ç—ã/i,
    /–¥–æ–±–∞–≤—å.*–¥–µ—Ä–µ–≤—å—è/i,
    /–¥–æ–±–∞–≤—å.*–æ–±–ª–∞–∫–∞/i,
    /–¥–æ–±–∞–≤—å.*–∑–≤–µ–∑–¥—ã/i,
    // –ö–æ–º–∞–Ω–¥—ã —É–¥–∞–ª–µ–Ω–∏—è - –ù–û–í–´–ï –ü–ê–¢–¢–ï–†–ù–´
    /—É–±–µ—Ä–∏/i,
    /—É–¥–∞–ª–∏/i,
    /—Å–∫—Ä–æ–π/i,
    /—É–±—Ä–∞—Ç—å/i,
    /—É–¥–∞–ª–∏—Ç—å/i,
    /remove/i,
    /delete/i,
    /–±–µ–∑/i,
    /—É–±–µ—Ä–∏.*—Å–∞–ø–æ–≥–∏/i,
    /—É–±–µ—Ä–∏.*—à–ª—è–ø—É/i,
    /—É–±–µ—Ä–∏.*–æ—á–∫–∏/i,
    /—É–±–µ—Ä–∏.*—Ñ–æ–Ω/i,
    /—É–±–µ—Ä–∏.*–ø—Ä–µ–¥–º–µ—Ç/i,
    /—É–±–µ—Ä–∏.*–æ–±—ä–µ–∫—Ç/i,
    /—É–¥–∞–ª–∏.*—Å–∞–ø–æ–≥–∏/i,
    /—É–¥–∞–ª–∏.*—à–ª—è–ø—É/i,
    /—É–¥–∞–ª–∏.*–æ—á–∫–∏/i,
    /–±–µ–∑.*—Å–∞–ø–æ–≥/i,
    /–±–µ–∑.*—à–ª—è–ø—ã/i,
    /–±–µ–∑.*–æ—á–∫–æ–≤/i
  ];

  let isImageEdit = false;
  for (const pattern of imageEditPatterns) {
    if (pattern.test(message)) {
      isImageEdit = true;
      break;
    }
  }

  if (isImageEdit) {
    detectedCategories.push({
      category: 'image_edit',
      matchCount: 10, // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      providers: PROVIDER_SPECIALTIES.image_generation.providers
    });
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  for (const [category, details] of Object.entries(PROVIDER_SPECIALTIES)) {
    if (category === 'image_generation' && isImageGeneration) {
      continue; // –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—ã—à–µ
    }

    let matchCount = 0;

    for (const keyword of details.keywords) {
      if (lowerMessage.includes(keyword)) {
        matchCount++;
      }
    }

    if (matchCount > 0) {
      detectedCategories.push({
        category,
        matchCount,
        providers: details.providers
      });
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
  detectedCategories.sort((a, b) => b.matchCount - a.matchCount);

  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –ø–æ–¥–æ—à–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (detectedCategories.length === 0) {
    return {
      category: "general",
      providers: DEFAULT_PROVIDERS,
      matchCount: 0
    };
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
  return {
    category: detectedCategories[0].category,
    providers: detectedCategories[0].providers,
    matchCount: detectedCategories[0].matchCount,
    allMatches: detectedCategories // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  };
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} - –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
async function routeMessage(message, options = {}) {
  const startTime = Date.now();
  SmartLogger.route(`–ù–∞—á–∏–Ω–∞–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è`, { 
    messageLength: message.length, 
    hasImage: !!options.imageUrl,
    options: Object.keys(options)
  });

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ –≤–µ–±-–ø–æ–∏—Å–∫ –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  SmartLogger.route(`=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–ï–ë-–ü–û–ò–°–ö–ê ===`);
  SmartLogger.route(`–ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${message}"`);
  SmartLogger.route(`–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ: "${message.toLowerCase()}"`);

  const needsSearch = webSearchProvider.needsWebSearch(message);
  SmartLogger.route(`–†–µ–∑—É–ª—å—Ç–∞—Ç needsWebSearch: ${needsSearch}`);

  // –ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: AI —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–µ–Ω –ª–∏ –ø–æ–∏—Å–∫
  SmartLogger.route(`ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å AI —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–∏—Å–∫–∞`);

  try {
    const aiWithSearchResult = await getAIResponseWithSearch(message, options);
    if (aiWithSearchResult.success) {
      SmartLogger.success(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç AI ${aiWithSearchResult.searchUsed ? '—Å –ø–æ–∏—Å–∫–æ–º' : '–±–µ–∑ –ø–æ–∏—Å–∫–∞'}`);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (options.sessionId) {
        await chatMemory.saveOperationInfo(options.sessionId, 'ai_response', {
          provider: aiWithSearchResult.provider,
          searchUsed: aiWithSearchResult.searchUsed,
          imageGenerated: aiWithSearchResult.imageGenerated
        });
      }

      return aiWithSearchResult;
    }
  } catch (error) {
    SmartLogger.error(`–û—à–∏–±–∫–∞ AI —Å –ø–æ–∏—Å–∫–æ–º: ${error.message}`);
  }

  if (needsSearch) {
    SmartLogger.route(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å, —Ç—Ä–µ–±—É—é—â–∏–π –≤–µ–±-–ø–æ–∏—Å–∫–∞`);

    try {
      const searchResults = await webSearchProvider.performWebSearch(message);

      if (searchResults.success && searchResults.results.length > 0) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        const searchContext = webSearchProvider.formatSearchResultsForAI(searchResults);
        const enhancedMessage = `–í–ê–ñ–ù–û: –¢—ã –î–û–õ–ñ–ï–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –Ω–∏–∂–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: ${message}

${searchContext}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–≤–æ—ë–º –æ—Ç–≤–µ—Ç–µ. –ù–ï –≥–æ–≤–æ—Ä–∏, —á—Ç–æ –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ - —É —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–µ–∂–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤—ã—à–µ!`;

        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        SmartLogger.route(`–í–µ–±-–ø–æ–∏—Å–∫ —É—Å–ø–µ—à–µ–Ω, –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${searchResults.results.length}`);
        SmartLogger.route(`–û—Ç–ø—Ä–∞–≤–ª—è–µ–º AI –æ–±–æ–≥–∞—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${enhancedMessage.substring(0, 200)}..."`);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const searchProviders = ["Qwen_Qwen_2_72B", "You", "PerplexityApi", "Qwen_Qwen_2_5_Max"];

        for (const provider of searchProviders) {
          try {
            const pythonProvider = require('./python_provider_routes');
            const result = await pythonProvider.callPythonAI(enhancedMessage, provider);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ –Ω–µ –æ—Ç–∫–∞–∑
            const hasRealData = result.response && (
              result.response.includes('¬∞C') ||
              result.response.includes('–≥—Ä–∞–¥—É—Å') ||
              result.response.includes('—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞') ||
              result.response.includes('–≤–ª–∞–∂–Ω–æ—Å—Ç—å') ||
              result.response.includes('–≤–µ—Ç–µ—Ä') ||
              result.response.includes('–¥–æ–∂–¥—å') ||
              result.response.includes('—Å–Ω–µ–≥') ||
              result.response.includes('–Ω–æ–≤–æ—Å—Ç–∏') ||
              result.response.includes('—Å–æ–±—ã—Ç–∏')
            );

            const isRefusal = result.response && (
              result.response.toLowerCase().includes('–Ω–µ –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å') &&
              !hasRealData
            );

            if (result.success && result.response && !isRefusal) {
              SmartLogger.success(`–í–µ–±-–ø–æ–∏—Å–∫ + AI –æ—Ç–≤–µ—Ç –≥–æ—Ç–æ–≤ –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: ${provider}`);

              return {
                success: true,
                response: result.response,
                provider: `WebSearch+${provider}`,
model: result.model || provider,                category: 'web_search',
                searchResults: searchResults.results,
                processingTime: Date.now() - startTime
              };
            } else {
              SmartLogger.route(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –¥–∞–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–∫–∞–∑, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π`);
            }
          } catch (providerError) {
            SmartLogger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider} —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º:`, providerError);
            continue;
          }
        }

        SmartLogger.error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ —Å –≤–µ–±-–ø–æ–∏—Å–∫–æ–º`);
      } else {
        SmartLogger.route(`–í–µ–±-–ø–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É`);
      }
    } catch (searchError) {
      SmartLogger.error(`–û—à–∏–±–∫–∞ –≤–µ–±-–ø–æ–∏—Å–∫–∞:`, searchError);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∏—Å–∫–∞
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—ã—à–∏–≤–∫–∏
  if (aiEmbroideryPipeline.isEmbroideryGenerationRequest(message)) {
    SmartLogger.route(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –≤—ã—à–∏–≤–∫–∏`);

    try {
      const result = await aiEmbroideryPipeline.generateAndConvertToEmbroidery(message, {
        sessionId: options.sessionId,
        userId: options.userId,
        conversionOptions: {}
      });

      if (result.success) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç —Å AI-–∞–Ω–∞–ª–∏–∑–æ–º
        let fullResponse = result.message;

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–∞—Ö –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if (result.files && result.files.length > 0) {
          fullResponse += '\n\nüìÅ **–§–∞–π–ª—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:**\n';
          result.files.forEach(file => {
            const emoji = file.path.includes('.dst') ? 'üßµ' : 
                         file.path.includes('.png') ? 'üñºÔ∏è' : 'üé®';
            const shortName = file.path.includes('.dst') ? 'DST —Ñ–∞–π–ª' :
                             file.path.includes('.png') ? 'PNG –ø—Ä–µ–≤—å—é' : 'JSON —Å—Ö–µ–º–∞';
            fullResponse += `\n${emoji} [${shortName}](${file.path})`;
          });
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
        if (result.details) {
          fullResponse += '\n\nüìã **–î–µ—Ç–∞–ª–∏:**\n';
          fullResponse += `\n‚Ä¢ –¶–≤–µ—Ç–æ–≤: ${result.details.colors}`;
          fullResponse += `\n‚Ä¢ –†–∞–∑–º–µ—Ä: ${result.details.size}`;
          fullResponse += `\n‚Ä¢ –§–æ—Ä–º–∞—Ç: ${result.details.machineFormat}`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (result.generatedImage) {
          fullResponse += `\n\n![–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${result.generatedImage})`;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º AI-–æ—Ç—á–µ—Ç –æ–± –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (result.aiOptimizationReport) {
          fullResponse += '\n\n' + result.aiOptimizationReport;
        }

        return {
          success: true,
          response: fullResponse,
          provider: 'AI-EmbroideryPipeline',
          model: 'ai-embroidery-generator',
          type: 'embroidery_generation',
          details: result.details,
          files: result.files,
          instructions: result.instructions,
          generatedImage: result.generatedImage,
          embroideryFormat: result.embroideryFormat
        };
      } else {
        return {
          success: false,
          response: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞: ${result.error}`,
          provider: 'AI-EmbroideryPipeline',
          error: result.error,
          step: result.step
        };
      }
    } catch (error) {
      SmartLogger.error('–û—à–∏–±–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –≤—ã—à–∏–≤–∫–∏', error);
      return {
        success: false,
        response: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∑–∞–π–Ω–∞ –¥–ª—è –≤—ã—à–∏–≤–∫–∏',
        provider: 'AI-EmbroideryPipeline',
        error: error.message
      };
    }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç—ã –≤—ã—à–∏–≤–∫–∏
  if (embroideryHandler.isEmbroideryRequest(message)) {
    SmartLogger.route(`–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏`);

    try {
      let imageData = null;
      if (options.imageUrl) {
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const fs = require('fs');
        const path = require('path');
        const imageBuffer = fs.readFileSync(options.imageUrl);
        imageData = {
          buffer: imageBuffer,
          filename: path.basename(options.imageUrl)
        };
      }

      const result = await embroideryHandler.handleEmbroideryRequest(message, imageData);

      if (result.success) {
        return {
          success: true,
          response: result.message,
          provider: 'EmbroideryConverter',
          model: 'embroidery-processor',
          type: result.type,
          details: result.details || {},
          files: result.files,
          instructions: result.instructions
        };
      } else {
        return {
          success: false,
          response: `–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: ${result.error}`,
          provider: 'EmbroideryConverter',
          error: result.error
        };
      }
    } catch (error) {
      SmartLogger.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã—à–∏–≤–∫—É', error);
      return {
        success: false,
        response: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç –≤—ã—à–∏–≤–∫–∏',
        provider: 'EmbroideryConverter',
        error: error.message
      };
    }
  }

  // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤
  if (options.imageUrl) {
    SmartLogger.route(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ! –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–æ–≤`);

    try {
      const imageDetector = require('./image-object-detector');
      const result = await imageDetector.analyzeLocalImage(options.imageUrl, message);

      if (result.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if (options.userId) {
          const conversationMemory = require('./conversation-memory');
          conversationMemory.addAiResponse(options.userId, result.response, result.provider, result.model);
        }

        return {
          success: true,
          response: result.response,
          provider: result.provider,
          model: result.model,
          category: "multimodal",
          bestProvider: "Advanced Object Detection"
        };
      } else {
        console.log('‚ö†Ô∏è –°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã...');
        // –ï—Å–ª–∏ –Ω–∞—à –¥–µ—Ç–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–Ω–µ—à–Ω–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
        const analysis = { 
          category: "multimodal", 
          providers: PROVIDER_SPECIALTIES.multimodal.providers 
        };
        return await getResponseFromProviders(message, analysis, options);
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞: ${error.message}`);
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–Ω–µ—à–Ω–∏–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º
      const analysis = { 
        category: "multimodal", 
        providers: PROVIDER_SPECIALTIES.multimodal.providers 
      };
      console.log(`–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–Ω–µ—à–Ω–∏–º –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º...`);
      return await getResponseFromProviders(message, analysis, options);
    }
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞)
  if (options.preferredProvider) {
    SmartLogger.provider(`–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º`, { 
      provider: options.preferredProvider,
      hasContext: !!options.context 
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    const messageWithContext = options.context ? options.context + message : message;

    try {
      const result = await trySpecificProvider(options.preferredProvider, messageWithContext, options);
      if (result && result.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if (options.userId) {
          const conversationMemory = require('./conversation-memory');
          conversationMemory.addAiResponse(options.userId, result.response, result.provider, result.model);
        }
        return result;
      }
    } catch (error) {
      console.log(`‚ö†Ô∏è –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${options.preferredProvider} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª, –≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ...`);
    }
  }

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
  const analysis = analyzeMessage(message);
  console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: ${analysis.category} (—Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${analysis.matchCount})`);
  console.log(`–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã: ${analysis.providers.join(', ')}`);

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  if (analysis.category === 'image_generation') {
    SmartLogger.route('üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!');
    try {
      const imageGenerator = require('./ai-image-generator');

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
      let prompt = message;

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –ø—Ä–∏–Ω—Ç–æ–≤ —Ñ—É—Ç–±–æ–ª–æ–∫
      let style = 'realistic';
      if (message.toLowerCase().includes('—Ñ—É—Ç–±–æ–ª–∫–∞') || 
          message.toLowerCase().includes('–ø—Ä–∏–Ω—Ç') ||
          message.toLowerCase().includes('t-shirt') ||
          message.toLowerCase().includes('streetwear')) {
        style = 'artistic';
        prompt = `–î–∏–∑–∞–π–Ω –ø—Ä–∏–Ω—Ç–∞ –¥–ª—è —Ñ—É—Ç–±–æ–ª–∫–∏: ${prompt}`;
      }

      const result = await imageGenerator.generateImage(prompt, style, null, options.sessionId, options.userId);

      if (result.success) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        if (options.userId) {
          const conversationMemory = require('./conversation-memory');
          const response = `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –í–æ—Ç –≤–∞—à –¥–∏–∑–∞–π–Ω:\n![–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${result.imageUrl})`;
          conversationMemory.addAiResponse(options.userId, response, 'AI_Image_Generator', 'DALL-E_Style');
        }

        return {
          success: true,
          response: `üé® –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ! –í–æ—Ç –≤–∞—à –¥–∏–∑–∞–π–Ω:\n![–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ](${result.imageUrl})`,
          provider: 'AI_Image_Generator',
          model: 'Multi_Provider_Generator',
          category: 'image_generation',
          imageUrl: result.imageUrl,
          bestProvider: 'Image Generator'
        };
      } else {
        SmartLogger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', result.error);
        return {
          success: false,
          response: `üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞.`,
          provider: 'AI_Image_Generator',
          error: result.error
        };
      }
    } catch (error) {
      SmartLogger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞
      const analysis = { 
        category: "creative", 
        providers: PROVIDER_SPECIALTIES.creative.providers 
      };
      const fallbackMessage = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–∞: ${message}`;
      return await getResponseFromProviders(fallbackMessage, analysis, options);
    }
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
  if (analysis.category === 'image_consultation') {
    SmartLogger.route('üí° –û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é!');
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∏–∑ –ª—É—á—à–∏—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π
      const chatFreeProvider = require('./chatfree-provider');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      const consultationPrompt = `–ö–∞–∫ —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏–∑–∞–π–Ω—É –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º, –¥–∞–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: "${message}"

–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ü–≤–µ—Ç–æ–≤ –∏–ª–∏ —Ü–≤–µ—Ç–æ–≤—ã–µ —Ä–µ—à–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–≤–µ—Ç–æ–≤—ã–µ –ø–∞–ª–∏—Ç—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ —Ü–≤–µ—Ç–æ–≤
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø–æ—á–µ–º—É —ç—Ç–∏ —Ü–≤–µ—Ç–∞ –ø–æ–¥—Ö–æ–¥—è—Ç
- –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π (–ø–µ—á–∞—Ç—å, –≤–µ–±, –≤—ã—à–∏–≤–∫–∞)

–ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é, –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏, —Ü–≤–µ—Ç–∞, —Å—Ç–∏–ª—è
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

–û—Ç–≤–µ—á–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ, —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏.`;

      const result = await chatFreeProvider.generateResponse(consultationPrompt, 'Qwen_Qwen_2_72B');

      if (result.success) {
        return {
          success: true,
          response: `üí° **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –¥–∏–∑–∞–π–Ω—É:**\n\n${result.response}`,
          provider: 'Qwen_Qwen_2_72B',
          model: 'Design_Consultant',
          category: 'image_consultation',
          bestProvider: 'Design Expert'
        };
      } else {
        SmartLogger.error('–û—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é:', result.error);
        return {
          success: false,
          response: `üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.`,
          provider: 'Design_Consultant',
          error: result.error
        };
      }
    } catch (error) {
      SmartLogger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:', error);
      return {
        success: false,
        response: 'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        provider: 'Design_Consultant',
        error: error.message
      };
    }
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å
  const messageWithContext = options.context ? options.context + message : message;

  const result = await getResponseFromProviders(messageWithContext, analysis, options);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –≤ –ø–∞–º—è—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
  if (result && result.success && options.userId) {
    const conversationMemory = require('./conversation-memory');
    conversationMemory.addAiResponse(options.userId, result.response, result.provider || result.bestProvider, result.model);
  }

  return result;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞, –ø—Ä–æ–±—É—è –∫–∞–∂–¥—ã–π –¥–æ –ø–µ—Ä–≤–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ
 * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} analysis - –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
 * @param {Object} options - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 * @returns {Promise<Object>} - –û—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
 */
async function getResponseFromProviders(message, analysis, options = {}) {
  const { category, providers } = analysis;
  let lastError = null;

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  let systemPrompt = "–í—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É.";

  switch (category) {
    case "technical":
      systemPrompt = "–í—ã –æ–ø—ã—Ç–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç. –î–∞–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–µ –∏ –ø–æ–¥—Ä–æ–±–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞, –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.";
      break;
    case "creative":
      systemPrompt = "–í—ã —Ç–≤–æ—Ä—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∏ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã.";
      break;
    case "analytical":
      systemPrompt = "–í—ã –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –º—ã—à–ª–µ–Ω–∏–µ–º. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å —Ä–∞–∑–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.";
      break;
    case "factual":
      systemPrompt = "–í—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—ã–µ, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —Å—Å—ã–ª–∞–π—Ç–µ—Å—å –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.";
      break;
    case "current":
      systemPrompt = "–í—ã –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.";
      break;
    case "mathematical":
      systemPrompt = "–í—ã –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–µ—Ä—Ç. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã, —à–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.";
      break;
    case "business":
      systemPrompt = "–í—ã –±–∏–∑–Ω–µ—Å-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –î–∞–≤–∞–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –ø–æ –±–∏–∑–Ω–µ—Å—É, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∏ —Ñ–∏–Ω–∞–Ω—Å–∞–º.";
      break;
    case "translation":
      systemPrompt = "–í—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –û–±–µ—Å–ø–µ—á–∏–≤–∞–π—Ç–µ —Ç–æ—á–Ω—ã–π –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∏–ª—å –∏ –Ω—é–∞–Ω—Å—ã –æ—Ä–∏–≥–∏–Ω–∞–ª–∞.";
      break;
    case "multimodal":
      systemPrompt = "–í—ã –≤–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏—Ç–∏–∫. –î–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –Ω–∏—Ö.";
      break;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
  for (const provider of providers) {
    try {
      console.log(`–ü—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ${category}...`);

      let result;

      if (provider === "DeepSpeek") {
        // –î–ª—è DeepSpeek –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        result = await deepspeekProvider.getDeepSpeekResponse(message);
      } else if (provider === "Claude") {
        // –î–ª—è Claude –∏—Å–ø–æ–ª—å–∑—É–µ–º Anthropic —á–µ—Ä–µ–∑ Python G4F
        result = await claudeProvider.getClaudeResponse(message, {
          promptType: category,
          systemPrompt
        });
      } else if (provider.startsWith("DeepInfra")) {
        // –î–ª—è DeepInfra –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        result = await deepInfraProvider.getDeepInfraResponse(message, {
          model: provider.replace("DeepInfra_", "").toLowerCase(),
          promptType: category
        });
      } else if (provider === "FreeChat" || provider === "ChatFree") {
        // –î–ª—è FreeChat/ChatFree –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        result = await freechatEnhanced.getChatFreeEnhancedResponse(message, {
          systemPrompt
        });
      } else {
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É–µ–º Python G4F
        const pythonResponse = await pythonProviderRoutes.callPythonAI(
          message, 
          provider, 
          systemPrompt
        );

        if (pythonResponse) {
          result = {
            success: true,
            response: pythonResponse,
            provider: provider
          };
        } else {
          throw new Error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä ${provider} –Ω–µ –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç`);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
      if (result && result.success) {
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        result.category = category;
        result.bestProvider = provider;

        return result;
      }
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider}: ${error.message}`);
      lastError = error;
    }
  }

  // –ï—Å–ª–∏ –≤—Å–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –æ—Ç–∫–∞–∑–∞–ª–∏, –ø—Ä–æ–±—É–µ–º Qwen_Qwen_2_72B –∫–∞–∫ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π
  if (!providers.includes("Qwen_Qwen_2_72B")) {
    try {
      console.log(`–ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä Qwen_Qwen_2_72B...`);

      const pythonResponse = await pythonProviderRoutes.callPythonAI(
        message, 
        "Qwen_Qwen_2_72B", 
        systemPrompt
      );

      if (pythonResponse) {
        return {
          success: true,
          response: pythonResponse,
          provider: "Qwen_Qwen_2_72B (fallback)",
          category,
          bestProvider: "Qwen_Qwen_2_72B"
        };
      }
    } catch (qwenError) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ Qwen: ${qwenError.message}`);
    }
  }

  // –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º FreeChat, –∫–æ—Ç–æ—Ä—ã–π –∏–º–µ–µ—Ç –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é —Å–∏—Å—Ç–µ–º—É fallback
  try {
    console.log(`–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º FreeChat —Å —Å–∏—Å—Ç–µ–º–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–±–æ—Ä–∞...`);

    const result = await freechatEnhanced.getChatFreeEnhancedResponse(message, {
      systemPrompt
    });

    if (result && result.success) {
      result.category = category;
      result.bestProvider = "FreeChat (auto)";
      return result;
    }
  } catch (freechatError) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ FreeChat: ${freechatError.message}`);
  }

  // –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –æ—Ç–∫–∞–∑–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
  return {
    success: false,
    error: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category}. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${lastError?.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
    category,
    providers
  };
}

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router.post('/message', async (req, res) => {
  const { message, imageUrl, userId = 'anonymous' } = req.body;

  if (!message && !imageUrl) {
    return res.status(400).json({
      success: false,
      error: '–°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã'
    });
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const messageText = message || '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ';

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    const conversationMemory = require('./conversation-memory');
    const contextData = conversationMemory.getMessageContext(userId, messageText);

    console.log(`üí≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId}: ${contextData.shouldContinueWithProvider ? '–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å ' + contextData.currentProvider : '–≤—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞'}`);

    // –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–º—É –ø—Ä–æ–≤–∞–π–¥–µ—Ä—É —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const result = await routeMessage(messageText, { 
      imageUrl, 
      userId,
      context: contextData.context,
      preferredProvider: contextData.shouldContinueWithProvider ? contextData.currentProvider : null,
      sessionId: req.sessionID // –ü–µ—Ä–µ–¥–∞–µ–º ID —Å–µ—Å—Å–∏–∏
    });

    res.json(result);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);

    res.status(500).json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`
    });
  }
});

// API –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏)
router.post('/analyze', (req, res) => {
  const { message } = req.body;

  if (!message) {
    return res.status(400).json({
      success: false,
      error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
    });
  }

  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const analysis = analyzeMessage(message);

    res.json({
      success: true,
      analysis
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);

    res.status(500).json({
      success: false,
      error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`
    });
  }
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ BOOOMERANGS
 */
async function handleAutomationRequest(query) {
  const lowerQuery = query.toLowerCase();

  // –î–µ—Ç–µ–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
  const automationPatterns = {
    priceCalculation: /—Ä–∞—Å—Å—á–∏—Ç|—Å—Ç–æ–∏–º–æ—Å—Ç—å|—Ü–µ–Ω|–∫–∞–ª—å–∫—É–ª|—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç|–ø—Ä–∞–π—Å|—Ä–∞—Å—Ü–µ–Ω–∫/,
    proposal: /–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ|–∫–ø|–∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ|–¥–æ–≥–æ–≤–æ—Ä|—Å–º–µ—Ç/,
    trends: /—Ç—Ä–µ–Ω–¥|–º–æ–¥|–ø–æ–ø—É–ª—è—Ä–Ω|—Å—Ç–∏–ª—å|—á—Ç–æ –Ω–æ—Å—è—Ç|–∞–∫—Ç—É–∞–ª—å–Ω/
  };

  try {
    const { BOOOMERANGSAutomation } = require('./booomerangs-automation');
    const automation = new BOOOMERANGSAutomation();

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    if (automationPatterns.priceCalculation.test(lowerQuery)) {
      return await handlePriceCalculation(query, automation);
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ö–ü
    if (automationPatterns.proposal.test(lowerQuery)) {
      return await handleProposalGeneration(query, automation);
    }

    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤
    if (automationPatterns.trends.test(lowerQuery)) {
      return await handleTrendAnalysis(query, automation);
    }

    return null; // –ù–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å

  } catch (error) {
    SmartLogger.error(`–û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: ${error.message}`);
    return null;
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
 */
async function handlePriceCalculation(query, automation) {
  SmartLogger.route(`üí∞ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏`);

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
  const params = extractCalculationParams(query);

  if (!params.width || !params.height || !params.quantity) {
    return {
      success: true,
      response: `**–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏ BOOOMERANGS**

–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ:
‚Ä¢ –†–∞–∑–º–µ—Ä –¥–∏–∑–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20x15 —Å–º)
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤ (–∏–ª–∏ "–ø–æ–ª–Ω–æ—Ü–≤–µ—Ç")
‚Ä¢ –¢–∏—Ä–∞–∂ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π)
‚Ä¢ –¢–∏–ø –∏–∑–¥–µ–ª–∏—è (—Ñ—É—Ç–±–æ–ª–∫–∞, —Ö—É–¥–∏, –∫–µ–ø–∫–∞)

**–ü—Ä–∏–º–µ—Ä:** "–†–∞—Å—Å—á–∏—Ç–∞–π —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏ 25x20 —Å–º, 3 —Ü–≤–µ—Ç–∞, 50 —Ñ—É—Ç–±–æ–ª–æ–∫"

**–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:**
‚Ä¢ DTF –ø–µ—á–∞—Ç—å - –ø–æ–ª–Ω–æ—Ü–≤–µ—Ç–Ω–∞—è, –ª—é–±—ã–µ —Ç–∏—Ä–∞–∂–∏
‚Ä¢ –¢—Ä–∞—Ñ–∞—Ä–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å - –æ—Ç 50 —à—Ç, –¥–æ 6 —Ü–≤–µ—Ç–æ–≤  
‚Ä¢ –ú–∞—à–∏–Ω–Ω–∞—è –≤—ã—à–∏–≤–∫–∞ - –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –¥–∏–∑–∞–π–Ω–æ–≤`,
      provider: 'BOOOMERANGS_Calculator',
      searchUsed: false
    };
  }

  const result = automation.priceCalculator.getRecommendation(
    params.width,
    params.height,
    params.colors,
    params.quantity,
    params.hasDetails
  );

  const formattedResponse = `**–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞**

**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: ${result.recommendation.method}**
‚Ä¢ –†–∞–∑–º–µ—Ä: ${params.width}x${params.height} —Å–º
‚Ä¢ –¢–∏—Ä–∞–∂: ${params.quantity} —à—Ç.
‚Ä¢ –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É: ${result.recommendation.pricePerUnit} —Ä—É–±.
‚Ä¢ **–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${result.recommendation.totalCost.toLocaleString()} —Ä—É–±.**

${result.alternatives.length > 0 ? `**–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:**
${result.alternatives.map(alt => `‚Ä¢ ${alt.method}: ${alt.pricePerUnit || Math.round(alt.totalCost / params.quantity)} —Ä—É–±/—à—Ç`).join('\n')}` : ''}

${result.summary}

*–¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –±–µ–∑ —É—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏–∑–¥–µ–ª–∏–π*`;

  return {
    success: true,
    response: formattedResponse,
    provider: 'BOOOMERANGS_Calculator',
    searchUsed: false
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞—Å—á–µ—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
 */
function extractCalculationParams(query) {
  const params = {
    width: null,
    height: null,
    colors: 'full',
    quantity: null,
    hasDetails: false
  };

  // –†–∞–∑–º–µ—Ä—ã (20x15, 25*20, 30 –Ω–∞ 25)
  const sizeMatch = query.match(/(\d+)[x*—Ö –Ω–∞ ]+(\d+)/i);
  if (sizeMatch) {
    params.width = parseInt(sizeMatch[1]);
    params.height = parseInt(sizeMatch[2]);
  }

  // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–¥–µ–ª–∏–π
  const qtyMatch = query.match(/(\d+)\s*(—à—Ç|—à—Ç—É–∫|—Ñ—É—Ç–±–æ–ª|—Ö—É–¥–∏|–∫–µ–ø–æ–∫|–∏–∑–¥–µ–ª–∏–π)/i);
  if (qtyMatch) {
    params.quantity = parseInt(qtyMatch[1]);
  }

  // –¶–≤–µ—Ç–∞
  const colorMatch = query.match(/(\d+)\s*—Ü–≤–µ—Ç/i);
  if (colorMatch) {
    params.colors = parseInt(colorMatch[1]);
  } else if (query.includes('–ø–æ–ª–Ω–æ—Ü–≤–µ—Ç') || query.includes('—Ñ—É–ª–ª')) {
    params.colors = 'full';
  }

  return params;
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
 */
async function handleProposalGeneration(query, automation) {
  return {
    success: true,
    response: `**–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π**

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ö–ü —É–∫–∞–∂–∏—Ç–µ:

**–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:**
‚Ä¢ –ò–º—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–≥–æ –ª–∏—Ü–∞
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
‚Ä¢ Email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω

**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞:**
‚Ä¢ –¢–∏–ø –∏–∑–¥–µ–ª–∏—è (—Ñ—É—Ç–±–æ–ª–∫–∞, —Ö—É–¥–∏, –∫–µ–ø–∫–∞)
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ –¥–∏–∑–∞–π–Ω–æ–≤ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è

**–ü—Ä–∏–º–µ—Ä:** "–°–æ–∑–¥–∞–π –ö–ü –¥–ª—è –û–û–û –†–æ–º–∞—à–∫–∞, –∫–æ–Ω—Ç–∞–∫—Ç –ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤, 50 —Ñ—É—Ç–±–æ–ª–æ–∫ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º 15x10 —Å–º, —Å—Ä–æ–∫ 10 –¥–Ω–µ–π"`,
    provider: 'BOOOMERANGS_Proposals',
    searchUsed: false
  };
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
 */
async function handleTrendAnalysis(query, automation) {
  SmartLogger.route(`üìà –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã –¥–ª—è: ${query}`);

  const trendQuery = query.replace(/—Ç—Ä–µ–Ω–¥|–º–æ–¥|–ø–æ–ø—É–ª—è—Ä–Ω|—Å—Ç–∏–ª—å|—á—Ç–æ –Ω–æ—Å—è—Ç|–∞–∫—Ç—É–∞–ª—å–Ω/gi, '').trim();
  const result = await automation.trendAnalyzer.analyzeTrends(trendQuery || '–¥–∏–∑–∞–π–Ω –æ–¥–µ–∂–¥—ã');

  if (result.error) {
    return {
      success: true,
      response: `**–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤**

${result.recommendation}

**–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å:**
‚Ä¢ Pinterest - –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã
‚Ä¢ Behance - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã  
‚Ä¢ Instagram - —É–ª–∏—á–Ω–∞—è –º–æ–¥–∞
‚Ä¢ Dribbble - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω`,
      provider: 'BOOOMERANGS_Trends',
      searchUsed: false
    };
  }

  let formattedResponse = `**–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤: ${result.query}**\n\n`;

  if (result.trends.length > 0) {
    formattedResponse += `**–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è:**\n`;
    result.trends.forEach(trend => {
      formattedResponse += `‚Ä¢ **${trend.category}** (–Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π: ${trend.strength})\n`;
    });
    formattedResponse += '\n';
  }

  if (result.recommendations.length > 0) {
    formattedResponse += `**–î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n\n`;
    result.recommendations.forEach((rec, index) => {
      formattedResponse += `**${index + 1}. ${rec.trend}**\n`;
      formattedResponse += `${rec.description}\n\n`;
      formattedResponse += `üé® **–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞:** ${rec.colors.join(', ')}\n`;
      formattedResponse += `‚öôÔ∏è **–¢–µ—Ö–Ω–∏–∫–∏:** ${rec.techniques.join(', ')}\n`;
      formattedResponse += `üí° **–ü—Ä–∏–º–µ—Ä—ã:** ${rec.examples.join(', ')}\n\n`;
    });
  }

  formattedResponse += `**–ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ:** ${result.sources}\n`;
  formattedResponse += `**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** ${result.lastUpdated}`;

  return {
    success: true,
    response: formattedResponse,
    provider: 'BOOOMERANGS_Trends',
    searchUsed: true
  };
}

module.exports = router;
module.exports.routeMessage = routeMessage;
module.exports.getChatResponse = getAIResponseWithSearch;
module.exports.analyzeMessage = analyzeMessage;