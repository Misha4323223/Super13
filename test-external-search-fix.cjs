/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */

async function testExternalSearchFix() {
  console.log('üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ù–ï–®–ù–ï–ì–û –ü–û–ò–°–ö–ê');
  console.log('==========================================');
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π semantic-integration-layer
    const semanticIntegration = require('./server/semantic-integration-layer.cjs');
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞–ø—Ä—è–º—É—é
    const testDetector = (query) => {
      const lowerInput = query.toLowerCase();
      
      // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const knowledgeKeywords = [
        '—Ä–∞—Å—Å–∫–∞–∂–∏', '—á—Ç–æ —Ç–∞–∫–æ–µ', '–æ–±—ä—è—Å–Ω–∏', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç', '—á—Ç–æ –∑–Ω–∞–µ—à—å –æ',
        '–ø–æ—á–µ–º—É', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–∫—Ç–æ', '–∫–∞–∫–æ–π', '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ', '–æ–ø–∏—à–∏',
        '—á—Ç–æ —ç—Ç–æ', '–∫–∞–∫ —ç—Ç–æ', '–∑–∞—á–µ–º', '–¥–ª—è —á–µ–≥–æ', '–∏—Å—Ç–æ—Ä–∏—è', '–ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ'
      ];
      
      // –ü—Ä–µ–¥–º–µ—Ç–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
      const knowledgeDomains = [
        '–ø–ª–∞–Ω–µ—Ç', '–º–∞—Ä—Å', '—é–ø–∏—Ç–µ—Ä', '–∑–µ–º–ª—è', '–∫–æ—Å–º–æ—Å', '–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è',
        '–º–µ–¥–∏—Ü–∏–Ω', '–Ω–∞—É–∫–∞', '—Ñ–∏–∑–∏–∫–∞', '—Ö–∏–º–∏—è', '–±–∏–æ–ª–æ–≥–∏—è', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
        '–∏—Å—Ç–æ—Ä–∏—è', '–≥–µ–æ–≥—Ä–∞—Ñ–∏—è', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '–∫—É–ª—å—Ç—É—Ä–∞', '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '—Ñ–∏–ª–æ—Å–æ—Ñ–∏—è', '—Ä–µ–ª–∏–≥–∏—è',
        '–ø–æ–ª–∏—Ç–∏–∫–∞', '—ç–∫–æ–Ω–æ–º–∏–∫–∞', '–æ–±—â–µ—Å—Ç–≤–æ', '–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è', '—Å–æ—Ü–∏–æ–ª–æ–≥–∏—è',
        '–ø–æ–≥–æ–¥–∞', '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', '–∫–ª–∏–º–∞—Ç', '–º–æ—Å–∫–≤–∞', '—Ä–æ—Å—Å–∏—è'
      ];
      
      const hasKnowledgeKeywords = knowledgeKeywords.some(keyword => 
        lowerInput.includes(keyword)
      );
      
      const hasKnowledgeDomains = knowledgeDomains.some(domain => 
        lowerInput.includes(domain)
      );
      
      const isQuestion = lowerInput.includes('?') || 
                        lowerInput.startsWith('—á—Ç–æ') ||
                        lowerInput.startsWith('–∫–∞–∫') ||
                        lowerInput.startsWith('–≥–¥–µ') ||
                        lowerInput.startsWith('–∫–æ–≥–¥–∞') ||
                        lowerInput.startsWith('–ø–æ—á–µ–º—É') ||
                        lowerInput.startsWith('–∑–∞—á–µ–º') ||
                        lowerInput.startsWith('–∫–∞–∫–∞—è');
      
      return hasKnowledgeKeywords || hasKnowledgeDomains || isQuestion;
    };
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–Ω–∞–Ω–∏–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    const testQueries = [
      '–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ –ø–ª–∞–Ω–µ—Ç—É –ú–∞—Ä—Å',
      '–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ?',
      '–ß—Ç–æ —Ç–∞–∫–æ–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —É–≥–æ–ª—å?',
      '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?',  // –Ω–µ –¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫
      '–°–æ–∑–¥–∞–π –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ—Ç–∞' // –Ω–µ –¥–æ–ª–∂–µ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫
    ];
    
    for (const query of testQueries) {
      console.log(`\nüìù –¢–µ—Å—Ç–∏—Ä—É–µ–º: "${query}"`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–µ–∫—Ç–æ—Ä –∑–Ω–∞–Ω–∏–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const isKnowledgeRequest = testDetector(query);
      console.log(`üîç –ó–Ω–∞–Ω–∏–µ–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${isKnowledgeRequest ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
      
      if (isKnowledgeRequest) {
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å –≤–Ω–µ—à–Ω–∏–º –ø–æ–∏—Å–∫–æ–º
        try {
          const result = await semanticIntegration.analyzeWithSemantics(query, {
            sessionId: 'test-session',
            language: 'ru'
          });
          
          console.log(`üéØ –ü—Ä–∏—á–∏–Ω–∞: ${result.reason}`);
          console.log(`üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${result.confidence}`);
          
          if (result.semanticResult && result.semanticResult.externalKnowledge) {
            console.log(`‚úÖ –í–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: ${result.semanticResult.externalKnowledge.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
          } else {
            console.log(`‚ö†Ô∏è –í–Ω–µ—à–Ω–∏–π –ø–æ–∏—Å–∫ –ù–ï –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
          }
        } catch (error) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
        }
      }
    }
    
    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testExternalSearchFix();